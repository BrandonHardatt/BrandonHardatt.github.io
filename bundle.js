/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var l={365:(l,t,e)=>{e.d(t,{A:()=>q});var n=e(601),i=e.n(n),r=e(314),a=e.n(r)()(i());a.push([l.id,":root {\n  --dark-bg: rgba(15, 15, 15, 0.95);\n  --spacing: 350px;\n  --global-font: 'Exo', sans-serif;\n  font-weight: 400;\n  font-style: normal;\n}\n\nbody {\n  margin: 0;\n  overflow-x: hidden;\n  font-family: var(--global-font); /* Apply the futuristic font to the entire body */\n\n  /* Example of styling headers with the new font */\n  h1, h2, h3, h4, h5, h6 {\n    font-family: var(--global-font);\n  }\n}\n\ncanvas {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1; /* Ensure canvas is behind the main content */\n}\n\n#mobile-message {\n    display: none;\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: rgba(0, 0, 0, 0.8);\n    color: white;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    z-index: 1000;\n}\n\n\n\n\n\nmain {\n  width: 100vw;\n  color: white;\n  z-index: 99;\n  position: absolute;\n  width: 100%;\n  margin: 0px auto;\n  padding: 120px 0px;\n  \n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n}\n\nh1, h2, h3, blockquote {\n  font-family: var(--global-font);\n  font-weight: 700;\n  font-style: normal;\n}\n\ncanvas {\n  position: fixed;\n  top: 0;\n  left: 0;\n}\n\n\n\n  header {\n    background: var(--dark-bg);\n    grid-column: 2 / span 5;\n    font-size: 2.5rem;\n    padding: 2rem;\n    margin-bottom: var(--spacing);\n  }\n\n  section {\n    grid-column: 2 / 8;\n    padding: 1rem;\n    background: var(--dark-bg);\n    font-size: 1.25rem;\n    line-height: 1.5;\n    margin-bottom: var(--spacing);\n  }\n\n  blockquote {\n    margin: 0;\n    padding: 0;\n    grid-column: 2 / span 9;\n    margin-bottom: var(--spacing);\n  }\n\n  blockquote p {\n    color: rgb(255, 255, 255);\n    background-color: rgb(0, 0, 0);\n    font-size: 4rem;\n    display: inline;\n    line-height: 1;\n  }\n\n  .left {\n    grid-column: 6 / 12;\n  }",""]);const q=a},314:l=>{l.exports=function(l){var t=[];return t.toString=function(){return this.map((function(t){var e="",n=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),n&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=l(t),n&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(l,e,n,i,r){"string"==typeof l&&(l=[[null,l,void 0]]);var a={};if(n)for(var q=0;q<this.length;q++){var s=this[q][0];null!=s&&(a[s]=!0)}for(var o=0;o<l.length;o++){var c=[].concat(l[o]);n&&a[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),e&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=e):c[2]=e),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),t.push(c))}},t}},601:l=>{l.exports=function(l){return l[1]}},72:l=>{var t=[];function e(l){for(var e=-1,n=0;n<t.length;n++)if(t[n].identifier===l){e=n;break}return e}function n(l,n){for(var r={},a=[],q=0;q<l.length;q++){var s=l[q],o=n.base?s[0]+n.base:s[0],c=r[o]||0,m="".concat(o," ").concat(c);r[o]=c+1;var h=e(m),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==h)t[h].references++,t[h].updater(u);else{var d=i(u,n);n.byIndex=q,t.splice(q,0,{identifier:m,updater:d,references:1})}a.push(m)}return a}function i(l,t){var e=t.domAPI(t);return e.update(l),function(t){if(t){if(t.css===l.css&&t.media===l.media&&t.sourceMap===l.sourceMap&&t.supports===l.supports&&t.layer===l.layer)return;e.update(l=t)}else e.remove()}}l.exports=function(l,i){var r=n(l=l||[],i=i||{});return function(l){l=l||[];for(var a=0;a<r.length;a++){var q=e(r[a]);t[q].references--}for(var s=n(l,i),o=0;o<r.length;o++){var c=e(r[o]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}r=s}}},659:l=>{var t={};l.exports=function(l,e){var n=function(l){if(void 0===t[l]){var e=document.querySelector(l);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(l){e=null}t[l]=e}return t[l]}(l);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(e)}},540:l=>{l.exports=function(l){var t=document.createElement("style");return l.setAttributes(t,l.attributes),l.insert(t,l.options),t}},56:(l,t,e)=>{l.exports=function(l){var t=e.nc;t&&l.setAttribute("nonce",t)}},825:l=>{l.exports=function(l){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=l.insertStyleElement(l);return{update:function(e){!function(l,t,e){var n="";e.supports&&(n+="@supports (".concat(e.supports,") {")),e.media&&(n+="@media ".concat(e.media," {"));var i=void 0!==e.layer;i&&(n+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),n+=e.css,i&&(n+="}"),e.media&&(n+="}"),e.supports&&(n+="}");var r=e.sourceMap;r&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(n,l,t.options)}(t,l,e)},remove:function(){!function(l){if(null===l.parentNode)return!1;l.parentNode.removeChild(l)}(t)}}}},113:l=>{l.exports=function(l,t){if(t.styleSheet)t.styleSheet.cssText=l;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(l))}}}},t={};function e(n){var i=t[n];if(void 0!==i)return i.exports;var r=t[n]={id:n,exports:{}};return l[n](r,r.exports,e),r.exports}e.n=l=>{var t=l&&l.__esModule?()=>l.default:()=>l;return e.d(t,{a:t}),t},e.d=(l,t)=>{for(var n in t)e.o(t,n)&&!e.o(l,n)&&Object.defineProperty(l,n,{enumerable:!0,get:t[n]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(l){if("object"==typeof window)return window}}(),e.o=(l,t)=>Object.prototype.hasOwnProperty.call(l,t),(()=>{var l;e.g.importScripts&&(l=e.g.location+"");var t=e.g.document;if(!l&&t&&(t.currentScript&&(l=t.currentScript.src),!l)){var n=t.getElementsByTagName("script");if(n.length)for(var i=n.length-1;i>-1&&(!l||!/^http(s?):/.test(l));)l=n[i--].src}if(!l)throw new Error("Automatic publicPath is not supported in this browser");l=l.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=l})(),e.nc=void 0,(()=>{const l="164",t=1,n=2,i=3,r=0,a=1,q=2,s=100,o=101,c=102,m=200,h=201,u=202,d=203,p=204,f=205,g=206,_=207,v=208,x=209,y=210,M=211,S=212,E=213,T=214,b=0,w=1,A=2,R=0,C=1,P=2,L=3,U=4,N=5,I=6,D=7,O=301,F=302,z=306,B=1e3,V=1001,H=1002,k=1003,G=1004,W=1005,X=1006,j=1007,Y=1008,J=1009,Z=1014,K=1015,$=1016,Q=1020,ll=1023,tl=1026,el=1027,nl=33776,il=33777,rl=33778,al=33779,ql=36492,sl=2300,ol=2301,cl=2302,ml="",hl="srgb",ul="srgb-linear",dl="display-p3",pl="display-p3-linear",fl="linear",gl="srgb",_l="rec709",vl="p3",xl=7680,yl=512,Ml=513,Sl=514,El=515,Tl=516,bl=517,wl=518,Al=519,Rl="300 es",Cl=2e3,Pl=2001;class Ll{addEventListener(l,t){void 0===this._listeners&&(this._listeners={});const e=this._listeners;void 0===e[l]&&(e[l]=[]),-1===e[l].indexOf(t)&&e[l].push(t)}hasEventListener(l,t){if(void 0===this._listeners)return!1;const e=this._listeners;return void 0!==e[l]&&-1!==e[l].indexOf(t)}removeEventListener(l,t){if(void 0===this._listeners)return;const e=this._listeners[l];if(void 0!==e){const l=e.indexOf(t);-1!==l&&e.splice(l,1)}}dispatchEvent(l){if(void 0===this._listeners)return;const t=this._listeners[l.type];if(void 0!==t){l.target=this;const e=t.slice(0);for(let t=0,n=e.length;t<n;t++)e[t].call(this,l);l.target=null}}}const Ul=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];const Nl=Math.PI/180,Il=180/Math.PI;function Dl(){const l=4294967295*Math.random()|0,t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,n=4294967295*Math.random()|0;return(Ul[255&l]+Ul[l>>8&255]+Ul[l>>16&255]+Ul[l>>24&255]+"-"+Ul[255&t]+Ul[t>>8&255]+"-"+Ul[t>>16&15|64]+Ul[t>>24&255]+"-"+Ul[63&e|128]+Ul[e>>8&255]+"-"+Ul[e>>16&255]+Ul[e>>24&255]+Ul[255&n]+Ul[n>>8&255]+Ul[n>>16&255]+Ul[n>>24&255]).toLowerCase()}function Ol(l,t,e){return Math.max(t,Math.min(e,l))}function Fl(l,t){return(l%t+t)%t}function zl(l,t,e){return(1-e)*l+e*t}function Bl(l,t){switch(t.constructor){case Float32Array:return l;case Uint32Array:return l/4294967295;case Uint16Array:return l/65535;case Uint8Array:return l/255;case Int32Array:return Math.max(l/2147483647,-1);case Int16Array:return Math.max(l/32767,-1);case Int8Array:return Math.max(l/127,-1);default:throw new Error("Invalid component type.")}}function Vl(l,t){switch(t.constructor){case Float32Array:return l;case Uint32Array:return Math.round(4294967295*l);case Uint16Array:return Math.round(65535*l);case Uint8Array:return Math.round(255*l);case Int32Array:return Math.round(2147483647*l);case Int16Array:return Math.round(32767*l);case Int8Array:return Math.round(127*l);default:throw new Error("Invalid component type.")}}const Hl=function(l){return l*(.5-Math.random())};class kl{constructor(l=0,t=0){kl.prototype.isVector2=!0,this.x=l,this.y=t}get width(){return this.x}set width(l){this.x=l}get height(){return this.y}set height(l){this.y=l}set(l,t){return this.x=l,this.y=t,this}setScalar(l){return this.x=l,this.y=l,this}setX(l){return this.x=l,this}setY(l){return this.y=l,this}setComponent(l,t){switch(l){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+l)}return this}getComponent(l){switch(l){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+l)}}clone(){return new this.constructor(this.x,this.y)}copy(l){return this.x=l.x,this.y=l.y,this}add(l){return this.x+=l.x,this.y+=l.y,this}addScalar(l){return this.x+=l,this.y+=l,this}addVectors(l,t){return this.x=l.x+t.x,this.y=l.y+t.y,this}addScaledVector(l,t){return this.x+=l.x*t,this.y+=l.y*t,this}sub(l){return this.x-=l.x,this.y-=l.y,this}subScalar(l){return this.x-=l,this.y-=l,this}subVectors(l,t){return this.x=l.x-t.x,this.y=l.y-t.y,this}multiply(l){return this.x*=l.x,this.y*=l.y,this}multiplyScalar(l){return this.x*=l,this.y*=l,this}divide(l){return this.x/=l.x,this.y/=l.y,this}divideScalar(l){return this.multiplyScalar(1/l)}applyMatrix3(l){const t=this.x,e=this.y,n=l.elements;return this.x=n[0]*t+n[3]*e+n[6],this.y=n[1]*t+n[4]*e+n[7],this}min(l){return this.x=Math.min(this.x,l.x),this.y=Math.min(this.y,l.y),this}max(l){return this.x=Math.max(this.x,l.x),this.y=Math.max(this.y,l.y),this}clamp(l,t){return this.x=Math.max(l.x,Math.min(t.x,this.x)),this.y=Math.max(l.y,Math.min(t.y,this.y)),this}clampScalar(l,t){return this.x=Math.max(l,Math.min(t,this.x)),this.y=Math.max(l,Math.min(t,this.y)),this}clampLength(l,t){const e=this.length();return this.divideScalar(e||1).multiplyScalar(Math.max(l,Math.min(t,e)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(l){return this.x*l.x+this.y*l.y}cross(l){return this.x*l.y-this.y*l.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(l){const t=Math.sqrt(this.lengthSq()*l.lengthSq());if(0===t)return Math.PI/2;const e=this.dot(l)/t;return Math.acos(Ol(e,-1,1))}distanceTo(l){return Math.sqrt(this.distanceToSquared(l))}distanceToSquared(l){const t=this.x-l.x,e=this.y-l.y;return t*t+e*e}manhattanDistanceTo(l){return Math.abs(this.x-l.x)+Math.abs(this.y-l.y)}setLength(l){return this.normalize().multiplyScalar(l)}lerp(l,t){return this.x+=(l.x-this.x)*t,this.y+=(l.y-this.y)*t,this}lerpVectors(l,t,e){return this.x=l.x+(t.x-l.x)*e,this.y=l.y+(t.y-l.y)*e,this}equals(l){return l.x===this.x&&l.y===this.y}fromArray(l,t=0){return this.x=l[t],this.y=l[t+1],this}toArray(l=[],t=0){return l[t]=this.x,l[t+1]=this.y,l}fromBufferAttribute(l,t){return this.x=l.getX(t),this.y=l.getY(t),this}rotateAround(l,t){const e=Math.cos(t),n=Math.sin(t),i=this.x-l.x,r=this.y-l.y;return this.x=i*e-r*n+l.x,this.y=i*n+r*e+l.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class Gl{constructor(l,t,e,n,i,r,a,q,s){Gl.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],void 0!==l&&this.set(l,t,e,n,i,r,a,q,s)}set(l,t,e,n,i,r,a,q,s){const o=this.elements;return o[0]=l,o[1]=n,o[2]=a,o[3]=t,o[4]=i,o[5]=q,o[6]=e,o[7]=r,o[8]=s,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(l){const t=this.elements,e=l.elements;return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],this}extractBasis(l,t,e){return l.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),e.setFromMatrix3Column(this,2),this}setFromMatrix4(l){const t=l.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(l){return this.multiplyMatrices(this,l)}premultiply(l){return this.multiplyMatrices(l,this)}multiplyMatrices(l,t){const e=l.elements,n=t.elements,i=this.elements,r=e[0],a=e[3],q=e[6],s=e[1],o=e[4],c=e[7],m=e[2],h=e[5],u=e[8],d=n[0],p=n[3],f=n[6],g=n[1],_=n[4],v=n[7],x=n[2],y=n[5],M=n[8];return i[0]=r*d+a*g+q*x,i[3]=r*p+a*_+q*y,i[6]=r*f+a*v+q*M,i[1]=s*d+o*g+c*x,i[4]=s*p+o*_+c*y,i[7]=s*f+o*v+c*M,i[2]=m*d+h*g+u*x,i[5]=m*p+h*_+u*y,i[8]=m*f+h*v+u*M,this}multiplyScalar(l){const t=this.elements;return t[0]*=l,t[3]*=l,t[6]*=l,t[1]*=l,t[4]*=l,t[7]*=l,t[2]*=l,t[5]*=l,t[8]*=l,this}determinant(){const l=this.elements,t=l[0],e=l[1],n=l[2],i=l[3],r=l[4],a=l[5],q=l[6],s=l[7],o=l[8];return t*r*o-t*a*s-e*i*o+e*a*q+n*i*s-n*r*q}invert(){const l=this.elements,t=l[0],e=l[1],n=l[2],i=l[3],r=l[4],a=l[5],q=l[6],s=l[7],o=l[8],c=o*r-a*s,m=a*q-o*i,h=s*i-r*q,u=t*c+e*m+n*h;if(0===u)return this.set(0,0,0,0,0,0,0,0,0);const d=1/u;return l[0]=c*d,l[1]=(n*s-o*e)*d,l[2]=(a*e-n*r)*d,l[3]=m*d,l[4]=(o*t-n*q)*d,l[5]=(n*i-a*t)*d,l[6]=h*d,l[7]=(e*q-s*t)*d,l[8]=(r*t-e*i)*d,this}transpose(){let l;const t=this.elements;return l=t[1],t[1]=t[3],t[3]=l,l=t[2],t[2]=t[6],t[6]=l,l=t[5],t[5]=t[7],t[7]=l,this}getNormalMatrix(l){return this.setFromMatrix4(l).invert().transpose()}transposeIntoArray(l){const t=this.elements;return l[0]=t[0],l[1]=t[3],l[2]=t[6],l[3]=t[1],l[4]=t[4],l[5]=t[7],l[6]=t[2],l[7]=t[5],l[8]=t[8],this}setUvTransform(l,t,e,n,i,r,a){const q=Math.cos(i),s=Math.sin(i);return this.set(e*q,e*s,-e*(q*r+s*a)+r+l,-n*s,n*q,-n*(-s*r+q*a)+a+t,0,0,1),this}scale(l,t){return this.premultiply(Wl.makeScale(l,t)),this}rotate(l){return this.premultiply(Wl.makeRotation(-l)),this}translate(l,t){return this.premultiply(Wl.makeTranslation(l,t)),this}makeTranslation(l,t){return l.isVector2?this.set(1,0,l.x,0,1,l.y,0,0,1):this.set(1,0,l,0,1,t,0,0,1),this}makeRotation(l){const t=Math.cos(l),e=Math.sin(l);return this.set(t,-e,0,e,t,0,0,0,1),this}makeScale(l,t){return this.set(l,0,0,0,t,0,0,0,1),this}equals(l){const t=this.elements,e=l.elements;for(let l=0;l<9;l++)if(t[l]!==e[l])return!1;return!0}fromArray(l,t=0){for(let e=0;e<9;e++)this.elements[e]=l[e+t];return this}toArray(l=[],t=0){const e=this.elements;return l[t]=e[0],l[t+1]=e[1],l[t+2]=e[2],l[t+3]=e[3],l[t+4]=e[4],l[t+5]=e[5],l[t+6]=e[6],l[t+7]=e[7],l[t+8]=e[8],l}clone(){return(new this.constructor).fromArray(this.elements)}}const Wl=new Gl;function Xl(l){for(let t=l.length-1;t>=0;--t)if(l[t]>=65535)return!0;return!1}function jl(l){return document.createElementNS("http://www.w3.org/1999/xhtml",l)}function Yl(){const l=jl("canvas");return l.style.display="block",l}Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array;const Jl={};const Zl=(new Gl).set(.8224621,.177538,0,.0331941,.9668058,0,.0170827,.0723974,.9105199),Kl=(new Gl).set(1.2249401,-.2249404,0,-.0420569,1.0420571,0,-.0196376,-.0786361,1.0982735),$l={[ul]:{transfer:fl,primaries:_l,toReference:l=>l,fromReference:l=>l},[hl]:{transfer:gl,primaries:_l,toReference:l=>l.convertSRGBToLinear(),fromReference:l=>l.convertLinearToSRGB()},[pl]:{transfer:fl,primaries:vl,toReference:l=>l.applyMatrix3(Kl),fromReference:l=>l.applyMatrix3(Zl)},[dl]:{transfer:gl,primaries:vl,toReference:l=>l.convertSRGBToLinear().applyMatrix3(Kl),fromReference:l=>l.applyMatrix3(Zl).convertLinearToSRGB()}},Ql=new Set([ul,pl]),lt={enabled:!0,_workingColorSpace:ul,get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(l){if(!Ql.has(l))throw new Error(`Unsupported working color space, "${l}".`);this._workingColorSpace=l},convert:function(l,t,e){if(!1===this.enabled||t===e||!t||!e)return l;const n=$l[t].toReference;return(0,$l[e].fromReference)(n(l))},fromWorkingColorSpace:function(l,t){return this.convert(l,this._workingColorSpace,t)},toWorkingColorSpace:function(l,t){return this.convert(l,t,this._workingColorSpace)},getPrimaries:function(l){return $l[l].primaries},getTransfer:function(l){return l===ml?fl:$l[l].transfer}};function tt(l){return l<.04045?.0773993808*l:Math.pow(.9478672986*l+.0521327014,2.4)}function et(l){return l<.0031308?12.92*l:1.055*Math.pow(l,.41666)-.055}let nt;class it{static getDataURL(l){if(/^data:/i.test(l.src))return l.src;if("undefined"==typeof HTMLCanvasElement)return l.src;let t;if(l instanceof HTMLCanvasElement)t=l;else{void 0===nt&&(nt=jl("canvas")),nt.width=l.width,nt.height=l.height;const e=nt.getContext("2d");l instanceof ImageData?e.putImageData(l,0,0):e.drawImage(l,0,0,l.width,l.height),t=nt}return t.width>2048||t.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",l),t.toDataURL("image/jpeg",.6)):t.toDataURL("image/png")}static sRGBToLinear(l){if("undefined"!=typeof HTMLImageElement&&l instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&l instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&l instanceof ImageBitmap){const t=jl("canvas");t.width=l.width,t.height=l.height;const e=t.getContext("2d");e.drawImage(l,0,0,l.width,l.height);const n=e.getImageData(0,0,l.width,l.height),i=n.data;for(let l=0;l<i.length;l++)i[l]=255*tt(i[l]/255);return e.putImageData(n,0,0),t}if(l.data){const t=l.data.slice(0);for(let l=0;l<t.length;l++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[l]=Math.floor(255*tt(t[l]/255)):t[l]=tt(t[l]);return{data:t,width:l.width,height:l.height}}return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),l}}let rt=0;class at{constructor(l=null){this.isSource=!0,Object.defineProperty(this,"id",{value:rt++}),this.uuid=Dl(),this.data=l,this.dataReady=!0,this.version=0}set needsUpdate(l){!0===l&&this.version++}toJSON(l){const t=void 0===l||"string"==typeof l;if(!t&&void 0!==l.images[this.uuid])return l.images[this.uuid];const e={uuid:this.uuid,url:""},n=this.data;if(null!==n){let l;if(Array.isArray(n)){l=[];for(let t=0,e=n.length;t<e;t++)n[t].isDataTexture?l.push(qt(n[t].image)):l.push(qt(n[t]))}else l=qt(n);e.url=l}return t||(l.images[this.uuid]=e),e}}function qt(l){return"undefined"!=typeof HTMLImageElement&&l instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&l instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&l instanceof ImageBitmap?it.getDataURL(l):l.data?{data:Array.from(l.data),width:l.width,height:l.height,type:l.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let st=0;class ot extends Ll{constructor(l=ot.DEFAULT_IMAGE,t=ot.DEFAULT_MAPPING,e=1001,n=1001,i=1006,r=1008,a=1023,q=1009,s=ot.DEFAULT_ANISOTROPY,o=""){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:st++}),this.uuid=Dl(),this.name="",this.source=new at(l),this.mipmaps=[],this.mapping=t,this.channel=0,this.wrapS=e,this.wrapT=n,this.magFilter=i,this.minFilter=r,this.anisotropy=s,this.format=a,this.internalFormat=null,this.type=q,this.offset=new kl(0,0),this.repeat=new kl(1,1),this.center=new kl(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Gl,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=o,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(l=null){this.source.data=l}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(l){return this.name=l.name,this.source=l.source,this.mipmaps=l.mipmaps.slice(0),this.mapping=l.mapping,this.channel=l.channel,this.wrapS=l.wrapS,this.wrapT=l.wrapT,this.magFilter=l.magFilter,this.minFilter=l.minFilter,this.anisotropy=l.anisotropy,this.format=l.format,this.internalFormat=l.internalFormat,this.type=l.type,this.offset.copy(l.offset),this.repeat.copy(l.repeat),this.center.copy(l.center),this.rotation=l.rotation,this.matrixAutoUpdate=l.matrixAutoUpdate,this.matrix.copy(l.matrix),this.generateMipmaps=l.generateMipmaps,this.premultiplyAlpha=l.premultiplyAlpha,this.flipY=l.flipY,this.unpackAlignment=l.unpackAlignment,this.colorSpace=l.colorSpace,this.userData=JSON.parse(JSON.stringify(l.userData)),this.needsUpdate=!0,this}toJSON(l){const t=void 0===l||"string"==typeof l;if(!t&&void 0!==l.textures[this.uuid])return l.textures[this.uuid];const e={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(l).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(e.userData=this.userData),t||(l.textures[this.uuid]=e),e}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(l){if(300!==this.mapping)return l;if(l.applyMatrix3(this.matrix),l.x<0||l.x>1)switch(this.wrapS){case B:l.x=l.x-Math.floor(l.x);break;case V:l.x=l.x<0?0:1;break;case H:1===Math.abs(Math.floor(l.x)%2)?l.x=Math.ceil(l.x)-l.x:l.x=l.x-Math.floor(l.x)}if(l.y<0||l.y>1)switch(this.wrapT){case B:l.y=l.y-Math.floor(l.y);break;case V:l.y=l.y<0?0:1;break;case H:1===Math.abs(Math.floor(l.y)%2)?l.y=Math.ceil(l.y)-l.y:l.y=l.y-Math.floor(l.y)}return this.flipY&&(l.y=1-l.y),l}set needsUpdate(l){!0===l&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(l){!0===l&&this.pmremVersion++}}ot.DEFAULT_IMAGE=null,ot.DEFAULT_MAPPING=300,ot.DEFAULT_ANISOTROPY=1;class ct{constructor(l=0,t=0,e=0,n=1){ct.prototype.isVector4=!0,this.x=l,this.y=t,this.z=e,this.w=n}get width(){return this.z}set width(l){this.z=l}get height(){return this.w}set height(l){this.w=l}set(l,t,e,n){return this.x=l,this.y=t,this.z=e,this.w=n,this}setScalar(l){return this.x=l,this.y=l,this.z=l,this.w=l,this}setX(l){return this.x=l,this}setY(l){return this.y=l,this}setZ(l){return this.z=l,this}setW(l){return this.w=l,this}setComponent(l,t){switch(l){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+l)}return this}getComponent(l){switch(l){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+l)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(l){return this.x=l.x,this.y=l.y,this.z=l.z,this.w=void 0!==l.w?l.w:1,this}add(l){return this.x+=l.x,this.y+=l.y,this.z+=l.z,this.w+=l.w,this}addScalar(l){return this.x+=l,this.y+=l,this.z+=l,this.w+=l,this}addVectors(l,t){return this.x=l.x+t.x,this.y=l.y+t.y,this.z=l.z+t.z,this.w=l.w+t.w,this}addScaledVector(l,t){return this.x+=l.x*t,this.y+=l.y*t,this.z+=l.z*t,this.w+=l.w*t,this}sub(l){return this.x-=l.x,this.y-=l.y,this.z-=l.z,this.w-=l.w,this}subScalar(l){return this.x-=l,this.y-=l,this.z-=l,this.w-=l,this}subVectors(l,t){return this.x=l.x-t.x,this.y=l.y-t.y,this.z=l.z-t.z,this.w=l.w-t.w,this}multiply(l){return this.x*=l.x,this.y*=l.y,this.z*=l.z,this.w*=l.w,this}multiplyScalar(l){return this.x*=l,this.y*=l,this.z*=l,this.w*=l,this}applyMatrix4(l){const t=this.x,e=this.y,n=this.z,i=this.w,r=l.elements;return this.x=r[0]*t+r[4]*e+r[8]*n+r[12]*i,this.y=r[1]*t+r[5]*e+r[9]*n+r[13]*i,this.z=r[2]*t+r[6]*e+r[10]*n+r[14]*i,this.w=r[3]*t+r[7]*e+r[11]*n+r[15]*i,this}divideScalar(l){return this.multiplyScalar(1/l)}setAxisAngleFromQuaternion(l){this.w=2*Math.acos(l.w);const t=Math.sqrt(1-l.w*l.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=l.x/t,this.y=l.y/t,this.z=l.z/t),this}setAxisAngleFromRotationMatrix(l){let t,e,n,i;const r=.01,a=.1,q=l.elements,s=q[0],o=q[4],c=q[8],m=q[1],h=q[5],u=q[9],d=q[2],p=q[6],f=q[10];if(Math.abs(o-m)<r&&Math.abs(c-d)<r&&Math.abs(u-p)<r){if(Math.abs(o+m)<a&&Math.abs(c+d)<a&&Math.abs(u+p)<a&&Math.abs(s+h+f-3)<a)return this.set(1,0,0,0),this;t=Math.PI;const l=(s+1)/2,q=(h+1)/2,g=(f+1)/2,_=(o+m)/4,v=(c+d)/4,x=(u+p)/4;return l>q&&l>g?l<r?(e=0,n=.707106781,i=.707106781):(e=Math.sqrt(l),n=_/e,i=v/e):q>g?q<r?(e=.707106781,n=0,i=.707106781):(n=Math.sqrt(q),e=_/n,i=x/n):g<r?(e=.707106781,n=.707106781,i=0):(i=Math.sqrt(g),e=v/i,n=x/i),this.set(e,n,i,t),this}let g=Math.sqrt((p-u)*(p-u)+(c-d)*(c-d)+(m-o)*(m-o));return Math.abs(g)<.001&&(g=1),this.x=(p-u)/g,this.y=(c-d)/g,this.z=(m-o)/g,this.w=Math.acos((s+h+f-1)/2),this}min(l){return this.x=Math.min(this.x,l.x),this.y=Math.min(this.y,l.y),this.z=Math.min(this.z,l.z),this.w=Math.min(this.w,l.w),this}max(l){return this.x=Math.max(this.x,l.x),this.y=Math.max(this.y,l.y),this.z=Math.max(this.z,l.z),this.w=Math.max(this.w,l.w),this}clamp(l,t){return this.x=Math.max(l.x,Math.min(t.x,this.x)),this.y=Math.max(l.y,Math.min(t.y,this.y)),this.z=Math.max(l.z,Math.min(t.z,this.z)),this.w=Math.max(l.w,Math.min(t.w,this.w)),this}clampScalar(l,t){return this.x=Math.max(l,Math.min(t,this.x)),this.y=Math.max(l,Math.min(t,this.y)),this.z=Math.max(l,Math.min(t,this.z)),this.w=Math.max(l,Math.min(t,this.w)),this}clampLength(l,t){const e=this.length();return this.divideScalar(e||1).multiplyScalar(Math.max(l,Math.min(t,e)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(l){return this.x*l.x+this.y*l.y+this.z*l.z+this.w*l.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(l){return this.normalize().multiplyScalar(l)}lerp(l,t){return this.x+=(l.x-this.x)*t,this.y+=(l.y-this.y)*t,this.z+=(l.z-this.z)*t,this.w+=(l.w-this.w)*t,this}lerpVectors(l,t,e){return this.x=l.x+(t.x-l.x)*e,this.y=l.y+(t.y-l.y)*e,this.z=l.z+(t.z-l.z)*e,this.w=l.w+(t.w-l.w)*e,this}equals(l){return l.x===this.x&&l.y===this.y&&l.z===this.z&&l.w===this.w}fromArray(l,t=0){return this.x=l[t],this.y=l[t+1],this.z=l[t+2],this.w=l[t+3],this}toArray(l=[],t=0){return l[t]=this.x,l[t+1]=this.y,l[t+2]=this.z,l[t+3]=this.w,l}fromBufferAttribute(l,t){return this.x=l.getX(t),this.y=l.getY(t),this.z=l.getZ(t),this.w=l.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class mt extends Ll{constructor(l=1,t=1,e={}){super(),this.isRenderTarget=!0,this.width=l,this.height=t,this.depth=1,this.scissor=new ct(0,0,l,t),this.scissorTest=!1,this.viewport=new ct(0,0,l,t);const n={width:l,height:t,depth:1};e=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:X,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},e);const i=new ot(n,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.colorSpace);i.flipY=!1,i.generateMipmaps=e.generateMipmaps,i.internalFormat=e.internalFormat,this.textures=[];const r=e.count;for(let l=0;l<r;l++)this.textures[l]=i.clone(),this.textures[l].isRenderTargetTexture=!0;this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.resolveDepthBuffer=e.resolveDepthBuffer,this.resolveStencilBuffer=e.resolveStencilBuffer,this.depthTexture=e.depthTexture,this.samples=e.samples}get texture(){return this.textures[0]}set texture(l){this.textures[0]=l}setSize(l,t,e=1){if(this.width!==l||this.height!==t||this.depth!==e){this.width=l,this.height=t,this.depth=e;for(let n=0,i=this.textures.length;n<i;n++)this.textures[n].image.width=l,this.textures[n].image.height=t,this.textures[n].image.depth=e;this.dispose()}this.viewport.set(0,0,l,t),this.scissor.set(0,0,l,t)}clone(){return(new this.constructor).copy(this)}copy(l){this.width=l.width,this.height=l.height,this.depth=l.depth,this.scissor.copy(l.scissor),this.scissorTest=l.scissorTest,this.viewport.copy(l.viewport),this.textures.length=0;for(let t=0,e=l.textures.length;t<e;t++)this.textures[t]=l.textures[t].clone(),this.textures[t].isRenderTargetTexture=!0;const t=Object.assign({},l.texture.image);return this.texture.source=new at(t),this.depthBuffer=l.depthBuffer,this.stencilBuffer=l.stencilBuffer,this.resolveDepthBuffer=l.resolveDepthBuffer,this.resolveStencilBuffer=l.resolveStencilBuffer,null!==l.depthTexture&&(this.depthTexture=l.depthTexture.clone()),this.samples=l.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class ht extends mt{constructor(l=1,t=1,e={}){super(l,t,e),this.isWebGLRenderTarget=!0}}class ut extends ot{constructor(l=null,t=1,e=1,n=1){super(null),this.isDataArrayTexture=!0,this.image={data:l,width:t,height:e,depth:n},this.magFilter=k,this.minFilter=k,this.wrapR=V,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class dt extends ot{constructor(l=null,t=1,e=1,n=1){super(null),this.isData3DTexture=!0,this.image={data:l,width:t,height:e,depth:n},this.magFilter=k,this.minFilter=k,this.wrapR=V,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class pt{constructor(l=0,t=0,e=0,n=1){this.isQuaternion=!0,this._x=l,this._y=t,this._z=e,this._w=n}static slerpFlat(l,t,e,n,i,r,a){let q=e[n+0],s=e[n+1],o=e[n+2],c=e[n+3];const m=i[r+0],h=i[r+1],u=i[r+2],d=i[r+3];if(0===a)return l[t+0]=q,l[t+1]=s,l[t+2]=o,void(l[t+3]=c);if(1===a)return l[t+0]=m,l[t+1]=h,l[t+2]=u,void(l[t+3]=d);if(c!==d||q!==m||s!==h||o!==u){let l=1-a;const t=q*m+s*h+o*u+c*d,e=t>=0?1:-1,n=1-t*t;if(n>Number.EPSILON){const i=Math.sqrt(n),r=Math.atan2(i,t*e);l=Math.sin(l*r)/i,a=Math.sin(a*r)/i}const i=a*e;if(q=q*l+m*i,s=s*l+h*i,o=o*l+u*i,c=c*l+d*i,l===1-a){const l=1/Math.sqrt(q*q+s*s+o*o+c*c);q*=l,s*=l,o*=l,c*=l}}l[t]=q,l[t+1]=s,l[t+2]=o,l[t+3]=c}static multiplyQuaternionsFlat(l,t,e,n,i,r){const a=e[n],q=e[n+1],s=e[n+2],o=e[n+3],c=i[r],m=i[r+1],h=i[r+2],u=i[r+3];return l[t]=a*u+o*c+q*h-s*m,l[t+1]=q*u+o*m+s*c-a*h,l[t+2]=s*u+o*h+a*m-q*c,l[t+3]=o*u-a*c-q*m-s*h,l}get x(){return this._x}set x(l){this._x=l,this._onChangeCallback()}get y(){return this._y}set y(l){this._y=l,this._onChangeCallback()}get z(){return this._z}set z(l){this._z=l,this._onChangeCallback()}get w(){return this._w}set w(l){this._w=l,this._onChangeCallback()}set(l,t,e,n){return this._x=l,this._y=t,this._z=e,this._w=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(l){return this._x=l.x,this._y=l.y,this._z=l.z,this._w=l.w,this._onChangeCallback(),this}setFromEuler(l,t=!0){const e=l._x,n=l._y,i=l._z,r=l._order,a=Math.cos,q=Math.sin,s=a(e/2),o=a(n/2),c=a(i/2),m=q(e/2),h=q(n/2),u=q(i/2);switch(r){case"XYZ":this._x=m*o*c+s*h*u,this._y=s*h*c-m*o*u,this._z=s*o*u+m*h*c,this._w=s*o*c-m*h*u;break;case"YXZ":this._x=m*o*c+s*h*u,this._y=s*h*c-m*o*u,this._z=s*o*u-m*h*c,this._w=s*o*c+m*h*u;break;case"ZXY":this._x=m*o*c-s*h*u,this._y=s*h*c+m*o*u,this._z=s*o*u+m*h*c,this._w=s*o*c-m*h*u;break;case"ZYX":this._x=m*o*c-s*h*u,this._y=s*h*c+m*o*u,this._z=s*o*u-m*h*c,this._w=s*o*c+m*h*u;break;case"YZX":this._x=m*o*c+s*h*u,this._y=s*h*c+m*o*u,this._z=s*o*u-m*h*c,this._w=s*o*c-m*h*u;break;case"XZY":this._x=m*o*c-s*h*u,this._y=s*h*c-m*o*u,this._z=s*o*u+m*h*c,this._w=s*o*c+m*h*u;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+r)}return!0===t&&this._onChangeCallback(),this}setFromAxisAngle(l,t){const e=t/2,n=Math.sin(e);return this._x=l.x*n,this._y=l.y*n,this._z=l.z*n,this._w=Math.cos(e),this._onChangeCallback(),this}setFromRotationMatrix(l){const t=l.elements,e=t[0],n=t[4],i=t[8],r=t[1],a=t[5],q=t[9],s=t[2],o=t[6],c=t[10],m=e+a+c;if(m>0){const l=.5/Math.sqrt(m+1);this._w=.25/l,this._x=(o-q)*l,this._y=(i-s)*l,this._z=(r-n)*l}else if(e>a&&e>c){const l=2*Math.sqrt(1+e-a-c);this._w=(o-q)/l,this._x=.25*l,this._y=(n+r)/l,this._z=(i+s)/l}else if(a>c){const l=2*Math.sqrt(1+a-e-c);this._w=(i-s)/l,this._x=(n+r)/l,this._y=.25*l,this._z=(q+o)/l}else{const l=2*Math.sqrt(1+c-e-a);this._w=(r-n)/l,this._x=(i+s)/l,this._y=(q+o)/l,this._z=.25*l}return this._onChangeCallback(),this}setFromUnitVectors(l,t){let e=l.dot(t)+1;return e<Number.EPSILON?(e=0,Math.abs(l.x)>Math.abs(l.z)?(this._x=-l.y,this._y=l.x,this._z=0,this._w=e):(this._x=0,this._y=-l.z,this._z=l.y,this._w=e)):(this._x=l.y*t.z-l.z*t.y,this._y=l.z*t.x-l.x*t.z,this._z=l.x*t.y-l.y*t.x,this._w=e),this.normalize()}angleTo(l){return 2*Math.acos(Math.abs(Ol(this.dot(l),-1,1)))}rotateTowards(l,t){const e=this.angleTo(l);if(0===e)return this;const n=Math.min(1,t/e);return this.slerp(l,n),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(l){return this._x*l._x+this._y*l._y+this._z*l._z+this._w*l._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let l=this.length();return 0===l?(this._x=0,this._y=0,this._z=0,this._w=1):(l=1/l,this._x=this._x*l,this._y=this._y*l,this._z=this._z*l,this._w=this._w*l),this._onChangeCallback(),this}multiply(l){return this.multiplyQuaternions(this,l)}premultiply(l){return this.multiplyQuaternions(l,this)}multiplyQuaternions(l,t){const e=l._x,n=l._y,i=l._z,r=l._w,a=t._x,q=t._y,s=t._z,o=t._w;return this._x=e*o+r*a+n*s-i*q,this._y=n*o+r*q+i*a-e*s,this._z=i*o+r*s+e*q-n*a,this._w=r*o-e*a-n*q-i*s,this._onChangeCallback(),this}slerp(l,t){if(0===t)return this;if(1===t)return this.copy(l);const e=this._x,n=this._y,i=this._z,r=this._w;let a=r*l._w+e*l._x+n*l._y+i*l._z;if(a<0?(this._w=-l._w,this._x=-l._x,this._y=-l._y,this._z=-l._z,a=-a):this.copy(l),a>=1)return this._w=r,this._x=e,this._y=n,this._z=i,this;const q=1-a*a;if(q<=Number.EPSILON){const l=1-t;return this._w=l*r+t*this._w,this._x=l*e+t*this._x,this._y=l*n+t*this._y,this._z=l*i+t*this._z,this.normalize(),this}const s=Math.sqrt(q),o=Math.atan2(s,a),c=Math.sin((1-t)*o)/s,m=Math.sin(t*o)/s;return this._w=r*c+this._w*m,this._x=e*c+this._x*m,this._y=n*c+this._y*m,this._z=i*c+this._z*m,this._onChangeCallback(),this}slerpQuaternions(l,t,e){return this.copy(l).slerp(t,e)}random(){const l=2*Math.PI*Math.random(),t=2*Math.PI*Math.random(),e=Math.random(),n=Math.sqrt(1-e),i=Math.sqrt(e);return this.set(n*Math.sin(l),n*Math.cos(l),i*Math.sin(t),i*Math.cos(t))}equals(l){return l._x===this._x&&l._y===this._y&&l._z===this._z&&l._w===this._w}fromArray(l,t=0){return this._x=l[t],this._y=l[t+1],this._z=l[t+2],this._w=l[t+3],this._onChangeCallback(),this}toArray(l=[],t=0){return l[t]=this._x,l[t+1]=this._y,l[t+2]=this._z,l[t+3]=this._w,l}fromBufferAttribute(l,t){return this._x=l.getX(t),this._y=l.getY(t),this._z=l.getZ(t),this._w=l.getW(t),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(l){return this._onChangeCallback=l,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class ft{constructor(l=0,t=0,e=0){ft.prototype.isVector3=!0,this.x=l,this.y=t,this.z=e}set(l,t,e){return void 0===e&&(e=this.z),this.x=l,this.y=t,this.z=e,this}setScalar(l){return this.x=l,this.y=l,this.z=l,this}setX(l){return this.x=l,this}setY(l){return this.y=l,this}setZ(l){return this.z=l,this}setComponent(l,t){switch(l){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+l)}return this}getComponent(l){switch(l){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+l)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(l){return this.x=l.x,this.y=l.y,this.z=l.z,this}add(l){return this.x+=l.x,this.y+=l.y,this.z+=l.z,this}addScalar(l){return this.x+=l,this.y+=l,this.z+=l,this}addVectors(l,t){return this.x=l.x+t.x,this.y=l.y+t.y,this.z=l.z+t.z,this}addScaledVector(l,t){return this.x+=l.x*t,this.y+=l.y*t,this.z+=l.z*t,this}sub(l){return this.x-=l.x,this.y-=l.y,this.z-=l.z,this}subScalar(l){return this.x-=l,this.y-=l,this.z-=l,this}subVectors(l,t){return this.x=l.x-t.x,this.y=l.y-t.y,this.z=l.z-t.z,this}multiply(l){return this.x*=l.x,this.y*=l.y,this.z*=l.z,this}multiplyScalar(l){return this.x*=l,this.y*=l,this.z*=l,this}multiplyVectors(l,t){return this.x=l.x*t.x,this.y=l.y*t.y,this.z=l.z*t.z,this}applyEuler(l){return this.applyQuaternion(_t.setFromEuler(l))}applyAxisAngle(l,t){return this.applyQuaternion(_t.setFromAxisAngle(l,t))}applyMatrix3(l){const t=this.x,e=this.y,n=this.z,i=l.elements;return this.x=i[0]*t+i[3]*e+i[6]*n,this.y=i[1]*t+i[4]*e+i[7]*n,this.z=i[2]*t+i[5]*e+i[8]*n,this}applyNormalMatrix(l){return this.applyMatrix3(l).normalize()}applyMatrix4(l){const t=this.x,e=this.y,n=this.z,i=l.elements,r=1/(i[3]*t+i[7]*e+i[11]*n+i[15]);return this.x=(i[0]*t+i[4]*e+i[8]*n+i[12])*r,this.y=(i[1]*t+i[5]*e+i[9]*n+i[13])*r,this.z=(i[2]*t+i[6]*e+i[10]*n+i[14])*r,this}applyQuaternion(l){const t=this.x,e=this.y,n=this.z,i=l.x,r=l.y,a=l.z,q=l.w,s=2*(r*n-a*e),o=2*(a*t-i*n),c=2*(i*e-r*t);return this.x=t+q*s+r*c-a*o,this.y=e+q*o+a*s-i*c,this.z=n+q*c+i*o-r*s,this}project(l){return this.applyMatrix4(l.matrixWorldInverse).applyMatrix4(l.projectionMatrix)}unproject(l){return this.applyMatrix4(l.projectionMatrixInverse).applyMatrix4(l.matrixWorld)}transformDirection(l){const t=this.x,e=this.y,n=this.z,i=l.elements;return this.x=i[0]*t+i[4]*e+i[8]*n,this.y=i[1]*t+i[5]*e+i[9]*n,this.z=i[2]*t+i[6]*e+i[10]*n,this.normalize()}divide(l){return this.x/=l.x,this.y/=l.y,this.z/=l.z,this}divideScalar(l){return this.multiplyScalar(1/l)}min(l){return this.x=Math.min(this.x,l.x),this.y=Math.min(this.y,l.y),this.z=Math.min(this.z,l.z),this}max(l){return this.x=Math.max(this.x,l.x),this.y=Math.max(this.y,l.y),this.z=Math.max(this.z,l.z),this}clamp(l,t){return this.x=Math.max(l.x,Math.min(t.x,this.x)),this.y=Math.max(l.y,Math.min(t.y,this.y)),this.z=Math.max(l.z,Math.min(t.z,this.z)),this}clampScalar(l,t){return this.x=Math.max(l,Math.min(t,this.x)),this.y=Math.max(l,Math.min(t,this.y)),this.z=Math.max(l,Math.min(t,this.z)),this}clampLength(l,t){const e=this.length();return this.divideScalar(e||1).multiplyScalar(Math.max(l,Math.min(t,e)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(l){return this.x*l.x+this.y*l.y+this.z*l.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(l){return this.normalize().multiplyScalar(l)}lerp(l,t){return this.x+=(l.x-this.x)*t,this.y+=(l.y-this.y)*t,this.z+=(l.z-this.z)*t,this}lerpVectors(l,t,e){return this.x=l.x+(t.x-l.x)*e,this.y=l.y+(t.y-l.y)*e,this.z=l.z+(t.z-l.z)*e,this}cross(l){return this.crossVectors(this,l)}crossVectors(l,t){const e=l.x,n=l.y,i=l.z,r=t.x,a=t.y,q=t.z;return this.x=n*q-i*a,this.y=i*r-e*q,this.z=e*a-n*r,this}projectOnVector(l){const t=l.lengthSq();if(0===t)return this.set(0,0,0);const e=l.dot(this)/t;return this.copy(l).multiplyScalar(e)}projectOnPlane(l){return gt.copy(this).projectOnVector(l),this.sub(gt)}reflect(l){return this.sub(gt.copy(l).multiplyScalar(2*this.dot(l)))}angleTo(l){const t=Math.sqrt(this.lengthSq()*l.lengthSq());if(0===t)return Math.PI/2;const e=this.dot(l)/t;return Math.acos(Ol(e,-1,1))}distanceTo(l){return Math.sqrt(this.distanceToSquared(l))}distanceToSquared(l){const t=this.x-l.x,e=this.y-l.y,n=this.z-l.z;return t*t+e*e+n*n}manhattanDistanceTo(l){return Math.abs(this.x-l.x)+Math.abs(this.y-l.y)+Math.abs(this.z-l.z)}setFromSpherical(l){return this.setFromSphericalCoords(l.radius,l.phi,l.theta)}setFromSphericalCoords(l,t,e){const n=Math.sin(t)*l;return this.x=n*Math.sin(e),this.y=Math.cos(t)*l,this.z=n*Math.cos(e),this}setFromCylindrical(l){return this.setFromCylindricalCoords(l.radius,l.theta,l.y)}setFromCylindricalCoords(l,t,e){return this.x=l*Math.sin(t),this.y=e,this.z=l*Math.cos(t),this}setFromMatrixPosition(l){const t=l.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(l){const t=this.setFromMatrixColumn(l,0).length(),e=this.setFromMatrixColumn(l,1).length(),n=this.setFromMatrixColumn(l,2).length();return this.x=t,this.y=e,this.z=n,this}setFromMatrixColumn(l,t){return this.fromArray(l.elements,4*t)}setFromMatrix3Column(l,t){return this.fromArray(l.elements,3*t)}setFromEuler(l){return this.x=l._x,this.y=l._y,this.z=l._z,this}setFromColor(l){return this.x=l.r,this.y=l.g,this.z=l.b,this}equals(l){return l.x===this.x&&l.y===this.y&&l.z===this.z}fromArray(l,t=0){return this.x=l[t],this.y=l[t+1],this.z=l[t+2],this}toArray(l=[],t=0){return l[t]=this.x,l[t+1]=this.y,l[t+2]=this.z,l}fromBufferAttribute(l,t){return this.x=l.getX(t),this.y=l.getY(t),this.z=l.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const l=Math.random()*Math.PI*2,t=2*Math.random()-1,e=Math.sqrt(1-t*t);return this.x=e*Math.cos(l),this.y=t,this.z=e*Math.sin(l),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const gt=new ft,_t=new pt;class vt{constructor(l=new ft(1/0,1/0,1/0),t=new ft(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=l,this.max=t}set(l,t){return this.min.copy(l),this.max.copy(t),this}setFromArray(l){this.makeEmpty();for(let t=0,e=l.length;t<e;t+=3)this.expandByPoint(yt.fromArray(l,t));return this}setFromBufferAttribute(l){this.makeEmpty();for(let t=0,e=l.count;t<e;t++)this.expandByPoint(yt.fromBufferAttribute(l,t));return this}setFromPoints(l){this.makeEmpty();for(let t=0,e=l.length;t<e;t++)this.expandByPoint(l[t]);return this}setFromCenterAndSize(l,t){const e=yt.copy(t).multiplyScalar(.5);return this.min.copy(l).sub(e),this.max.copy(l).add(e),this}setFromObject(l,t=!1){return this.makeEmpty(),this.expandByObject(l,t)}clone(){return(new this.constructor).copy(this)}copy(l){return this.min.copy(l.min),this.max.copy(l.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(l){return this.isEmpty()?l.set(0,0,0):l.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(l){return this.isEmpty()?l.set(0,0,0):l.subVectors(this.max,this.min)}expandByPoint(l){return this.min.min(l),this.max.max(l),this}expandByVector(l){return this.min.sub(l),this.max.add(l),this}expandByScalar(l){return this.min.addScalar(-l),this.max.addScalar(l),this}expandByObject(l,t=!1){l.updateWorldMatrix(!1,!1);const e=l.geometry;if(void 0!==e){const n=e.getAttribute("position");if(!0===t&&void 0!==n&&!0!==l.isInstancedMesh)for(let t=0,e=n.count;t<e;t++)!0===l.isMesh?l.getVertexPosition(t,yt):yt.fromBufferAttribute(n,t),yt.applyMatrix4(l.matrixWorld),this.expandByPoint(yt);else void 0!==l.boundingBox?(null===l.boundingBox&&l.computeBoundingBox(),Mt.copy(l.boundingBox)):(null===e.boundingBox&&e.computeBoundingBox(),Mt.copy(e.boundingBox)),Mt.applyMatrix4(l.matrixWorld),this.union(Mt)}const n=l.children;for(let l=0,e=n.length;l<e;l++)this.expandByObject(n[l],t);return this}containsPoint(l){return!(l.x<this.min.x||l.x>this.max.x||l.y<this.min.y||l.y>this.max.y||l.z<this.min.z||l.z>this.max.z)}containsBox(l){return this.min.x<=l.min.x&&l.max.x<=this.max.x&&this.min.y<=l.min.y&&l.max.y<=this.max.y&&this.min.z<=l.min.z&&l.max.z<=this.max.z}getParameter(l,t){return t.set((l.x-this.min.x)/(this.max.x-this.min.x),(l.y-this.min.y)/(this.max.y-this.min.y),(l.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(l){return!(l.max.x<this.min.x||l.min.x>this.max.x||l.max.y<this.min.y||l.min.y>this.max.y||l.max.z<this.min.z||l.min.z>this.max.z)}intersectsSphere(l){return this.clampPoint(l.center,yt),yt.distanceToSquared(l.center)<=l.radius*l.radius}intersectsPlane(l){let t,e;return l.normal.x>0?(t=l.normal.x*this.min.x,e=l.normal.x*this.max.x):(t=l.normal.x*this.max.x,e=l.normal.x*this.min.x),l.normal.y>0?(t+=l.normal.y*this.min.y,e+=l.normal.y*this.max.y):(t+=l.normal.y*this.max.y,e+=l.normal.y*this.min.y),l.normal.z>0?(t+=l.normal.z*this.min.z,e+=l.normal.z*this.max.z):(t+=l.normal.z*this.max.z,e+=l.normal.z*this.min.z),t<=-l.constant&&e>=-l.constant}intersectsTriangle(l){if(this.isEmpty())return!1;this.getCenter(Rt),Ct.subVectors(this.max,Rt),St.subVectors(l.a,Rt),Et.subVectors(l.b,Rt),Tt.subVectors(l.c,Rt),bt.subVectors(Et,St),wt.subVectors(Tt,Et),At.subVectors(St,Tt);let t=[0,-bt.z,bt.y,0,-wt.z,wt.y,0,-At.z,At.y,bt.z,0,-bt.x,wt.z,0,-wt.x,At.z,0,-At.x,-bt.y,bt.x,0,-wt.y,wt.x,0,-At.y,At.x,0];return!!Ut(t,St,Et,Tt,Ct)&&(t=[1,0,0,0,1,0,0,0,1],!!Ut(t,St,Et,Tt,Ct)&&(Pt.crossVectors(bt,wt),t=[Pt.x,Pt.y,Pt.z],Ut(t,St,Et,Tt,Ct)))}clampPoint(l,t){return t.copy(l).clamp(this.min,this.max)}distanceToPoint(l){return this.clampPoint(l,yt).distanceTo(l)}getBoundingSphere(l){return this.isEmpty()?l.makeEmpty():(this.getCenter(l.center),l.radius=.5*this.getSize(yt).length()),l}intersect(l){return this.min.max(l.min),this.max.min(l.max),this.isEmpty()&&this.makeEmpty(),this}union(l){return this.min.min(l.min),this.max.max(l.max),this}applyMatrix4(l){return this.isEmpty()||(xt[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(l),xt[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(l),xt[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(l),xt[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(l),xt[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(l),xt[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(l),xt[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(l),xt[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(l),this.setFromPoints(xt)),this}translate(l){return this.min.add(l),this.max.add(l),this}equals(l){return l.min.equals(this.min)&&l.max.equals(this.max)}}const xt=[new ft,new ft,new ft,new ft,new ft,new ft,new ft,new ft],yt=new ft,Mt=new vt,St=new ft,Et=new ft,Tt=new ft,bt=new ft,wt=new ft,At=new ft,Rt=new ft,Ct=new ft,Pt=new ft,Lt=new ft;function Ut(l,t,e,n,i){for(let r=0,a=l.length-3;r<=a;r+=3){Lt.fromArray(l,r);const a=i.x*Math.abs(Lt.x)+i.y*Math.abs(Lt.y)+i.z*Math.abs(Lt.z),q=t.dot(Lt),s=e.dot(Lt),o=n.dot(Lt);if(Math.max(-Math.max(q,s,o),Math.min(q,s,o))>a)return!1}return!0}const Nt=new vt,It=new ft,Dt=new ft;class Ot{constructor(l=new ft,t=-1){this.isSphere=!0,this.center=l,this.radius=t}set(l,t){return this.center.copy(l),this.radius=t,this}setFromPoints(l,t){const e=this.center;void 0!==t?e.copy(t):Nt.setFromPoints(l).getCenter(e);let n=0;for(let t=0,i=l.length;t<i;t++)n=Math.max(n,e.distanceToSquared(l[t]));return this.radius=Math.sqrt(n),this}copy(l){return this.center.copy(l.center),this.radius=l.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(l){return l.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(l){return l.distanceTo(this.center)-this.radius}intersectsSphere(l){const t=this.radius+l.radius;return l.center.distanceToSquared(this.center)<=t*t}intersectsBox(l){return l.intersectsSphere(this)}intersectsPlane(l){return Math.abs(l.distanceToPoint(this.center))<=this.radius}clampPoint(l,t){const e=this.center.distanceToSquared(l);return t.copy(l),e>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(l){return this.isEmpty()?(l.makeEmpty(),l):(l.set(this.center,this.center),l.expandByScalar(this.radius),l)}applyMatrix4(l){return this.center.applyMatrix4(l),this.radius=this.radius*l.getMaxScaleOnAxis(),this}translate(l){return this.center.add(l),this}expandByPoint(l){if(this.isEmpty())return this.center.copy(l),this.radius=0,this;It.subVectors(l,this.center);const t=It.lengthSq();if(t>this.radius*this.radius){const l=Math.sqrt(t),e=.5*(l-this.radius);this.center.addScaledVector(It,e/l),this.radius+=e}return this}union(l){return l.isEmpty()?this:this.isEmpty()?(this.copy(l),this):(!0===this.center.equals(l.center)?this.radius=Math.max(this.radius,l.radius):(Dt.subVectors(l.center,this.center).setLength(l.radius),this.expandByPoint(It.copy(l.center).add(Dt)),this.expandByPoint(It.copy(l.center).sub(Dt))),this)}equals(l){return l.center.equals(this.center)&&l.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const Ft=new ft,zt=new ft,Bt=new ft,Vt=new ft,Ht=new ft,kt=new ft,Gt=new ft;class Wt{constructor(l=new ft,t=new ft(0,0,-1)){this.origin=l,this.direction=t}set(l,t){return this.origin.copy(l),this.direction.copy(t),this}copy(l){return this.origin.copy(l.origin),this.direction.copy(l.direction),this}at(l,t){return t.copy(this.origin).addScaledVector(this.direction,l)}lookAt(l){return this.direction.copy(l).sub(this.origin).normalize(),this}recast(l){return this.origin.copy(this.at(l,Ft)),this}closestPointToPoint(l,t){t.subVectors(l,this.origin);const e=t.dot(this.direction);return e<0?t.copy(this.origin):t.copy(this.origin).addScaledVector(this.direction,e)}distanceToPoint(l){return Math.sqrt(this.distanceSqToPoint(l))}distanceSqToPoint(l){const t=Ft.subVectors(l,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(l):(Ft.copy(this.origin).addScaledVector(this.direction,t),Ft.distanceToSquared(l))}distanceSqToSegment(l,t,e,n){zt.copy(l).add(t).multiplyScalar(.5),Bt.copy(t).sub(l).normalize(),Vt.copy(this.origin).sub(zt);const i=.5*l.distanceTo(t),r=-this.direction.dot(Bt),a=Vt.dot(this.direction),q=-Vt.dot(Bt),s=Vt.lengthSq(),o=Math.abs(1-r*r);let c,m,h,u;if(o>0)if(c=r*q-a,m=r*a-q,u=i*o,c>=0)if(m>=-u)if(m<=u){const l=1/o;c*=l,m*=l,h=c*(c+r*m+2*a)+m*(r*c+m+2*q)+s}else m=i,c=Math.max(0,-(r*m+a)),h=-c*c+m*(m+2*q)+s;else m=-i,c=Math.max(0,-(r*m+a)),h=-c*c+m*(m+2*q)+s;else m<=-u?(c=Math.max(0,-(-r*i+a)),m=c>0?-i:Math.min(Math.max(-i,-q),i),h=-c*c+m*(m+2*q)+s):m<=u?(c=0,m=Math.min(Math.max(-i,-q),i),h=m*(m+2*q)+s):(c=Math.max(0,-(r*i+a)),m=c>0?i:Math.min(Math.max(-i,-q),i),h=-c*c+m*(m+2*q)+s);else m=r>0?-i:i,c=Math.max(0,-(r*m+a)),h=-c*c+m*(m+2*q)+s;return e&&e.copy(this.origin).addScaledVector(this.direction,c),n&&n.copy(zt).addScaledVector(Bt,m),h}intersectSphere(l,t){Ft.subVectors(l.center,this.origin);const e=Ft.dot(this.direction),n=Ft.dot(Ft)-e*e,i=l.radius*l.radius;if(n>i)return null;const r=Math.sqrt(i-n),a=e-r,q=e+r;return q<0?null:a<0?this.at(q,t):this.at(a,t)}intersectsSphere(l){return this.distanceSqToPoint(l.center)<=l.radius*l.radius}distanceToPlane(l){const t=l.normal.dot(this.direction);if(0===t)return 0===l.distanceToPoint(this.origin)?0:null;const e=-(this.origin.dot(l.normal)+l.constant)/t;return e>=0?e:null}intersectPlane(l,t){const e=this.distanceToPlane(l);return null===e?null:this.at(e,t)}intersectsPlane(l){const t=l.distanceToPoint(this.origin);return 0===t||l.normal.dot(this.direction)*t<0}intersectBox(l,t){let e,n,i,r,a,q;const s=1/this.direction.x,o=1/this.direction.y,c=1/this.direction.z,m=this.origin;return s>=0?(e=(l.min.x-m.x)*s,n=(l.max.x-m.x)*s):(e=(l.max.x-m.x)*s,n=(l.min.x-m.x)*s),o>=0?(i=(l.min.y-m.y)*o,r=(l.max.y-m.y)*o):(i=(l.max.y-m.y)*o,r=(l.min.y-m.y)*o),e>r||i>n?null:((i>e||isNaN(e))&&(e=i),(r<n||isNaN(n))&&(n=r),c>=0?(a=(l.min.z-m.z)*c,q=(l.max.z-m.z)*c):(a=(l.max.z-m.z)*c,q=(l.min.z-m.z)*c),e>q||a>n?null:((a>e||e!=e)&&(e=a),(q<n||n!=n)&&(n=q),n<0?null:this.at(e>=0?e:n,t)))}intersectsBox(l){return null!==this.intersectBox(l,Ft)}intersectTriangle(l,t,e,n,i){Ht.subVectors(t,l),kt.subVectors(e,l),Gt.crossVectors(Ht,kt);let r,a=this.direction.dot(Gt);if(a>0){if(n)return null;r=1}else{if(!(a<0))return null;r=-1,a=-a}Vt.subVectors(this.origin,l);const q=r*this.direction.dot(kt.crossVectors(Vt,kt));if(q<0)return null;const s=r*this.direction.dot(Ht.cross(Vt));if(s<0)return null;if(q+s>a)return null;const o=-r*Vt.dot(Gt);return o<0?null:this.at(o/a,i)}applyMatrix4(l){return this.origin.applyMatrix4(l),this.direction.transformDirection(l),this}equals(l){return l.origin.equals(this.origin)&&l.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class Xt{constructor(l,t,e,n,i,r,a,q,s,o,c,m,h,u,d,p){Xt.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],void 0!==l&&this.set(l,t,e,n,i,r,a,q,s,o,c,m,h,u,d,p)}set(l,t,e,n,i,r,a,q,s,o,c,m,h,u,d,p){const f=this.elements;return f[0]=l,f[4]=t,f[8]=e,f[12]=n,f[1]=i,f[5]=r,f[9]=a,f[13]=q,f[2]=s,f[6]=o,f[10]=c,f[14]=m,f[3]=h,f[7]=u,f[11]=d,f[15]=p,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new Xt).fromArray(this.elements)}copy(l){const t=this.elements,e=l.elements;return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],this}copyPosition(l){const t=this.elements,e=l.elements;return t[12]=e[12],t[13]=e[13],t[14]=e[14],this}setFromMatrix3(l){const t=l.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(l,t,e){return l.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),e.setFromMatrixColumn(this,2),this}makeBasis(l,t,e){return this.set(l.x,t.x,e.x,0,l.y,t.y,e.y,0,l.z,t.z,e.z,0,0,0,0,1),this}extractRotation(l){const t=this.elements,e=l.elements,n=1/jt.setFromMatrixColumn(l,0).length(),i=1/jt.setFromMatrixColumn(l,1).length(),r=1/jt.setFromMatrixColumn(l,2).length();return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=0,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=0,t[8]=e[8]*r,t[9]=e[9]*r,t[10]=e[10]*r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(l){const t=this.elements,e=l.x,n=l.y,i=l.z,r=Math.cos(e),a=Math.sin(e),q=Math.cos(n),s=Math.sin(n),o=Math.cos(i),c=Math.sin(i);if("XYZ"===l.order){const l=r*o,e=r*c,n=a*o,i=a*c;t[0]=q*o,t[4]=-q*c,t[8]=s,t[1]=e+n*s,t[5]=l-i*s,t[9]=-a*q,t[2]=i-l*s,t[6]=n+e*s,t[10]=r*q}else if("YXZ"===l.order){const l=q*o,e=q*c,n=s*o,i=s*c;t[0]=l+i*a,t[4]=n*a-e,t[8]=r*s,t[1]=r*c,t[5]=r*o,t[9]=-a,t[2]=e*a-n,t[6]=i+l*a,t[10]=r*q}else if("ZXY"===l.order){const l=q*o,e=q*c,n=s*o,i=s*c;t[0]=l-i*a,t[4]=-r*c,t[8]=n+e*a,t[1]=e+n*a,t[5]=r*o,t[9]=i-l*a,t[2]=-r*s,t[6]=a,t[10]=r*q}else if("ZYX"===l.order){const l=r*o,e=r*c,n=a*o,i=a*c;t[0]=q*o,t[4]=n*s-e,t[8]=l*s+i,t[1]=q*c,t[5]=i*s+l,t[9]=e*s-n,t[2]=-s,t[6]=a*q,t[10]=r*q}else if("YZX"===l.order){const l=r*q,e=r*s,n=a*q,i=a*s;t[0]=q*o,t[4]=i-l*c,t[8]=n*c+e,t[1]=c,t[5]=r*o,t[9]=-a*o,t[2]=-s*o,t[6]=e*c+n,t[10]=l-i*c}else if("XZY"===l.order){const l=r*q,e=r*s,n=a*q,i=a*s;t[0]=q*o,t[4]=-c,t[8]=s*o,t[1]=l*c+i,t[5]=r*o,t[9]=e*c-n,t[2]=n*c-e,t[6]=a*o,t[10]=i*c+l}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(l){return this.compose(Jt,l,Zt)}lookAt(l,t,e){const n=this.elements;return Qt.subVectors(l,t),0===Qt.lengthSq()&&(Qt.z=1),Qt.normalize(),Kt.crossVectors(e,Qt),0===Kt.lengthSq()&&(1===Math.abs(e.z)?Qt.x+=1e-4:Qt.z+=1e-4,Qt.normalize(),Kt.crossVectors(e,Qt)),Kt.normalize(),$t.crossVectors(Qt,Kt),n[0]=Kt.x,n[4]=$t.x,n[8]=Qt.x,n[1]=Kt.y,n[5]=$t.y,n[9]=Qt.y,n[2]=Kt.z,n[6]=$t.z,n[10]=Qt.z,this}multiply(l){return this.multiplyMatrices(this,l)}premultiply(l){return this.multiplyMatrices(l,this)}multiplyMatrices(l,t){const e=l.elements,n=t.elements,i=this.elements,r=e[0],a=e[4],q=e[8],s=e[12],o=e[1],c=e[5],m=e[9],h=e[13],u=e[2],d=e[6],p=e[10],f=e[14],g=e[3],_=e[7],v=e[11],x=e[15],y=n[0],M=n[4],S=n[8],E=n[12],T=n[1],b=n[5],w=n[9],A=n[13],R=n[2],C=n[6],P=n[10],L=n[14],U=n[3],N=n[7],I=n[11],D=n[15];return i[0]=r*y+a*T+q*R+s*U,i[4]=r*M+a*b+q*C+s*N,i[8]=r*S+a*w+q*P+s*I,i[12]=r*E+a*A+q*L+s*D,i[1]=o*y+c*T+m*R+h*U,i[5]=o*M+c*b+m*C+h*N,i[9]=o*S+c*w+m*P+h*I,i[13]=o*E+c*A+m*L+h*D,i[2]=u*y+d*T+p*R+f*U,i[6]=u*M+d*b+p*C+f*N,i[10]=u*S+d*w+p*P+f*I,i[14]=u*E+d*A+p*L+f*D,i[3]=g*y+_*T+v*R+x*U,i[7]=g*M+_*b+v*C+x*N,i[11]=g*S+_*w+v*P+x*I,i[15]=g*E+_*A+v*L+x*D,this}multiplyScalar(l){const t=this.elements;return t[0]*=l,t[4]*=l,t[8]*=l,t[12]*=l,t[1]*=l,t[5]*=l,t[9]*=l,t[13]*=l,t[2]*=l,t[6]*=l,t[10]*=l,t[14]*=l,t[3]*=l,t[7]*=l,t[11]*=l,t[15]*=l,this}determinant(){const l=this.elements,t=l[0],e=l[4],n=l[8],i=l[12],r=l[1],a=l[5],q=l[9],s=l[13],o=l[2],c=l[6],m=l[10],h=l[14];return l[3]*(+i*q*c-n*s*c-i*a*m+e*s*m+n*a*h-e*q*h)+l[7]*(+t*q*h-t*s*m+i*r*m-n*r*h+n*s*o-i*q*o)+l[11]*(+t*s*c-t*a*h-i*r*c+e*r*h+i*a*o-e*s*o)+l[15]*(-n*a*o-t*q*c+t*a*m+n*r*c-e*r*m+e*q*o)}transpose(){const l=this.elements;let t;return t=l[1],l[1]=l[4],l[4]=t,t=l[2],l[2]=l[8],l[8]=t,t=l[6],l[6]=l[9],l[9]=t,t=l[3],l[3]=l[12],l[12]=t,t=l[7],l[7]=l[13],l[13]=t,t=l[11],l[11]=l[14],l[14]=t,this}setPosition(l,t,e){const n=this.elements;return l.isVector3?(n[12]=l.x,n[13]=l.y,n[14]=l.z):(n[12]=l,n[13]=t,n[14]=e),this}invert(){const l=this.elements,t=l[0],e=l[1],n=l[2],i=l[3],r=l[4],a=l[5],q=l[6],s=l[7],o=l[8],c=l[9],m=l[10],h=l[11],u=l[12],d=l[13],p=l[14],f=l[15],g=c*p*s-d*m*s+d*q*h-a*p*h-c*q*f+a*m*f,_=u*m*s-o*p*s-u*q*h+r*p*h+o*q*f-r*m*f,v=o*d*s-u*c*s+u*a*h-r*d*h-o*a*f+r*c*f,x=u*c*q-o*d*q-u*a*m+r*d*m+o*a*p-r*c*p,y=t*g+e*_+n*v+i*x;if(0===y)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const M=1/y;return l[0]=g*M,l[1]=(d*m*i-c*p*i-d*n*h+e*p*h+c*n*f-e*m*f)*M,l[2]=(a*p*i-d*q*i+d*n*s-e*p*s-a*n*f+e*q*f)*M,l[3]=(c*q*i-a*m*i-c*n*s+e*m*s+a*n*h-e*q*h)*M,l[4]=_*M,l[5]=(o*p*i-u*m*i+u*n*h-t*p*h-o*n*f+t*m*f)*M,l[6]=(u*q*i-r*p*i-u*n*s+t*p*s+r*n*f-t*q*f)*M,l[7]=(r*m*i-o*q*i+o*n*s-t*m*s-r*n*h+t*q*h)*M,l[8]=v*M,l[9]=(u*c*i-o*d*i-u*e*h+t*d*h+o*e*f-t*c*f)*M,l[10]=(r*d*i-u*a*i+u*e*s-t*d*s-r*e*f+t*a*f)*M,l[11]=(o*a*i-r*c*i-o*e*s+t*c*s+r*e*h-t*a*h)*M,l[12]=x*M,l[13]=(o*d*n-u*c*n+u*e*m-t*d*m-o*e*p+t*c*p)*M,l[14]=(u*a*n-r*d*n-u*e*q+t*d*q+r*e*p-t*a*p)*M,l[15]=(r*c*n-o*a*n+o*e*q-t*c*q-r*e*m+t*a*m)*M,this}scale(l){const t=this.elements,e=l.x,n=l.y,i=l.z;return t[0]*=e,t[4]*=n,t[8]*=i,t[1]*=e,t[5]*=n,t[9]*=i,t[2]*=e,t[6]*=n,t[10]*=i,t[3]*=e,t[7]*=n,t[11]*=i,this}getMaxScaleOnAxis(){const l=this.elements,t=l[0]*l[0]+l[1]*l[1]+l[2]*l[2],e=l[4]*l[4]+l[5]*l[5]+l[6]*l[6],n=l[8]*l[8]+l[9]*l[9]+l[10]*l[10];return Math.sqrt(Math.max(t,e,n))}makeTranslation(l,t,e){return l.isVector3?this.set(1,0,0,l.x,0,1,0,l.y,0,0,1,l.z,0,0,0,1):this.set(1,0,0,l,0,1,0,t,0,0,1,e,0,0,0,1),this}makeRotationX(l){const t=Math.cos(l),e=Math.sin(l);return this.set(1,0,0,0,0,t,-e,0,0,e,t,0,0,0,0,1),this}makeRotationY(l){const t=Math.cos(l),e=Math.sin(l);return this.set(t,0,e,0,0,1,0,0,-e,0,t,0,0,0,0,1),this}makeRotationZ(l){const t=Math.cos(l),e=Math.sin(l);return this.set(t,-e,0,0,e,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(l,t){const e=Math.cos(t),n=Math.sin(t),i=1-e,r=l.x,a=l.y,q=l.z,s=i*r,o=i*a;return this.set(s*r+e,s*a-n*q,s*q+n*a,0,s*a+n*q,o*a+e,o*q-n*r,0,s*q-n*a,o*q+n*r,i*q*q+e,0,0,0,0,1),this}makeScale(l,t,e){return this.set(l,0,0,0,0,t,0,0,0,0,e,0,0,0,0,1),this}makeShear(l,t,e,n,i,r){return this.set(1,e,i,0,l,1,r,0,t,n,1,0,0,0,0,1),this}compose(l,t,e){const n=this.elements,i=t._x,r=t._y,a=t._z,q=t._w,s=i+i,o=r+r,c=a+a,m=i*s,h=i*o,u=i*c,d=r*o,p=r*c,f=a*c,g=q*s,_=q*o,v=q*c,x=e.x,y=e.y,M=e.z;return n[0]=(1-(d+f))*x,n[1]=(h+v)*x,n[2]=(u-_)*x,n[3]=0,n[4]=(h-v)*y,n[5]=(1-(m+f))*y,n[6]=(p+g)*y,n[7]=0,n[8]=(u+_)*M,n[9]=(p-g)*M,n[10]=(1-(m+d))*M,n[11]=0,n[12]=l.x,n[13]=l.y,n[14]=l.z,n[15]=1,this}decompose(l,t,e){const n=this.elements;let i=jt.set(n[0],n[1],n[2]).length();const r=jt.set(n[4],n[5],n[6]).length(),a=jt.set(n[8],n[9],n[10]).length();this.determinant()<0&&(i=-i),l.x=n[12],l.y=n[13],l.z=n[14],Yt.copy(this);const q=1/i,s=1/r,o=1/a;return Yt.elements[0]*=q,Yt.elements[1]*=q,Yt.elements[2]*=q,Yt.elements[4]*=s,Yt.elements[5]*=s,Yt.elements[6]*=s,Yt.elements[8]*=o,Yt.elements[9]*=o,Yt.elements[10]*=o,t.setFromRotationMatrix(Yt),e.x=i,e.y=r,e.z=a,this}makePerspective(l,t,e,n,i,r,a=2e3){const q=this.elements,s=2*i/(t-l),o=2*i/(e-n),c=(t+l)/(t-l),m=(e+n)/(e-n);let h,u;if(a===Cl)h=-(r+i)/(r-i),u=-2*r*i/(r-i);else{if(a!==Pl)throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);h=-r/(r-i),u=-r*i/(r-i)}return q[0]=s,q[4]=0,q[8]=c,q[12]=0,q[1]=0,q[5]=o,q[9]=m,q[13]=0,q[2]=0,q[6]=0,q[10]=h,q[14]=u,q[3]=0,q[7]=0,q[11]=-1,q[15]=0,this}makeOrthographic(l,t,e,n,i,r,a=2e3){const q=this.elements,s=1/(t-l),o=1/(e-n),c=1/(r-i),m=(t+l)*s,h=(e+n)*o;let u,d;if(a===Cl)u=(r+i)*c,d=-2*c;else{if(a!==Pl)throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);u=i*c,d=-1*c}return q[0]=2*s,q[4]=0,q[8]=0,q[12]=-m,q[1]=0,q[5]=2*o,q[9]=0,q[13]=-h,q[2]=0,q[6]=0,q[10]=d,q[14]=-u,q[3]=0,q[7]=0,q[11]=0,q[15]=1,this}equals(l){const t=this.elements,e=l.elements;for(let l=0;l<16;l++)if(t[l]!==e[l])return!1;return!0}fromArray(l,t=0){for(let e=0;e<16;e++)this.elements[e]=l[e+t];return this}toArray(l=[],t=0){const e=this.elements;return l[t]=e[0],l[t+1]=e[1],l[t+2]=e[2],l[t+3]=e[3],l[t+4]=e[4],l[t+5]=e[5],l[t+6]=e[6],l[t+7]=e[7],l[t+8]=e[8],l[t+9]=e[9],l[t+10]=e[10],l[t+11]=e[11],l[t+12]=e[12],l[t+13]=e[13],l[t+14]=e[14],l[t+15]=e[15],l}}const jt=new ft,Yt=new Xt,Jt=new ft(0,0,0),Zt=new ft(1,1,1),Kt=new ft,$t=new ft,Qt=new ft,le=new Xt,te=new pt;class ee{constructor(l=0,t=0,e=0,n=ee.DEFAULT_ORDER){this.isEuler=!0,this._x=l,this._y=t,this._z=e,this._order=n}get x(){return this._x}set x(l){this._x=l,this._onChangeCallback()}get y(){return this._y}set y(l){this._y=l,this._onChangeCallback()}get z(){return this._z}set z(l){this._z=l,this._onChangeCallback()}get order(){return this._order}set order(l){this._order=l,this._onChangeCallback()}set(l,t,e,n=this._order){return this._x=l,this._y=t,this._z=e,this._order=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(l){return this._x=l._x,this._y=l._y,this._z=l._z,this._order=l._order,this._onChangeCallback(),this}setFromRotationMatrix(l,t=this._order,e=!0){const n=l.elements,i=n[0],r=n[4],a=n[8],q=n[1],s=n[5],o=n[9],c=n[2],m=n[6],h=n[10];switch(t){case"XYZ":this._y=Math.asin(Ol(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-o,h),this._z=Math.atan2(-r,i)):(this._x=Math.atan2(m,s),this._z=0);break;case"YXZ":this._x=Math.asin(-Ol(o,-1,1)),Math.abs(o)<.9999999?(this._y=Math.atan2(a,h),this._z=Math.atan2(q,s)):(this._y=Math.atan2(-c,i),this._z=0);break;case"ZXY":this._x=Math.asin(Ol(m,-1,1)),Math.abs(m)<.9999999?(this._y=Math.atan2(-c,h),this._z=Math.atan2(-r,s)):(this._y=0,this._z=Math.atan2(q,i));break;case"ZYX":this._y=Math.asin(-Ol(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(m,h),this._z=Math.atan2(q,i)):(this._x=0,this._z=Math.atan2(-r,s));break;case"YZX":this._z=Math.asin(Ol(q,-1,1)),Math.abs(q)<.9999999?(this._x=Math.atan2(-o,s),this._y=Math.atan2(-c,i)):(this._x=0,this._y=Math.atan2(a,h));break;case"XZY":this._z=Math.asin(-Ol(r,-1,1)),Math.abs(r)<.9999999?(this._x=Math.atan2(m,s),this._y=Math.atan2(a,i)):(this._x=Math.atan2(-o,h),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,!0===e&&this._onChangeCallback(),this}setFromQuaternion(l,t,e){return le.makeRotationFromQuaternion(l),this.setFromRotationMatrix(le,t,e)}setFromVector3(l,t=this._order){return this.set(l.x,l.y,l.z,t)}reorder(l){return te.setFromEuler(this),this.setFromQuaternion(te,l)}equals(l){return l._x===this._x&&l._y===this._y&&l._z===this._z&&l._order===this._order}fromArray(l){return this._x=l[0],this._y=l[1],this._z=l[2],void 0!==l[3]&&(this._order=l[3]),this._onChangeCallback(),this}toArray(l=[],t=0){return l[t]=this._x,l[t+1]=this._y,l[t+2]=this._z,l[t+3]=this._order,l}_onChange(l){return this._onChangeCallback=l,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}ee.DEFAULT_ORDER="XYZ";class ne{constructor(){this.mask=1}set(l){this.mask=1<<l>>>0}enable(l){this.mask|=1<<l}enableAll(){this.mask=-1}toggle(l){this.mask^=1<<l}disable(l){this.mask&=~(1<<l)}disableAll(){this.mask=0}test(l){return!!(this.mask&l.mask)}isEnabled(l){return!!(this.mask&1<<l)}}let ie=0;const re=new ft,ae=new pt,qe=new Xt,se=new ft,oe=new ft,ce=new ft,me=new pt,he=new ft(1,0,0),ue=new ft(0,1,0),de=new ft(0,0,1),pe={type:"added"},fe={type:"removed"},ge={type:"childadded",child:null},_e={type:"childremoved",child:null};class ve extends Ll{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:ie++}),this.uuid=Dl(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=ve.DEFAULT_UP.clone();const l=new ft,t=new ee,e=new pt,n=new ft(1,1,1);t._onChange((function(){e.setFromEuler(t,!1)})),e._onChange((function(){t.setFromQuaternion(e,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:l},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:e},scale:{configurable:!0,enumerable:!0,value:n},modelViewMatrix:{value:new Xt},normalMatrix:{value:new Gl}}),this.matrix=new Xt,this.matrixWorld=new Xt,this.matrixAutoUpdate=ve.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=ve.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new ne,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(l){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(l),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(l){return this.quaternion.premultiply(l),this}setRotationFromAxisAngle(l,t){this.quaternion.setFromAxisAngle(l,t)}setRotationFromEuler(l){this.quaternion.setFromEuler(l,!0)}setRotationFromMatrix(l){this.quaternion.setFromRotationMatrix(l)}setRotationFromQuaternion(l){this.quaternion.copy(l)}rotateOnAxis(l,t){return ae.setFromAxisAngle(l,t),this.quaternion.multiply(ae),this}rotateOnWorldAxis(l,t){return ae.setFromAxisAngle(l,t),this.quaternion.premultiply(ae),this}rotateX(l){return this.rotateOnAxis(he,l)}rotateY(l){return this.rotateOnAxis(ue,l)}rotateZ(l){return this.rotateOnAxis(de,l)}translateOnAxis(l,t){return re.copy(l).applyQuaternion(this.quaternion),this.position.add(re.multiplyScalar(t)),this}translateX(l){return this.translateOnAxis(he,l)}translateY(l){return this.translateOnAxis(ue,l)}translateZ(l){return this.translateOnAxis(de,l)}localToWorld(l){return this.updateWorldMatrix(!0,!1),l.applyMatrix4(this.matrixWorld)}worldToLocal(l){return this.updateWorldMatrix(!0,!1),l.applyMatrix4(qe.copy(this.matrixWorld).invert())}lookAt(l,t,e){l.isVector3?se.copy(l):se.set(l,t,e);const n=this.parent;this.updateWorldMatrix(!0,!1),oe.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?qe.lookAt(oe,se,this.up):qe.lookAt(se,oe,this.up),this.quaternion.setFromRotationMatrix(qe),n&&(qe.extractRotation(n.matrixWorld),ae.setFromRotationMatrix(qe),this.quaternion.premultiply(ae.invert()))}add(l){if(arguments.length>1){for(let l=0;l<arguments.length;l++)this.add(arguments[l]);return this}return l===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",l),this):(l&&l.isObject3D?(l.removeFromParent(),l.parent=this,this.children.push(l),l.dispatchEvent(pe),ge.child=l,this.dispatchEvent(ge),ge.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",l),this)}remove(l){if(arguments.length>1){for(let l=0;l<arguments.length;l++)this.remove(arguments[l]);return this}const t=this.children.indexOf(l);return-1!==t&&(l.parent=null,this.children.splice(t,1),l.dispatchEvent(fe),_e.child=l,this.dispatchEvent(_e),_e.child=null),this}removeFromParent(){const l=this.parent;return null!==l&&l.remove(this),this}clear(){return this.remove(...this.children)}attach(l){return this.updateWorldMatrix(!0,!1),qe.copy(this.matrixWorld).invert(),null!==l.parent&&(l.parent.updateWorldMatrix(!0,!1),qe.multiply(l.parent.matrixWorld)),l.applyMatrix4(qe),l.removeFromParent(),l.parent=this,this.children.push(l),l.updateWorldMatrix(!1,!0),l.dispatchEvent(pe),ge.child=l,this.dispatchEvent(ge),ge.child=null,this}getObjectById(l){return this.getObjectByProperty("id",l)}getObjectByName(l){return this.getObjectByProperty("name",l)}getObjectByProperty(l,t){if(this[l]===t)return this;for(let e=0,n=this.children.length;e<n;e++){const n=this.children[e].getObjectByProperty(l,t);if(void 0!==n)return n}}getObjectsByProperty(l,t,e=[]){this[l]===t&&e.push(this);const n=this.children;for(let i=0,r=n.length;i<r;i++)n[i].getObjectsByProperty(l,t,e);return e}getWorldPosition(l){return this.updateWorldMatrix(!0,!1),l.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(l){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(oe,l,ce),l}getWorldScale(l){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(oe,me,l),l}getWorldDirection(l){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return l.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(l){l(this);const t=this.children;for(let e=0,n=t.length;e<n;e++)t[e].traverse(l)}traverseVisible(l){if(!1===this.visible)return;l(this);const t=this.children;for(let e=0,n=t.length;e<n;e++)t[e].traverseVisible(l)}traverseAncestors(l){const t=this.parent;null!==t&&(l(t),t.traverseAncestors(l))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(l){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||l)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,l=!0);const t=this.children;for(let e=0,n=t.length;e<n;e++){const n=t[e];!0!==n.matrixWorldAutoUpdate&&!0!==l||n.updateMatrixWorld(l)}}updateWorldMatrix(l,t){const e=this.parent;if(!0===l&&null!==e&&!0===e.matrixWorldAutoUpdate&&e.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===t){const l=this.children;for(let t=0,e=l.length;t<e;t++){const e=l[t];!0===e.matrixWorldAutoUpdate&&e.updateWorldMatrix(!1,!0)}}}toJSON(l){const t=void 0===l||"string"==typeof l,e={};t&&(l={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},e.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const n={};function i(t,e){return void 0===t[e.uuid]&&(t[e.uuid]=e.toJSON(l)),e.uuid}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),!0===this.castShadow&&(n.castShadow=!0),!0===this.receiveShadow&&(n.receiveShadow=!0),!1===this.visible&&(n.visible=!1),!1===this.frustumCulled&&(n.frustumCulled=!1),0!==this.renderOrder&&(n.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(n.userData=this.userData),n.layers=this.layers.mask,n.matrix=this.matrix.toArray(),n.up=this.up.toArray(),!1===this.matrixAutoUpdate&&(n.matrixAutoUpdate=!1),this.isInstancedMesh&&(n.type="InstancedMesh",n.count=this.count,n.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(n.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(n.type="BatchedMesh",n.perObjectFrustumCulled=this.perObjectFrustumCulled,n.sortObjects=this.sortObjects,n.drawRanges=this._drawRanges,n.reservedRanges=this._reservedRanges,n.visibility=this._visibility,n.active=this._active,n.bounds=this._bounds.map((l=>({boxInitialized:l.boxInitialized,boxMin:l.box.min.toArray(),boxMax:l.box.max.toArray(),sphereInitialized:l.sphereInitialized,sphereRadius:l.sphere.radius,sphereCenter:l.sphere.center.toArray()}))),n.maxGeometryCount=this._maxGeometryCount,n.maxVertexCount=this._maxVertexCount,n.maxIndexCount=this._maxIndexCount,n.geometryInitialized=this._geometryInitialized,n.geometryCount=this._geometryCount,n.matricesTexture=this._matricesTexture.toJSON(l),null!==this.boundingSphere&&(n.boundingSphere={center:n.boundingSphere.center.toArray(),radius:n.boundingSphere.radius}),null!==this.boundingBox&&(n.boundingBox={min:n.boundingBox.min.toArray(),max:n.boundingBox.max.toArray()})),this.isScene)this.background&&(this.background.isColor?n.background=this.background.toJSON():this.background.isTexture&&(n.background=this.background.toJSON(l).uuid)),this.environment&&this.environment.isTexture&&!0!==this.environment.isRenderTargetTexture&&(n.environment=this.environment.toJSON(l).uuid);else if(this.isMesh||this.isLine||this.isPoints){n.geometry=i(l.geometries,this.geometry);const t=this.geometry.parameters;if(void 0!==t&&void 0!==t.shapes){const e=t.shapes;if(Array.isArray(e))for(let t=0,n=e.length;t<n;t++){const n=e[t];i(l.shapes,n)}else i(l.shapes,e)}}if(this.isSkinnedMesh&&(n.bindMode=this.bindMode,n.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(i(l.skeletons,this.skeleton),n.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const t=[];for(let e=0,n=this.material.length;e<n;e++)t.push(i(l.materials,this.material[e]));n.material=t}else n.material=i(l.materials,this.material);if(this.children.length>0){n.children=[];for(let t=0;t<this.children.length;t++)n.children.push(this.children[t].toJSON(l).object)}if(this.animations.length>0){n.animations=[];for(let t=0;t<this.animations.length;t++){const e=this.animations[t];n.animations.push(i(l.animations,e))}}if(t){const t=r(l.geometries),n=r(l.materials),i=r(l.textures),a=r(l.images),q=r(l.shapes),s=r(l.skeletons),o=r(l.animations),c=r(l.nodes);t.length>0&&(e.geometries=t),n.length>0&&(e.materials=n),i.length>0&&(e.textures=i),a.length>0&&(e.images=a),q.length>0&&(e.shapes=q),s.length>0&&(e.skeletons=s),o.length>0&&(e.animations=o),c.length>0&&(e.nodes=c)}return e.object=n,e;function r(l){const t=[];for(const e in l){const n=l[e];delete n.metadata,t.push(n)}return t}}clone(l){return(new this.constructor).copy(this,l)}copy(l,t=!0){if(this.name=l.name,this.up.copy(l.up),this.position.copy(l.position),this.rotation.order=l.rotation.order,this.quaternion.copy(l.quaternion),this.scale.copy(l.scale),this.matrix.copy(l.matrix),this.matrixWorld.copy(l.matrixWorld),this.matrixAutoUpdate=l.matrixAutoUpdate,this.matrixWorldAutoUpdate=l.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=l.matrixWorldNeedsUpdate,this.layers.mask=l.layers.mask,this.visible=l.visible,this.castShadow=l.castShadow,this.receiveShadow=l.receiveShadow,this.frustumCulled=l.frustumCulled,this.renderOrder=l.renderOrder,this.animations=l.animations.slice(),this.userData=JSON.parse(JSON.stringify(l.userData)),!0===t)for(let t=0;t<l.children.length;t++){const e=l.children[t];this.add(e.clone())}return this}}ve.DEFAULT_UP=new ft(0,1,0),ve.DEFAULT_MATRIX_AUTO_UPDATE=!0,ve.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const xe=new ft,ye=new ft,Me=new ft,Se=new ft,Ee=new ft,Te=new ft,be=new ft,we=new ft,Ae=new ft,Re=new ft;class Ce{constructor(l=new ft,t=new ft,e=new ft){this.a=l,this.b=t,this.c=e}static getNormal(l,t,e,n){n.subVectors(e,t),xe.subVectors(l,t),n.cross(xe);const i=n.lengthSq();return i>0?n.multiplyScalar(1/Math.sqrt(i)):n.set(0,0,0)}static getBarycoord(l,t,e,n,i){xe.subVectors(n,t),ye.subVectors(e,t),Me.subVectors(l,t);const r=xe.dot(xe),a=xe.dot(ye),q=xe.dot(Me),s=ye.dot(ye),o=ye.dot(Me),c=r*s-a*a;if(0===c)return i.set(0,0,0),null;const m=1/c,h=(s*q-a*o)*m,u=(r*o-a*q)*m;return i.set(1-h-u,u,h)}static containsPoint(l,t,e,n){return null!==this.getBarycoord(l,t,e,n,Se)&&Se.x>=0&&Se.y>=0&&Se.x+Se.y<=1}static getInterpolation(l,t,e,n,i,r,a,q){return null===this.getBarycoord(l,t,e,n,Se)?(q.x=0,q.y=0,"z"in q&&(q.z=0),"w"in q&&(q.w=0),null):(q.setScalar(0),q.addScaledVector(i,Se.x),q.addScaledVector(r,Se.y),q.addScaledVector(a,Se.z),q)}static isFrontFacing(l,t,e,n){return xe.subVectors(e,t),ye.subVectors(l,t),xe.cross(ye).dot(n)<0}set(l,t,e){return this.a.copy(l),this.b.copy(t),this.c.copy(e),this}setFromPointsAndIndices(l,t,e,n){return this.a.copy(l[t]),this.b.copy(l[e]),this.c.copy(l[n]),this}setFromAttributeAndIndices(l,t,e,n){return this.a.fromBufferAttribute(l,t),this.b.fromBufferAttribute(l,e),this.c.fromBufferAttribute(l,n),this}clone(){return(new this.constructor).copy(this)}copy(l){return this.a.copy(l.a),this.b.copy(l.b),this.c.copy(l.c),this}getArea(){return xe.subVectors(this.c,this.b),ye.subVectors(this.a,this.b),.5*xe.cross(ye).length()}getMidpoint(l){return l.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(l){return Ce.getNormal(this.a,this.b,this.c,l)}getPlane(l){return l.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(l,t){return Ce.getBarycoord(l,this.a,this.b,this.c,t)}getInterpolation(l,t,e,n,i){return Ce.getInterpolation(l,this.a,this.b,this.c,t,e,n,i)}containsPoint(l){return Ce.containsPoint(l,this.a,this.b,this.c)}isFrontFacing(l){return Ce.isFrontFacing(this.a,this.b,this.c,l)}intersectsBox(l){return l.intersectsTriangle(this)}closestPointToPoint(l,t){const e=this.a,n=this.b,i=this.c;let r,a;Ee.subVectors(n,e),Te.subVectors(i,e),we.subVectors(l,e);const q=Ee.dot(we),s=Te.dot(we);if(q<=0&&s<=0)return t.copy(e);Ae.subVectors(l,n);const o=Ee.dot(Ae),c=Te.dot(Ae);if(o>=0&&c<=o)return t.copy(n);const m=q*c-o*s;if(m<=0&&q>=0&&o<=0)return r=q/(q-o),t.copy(e).addScaledVector(Ee,r);Re.subVectors(l,i);const h=Ee.dot(Re),u=Te.dot(Re);if(u>=0&&h<=u)return t.copy(i);const d=h*s-q*u;if(d<=0&&s>=0&&u<=0)return a=s/(s-u),t.copy(e).addScaledVector(Te,a);const p=o*u-h*c;if(p<=0&&c-o>=0&&h-u>=0)return be.subVectors(i,n),a=(c-o)/(c-o+(h-u)),t.copy(n).addScaledVector(be,a);const f=1/(p+d+m);return r=d*f,a=m*f,t.copy(e).addScaledVector(Ee,r).addScaledVector(Te,a)}equals(l){return l.a.equals(this.a)&&l.b.equals(this.b)&&l.c.equals(this.c)}}const Pe={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Le={h:0,s:0,l:0},Ue={h:0,s:0,l:0};function Ne(l,t,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?l+6*(t-l)*e:e<.5?t:e<2/3?l+6*(t-l)*(2/3-e):l}class Ie{constructor(l,t,e){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(l,t,e)}set(l,t,e){if(void 0===t&&void 0===e){const t=l;t&&t.isColor?this.copy(t):"number"==typeof t?this.setHex(t):"string"==typeof t&&this.setStyle(t)}else this.setRGB(l,t,e);return this}setScalar(l){return this.r=l,this.g=l,this.b=l,this}setHex(l,t=hl){return l=Math.floor(l),this.r=(l>>16&255)/255,this.g=(l>>8&255)/255,this.b=(255&l)/255,lt.toWorkingColorSpace(this,t),this}setRGB(l,t,e,n=lt.workingColorSpace){return this.r=l,this.g=t,this.b=e,lt.toWorkingColorSpace(this,n),this}setHSL(l,t,e,n=lt.workingColorSpace){if(l=Fl(l,1),t=Ol(t,0,1),e=Ol(e,0,1),0===t)this.r=this.g=this.b=e;else{const n=e<=.5?e*(1+t):e+t-e*t,i=2*e-n;this.r=Ne(i,n,l+1/3),this.g=Ne(i,n,l),this.b=Ne(i,n,l-1/3)}return lt.toWorkingColorSpace(this,n),this}setStyle(l,t=hl){function e(t){void 0!==t&&parseFloat(t)<1&&console.warn("THREE.Color: Alpha component of "+l+" will be ignored.")}let n;if(n=/^(\w+)\(([^\)]*)\)/.exec(l)){let i;const r=n[1],a=n[2];switch(r){case"rgb":case"rgba":if(i=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return e(i[4]),this.setRGB(Math.min(255,parseInt(i[1],10))/255,Math.min(255,parseInt(i[2],10))/255,Math.min(255,parseInt(i[3],10))/255,t);if(i=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return e(i[4]),this.setRGB(Math.min(100,parseInt(i[1],10))/100,Math.min(100,parseInt(i[2],10))/100,Math.min(100,parseInt(i[3],10))/100,t);break;case"hsl":case"hsla":if(i=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return e(i[4]),this.setHSL(parseFloat(i[1])/360,parseFloat(i[2])/100,parseFloat(i[3])/100,t);break;default:console.warn("THREE.Color: Unknown color model "+l)}}else if(n=/^\#([A-Fa-f\d]+)$/.exec(l)){const e=n[1],i=e.length;if(3===i)return this.setRGB(parseInt(e.charAt(0),16)/15,parseInt(e.charAt(1),16)/15,parseInt(e.charAt(2),16)/15,t);if(6===i)return this.setHex(parseInt(e,16),t);console.warn("THREE.Color: Invalid hex color "+l)}else if(l&&l.length>0)return this.setColorName(l,t);return this}setColorName(l,t=hl){const e=Pe[l.toLowerCase()];return void 0!==e?this.setHex(e,t):console.warn("THREE.Color: Unknown color "+l),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(l){return this.r=l.r,this.g=l.g,this.b=l.b,this}copySRGBToLinear(l){return this.r=tt(l.r),this.g=tt(l.g),this.b=tt(l.b),this}copyLinearToSRGB(l){return this.r=et(l.r),this.g=et(l.g),this.b=et(l.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(l=hl){return lt.fromWorkingColorSpace(De.copy(this),l),65536*Math.round(Ol(255*De.r,0,255))+256*Math.round(Ol(255*De.g,0,255))+Math.round(Ol(255*De.b,0,255))}getHexString(l=hl){return("000000"+this.getHex(l).toString(16)).slice(-6)}getHSL(l,t=lt.workingColorSpace){lt.fromWorkingColorSpace(De.copy(this),t);const e=De.r,n=De.g,i=De.b,r=Math.max(e,n,i),a=Math.min(e,n,i);let q,s;const o=(a+r)/2;if(a===r)q=0,s=0;else{const l=r-a;switch(s=o<=.5?l/(r+a):l/(2-r-a),r){case e:q=(n-i)/l+(n<i?6:0);break;case n:q=(i-e)/l+2;break;case i:q=(e-n)/l+4}q/=6}return l.h=q,l.s=s,l.l=o,l}getRGB(l,t=lt.workingColorSpace){return lt.fromWorkingColorSpace(De.copy(this),t),l.r=De.r,l.g=De.g,l.b=De.b,l}getStyle(l=hl){lt.fromWorkingColorSpace(De.copy(this),l);const t=De.r,e=De.g,n=De.b;return l!==hl?`color(${l} ${t.toFixed(3)} ${e.toFixed(3)} ${n.toFixed(3)})`:`rgb(${Math.round(255*t)},${Math.round(255*e)},${Math.round(255*n)})`}offsetHSL(l,t,e){return this.getHSL(Le),this.setHSL(Le.h+l,Le.s+t,Le.l+e)}add(l){return this.r+=l.r,this.g+=l.g,this.b+=l.b,this}addColors(l,t){return this.r=l.r+t.r,this.g=l.g+t.g,this.b=l.b+t.b,this}addScalar(l){return this.r+=l,this.g+=l,this.b+=l,this}sub(l){return this.r=Math.max(0,this.r-l.r),this.g=Math.max(0,this.g-l.g),this.b=Math.max(0,this.b-l.b),this}multiply(l){return this.r*=l.r,this.g*=l.g,this.b*=l.b,this}multiplyScalar(l){return this.r*=l,this.g*=l,this.b*=l,this}lerp(l,t){return this.r+=(l.r-this.r)*t,this.g+=(l.g-this.g)*t,this.b+=(l.b-this.b)*t,this}lerpColors(l,t,e){return this.r=l.r+(t.r-l.r)*e,this.g=l.g+(t.g-l.g)*e,this.b=l.b+(t.b-l.b)*e,this}lerpHSL(l,t){this.getHSL(Le),l.getHSL(Ue);const e=zl(Le.h,Ue.h,t),n=zl(Le.s,Ue.s,t),i=zl(Le.l,Ue.l,t);return this.setHSL(e,n,i),this}setFromVector3(l){return this.r=l.x,this.g=l.y,this.b=l.z,this}applyMatrix3(l){const t=this.r,e=this.g,n=this.b,i=l.elements;return this.r=i[0]*t+i[3]*e+i[6]*n,this.g=i[1]*t+i[4]*e+i[7]*n,this.b=i[2]*t+i[5]*e+i[8]*n,this}equals(l){return l.r===this.r&&l.g===this.g&&l.b===this.b}fromArray(l,t=0){return this.r=l[t],this.g=l[t+1],this.b=l[t+2],this}toArray(l=[],t=0){return l[t]=this.r,l[t+1]=this.g,l[t+2]=this.b,l}fromBufferAttribute(l,t){return this.r=l.getX(t),this.g=l.getY(t),this.b=l.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const De=new Ie;Ie.NAMES=Pe;let Oe=0;class Fe extends Ll{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:Oe++}),this.uuid=Dl(),this.name="",this.type="Material",this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=s,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new Ie(0,0,0),this.blendAlpha=0,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=xl,this.stencilZFail=xl,this.stencilZPass=xl,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(l){this._alphaTest>0!=l>0&&this.version++,this._alphaTest=l}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(l){if(void 0!==l)for(const t in l){const e=l[t];if(void 0===e){console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);continue}const n=this[t];void 0!==n?n&&n.isColor?n.set(e):n&&n.isVector3&&e&&e.isVector3?n.copy(e):this[t]=e:console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`)}}toJSON(l){const t=void 0===l||"string"==typeof l;t&&(l={textures:{},images:{}});const e={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};function n(l){const t=[];for(const e in l){const n=l[e];delete n.metadata,t.push(n)}return t}if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),this.color&&this.color.isColor&&(e.color=this.color.getHex()),void 0!==this.roughness&&(e.roughness=this.roughness),void 0!==this.metalness&&(e.metalness=this.metalness),void 0!==this.sheen&&(e.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(e.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(e.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(e.emissive=this.emissive.getHex()),void 0!==this.emissiveIntensity&&1!==this.emissiveIntensity&&(e.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(e.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(e.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(e.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(e.shininess=this.shininess),void 0!==this.clearcoat&&(e.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(e.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(e.clearcoatMap=this.clearcoatMap.toJSON(l).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(e.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(l).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(e.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(l).uuid,e.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),void 0!==this.dispersion&&(e.dispersion=this.dispersion),void 0!==this.iridescence&&(e.iridescence=this.iridescence),void 0!==this.iridescenceIOR&&(e.iridescenceIOR=this.iridescenceIOR),void 0!==this.iridescenceThicknessRange&&(e.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(e.iridescenceMap=this.iridescenceMap.toJSON(l).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(e.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(l).uuid),void 0!==this.anisotropy&&(e.anisotropy=this.anisotropy),void 0!==this.anisotropyRotation&&(e.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(e.anisotropyMap=this.anisotropyMap.toJSON(l).uuid),this.map&&this.map.isTexture&&(e.map=this.map.toJSON(l).uuid),this.matcap&&this.matcap.isTexture&&(e.matcap=this.matcap.toJSON(l).uuid),this.alphaMap&&this.alphaMap.isTexture&&(e.alphaMap=this.alphaMap.toJSON(l).uuid),this.lightMap&&this.lightMap.isTexture&&(e.lightMap=this.lightMap.toJSON(l).uuid,e.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(e.aoMap=this.aoMap.toJSON(l).uuid,e.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(e.bumpMap=this.bumpMap.toJSON(l).uuid,e.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(e.normalMap=this.normalMap.toJSON(l).uuid,e.normalMapType=this.normalMapType,e.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(e.displacementMap=this.displacementMap.toJSON(l).uuid,e.displacementScale=this.displacementScale,e.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(e.roughnessMap=this.roughnessMap.toJSON(l).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(e.metalnessMap=this.metalnessMap.toJSON(l).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(e.emissiveMap=this.emissiveMap.toJSON(l).uuid),this.specularMap&&this.specularMap.isTexture&&(e.specularMap=this.specularMap.toJSON(l).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(e.specularIntensityMap=this.specularIntensityMap.toJSON(l).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(e.specularColorMap=this.specularColorMap.toJSON(l).uuid),this.envMap&&this.envMap.isTexture&&(e.envMap=this.envMap.toJSON(l).uuid,void 0!==this.combine&&(e.combine=this.combine)),void 0!==this.envMapRotation&&(e.envMapRotation=this.envMapRotation.toArray()),void 0!==this.envMapIntensity&&(e.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(e.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(e.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(e.gradientMap=this.gradientMap.toJSON(l).uuid),void 0!==this.transmission&&(e.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(e.transmissionMap=this.transmissionMap.toJSON(l).uuid),void 0!==this.thickness&&(e.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(e.thicknessMap=this.thicknessMap.toJSON(l).uuid),void 0!==this.attenuationDistance&&this.attenuationDistance!==1/0&&(e.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(e.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(e.size=this.size),null!==this.shadowSide&&(e.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(e.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(e.blending=this.blending),0!==this.side&&(e.side=this.side),!0===this.vertexColors&&(e.vertexColors=!0),this.opacity<1&&(e.opacity=this.opacity),!0===this.transparent&&(e.transparent=!0),204!==this.blendSrc&&(e.blendSrc=this.blendSrc),205!==this.blendDst&&(e.blendDst=this.blendDst),this.blendEquation!==s&&(e.blendEquation=this.blendEquation),null!==this.blendSrcAlpha&&(e.blendSrcAlpha=this.blendSrcAlpha),null!==this.blendDstAlpha&&(e.blendDstAlpha=this.blendDstAlpha),null!==this.blendEquationAlpha&&(e.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(e.blendColor=this.blendColor.getHex()),0!==this.blendAlpha&&(e.blendAlpha=this.blendAlpha),3!==this.depthFunc&&(e.depthFunc=this.depthFunc),!1===this.depthTest&&(e.depthTest=this.depthTest),!1===this.depthWrite&&(e.depthWrite=this.depthWrite),!1===this.colorWrite&&(e.colorWrite=this.colorWrite),255!==this.stencilWriteMask&&(e.stencilWriteMask=this.stencilWriteMask),519!==this.stencilFunc&&(e.stencilFunc=this.stencilFunc),0!==this.stencilRef&&(e.stencilRef=this.stencilRef),255!==this.stencilFuncMask&&(e.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==xl&&(e.stencilFail=this.stencilFail),this.stencilZFail!==xl&&(e.stencilZFail=this.stencilZFail),this.stencilZPass!==xl&&(e.stencilZPass=this.stencilZPass),!0===this.stencilWrite&&(e.stencilWrite=this.stencilWrite),void 0!==this.rotation&&0!==this.rotation&&(e.rotation=this.rotation),!0===this.polygonOffset&&(e.polygonOffset=!0),0!==this.polygonOffsetFactor&&(e.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(e.polygonOffsetUnits=this.polygonOffsetUnits),void 0!==this.linewidth&&1!==this.linewidth&&(e.linewidth=this.linewidth),void 0!==this.dashSize&&(e.dashSize=this.dashSize),void 0!==this.gapSize&&(e.gapSize=this.gapSize),void 0!==this.scale&&(e.scale=this.scale),!0===this.dithering&&(e.dithering=!0),this.alphaTest>0&&(e.alphaTest=this.alphaTest),!0===this.alphaHash&&(e.alphaHash=!0),!0===this.alphaToCoverage&&(e.alphaToCoverage=!0),!0===this.premultipliedAlpha&&(e.premultipliedAlpha=!0),!0===this.forceSinglePass&&(e.forceSinglePass=!0),!0===this.wireframe&&(e.wireframe=!0),this.wireframeLinewidth>1&&(e.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(e.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(e.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(e.flatShading=!0),!1===this.visible&&(e.visible=!1),!1===this.toneMapped&&(e.toneMapped=!1),!1===this.fog&&(e.fog=!1),Object.keys(this.userData).length>0&&(e.userData=this.userData),t){const t=n(l.textures),i=n(l.images);t.length>0&&(e.textures=t),i.length>0&&(e.images=i)}return e}clone(){return(new this.constructor).copy(this)}copy(l){this.name=l.name,this.blending=l.blending,this.side=l.side,this.vertexColors=l.vertexColors,this.opacity=l.opacity,this.transparent=l.transparent,this.blendSrc=l.blendSrc,this.blendDst=l.blendDst,this.blendEquation=l.blendEquation,this.blendSrcAlpha=l.blendSrcAlpha,this.blendDstAlpha=l.blendDstAlpha,this.blendEquationAlpha=l.blendEquationAlpha,this.blendColor.copy(l.blendColor),this.blendAlpha=l.blendAlpha,this.depthFunc=l.depthFunc,this.depthTest=l.depthTest,this.depthWrite=l.depthWrite,this.stencilWriteMask=l.stencilWriteMask,this.stencilFunc=l.stencilFunc,this.stencilRef=l.stencilRef,this.stencilFuncMask=l.stencilFuncMask,this.stencilFail=l.stencilFail,this.stencilZFail=l.stencilZFail,this.stencilZPass=l.stencilZPass,this.stencilWrite=l.stencilWrite;const t=l.clippingPlanes;let e=null;if(null!==t){const l=t.length;e=new Array(l);for(let n=0;n!==l;++n)e[n]=t[n].clone()}return this.clippingPlanes=e,this.clipIntersection=l.clipIntersection,this.clipShadows=l.clipShadows,this.shadowSide=l.shadowSide,this.colorWrite=l.colorWrite,this.precision=l.precision,this.polygonOffset=l.polygonOffset,this.polygonOffsetFactor=l.polygonOffsetFactor,this.polygonOffsetUnits=l.polygonOffsetUnits,this.dithering=l.dithering,this.alphaTest=l.alphaTest,this.alphaHash=l.alphaHash,this.alphaToCoverage=l.alphaToCoverage,this.premultipliedAlpha=l.premultipliedAlpha,this.forceSinglePass=l.forceSinglePass,this.visible=l.visible,this.toneMapped=l.toneMapped,this.userData=JSON.parse(JSON.stringify(l.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(l){!0===l&&this.version++}}class ze extends Fe{constructor(l){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new Ie(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new ee,this.combine=b,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(l)}copy(l){return super.copy(l),this.color.copy(l.color),this.map=l.map,this.lightMap=l.lightMap,this.lightMapIntensity=l.lightMapIntensity,this.aoMap=l.aoMap,this.aoMapIntensity=l.aoMapIntensity,this.specularMap=l.specularMap,this.alphaMap=l.alphaMap,this.envMap=l.envMap,this.envMapRotation.copy(l.envMapRotation),this.combine=l.combine,this.reflectivity=l.reflectivity,this.refractionRatio=l.refractionRatio,this.wireframe=l.wireframe,this.wireframeLinewidth=l.wireframeLinewidth,this.wireframeLinecap=l.wireframeLinecap,this.wireframeLinejoin=l.wireframeLinejoin,this.fog=l.fog,this}}const Be=new ft,Ve=new kl;class He{constructor(l,t,e=!1){if(Array.isArray(l))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=l,this.itemSize=t,this.count=void 0!==l?l.length/t:0,this.normalized=e,this.usage=35044,this._updateRange={offset:0,count:-1},this.updateRanges=[],this.gpuType=K,this.version=0}onUploadCallback(){}set needsUpdate(l){!0===l&&this.version++}get updateRange(){return(l="THREE.BufferAttribute: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead.")in Jl||(Jl[l]=!0,console.warn(l)),this._updateRange;var l}setUsage(l){return this.usage=l,this}addUpdateRange(l,t){this.updateRanges.push({start:l,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(l){return this.name=l.name,this.array=new l.array.constructor(l.array),this.itemSize=l.itemSize,this.count=l.count,this.normalized=l.normalized,this.usage=l.usage,this.gpuType=l.gpuType,this}copyAt(l,t,e){l*=this.itemSize,e*=t.itemSize;for(let n=0,i=this.itemSize;n<i;n++)this.array[l+n]=t.array[e+n];return this}copyArray(l){return this.array.set(l),this}applyMatrix3(l){if(2===this.itemSize)for(let t=0,e=this.count;t<e;t++)Ve.fromBufferAttribute(this,t),Ve.applyMatrix3(l),this.setXY(t,Ve.x,Ve.y);else if(3===this.itemSize)for(let t=0,e=this.count;t<e;t++)Be.fromBufferAttribute(this,t),Be.applyMatrix3(l),this.setXYZ(t,Be.x,Be.y,Be.z);return this}applyMatrix4(l){for(let t=0,e=this.count;t<e;t++)Be.fromBufferAttribute(this,t),Be.applyMatrix4(l),this.setXYZ(t,Be.x,Be.y,Be.z);return this}applyNormalMatrix(l){for(let t=0,e=this.count;t<e;t++)Be.fromBufferAttribute(this,t),Be.applyNormalMatrix(l),this.setXYZ(t,Be.x,Be.y,Be.z);return this}transformDirection(l){for(let t=0,e=this.count;t<e;t++)Be.fromBufferAttribute(this,t),Be.transformDirection(l),this.setXYZ(t,Be.x,Be.y,Be.z);return this}set(l,t=0){return this.array.set(l,t),this}getComponent(l,t){let e=this.array[l*this.itemSize+t];return this.normalized&&(e=Bl(e,this.array)),e}setComponent(l,t,e){return this.normalized&&(e=Vl(e,this.array)),this.array[l*this.itemSize+t]=e,this}getX(l){let t=this.array[l*this.itemSize];return this.normalized&&(t=Bl(t,this.array)),t}setX(l,t){return this.normalized&&(t=Vl(t,this.array)),this.array[l*this.itemSize]=t,this}getY(l){let t=this.array[l*this.itemSize+1];return this.normalized&&(t=Bl(t,this.array)),t}setY(l,t){return this.normalized&&(t=Vl(t,this.array)),this.array[l*this.itemSize+1]=t,this}getZ(l){let t=this.array[l*this.itemSize+2];return this.normalized&&(t=Bl(t,this.array)),t}setZ(l,t){return this.normalized&&(t=Vl(t,this.array)),this.array[l*this.itemSize+2]=t,this}getW(l){let t=this.array[l*this.itemSize+3];return this.normalized&&(t=Bl(t,this.array)),t}setW(l,t){return this.normalized&&(t=Vl(t,this.array)),this.array[l*this.itemSize+3]=t,this}setXY(l,t,e){return l*=this.itemSize,this.normalized&&(t=Vl(t,this.array),e=Vl(e,this.array)),this.array[l+0]=t,this.array[l+1]=e,this}setXYZ(l,t,e,n){return l*=this.itemSize,this.normalized&&(t=Vl(t,this.array),e=Vl(e,this.array),n=Vl(n,this.array)),this.array[l+0]=t,this.array[l+1]=e,this.array[l+2]=n,this}setXYZW(l,t,e,n,i){return l*=this.itemSize,this.normalized&&(t=Vl(t,this.array),e=Vl(e,this.array),n=Vl(n,this.array),i=Vl(i,this.array)),this.array[l+0]=t,this.array[l+1]=e,this.array[l+2]=n,this.array[l+3]=i,this}onUpload(l){return this.onUploadCallback=l,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const l={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return""!==this.name&&(l.name=this.name),35044!==this.usage&&(l.usage=this.usage),l}}class ke extends He{constructor(l,t,e){super(new Uint16Array(l),t,e)}}class Ge extends He{constructor(l,t,e){super(new Uint32Array(l),t,e)}}class We extends He{constructor(l,t,e){super(new Float32Array(l),t,e)}}let Xe=0;const je=new Xt,Ye=new ve,Je=new ft,Ze=new vt,Ke=new vt,$e=new ft;class Qe extends Ll{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:Xe++}),this.uuid=Dl(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(l){return Array.isArray(l)?this.index=new(Xl(l)?Ge:ke)(l,1):this.index=l,this}getAttribute(l){return this.attributes[l]}setAttribute(l,t){return this.attributes[l]=t,this}deleteAttribute(l){return delete this.attributes[l],this}hasAttribute(l){return void 0!==this.attributes[l]}addGroup(l,t,e=0){this.groups.push({start:l,count:t,materialIndex:e})}clearGroups(){this.groups=[]}setDrawRange(l,t){this.drawRange.start=l,this.drawRange.count=t}applyMatrix4(l){const t=this.attributes.position;void 0!==t&&(t.applyMatrix4(l),t.needsUpdate=!0);const e=this.attributes.normal;if(void 0!==e){const t=(new Gl).getNormalMatrix(l);e.applyNormalMatrix(t),e.needsUpdate=!0}const n=this.attributes.tangent;return void 0!==n&&(n.transformDirection(l),n.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(l){return je.makeRotationFromQuaternion(l),this.applyMatrix4(je),this}rotateX(l){return je.makeRotationX(l),this.applyMatrix4(je),this}rotateY(l){return je.makeRotationY(l),this.applyMatrix4(je),this}rotateZ(l){return je.makeRotationZ(l),this.applyMatrix4(je),this}translate(l,t,e){return je.makeTranslation(l,t,e),this.applyMatrix4(je),this}scale(l,t,e){return je.makeScale(l,t,e),this.applyMatrix4(je),this}lookAt(l){return Ye.lookAt(l),Ye.updateMatrix(),this.applyMatrix4(Ye.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Je).negate(),this.translate(Je.x,Je.y,Je.z),this}setFromPoints(l){const t=[];for(let e=0,n=l.length;e<n;e++){const n=l[e];t.push(n.x,n.y,n.z||0)}return this.setAttribute("position",new We(t,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new vt);const l=this.attributes.position,t=this.morphAttributes.position;if(l&&l.isGLBufferAttribute)return console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),void this.boundingBox.set(new ft(-1/0,-1/0,-1/0),new ft(1/0,1/0,1/0));if(void 0!==l){if(this.boundingBox.setFromBufferAttribute(l),t)for(let l=0,e=t.length;l<e;l++){const e=t[l];Ze.setFromBufferAttribute(e),this.morphTargetsRelative?($e.addVectors(this.boundingBox.min,Ze.min),this.boundingBox.expandByPoint($e),$e.addVectors(this.boundingBox.max,Ze.max),this.boundingBox.expandByPoint($e)):(this.boundingBox.expandByPoint(Ze.min),this.boundingBox.expandByPoint(Ze.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new Ot);const l=this.attributes.position,t=this.morphAttributes.position;if(l&&l.isGLBufferAttribute)return console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),void this.boundingSphere.set(new ft,1/0);if(l){const e=this.boundingSphere.center;if(Ze.setFromBufferAttribute(l),t)for(let l=0,e=t.length;l<e;l++){const e=t[l];Ke.setFromBufferAttribute(e),this.morphTargetsRelative?($e.addVectors(Ze.min,Ke.min),Ze.expandByPoint($e),$e.addVectors(Ze.max,Ke.max),Ze.expandByPoint($e)):(Ze.expandByPoint(Ke.min),Ze.expandByPoint(Ke.max))}Ze.getCenter(e);let n=0;for(let t=0,i=l.count;t<i;t++)$e.fromBufferAttribute(l,t),n=Math.max(n,e.distanceToSquared($e));if(t)for(let i=0,r=t.length;i<r;i++){const r=t[i],a=this.morphTargetsRelative;for(let t=0,i=r.count;t<i;t++)$e.fromBufferAttribute(r,t),a&&(Je.fromBufferAttribute(l,t),$e.add(Je)),n=Math.max(n,e.distanceToSquared($e))}this.boundingSphere.radius=Math.sqrt(n),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const l=this.index,t=this.attributes;if(null===l||void 0===t.position||void 0===t.normal||void 0===t.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const e=t.position,n=t.normal,i=t.uv;!1===this.hasAttribute("tangent")&&this.setAttribute("tangent",new He(new Float32Array(4*e.count),4));const r=this.getAttribute("tangent"),a=[],q=[];for(let l=0;l<e.count;l++)a[l]=new ft,q[l]=new ft;const s=new ft,o=new ft,c=new ft,m=new kl,h=new kl,u=new kl,d=new ft,p=new ft;function f(l,t,n){s.fromBufferAttribute(e,l),o.fromBufferAttribute(e,t),c.fromBufferAttribute(e,n),m.fromBufferAttribute(i,l),h.fromBufferAttribute(i,t),u.fromBufferAttribute(i,n),o.sub(s),c.sub(s),h.sub(m),u.sub(m);const r=1/(h.x*u.y-u.x*h.y);isFinite(r)&&(d.copy(o).multiplyScalar(u.y).addScaledVector(c,-h.y).multiplyScalar(r),p.copy(c).multiplyScalar(h.x).addScaledVector(o,-u.x).multiplyScalar(r),a[l].add(d),a[t].add(d),a[n].add(d),q[l].add(p),q[t].add(p),q[n].add(p))}let g=this.groups;0===g.length&&(g=[{start:0,count:l.count}]);for(let t=0,e=g.length;t<e;++t){const e=g[t],n=e.start;for(let t=n,i=n+e.count;t<i;t+=3)f(l.getX(t+0),l.getX(t+1),l.getX(t+2))}const _=new ft,v=new ft,x=new ft,y=new ft;function M(l){x.fromBufferAttribute(n,l),y.copy(x);const t=a[l];_.copy(t),_.sub(x.multiplyScalar(x.dot(t))).normalize(),v.crossVectors(y,t);const e=v.dot(q[l])<0?-1:1;r.setXYZW(l,_.x,_.y,_.z,e)}for(let t=0,e=g.length;t<e;++t){const e=g[t],n=e.start;for(let t=n,i=n+e.count;t<i;t+=3)M(l.getX(t+0)),M(l.getX(t+1)),M(l.getX(t+2))}}computeVertexNormals(){const l=this.index,t=this.getAttribute("position");if(void 0!==t){let e=this.getAttribute("normal");if(void 0===e)e=new He(new Float32Array(3*t.count),3),this.setAttribute("normal",e);else for(let l=0,t=e.count;l<t;l++)e.setXYZ(l,0,0,0);const n=new ft,i=new ft,r=new ft,a=new ft,q=new ft,s=new ft,o=new ft,c=new ft;if(l)for(let m=0,h=l.count;m<h;m+=3){const h=l.getX(m+0),u=l.getX(m+1),d=l.getX(m+2);n.fromBufferAttribute(t,h),i.fromBufferAttribute(t,u),r.fromBufferAttribute(t,d),o.subVectors(r,i),c.subVectors(n,i),o.cross(c),a.fromBufferAttribute(e,h),q.fromBufferAttribute(e,u),s.fromBufferAttribute(e,d),a.add(o),q.add(o),s.add(o),e.setXYZ(h,a.x,a.y,a.z),e.setXYZ(u,q.x,q.y,q.z),e.setXYZ(d,s.x,s.y,s.z)}else for(let l=0,a=t.count;l<a;l+=3)n.fromBufferAttribute(t,l+0),i.fromBufferAttribute(t,l+1),r.fromBufferAttribute(t,l+2),o.subVectors(r,i),c.subVectors(n,i),o.cross(c),e.setXYZ(l+0,o.x,o.y,o.z),e.setXYZ(l+1,o.x,o.y,o.z),e.setXYZ(l+2,o.x,o.y,o.z);this.normalizeNormals(),e.needsUpdate=!0}}normalizeNormals(){const l=this.attributes.normal;for(let t=0,e=l.count;t<e;t++)$e.fromBufferAttribute(l,t),$e.normalize(),l.setXYZ(t,$e.x,$e.y,$e.z)}toNonIndexed(){function l(l,t){const e=l.array,n=l.itemSize,i=l.normalized,r=new e.constructor(t.length*n);let a=0,q=0;for(let i=0,s=t.length;i<s;i++){a=l.isInterleavedBufferAttribute?t[i]*l.data.stride+l.offset:t[i]*n;for(let l=0;l<n;l++)r[q++]=e[a++]}return new He(r,n,i)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new Qe,e=this.index.array,n=this.attributes;for(const i in n){const r=l(n[i],e);t.setAttribute(i,r)}const i=this.morphAttributes;for(const n in i){const r=[],a=i[n];for(let t=0,n=a.length;t<n;t++){const n=l(a[t],e);r.push(n)}t.morphAttributes[n]=r}t.morphTargetsRelative=this.morphTargetsRelative;const r=this.groups;for(let l=0,e=r.length;l<e;l++){const e=r[l];t.addGroup(e.start,e.count,e.materialIndex)}return t}toJSON(){const l={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(l.uuid=this.uuid,l.type=this.type,""!==this.name&&(l.name=this.name),Object.keys(this.userData).length>0&&(l.userData=this.userData),void 0!==this.parameters){const t=this.parameters;for(const e in t)void 0!==t[e]&&(l[e]=t[e]);return l}l.data={attributes:{}};const t=this.index;null!==t&&(l.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const e=this.attributes;for(const t in e){const n=e[t];l.data.attributes[t]=n.toJSON(l.data)}const n={};let i=!1;for(const t in this.morphAttributes){const e=this.morphAttributes[t],r=[];for(let t=0,n=e.length;t<n;t++){const n=e[t];r.push(n.toJSON(l.data))}r.length>0&&(n[t]=r,i=!0)}i&&(l.data.morphAttributes=n,l.data.morphTargetsRelative=this.morphTargetsRelative);const r=this.groups;r.length>0&&(l.data.groups=JSON.parse(JSON.stringify(r)));const a=this.boundingSphere;return null!==a&&(l.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),l}clone(){return(new this.constructor).copy(this)}copy(l){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=l.name;const e=l.index;null!==e&&this.setIndex(e.clone(t));const n=l.attributes;for(const l in n){const e=n[l];this.setAttribute(l,e.clone(t))}const i=l.morphAttributes;for(const l in i){const e=[],n=i[l];for(let l=0,i=n.length;l<i;l++)e.push(n[l].clone(t));this.morphAttributes[l]=e}this.morphTargetsRelative=l.morphTargetsRelative;const r=l.groups;for(let l=0,t=r.length;l<t;l++){const t=r[l];this.addGroup(t.start,t.count,t.materialIndex)}const a=l.boundingBox;null!==a&&(this.boundingBox=a.clone());const q=l.boundingSphere;return null!==q&&(this.boundingSphere=q.clone()),this.drawRange.start=l.drawRange.start,this.drawRange.count=l.drawRange.count,this.userData=l.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const ln=new Xt,tn=new Wt,en=new Ot,nn=new ft,rn=new ft,an=new ft,qn=new ft,sn=new ft,on=new ft,cn=new kl,mn=new kl,hn=new kl,un=new ft,dn=new ft,pn=new ft,fn=new ft,gn=new ft;class _n extends ve{constructor(l=new Qe,t=new ze){super(),this.isMesh=!0,this.type="Mesh",this.geometry=l,this.material=t,this.updateMorphTargets()}copy(l,t){return super.copy(l,t),void 0!==l.morphTargetInfluences&&(this.morphTargetInfluences=l.morphTargetInfluences.slice()),void 0!==l.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},l.morphTargetDictionary)),this.material=Array.isArray(l.material)?l.material.slice():l.material,this.geometry=l.geometry,this}updateMorphTargets(){const l=this.geometry.morphAttributes,t=Object.keys(l);if(t.length>0){const e=l[t[0]];if(void 0!==e){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let l=0,t=e.length;l<t;l++){const t=e[l].name||String(l);this.morphTargetInfluences.push(0),this.morphTargetDictionary[t]=l}}}}getVertexPosition(l,t){const e=this.geometry,n=e.attributes.position,i=e.morphAttributes.position,r=e.morphTargetsRelative;t.fromBufferAttribute(n,l);const a=this.morphTargetInfluences;if(i&&a){on.set(0,0,0);for(let e=0,n=i.length;e<n;e++){const n=a[e],q=i[e];0!==n&&(sn.fromBufferAttribute(q,l),r?on.addScaledVector(sn,n):on.addScaledVector(sn.sub(t),n))}t.add(on)}return t}raycast(l,t){const e=this.geometry,n=this.material,i=this.matrixWorld;if(void 0!==n){if(null===e.boundingSphere&&e.computeBoundingSphere(),en.copy(e.boundingSphere),en.applyMatrix4(i),tn.copy(l.ray).recast(l.near),!1===en.containsPoint(tn.origin)){if(null===tn.intersectSphere(en,nn))return;if(tn.origin.distanceToSquared(nn)>(l.far-l.near)**2)return}ln.copy(i).invert(),tn.copy(l.ray).applyMatrix4(ln),null!==e.boundingBox&&!1===tn.intersectsBox(e.boundingBox)||this._computeIntersections(l,t,tn)}}_computeIntersections(l,t,e){let n;const i=this.geometry,r=this.material,a=i.index,q=i.attributes.position,s=i.attributes.uv,o=i.attributes.uv1,c=i.attributes.normal,m=i.groups,h=i.drawRange;if(null!==a)if(Array.isArray(r))for(let i=0,q=m.length;i<q;i++){const q=m[i],u=r[q.materialIndex];for(let i=Math.max(q.start,h.start),r=Math.min(a.count,Math.min(q.start+q.count,h.start+h.count));i<r;i+=3)n=vn(this,u,l,e,s,o,c,a.getX(i),a.getX(i+1),a.getX(i+2)),n&&(n.faceIndex=Math.floor(i/3),n.face.materialIndex=q.materialIndex,t.push(n))}else for(let i=Math.max(0,h.start),q=Math.min(a.count,h.start+h.count);i<q;i+=3)n=vn(this,r,l,e,s,o,c,a.getX(i),a.getX(i+1),a.getX(i+2)),n&&(n.faceIndex=Math.floor(i/3),t.push(n));else if(void 0!==q)if(Array.isArray(r))for(let i=0,a=m.length;i<a;i++){const a=m[i],u=r[a.materialIndex];for(let i=Math.max(a.start,h.start),r=Math.min(q.count,Math.min(a.start+a.count,h.start+h.count));i<r;i+=3)n=vn(this,u,l,e,s,o,c,i,i+1,i+2),n&&(n.faceIndex=Math.floor(i/3),n.face.materialIndex=a.materialIndex,t.push(n))}else for(let i=Math.max(0,h.start),a=Math.min(q.count,h.start+h.count);i<a;i+=3)n=vn(this,r,l,e,s,o,c,i,i+1,i+2),n&&(n.faceIndex=Math.floor(i/3),t.push(n))}}function vn(l,t,e,n,i,r,a,q,s,o){l.getVertexPosition(q,rn),l.getVertexPosition(s,an),l.getVertexPosition(o,qn);const c=function(l,t,e,n,i,r,a,q){let s;if(s=1===t.side?n.intersectTriangle(a,r,i,!0,q):n.intersectTriangle(i,r,a,0===t.side,q),null===s)return null;gn.copy(q),gn.applyMatrix4(l.matrixWorld);const o=e.ray.origin.distanceTo(gn);return o<e.near||o>e.far?null:{distance:o,point:gn.clone(),object:l}}(l,t,e,n,rn,an,qn,fn);if(c){i&&(cn.fromBufferAttribute(i,q),mn.fromBufferAttribute(i,s),hn.fromBufferAttribute(i,o),c.uv=Ce.getInterpolation(fn,rn,an,qn,cn,mn,hn,new kl)),r&&(cn.fromBufferAttribute(r,q),mn.fromBufferAttribute(r,s),hn.fromBufferAttribute(r,o),c.uv1=Ce.getInterpolation(fn,rn,an,qn,cn,mn,hn,new kl)),a&&(un.fromBufferAttribute(a,q),dn.fromBufferAttribute(a,s),pn.fromBufferAttribute(a,o),c.normal=Ce.getInterpolation(fn,rn,an,qn,un,dn,pn,new ft),c.normal.dot(n.direction)>0&&c.normal.multiplyScalar(-1));const l={a:q,b:s,c:o,normal:new ft,materialIndex:0};Ce.getNormal(rn,an,qn,l.normal),c.face=l}return c}class xn extends Qe{constructor(l=1,t=1,e=1,n=1,i=1,r=1){super(),this.type="BoxGeometry",this.parameters={width:l,height:t,depth:e,widthSegments:n,heightSegments:i,depthSegments:r};const a=this;n=Math.floor(n),i=Math.floor(i),r=Math.floor(r);const q=[],s=[],o=[],c=[];let m=0,h=0;function u(l,t,e,n,i,r,u,d,p,f,g){const _=r/p,v=u/f,x=r/2,y=u/2,M=d/2,S=p+1,E=f+1;let T=0,b=0;const w=new ft;for(let r=0;r<E;r++){const a=r*v-y;for(let q=0;q<S;q++){const m=q*_-x;w[l]=m*n,w[t]=a*i,w[e]=M,s.push(w.x,w.y,w.z),w[l]=0,w[t]=0,w[e]=d>0?1:-1,o.push(w.x,w.y,w.z),c.push(q/p),c.push(1-r/f),T+=1}}for(let l=0;l<f;l++)for(let t=0;t<p;t++){const e=m+t+S*l,n=m+t+S*(l+1),i=m+(t+1)+S*(l+1),r=m+(t+1)+S*l;q.push(e,n,r),q.push(n,i,r),b+=6}a.addGroup(h,b,g),h+=b,m+=T}u("z","y","x",-1,-1,e,t,l,r,i,0),u("z","y","x",1,-1,e,t,-l,r,i,1),u("x","z","y",1,1,l,e,t,n,r,2),u("x","z","y",1,-1,l,e,-t,n,r,3),u("x","y","z",1,-1,l,t,e,n,i,4),u("x","y","z",-1,-1,l,t,-e,n,i,5),this.setIndex(q),this.setAttribute("position",new We(s,3)),this.setAttribute("normal",new We(o,3)),this.setAttribute("uv",new We(c,2))}copy(l){return super.copy(l),this.parameters=Object.assign({},l.parameters),this}static fromJSON(l){return new xn(l.width,l.height,l.depth,l.widthSegments,l.heightSegments,l.depthSegments)}}function yn(l){const t={};for(const e in l){t[e]={};for(const n in l[e]){const i=l[e][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)?i.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[e][n]=null):t[e][n]=i.clone():Array.isArray(i)?t[e][n]=i.slice():t[e][n]=i}}return t}function Mn(l){const t={};for(let e=0;e<l.length;e++){const n=yn(l[e]);for(const l in n)t[l]=n[l]}return t}function Sn(l){const t=l.getRenderTarget();return null===t?l.outputColorSpace:!0===t.isXRRenderTarget?t.texture.colorSpace:lt.workingColorSpace}const En={clone:yn,merge:Mn};class Tn extends Fe{constructor(l){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==l&&this.setValues(l)}copy(l){return super.copy(l),this.fragmentShader=l.fragmentShader,this.vertexShader=l.vertexShader,this.uniforms=yn(l.uniforms),this.uniformsGroups=function(l){const t=[];for(let e=0;e<l.length;e++)t.push(l[e].clone());return t}(l.uniformsGroups),this.defines=Object.assign({},l.defines),this.wireframe=l.wireframe,this.wireframeLinewidth=l.wireframeLinewidth,this.fog=l.fog,this.lights=l.lights,this.clipping=l.clipping,this.extensions=Object.assign({},l.extensions),this.glslVersion=l.glslVersion,this}toJSON(l){const t=super.toJSON(l);t.glslVersion=this.glslVersion,t.uniforms={};for(const e in this.uniforms){const n=this.uniforms[e].value;n&&n.isTexture?t.uniforms[e]={type:"t",value:n.toJSON(l).uuid}:n&&n.isColor?t.uniforms[e]={type:"c",value:n.getHex()}:n&&n.isVector2?t.uniforms[e]={type:"v2",value:n.toArray()}:n&&n.isVector3?t.uniforms[e]={type:"v3",value:n.toArray()}:n&&n.isVector4?t.uniforms[e]={type:"v4",value:n.toArray()}:n&&n.isMatrix3?t.uniforms[e]={type:"m3",value:n.toArray()}:n&&n.isMatrix4?t.uniforms[e]={type:"m4",value:n.toArray()}:t.uniforms[e]={value:n}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t.lights=this.lights,t.clipping=this.clipping;const e={};for(const l in this.extensions)!0===this.extensions[l]&&(e[l]=!0);return Object.keys(e).length>0&&(t.extensions=e),t}}class bn extends ve{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new Xt,this.projectionMatrix=new Xt,this.projectionMatrixInverse=new Xt,this.coordinateSystem=Cl}copy(l,t){return super.copy(l,t),this.matrixWorldInverse.copy(l.matrixWorldInverse),this.projectionMatrix.copy(l.projectionMatrix),this.projectionMatrixInverse.copy(l.projectionMatrixInverse),this.coordinateSystem=l.coordinateSystem,this}getWorldDirection(l){return super.getWorldDirection(l).negate()}updateMatrixWorld(l){super.updateMatrixWorld(l),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(l,t){super.updateWorldMatrix(l,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}const wn=new ft,An=new kl,Rn=new kl;class Cn extends bn{constructor(l=50,t=1,e=.1,n=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=l,this.zoom=1,this.near=e,this.far=n,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(l,t){return super.copy(l,t),this.fov=l.fov,this.zoom=l.zoom,this.near=l.near,this.far=l.far,this.focus=l.focus,this.aspect=l.aspect,this.view=null===l.view?null:Object.assign({},l.view),this.filmGauge=l.filmGauge,this.filmOffset=l.filmOffset,this}setFocalLength(l){const t=.5*this.getFilmHeight()/l;this.fov=2*Il*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const l=Math.tan(.5*Nl*this.fov);return.5*this.getFilmHeight()/l}getEffectiveFOV(){return 2*Il*Math.atan(Math.tan(.5*Nl*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(l,t,e){wn.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),t.set(wn.x,wn.y).multiplyScalar(-l/wn.z),wn.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),e.set(wn.x,wn.y).multiplyScalar(-l/wn.z)}getViewSize(l,t){return this.getViewBounds(l,An,Rn),t.subVectors(Rn,An)}setViewOffset(l,t,e,n,i,r){this.aspect=l/t,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=l,this.view.fullHeight=t,this.view.offsetX=e,this.view.offsetY=n,this.view.width=i,this.view.height=r,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const l=this.near;let t=l*Math.tan(.5*Nl*this.fov)/this.zoom,e=2*t,n=this.aspect*e,i=-.5*n;const r=this.view;if(null!==this.view&&this.view.enabled){const l=r.fullWidth,a=r.fullHeight;i+=r.offsetX*n/l,t-=r.offsetY*e/a,n*=r.width/l,e*=r.height/a}const a=this.filmOffset;0!==a&&(i+=l*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(i,i+n,t,t-e,l,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(l){const t=super.toJSON(l);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,null!==this.view&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}const Pn=-90;class Ln extends ve{constructor(l,t,e){super(),this.type="CubeCamera",this.renderTarget=e,this.coordinateSystem=null,this.activeMipmapLevel=0;const n=new Cn(Pn,1,l,t);n.layers=this.layers,this.add(n);const i=new Cn(Pn,1,l,t);i.layers=this.layers,this.add(i);const r=new Cn(Pn,1,l,t);r.layers=this.layers,this.add(r);const a=new Cn(Pn,1,l,t);a.layers=this.layers,this.add(a);const q=new Cn(Pn,1,l,t);q.layers=this.layers,this.add(q);const s=new Cn(Pn,1,l,t);s.layers=this.layers,this.add(s)}updateCoordinateSystem(){const l=this.coordinateSystem,t=this.children.concat(),[e,n,i,r,a,q]=t;for(const l of t)this.remove(l);if(l===Cl)e.up.set(0,1,0),e.lookAt(1,0,0),n.up.set(0,1,0),n.lookAt(-1,0,0),i.up.set(0,0,-1),i.lookAt(0,1,0),r.up.set(0,0,1),r.lookAt(0,-1,0),a.up.set(0,1,0),a.lookAt(0,0,1),q.up.set(0,1,0),q.lookAt(0,0,-1);else{if(l!==Pl)throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+l);e.up.set(0,-1,0),e.lookAt(-1,0,0),n.up.set(0,-1,0),n.lookAt(1,0,0),i.up.set(0,0,1),i.lookAt(0,1,0),r.up.set(0,0,-1),r.lookAt(0,-1,0),a.up.set(0,-1,0),a.lookAt(0,0,1),q.up.set(0,-1,0),q.lookAt(0,0,-1)}for(const l of t)this.add(l),l.updateMatrixWorld()}update(l,t){null===this.parent&&this.updateMatrixWorld();const{renderTarget:e,activeMipmapLevel:n}=this;this.coordinateSystem!==l.coordinateSystem&&(this.coordinateSystem=l.coordinateSystem,this.updateCoordinateSystem());const[i,r,a,q,s,o]=this.children,c=l.getRenderTarget(),m=l.getActiveCubeFace(),h=l.getActiveMipmapLevel(),u=l.xr.enabled;l.xr.enabled=!1;const d=e.texture.generateMipmaps;e.texture.generateMipmaps=!1,l.setRenderTarget(e,0,n),l.render(t,i),l.setRenderTarget(e,1,n),l.render(t,r),l.setRenderTarget(e,2,n),l.render(t,a),l.setRenderTarget(e,3,n),l.render(t,q),l.setRenderTarget(e,4,n),l.render(t,s),e.texture.generateMipmaps=d,l.setRenderTarget(e,5,n),l.render(t,o),l.setRenderTarget(c,m,h),l.xr.enabled=u,e.texture.needsPMREMUpdate=!0}}class Un extends ot{constructor(l,t,e,n,i,r,a,q,s,o){super(l=void 0!==l?l:[],t=void 0!==t?t:O,e,n,i,r,a,q,s,o),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(l){this.image=l}}class Nn extends ht{constructor(l=1,t={}){super(l,l,t),this.isWebGLCubeRenderTarget=!0;const e={width:l,height:l,depth:1},n=[e,e,e,e,e,e];this.texture=new Un(n,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==t.generateMipmaps&&t.generateMipmaps,this.texture.minFilter=void 0!==t.minFilter?t.minFilter:X}fromEquirectangularTexture(l,t){this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const e={tEquirect:{value:null}},n="\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",i="\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t",r=new xn(5,5,5),a=new Tn({name:"CubemapFromEquirect",uniforms:yn(e),vertexShader:n,fragmentShader:i,side:1,blending:0});a.uniforms.tEquirect.value=t;const q=new _n(r,a),s=t.minFilter;return t.minFilter===Y&&(t.minFilter=X),new Ln(1,10,this).update(l,q),t.minFilter=s,q.geometry.dispose(),q.material.dispose(),this}clear(l,t,e,n){const i=l.getRenderTarget();for(let i=0;i<6;i++)l.setRenderTarget(this,i),l.clear(t,e,n);l.setRenderTarget(i)}}const In=new ft,Dn=new ft,On=new Gl;class Fn{constructor(l=new ft(1,0,0),t=0){this.isPlane=!0,this.normal=l,this.constant=t}set(l,t){return this.normal.copy(l),this.constant=t,this}setComponents(l,t,e,n){return this.normal.set(l,t,e),this.constant=n,this}setFromNormalAndCoplanarPoint(l,t){return this.normal.copy(l),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(l,t,e){const n=In.subVectors(e,t).cross(Dn.subVectors(l,t)).normalize();return this.setFromNormalAndCoplanarPoint(n,l),this}copy(l){return this.normal.copy(l.normal),this.constant=l.constant,this}normalize(){const l=1/this.normal.length();return this.normal.multiplyScalar(l),this.constant*=l,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(l){return this.normal.dot(l)+this.constant}distanceToSphere(l){return this.distanceToPoint(l.center)-l.radius}projectPoint(l,t){return t.copy(l).addScaledVector(this.normal,-this.distanceToPoint(l))}intersectLine(l,t){const e=l.delta(In),n=this.normal.dot(e);if(0===n)return 0===this.distanceToPoint(l.start)?t.copy(l.start):null;const i=-(l.start.dot(this.normal)+this.constant)/n;return i<0||i>1?null:t.copy(l.start).addScaledVector(e,i)}intersectsLine(l){const t=this.distanceToPoint(l.start),e=this.distanceToPoint(l.end);return t<0&&e>0||e<0&&t>0}intersectsBox(l){return l.intersectsPlane(this)}intersectsSphere(l){return l.intersectsPlane(this)}coplanarPoint(l){return l.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(l,t){const e=t||On.getNormalMatrix(l),n=this.coplanarPoint(In).applyMatrix4(l),i=this.normal.applyMatrix3(e).normalize();return this.constant=-n.dot(i),this}translate(l){return this.constant-=l.dot(this.normal),this}equals(l){return l.normal.equals(this.normal)&&l.constant===this.constant}clone(){return(new this.constructor).copy(this)}}const zn=new Ot,Bn=new ft;class Vn{constructor(l=new Fn,t=new Fn,e=new Fn,n=new Fn,i=new Fn,r=new Fn){this.planes=[l,t,e,n,i,r]}set(l,t,e,n,i,r){const a=this.planes;return a[0].copy(l),a[1].copy(t),a[2].copy(e),a[3].copy(n),a[4].copy(i),a[5].copy(r),this}copy(l){const t=this.planes;for(let e=0;e<6;e++)t[e].copy(l.planes[e]);return this}setFromProjectionMatrix(l,t=2e3){const e=this.planes,n=l.elements,i=n[0],r=n[1],a=n[2],q=n[3],s=n[4],o=n[5],c=n[6],m=n[7],h=n[8],u=n[9],d=n[10],p=n[11],f=n[12],g=n[13],_=n[14],v=n[15];if(e[0].setComponents(q-i,m-s,p-h,v-f).normalize(),e[1].setComponents(q+i,m+s,p+h,v+f).normalize(),e[2].setComponents(q+r,m+o,p+u,v+g).normalize(),e[3].setComponents(q-r,m-o,p-u,v-g).normalize(),e[4].setComponents(q-a,m-c,p-d,v-_).normalize(),t===Cl)e[5].setComponents(q+a,m+c,p+d,v+_).normalize();else{if(t!==Pl)throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t);e[5].setComponents(a,c,d,_).normalize()}return this}intersectsObject(l){if(void 0!==l.boundingSphere)null===l.boundingSphere&&l.computeBoundingSphere(),zn.copy(l.boundingSphere).applyMatrix4(l.matrixWorld);else{const t=l.geometry;null===t.boundingSphere&&t.computeBoundingSphere(),zn.copy(t.boundingSphere).applyMatrix4(l.matrixWorld)}return this.intersectsSphere(zn)}intersectsSprite(l){return zn.center.set(0,0,0),zn.radius=.7071067811865476,zn.applyMatrix4(l.matrixWorld),this.intersectsSphere(zn)}intersectsSphere(l){const t=this.planes,e=l.center,n=-l.radius;for(let l=0;l<6;l++)if(t[l].distanceToPoint(e)<n)return!1;return!0}intersectsBox(l){const t=this.planes;for(let e=0;e<6;e++){const n=t[e];if(Bn.x=n.normal.x>0?l.max.x:l.min.x,Bn.y=n.normal.y>0?l.max.y:l.min.y,Bn.z=n.normal.z>0?l.max.z:l.min.z,n.distanceToPoint(Bn)<0)return!1}return!0}containsPoint(l){const t=this.planes;for(let e=0;e<6;e++)if(t[e].distanceToPoint(l)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function Hn(){let l=null,t=!1,e=null,n=null;function i(t,r){e(t,r),n=l.requestAnimationFrame(i)}return{start:function(){!0!==t&&null!==e&&(n=l.requestAnimationFrame(i),t=!0)},stop:function(){l.cancelAnimationFrame(n),t=!1},setAnimationLoop:function(l){e=l},setContext:function(t){l=t}}}function kn(l){const t=new WeakMap;return{get:function(l){return l.isInterleavedBufferAttribute&&(l=l.data),t.get(l)},remove:function(e){e.isInterleavedBufferAttribute&&(e=e.data);const n=t.get(e);n&&(l.deleteBuffer(n.buffer),t.delete(e))},update:function(e,n){if(e.isGLBufferAttribute){const l=t.get(e);return void((!l||l.version<e.version)&&t.set(e,{buffer:e.buffer,type:e.type,bytesPerElement:e.elementSize,version:e.version}))}e.isInterleavedBufferAttribute&&(e=e.data);const i=t.get(e);if(void 0===i)t.set(e,function(t,e){const n=t.array,i=t.usage,r=n.byteLength,a=l.createBuffer();let q;if(l.bindBuffer(e,a),l.bufferData(e,n,i),t.onUploadCallback(),n instanceof Float32Array)q=l.FLOAT;else if(n instanceof Uint16Array)q=t.isFloat16BufferAttribute?l.HALF_FLOAT:l.UNSIGNED_SHORT;else if(n instanceof Int16Array)q=l.SHORT;else if(n instanceof Uint32Array)q=l.UNSIGNED_INT;else if(n instanceof Int32Array)q=l.INT;else if(n instanceof Int8Array)q=l.BYTE;else if(n instanceof Uint8Array)q=l.UNSIGNED_BYTE;else{if(!(n instanceof Uint8ClampedArray))throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+n);q=l.UNSIGNED_BYTE}return{buffer:a,type:q,bytesPerElement:n.BYTES_PER_ELEMENT,version:t.version,size:r}}(e,n));else if(i.version<e.version){if(i.size!==e.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");!function(t,e,n){const i=e.array,r=e._updateRange,a=e.updateRanges;if(l.bindBuffer(n,t),-1===r.count&&0===a.length&&l.bufferSubData(n,0,i),0!==a.length){for(let t=0,e=a.length;t<e;t++){const e=a[t];l.bufferSubData(n,e.start*i.BYTES_PER_ELEMENT,i,e.start,e.count)}e.clearUpdateRanges()}-1!==r.count&&(l.bufferSubData(n,r.offset*i.BYTES_PER_ELEMENT,i,r.offset,r.count),r.count=-1),e.onUploadCallback()}(i.buffer,e,n),i.version=e.version}}}}class Gn extends Qe{constructor(l=1,t=1,e=1,n=1){super(),this.type="PlaneGeometry",this.parameters={width:l,height:t,widthSegments:e,heightSegments:n};const i=l/2,r=t/2,a=Math.floor(e),q=Math.floor(n),s=a+1,o=q+1,c=l/a,m=t/q,h=[],u=[],d=[],p=[];for(let l=0;l<o;l++){const t=l*m-r;for(let e=0;e<s;e++){const n=e*c-i;u.push(n,-t,0),d.push(0,0,1),p.push(e/a),p.push(1-l/q)}}for(let l=0;l<q;l++)for(let t=0;t<a;t++){const e=t+s*l,n=t+s*(l+1),i=t+1+s*(l+1),r=t+1+s*l;h.push(e,n,r),h.push(n,i,r)}this.setIndex(h),this.setAttribute("position",new We(u,3)),this.setAttribute("normal",new We(d,3)),this.setAttribute("uv",new We(p,2))}copy(l){return super.copy(l),this.parameters=Object.assign({},l.parameters),this}static fromJSON(l){return new Gn(l.width,l.height,l.widthSegments,l.heightSegments)}}const Wn={alphahash_fragment:"#ifdef USE_ALPHAHASH\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif",alphahash_pars_fragment:"#ifdef USE_ALPHAHASH\n\tconst float ALPHA_HASH_SCALE = 0.05;\n\tfloat hash2D( vec2 value ) {\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\t}\n\tfloat hash3D( vec3 value ) {\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\t}\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\t}\n#endif",alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n\t#ifdef ALPHA_TO_COVERAGE\n\tdiffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\tif ( diffuseColor.a < alphaTest ) discard;\n\t#endif\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_CLEARCOAT ) \n\t\tclearcoatSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_SHEEN ) \n\t\tsheenSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",batching_pars_vertex:"#ifdef USE_BATCHING\n\tattribute float batchId;\n\tuniform highp sampler2D batchingTexture;\n\tmat4 getBatchingMatrix( const in float i ) {\n\t\tint size = textureSize( batchingTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif",batching_vertex:"#ifdef USE_BATCHING\n\tmat4 batchingMatrix = getBatchingMatrix( batchId );\n#endif",begin_vertex:"vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n\tvPosition = vec3( position );\n#endif",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} // validated",iridescence_fragment:"#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\treturn vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n\t\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#ifdef ALPHA_TO_COVERAGE\n\t\tfloat distanceToPlane, distanceGradient;\n\t\tfloat clipOpacity = 1.0;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\tclipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\tif ( clipOpacity == 0.0 ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tfloat unionClipOpacity = 1.0;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\t\tunionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tclipOpacity *= 1.0 - unionClipOpacity;\n\t\t#endif\n\t\tdiffuseColor.a *= clipOpacity;\n\t\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tbool clipped = true;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tif ( clipped ) discard;\n\t\t#endif\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n\tvarying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n\treturn dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n\tmat3 bm = mat3( batchingMatrix );\n\ttransformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n\ttransformedNormal = bm * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = bm * transformedTangent;\n\t#endif\n#endif\n#ifdef USE_INSTANCING\n\tmat3 im = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n\ttransformedNormal = im * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = im * transformedTangent;\n\t#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\ttransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",colorspace_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",colorspace_pars_fragment:"\nconst mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(\n\tvec3( 0.8224621, 0.177538, 0.0 ),\n\tvec3( 0.0331941, 0.9668058, 0.0 ),\n\tvec3( 0.0170827, 0.0723974, 0.9105199 )\n);\nconst mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.2249401, - 0.2249404, 0.0 ),\n\tvec3( - 0.0420569, 1.0420571, 0.0 ),\n\tvec3( - 0.0196376, - 0.0786361, 1.0982735 )\n);\nvec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {\n\treturn vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );\n}\nvec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {\n\treturn vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );\n}\nvec4 LinearTransferOETF( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn sRGBTransferOETF( value );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform mat3 envMapRotation;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_fragment:"LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;",lights_lambert_pars_fragment:"varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n\tuniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( LEGACY_LIGHTS )\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#else\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_DISPERSION\n\tmaterial.dispersion = dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tif( material.anisotropy == 0.0 ) {\n\t\tanisotropyV = vec2( 1.0, 0.0 );\n\t} else {\n\t\tanisotropyV /= material.anisotropy;\n\t\tmaterial.anisotropy = saturate( material.anisotropy );\n\t}\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\tfloat dispersion;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometryNormal;\n\t\tvec3 viewDir = geometryViewDir;\n\t\tvec3 position = geometryPosition;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n\tgeometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometryPosition, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if defined( USE_LIGHT_PROBES )\n\t\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometryNormal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF )\n\tgl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\tvFragDepth = 1.0 + gl_Position.w;\n\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphinstance_vertex:"#ifdef USE_INSTANCING_MORPH\n\tfloat morphTargetInfluences[MORPHTARGETS_COUNT];\n\tfloat morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tmorphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n\t}\n#endif",morphcolor_vertex:"#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_INSTANCING_MORPH\n\t\tuniform float morphTargetBaseInfluence;\n\t#endif\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\t#ifndef USE_INSTANCING_MORPH\n\t\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\t#endif\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 nonPerturbedNormal = normal;",normal_fragment_maps:"#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = nonPerturbedNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif",iridescence_pars_fragment:"#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif",opaque_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n\treturn packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n\treturn unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n\tmvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tfloat shadow = 1.0;\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\t\n\t\tfloat lightToPositionLength = length( lightToPosition );\n\t\tif ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\n\t\t\tfloat dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\t\tdp += shadowBias;\n\t\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\t\tshadow = (\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t\t) * ( 1.0 / 9.0 );\n\t\t\t#else\n\t\t\t\tshadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n#endif",shadowmap_pars_vertex:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tint size = textureSize( boneTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.6605, - 0.1246, - 0.0182 ),\n\tvec3( - 0.5876, 1.1329, - 0.1006 ),\n\tvec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n\tvec3( 0.6274, 0.0691, 0.0164 ),\n\tvec3( 0.3293, 0.9195, 0.0880 ),\n\tvec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n\tvec3 x2 = x * x;\n\tvec3 x4 = x2 * x2;\n\treturn + 15.5 * x4 * x2\n\t\t- 40.14 * x4 * x\n\t\t+ 31.96 * x4\n\t\t- 6.868 * x2 * x\n\t\t+ 0.4298 * x2\n\t\t+ 0.1191 * x\n\t\t- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n\tconst mat3 AgXInsetMatrix = mat3(\n\t\tvec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n\t\tvec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n\t\tvec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n\t);\n\tconst mat3 AgXOutsetMatrix = mat3(\n\t\tvec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n\t\tvec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n\t\tvec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n\t);\n\tconst float AgxMinEv = - 12.47393;\tconst float AgxMaxEv = 4.026069;\n\tcolor *= toneMappingExposure;\n\tcolor = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n\tcolor = AgXInsetMatrix * color;\n\tcolor = max( color, 1e-10 );\tcolor = log2( color );\n\tcolor = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n\tcolor = clamp( color, 0.0, 1.0 );\n\tcolor = agxDefaultContrastApprox( color );\n\tcolor = AgXOutsetMatrix * color;\n\tcolor = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n\tcolor = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n\tcolor = clamp( color, 0.0, 1.0 );\n\treturn color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n\tconst float StartCompression = 0.8 - 0.04;\n\tconst float Desaturation = 0.15;\n\tcolor *= toneMappingExposure;\n\tfloat x = min( color.r, min( color.g, color.b ) );\n\tfloat offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n\tcolor -= offset;\n\tfloat peak = max( color.r, max( color.g, color.b ) );\n\tif ( peak < StartCompression ) return color;\n\tfloat d = 1. - StartCompression;\n\tfloat newPeak = 1. - d * d / ( peak + d - StartCompression );\n\tcolor *= newPeak / peak;\n\tfloat g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\n\treturn mix( color, vec3( newPeak ), g );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec4 transmittedLight;\n\t\tvec3 transmittance;\n\t\t#ifdef USE_DISPERSION\n\t\t\tfloat halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\n\t\t\tvec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\n\t\t\tfor ( int i = 0; i < 3; i ++ ) {\n\t\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\n\t\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\n\t\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\t\trefractionCoords += 1.0;\n\t\t\t\trefractionCoords /= 2.0;\n\t\t\n\t\t\t\tvec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\n\t\t\t\ttransmittedLight[ i ] = transmissionSample[ i ];\n\t\t\t\ttransmittedLight.a += transmissionSample.a;\n\t\t\t\ttransmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\n\t\t\t}\n\t\t\ttransmittedLight.a /= 3.0;\n\t\t\n\t\t#else\n\t\t\n\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\trefractionCoords += 1.0;\n\t\t\trefractionCoords /= 2.0;\n\t\t\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\t\ttransmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\t\n\t\t#endif\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif",uv_pars_fragment:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",uv_pars_vertex:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",uv_vertex:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_BATCHING\n\t\tworldPosition = batchingMatrix * worldPosition;\n\t#endif\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",background_frag:"uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",backgroundCube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",backgroundCube_frag:"#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",depth_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_DISPERSION\n\tuniform float dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n\t#endif\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\nvoid main() {\n\t#ifdef USE_POINTS_UV\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\t#endif\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}"},Xn={common:{diffuse:{value:new Ie(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new Gl},alphaMap:{value:null},alphaMapTransform:{value:new Gl},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new Gl}},envmap:{envMap:{value:null},envMapRotation:{value:new Gl},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new Gl}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new Gl}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new Gl},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new Gl},normalScale:{value:new kl(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new Gl},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new Gl}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new Gl}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new Gl}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Ie(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Ie(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new Gl},alphaTest:{value:0},uvTransform:{value:new Gl}},sprite:{diffuse:{value:new Ie(16777215)},opacity:{value:1},center:{value:new kl(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new Gl},alphaMap:{value:null},alphaMapTransform:{value:new Gl},alphaTest:{value:0}}},jn={basic:{uniforms:Mn([Xn.common,Xn.specularmap,Xn.envmap,Xn.aomap,Xn.lightmap,Xn.fog]),vertexShader:Wn.meshbasic_vert,fragmentShader:Wn.meshbasic_frag},lambert:{uniforms:Mn([Xn.common,Xn.specularmap,Xn.envmap,Xn.aomap,Xn.lightmap,Xn.emissivemap,Xn.bumpmap,Xn.normalmap,Xn.displacementmap,Xn.fog,Xn.lights,{emissive:{value:new Ie(0)}}]),vertexShader:Wn.meshlambert_vert,fragmentShader:Wn.meshlambert_frag},phong:{uniforms:Mn([Xn.common,Xn.specularmap,Xn.envmap,Xn.aomap,Xn.lightmap,Xn.emissivemap,Xn.bumpmap,Xn.normalmap,Xn.displacementmap,Xn.fog,Xn.lights,{emissive:{value:new Ie(0)},specular:{value:new Ie(1118481)},shininess:{value:30}}]),vertexShader:Wn.meshphong_vert,fragmentShader:Wn.meshphong_frag},standard:{uniforms:Mn([Xn.common,Xn.envmap,Xn.aomap,Xn.lightmap,Xn.emissivemap,Xn.bumpmap,Xn.normalmap,Xn.displacementmap,Xn.roughnessmap,Xn.metalnessmap,Xn.fog,Xn.lights,{emissive:{value:new Ie(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Wn.meshphysical_vert,fragmentShader:Wn.meshphysical_frag},toon:{uniforms:Mn([Xn.common,Xn.aomap,Xn.lightmap,Xn.emissivemap,Xn.bumpmap,Xn.normalmap,Xn.displacementmap,Xn.gradientmap,Xn.fog,Xn.lights,{emissive:{value:new Ie(0)}}]),vertexShader:Wn.meshtoon_vert,fragmentShader:Wn.meshtoon_frag},matcap:{uniforms:Mn([Xn.common,Xn.bumpmap,Xn.normalmap,Xn.displacementmap,Xn.fog,{matcap:{value:null}}]),vertexShader:Wn.meshmatcap_vert,fragmentShader:Wn.meshmatcap_frag},points:{uniforms:Mn([Xn.points,Xn.fog]),vertexShader:Wn.points_vert,fragmentShader:Wn.points_frag},dashed:{uniforms:Mn([Xn.common,Xn.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Wn.linedashed_vert,fragmentShader:Wn.linedashed_frag},depth:{uniforms:Mn([Xn.common,Xn.displacementmap]),vertexShader:Wn.depth_vert,fragmentShader:Wn.depth_frag},normal:{uniforms:Mn([Xn.common,Xn.bumpmap,Xn.normalmap,Xn.displacementmap,{opacity:{value:1}}]),vertexShader:Wn.meshnormal_vert,fragmentShader:Wn.meshnormal_frag},sprite:{uniforms:Mn([Xn.sprite,Xn.fog]),vertexShader:Wn.sprite_vert,fragmentShader:Wn.sprite_frag},background:{uniforms:{uvTransform:{value:new Gl},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:Wn.background_vert,fragmentShader:Wn.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new Gl}},vertexShader:Wn.backgroundCube_vert,fragmentShader:Wn.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Wn.cube_vert,fragmentShader:Wn.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Wn.equirect_vert,fragmentShader:Wn.equirect_frag},distanceRGBA:{uniforms:Mn([Xn.common,Xn.displacementmap,{referencePosition:{value:new ft},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Wn.distanceRGBA_vert,fragmentShader:Wn.distanceRGBA_frag},shadow:{uniforms:Mn([Xn.lights,Xn.fog,{color:{value:new Ie(0)},opacity:{value:1}}]),vertexShader:Wn.shadow_vert,fragmentShader:Wn.shadow_frag}};jn.physical={uniforms:Mn([jn.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new Gl},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new Gl},clearcoatNormalScale:{value:new kl(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new Gl},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new Gl},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new Gl},sheen:{value:0},sheenColor:{value:new Ie(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new Gl},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new Gl},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new Gl},transmissionSamplerSize:{value:new kl},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new Gl},attenuationDistance:{value:0},attenuationColor:{value:new Ie(0)},specularColor:{value:new Ie(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new Gl},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new Gl},anisotropyVector:{value:new kl},anisotropyMap:{value:null},anisotropyMapTransform:{value:new Gl}}]),vertexShader:Wn.meshphysical_vert,fragmentShader:Wn.meshphysical_frag};const Yn={r:0,b:0,g:0},Jn=new ee,Zn=new Xt;function Kn(l,t,e,n,i,r,a){const q=new Ie(0);let s,o,c=!0===r?0:1,m=null,h=0,u=null;function d(l){let n=!0===l.isScene?l.background:null;return n&&n.isTexture&&(n=(l.backgroundBlurriness>0?e:t).get(n)),n}function p(t,e){t.getRGB(Yn,Sn(l)),n.buffers.color.setClear(Yn.r,Yn.g,Yn.b,e,a)}return{getClearColor:function(){return q},setClearColor:function(l,t=1){q.set(l),c=t,p(q,c)},getClearAlpha:function(){return c},setClearAlpha:function(l){c=l,p(q,c)},render:function(t){let e=!1;const i=d(t);null===i?p(q,c):i&&i.isColor&&(p(i,1),e=!0);const r=l.xr.getEnvironmentBlendMode();"additive"===r?n.buffers.color.setClear(0,0,0,1,a):"alpha-blend"===r&&n.buffers.color.setClear(0,0,0,0,a),(l.autoClear||e)&&l.clear(l.autoClearColor,l.autoClearDepth,l.autoClearStencil)},addToRenderList:function(t,e){const n=d(e);n&&(n.isCubeTexture||n.mapping===z)?(void 0===o&&(o=new _n(new xn(1,1,1),new Tn({name:"BackgroundCubeMaterial",uniforms:yn(jn.backgroundCube.uniforms),vertexShader:jn.backgroundCube.vertexShader,fragmentShader:jn.backgroundCube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1})),o.geometry.deleteAttribute("normal"),o.geometry.deleteAttribute("uv"),o.onBeforeRender=function(l,t,e){this.matrixWorld.copyPosition(e.matrixWorld)},Object.defineProperty(o.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),i.update(o)),Jn.copy(e.backgroundRotation),Jn.x*=-1,Jn.y*=-1,Jn.z*=-1,n.isCubeTexture&&!1===n.isRenderTargetTexture&&(Jn.y*=-1,Jn.z*=-1),o.material.uniforms.envMap.value=n,o.material.uniforms.flipEnvMap.value=n.isCubeTexture&&!1===n.isRenderTargetTexture?-1:1,o.material.uniforms.backgroundBlurriness.value=e.backgroundBlurriness,o.material.uniforms.backgroundIntensity.value=e.backgroundIntensity,o.material.uniforms.backgroundRotation.value.setFromMatrix4(Zn.makeRotationFromEuler(Jn)),o.material.toneMapped=lt.getTransfer(n.colorSpace)!==gl,m===n&&h===n.version&&u===l.toneMapping||(o.material.needsUpdate=!0,m=n,h=n.version,u=l.toneMapping),o.layers.enableAll(),t.unshift(o,o.geometry,o.material,0,0,null)):n&&n.isTexture&&(void 0===s&&(s=new _n(new Gn(2,2),new Tn({name:"BackgroundMaterial",uniforms:yn(jn.background.uniforms),vertexShader:jn.background.vertexShader,fragmentShader:jn.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1})),s.geometry.deleteAttribute("normal"),Object.defineProperty(s.material,"map",{get:function(){return this.uniforms.t2D.value}}),i.update(s)),s.material.uniforms.t2D.value=n,s.material.uniforms.backgroundIntensity.value=e.backgroundIntensity,s.material.toneMapped=lt.getTransfer(n.colorSpace)!==gl,!0===n.matrixAutoUpdate&&n.updateMatrix(),s.material.uniforms.uvTransform.value.copy(n.matrix),m===n&&h===n.version&&u===l.toneMapping||(s.material.needsUpdate=!0,m=n,h=n.version,u=l.toneMapping),s.layers.enableAll(),t.unshift(s,s.geometry,s.material,0,0,null))}}}function $n(l,t){const e=l.getParameter(l.MAX_VERTEX_ATTRIBS),n={},i=o(null);let r=i,a=!1;function q(t){return l.bindVertexArray(t)}function s(t){return l.deleteVertexArray(t)}function o(l){const t=[],n=[],i=[];for(let l=0;l<e;l++)t[l]=0,n[l]=0,i[l]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:t,enabledAttributes:n,attributeDivisors:i,object:l,attributes:{},index:null}}function c(){const l=r.newAttributes;for(let t=0,e=l.length;t<e;t++)l[t]=0}function m(l){h(l,0)}function h(t,e){const n=r.newAttributes,i=r.enabledAttributes,a=r.attributeDivisors;n[t]=1,0===i[t]&&(l.enableVertexAttribArray(t),i[t]=1),a[t]!==e&&(l.vertexAttribDivisor(t,e),a[t]=e)}function u(){const t=r.newAttributes,e=r.enabledAttributes;for(let n=0,i=e.length;n<i;n++)e[n]!==t[n]&&(l.disableVertexAttribArray(n),e[n]=0)}function d(t,e,n,i,r,a,q){!0===q?l.vertexAttribIPointer(t,e,n,r,a):l.vertexAttribPointer(t,e,n,i,r,a)}function p(){f(),a=!0,r!==i&&(r=i,q(r.object))}function f(){i.geometry=null,i.program=null,i.wireframe=!1}return{setup:function(e,i,s,p,f){let g=!1;const _=function(t,e,i){const r=!0===i.wireframe;let a=n[t.id];void 0===a&&(a={},n[t.id]=a);let q=a[e.id];void 0===q&&(q={},a[e.id]=q);let s=q[r];return void 0===s&&(s=o(l.createVertexArray()),q[r]=s),s}(p,s,i);r!==_&&(r=_,q(r.object)),g=function(l,t,e,n){const i=r.attributes,a=t.attributes;let q=0;const s=e.getAttributes();for(const t in s)if(s[t].location>=0){const e=i[t];let n=a[t];if(void 0===n&&("instanceMatrix"===t&&l.instanceMatrix&&(n=l.instanceMatrix),"instanceColor"===t&&l.instanceColor&&(n=l.instanceColor)),void 0===e)return!0;if(e.attribute!==n)return!0;if(n&&e.data!==n.data)return!0;q++}return r.attributesNum!==q||r.index!==n}(e,p,s,f),g&&function(l,t,e,n){const i={},a=t.attributes;let q=0;const s=e.getAttributes();for(const t in s)if(s[t].location>=0){let e=a[t];void 0===e&&("instanceMatrix"===t&&l.instanceMatrix&&(e=l.instanceMatrix),"instanceColor"===t&&l.instanceColor&&(e=l.instanceColor));const n={};n.attribute=e,e&&e.data&&(n.data=e.data),i[t]=n,q++}r.attributes=i,r.attributesNum=q,r.index=n}(e,p,s,f),null!==f&&t.update(f,l.ELEMENT_ARRAY_BUFFER),(g||a)&&(a=!1,function(e,n,i,r){c();const a=r.attributes,q=i.getAttributes(),s=n.defaultAttributeValues;for(const n in q){const i=q[n];if(i.location>=0){let q=a[n];if(void 0===q&&("instanceMatrix"===n&&e.instanceMatrix&&(q=e.instanceMatrix),"instanceColor"===n&&e.instanceColor&&(q=e.instanceColor)),void 0!==q){const n=q.normalized,a=q.itemSize,s=t.get(q);if(void 0===s)continue;const o=s.buffer,c=s.type,u=s.bytesPerElement,p=c===l.INT||c===l.UNSIGNED_INT||1013===q.gpuType;if(q.isInterleavedBufferAttribute){const t=q.data,s=t.stride,f=q.offset;if(t.isInstancedInterleavedBuffer){for(let l=0;l<i.locationSize;l++)h(i.location+l,t.meshPerAttribute);!0!==e.isInstancedMesh&&void 0===r._maxInstanceCount&&(r._maxInstanceCount=t.meshPerAttribute*t.count)}else for(let l=0;l<i.locationSize;l++)m(i.location+l);l.bindBuffer(l.ARRAY_BUFFER,o);for(let l=0;l<i.locationSize;l++)d(i.location+l,a/i.locationSize,c,n,s*u,(f+a/i.locationSize*l)*u,p)}else{if(q.isInstancedBufferAttribute){for(let l=0;l<i.locationSize;l++)h(i.location+l,q.meshPerAttribute);!0!==e.isInstancedMesh&&void 0===r._maxInstanceCount&&(r._maxInstanceCount=q.meshPerAttribute*q.count)}else for(let l=0;l<i.locationSize;l++)m(i.location+l);l.bindBuffer(l.ARRAY_BUFFER,o);for(let l=0;l<i.locationSize;l++)d(i.location+l,a/i.locationSize,c,n,a*u,a/i.locationSize*l*u,p)}}else if(void 0!==s){const t=s[n];if(void 0!==t)switch(t.length){case 2:l.vertexAttrib2fv(i.location,t);break;case 3:l.vertexAttrib3fv(i.location,t);break;case 4:l.vertexAttrib4fv(i.location,t);break;default:l.vertexAttrib1fv(i.location,t)}}}}u()}(e,i,s,p),null!==f&&l.bindBuffer(l.ELEMENT_ARRAY_BUFFER,t.get(f).buffer))},reset:p,resetDefaultState:f,dispose:function(){p();for(const l in n){const t=n[l];for(const l in t){const e=t[l];for(const l in e)s(e[l].object),delete e[l];delete t[l]}delete n[l]}},releaseStatesOfGeometry:function(l){if(void 0===n[l.id])return;const t=n[l.id];for(const l in t){const e=t[l];for(const l in e)s(e[l].object),delete e[l];delete t[l]}delete n[l.id]},releaseStatesOfProgram:function(l){for(const t in n){const e=n[t];if(void 0===e[l.id])continue;const i=e[l.id];for(const l in i)s(i[l].object),delete i[l];delete e[l.id]}},initAttributes:c,enableAttribute:m,disableUnusedAttributes:u}}function Qn(l,t,e){let n;function i(t,i,r){0!==r&&(l.drawArraysInstanced(n,t,i,r),e.update(i,n,r))}this.setMode=function(l){n=l},this.render=function(t,i){l.drawArrays(n,t,i),e.update(i,n,1)},this.renderInstances=i,this.renderMultiDraw=function(l,i,r){if(0===r)return;const a=t.get("WEBGL_multi_draw");if(null===a)for(let t=0;t<r;t++)this.render(l[t],i[t]);else{a.multiDrawArraysWEBGL(n,l,0,i,0,r);let t=0;for(let l=0;l<r;l++)t+=i[l];e.update(t,n,1)}},this.renderMultiDrawInstances=function(l,r,a,q){if(0===a)return;const s=t.get("WEBGL_multi_draw");if(null===s)for(let t=0;t<l.length;t++)i(l[t],r[t],q[t]);else{s.multiDrawArraysInstancedWEBGL(n,l,0,r,0,q,0,a);let t=0;for(let l=0;l<a;l++)t+=r[l];for(let l=0;l<q.length;l++)e.update(t,n,q[l])}}}function li(l,t,e,n){let i;function r(t){if("highp"===t){if(l.getShaderPrecisionFormat(l.VERTEX_SHADER,l.HIGH_FLOAT).precision>0&&l.getShaderPrecisionFormat(l.FRAGMENT_SHADER,l.HIGH_FLOAT).precision>0)return"highp";t="mediump"}return"mediump"===t&&l.getShaderPrecisionFormat(l.VERTEX_SHADER,l.MEDIUM_FLOAT).precision>0&&l.getShaderPrecisionFormat(l.FRAGMENT_SHADER,l.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let a=void 0!==e.precision?e.precision:"highp";const q=r(a);q!==a&&(console.warn("THREE.WebGLRenderer:",a,"not supported, using",q,"instead."),a=q);const s=!0===e.logarithmicDepthBuffer,o=l.getParameter(l.MAX_TEXTURE_IMAGE_UNITS),c=l.getParameter(l.MAX_VERTEX_TEXTURE_IMAGE_UNITS);return{isWebGL2:!0,getMaxAnisotropy:function(){if(void 0!==i)return i;if(!0===t.has("EXT_texture_filter_anisotropic")){const e=t.get("EXT_texture_filter_anisotropic");i=l.getParameter(e.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else i=0;return i},getMaxPrecision:r,textureFormatReadable:function(t){return t===ll||n.convert(t)===l.getParameter(l.IMPLEMENTATION_COLOR_READ_FORMAT)},textureTypeReadable:function(e){const i=e===$&&(t.has("EXT_color_buffer_half_float")||t.has("EXT_color_buffer_float"));return!(e!==J&&n.convert(e)!==l.getParameter(l.IMPLEMENTATION_COLOR_READ_TYPE)&&e!==K&&!i)},precision:a,logarithmicDepthBuffer:s,maxTextures:o,maxVertexTextures:c,maxTextureSize:l.getParameter(l.MAX_TEXTURE_SIZE),maxCubemapSize:l.getParameter(l.MAX_CUBE_MAP_TEXTURE_SIZE),maxAttributes:l.getParameter(l.MAX_VERTEX_ATTRIBS),maxVertexUniforms:l.getParameter(l.MAX_VERTEX_UNIFORM_VECTORS),maxVaryings:l.getParameter(l.MAX_VARYING_VECTORS),maxFragmentUniforms:l.getParameter(l.MAX_FRAGMENT_UNIFORM_VECTORS),vertexTextures:c>0,maxSamples:l.getParameter(l.MAX_SAMPLES)}}function ti(l){const t=this;let e=null,n=0,i=!1,r=!1;const a=new Fn,q=new Gl,s={value:null,needsUpdate:!1};function o(l,e,n,i){const r=null!==l?l.length:0;let o=null;if(0!==r){if(o=s.value,!0!==i||null===o){const t=n+4*r,i=e.matrixWorldInverse;q.getNormalMatrix(i),(null===o||o.length<t)&&(o=new Float32Array(t));for(let t=0,e=n;t!==r;++t,e+=4)a.copy(l[t]).applyMatrix4(i,q),a.normal.toArray(o,e),o[e+3]=a.constant}s.value=o,s.needsUpdate=!0}return t.numPlanes=r,t.numIntersection=0,o}this.uniform=s,this.numPlanes=0,this.numIntersection=0,this.init=function(l,t){const e=0!==l.length||t||0!==n||i;return i=t,n=l.length,e},this.beginShadows=function(){r=!0,o(null)},this.endShadows=function(){r=!1},this.setGlobalState=function(l,t){e=o(l,t,0)},this.setState=function(a,q,c){const m=a.clippingPlanes,h=a.clipIntersection,u=a.clipShadows,d=l.get(a);if(!i||null===m||0===m.length||r&&!u)r?o(null):(s.value!==e&&(s.value=e,s.needsUpdate=n>0),t.numPlanes=n,t.numIntersection=0);else{const l=r?0:n,t=4*l;let i=d.clippingState||null;s.value=i,i=o(m,q,t,c);for(let l=0;l!==t;++l)i[l]=e[l];d.clippingState=i,this.numIntersection=h?this.numPlanes:0,this.numPlanes+=l}}}function ei(l){let t=new WeakMap;function e(l,t){return 303===t?l.mapping=O:304===t&&(l.mapping=F),l}function n(l){const e=l.target;e.removeEventListener("dispose",n);const i=t.get(e);void 0!==i&&(t.delete(e),i.dispose())}return{get:function(i){if(i&&i.isTexture){const r=i.mapping;if(303===r||304===r){if(t.has(i))return e(t.get(i).texture,i.mapping);{const r=i.image;if(r&&r.height>0){const a=new Nn(r.height);return a.fromEquirectangularTexture(l,i),t.set(i,a),i.addEventListener("dispose",n),e(a.texture,i.mapping)}return null}}}return i},dispose:function(){t=new WeakMap}}}class ni extends bn{constructor(l=-1,t=1,e=1,n=-1,i=.1,r=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=l,this.right=t,this.top=e,this.bottom=n,this.near=i,this.far=r,this.updateProjectionMatrix()}copy(l,t){return super.copy(l,t),this.left=l.left,this.right=l.right,this.top=l.top,this.bottom=l.bottom,this.near=l.near,this.far=l.far,this.zoom=l.zoom,this.view=null===l.view?null:Object.assign({},l.view),this}setViewOffset(l,t,e,n,i,r){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=l,this.view.fullHeight=t,this.view.offsetX=e,this.view.offsetY=n,this.view.width=i,this.view.height=r,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const l=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),e=(this.right+this.left)/2,n=(this.top+this.bottom)/2;let i=e-l,r=e+l,a=n+t,q=n-t;if(null!==this.view&&this.view.enabled){const l=(this.right-this.left)/this.view.fullWidth/this.zoom,t=(this.top-this.bottom)/this.view.fullHeight/this.zoom;i+=l*this.view.offsetX,r=i+l*this.view.width,a-=t*this.view.offsetY,q=a-t*this.view.height}this.projectionMatrix.makeOrthographic(i,r,a,q,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(l){const t=super.toJSON(l);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,null!==this.view&&(t.object.view=Object.assign({},this.view)),t}}const ii=[.125,.215,.35,.446,.526,.582],ri=new ni,ai=new Ie;let qi=null,si=0,oi=0,ci=!1;const mi=(1+Math.sqrt(5))/2,hi=1/mi,ui=[new ft(-mi,hi,0),new ft(mi,hi,0),new ft(-hi,0,mi),new ft(hi,0,mi),new ft(0,mi,-hi),new ft(0,mi,hi),new ft(-1,1,-1),new ft(1,1,-1),new ft(-1,1,1),new ft(1,1,1)];class di{constructor(l){this._renderer=l,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(l,t=0,e=.1,n=100){qi=this._renderer.getRenderTarget(),si=this._renderer.getActiveCubeFace(),oi=this._renderer.getActiveMipmapLevel(),ci=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(256);const i=this._allocateTargets();return i.depthBuffer=!0,this._sceneToCubeUV(l,e,n,i),t>0&&this._blur(i,0,0,t),this._applyPMREM(i),this._cleanup(i),i}fromEquirectangular(l,t=null){return this._fromTexture(l,t)}fromCubemap(l,t=null){return this._fromTexture(l,t)}compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=_i(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=gi(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose()}_setSize(l){this._lodMax=Math.floor(Math.log2(l)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let l=0;l<this._lodPlanes.length;l++)this._lodPlanes[l].dispose()}_cleanup(l){this._renderer.setRenderTarget(qi,si,oi),this._renderer.xr.enabled=ci,l.scissorTest=!1,fi(l,0,0,l.width,l.height)}_fromTexture(l,t){l.mapping===O||l.mapping===F?this._setSize(0===l.image.length?16:l.image[0].width||l.image[0].image.width):this._setSize(l.image.width/4),qi=this._renderer.getRenderTarget(),si=this._renderer.getActiveCubeFace(),oi=this._renderer.getActiveMipmapLevel(),ci=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const e=t||this._allocateTargets();return this._textureToCubeUV(l,e),this._applyPMREM(e),this._cleanup(e),e}_allocateTargets(){const l=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,e={magFilter:X,minFilter:X,generateMipmaps:!1,type:$,format:ll,colorSpace:ul,depthBuffer:!1},n=pi(l,t,e);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==l||this._pingPongRenderTarget.height!==t){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=pi(l,t,e);const{_lodMax:n}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=function(l){const t=[],e=[],n=[];let i=l;const r=l-4+1+ii.length;for(let a=0;a<r;a++){const r=Math.pow(2,i);e.push(r);let q=1/r;a>l-4?q=ii[a-l+4-1]:0===a&&(q=0),n.push(q);const s=1/(r-2),o=-s,c=1+s,m=[o,o,c,o,c,c,o,o,c,c,o,c],h=6,u=6,d=3,p=2,f=1,g=new Float32Array(d*u*h),_=new Float32Array(p*u*h),v=new Float32Array(f*u*h);for(let l=0;l<h;l++){const t=l%3*2/3-1,e=l>2?0:-1,n=[t,e,0,t+2/3,e,0,t+2/3,e+1,0,t,e,0,t+2/3,e+1,0,t,e+1,0];g.set(n,d*u*l),_.set(m,p*u*l);const i=[l,l,l,l,l,l];v.set(i,f*u*l)}const x=new Qe;x.setAttribute("position",new He(g,d)),x.setAttribute("uv",new He(_,p)),x.setAttribute("faceIndex",new He(v,f)),t.push(x),i>4&&i--}return{lodPlanes:t,sizeLods:e,sigmas:n}}(n)),this._blurMaterial=function(l,t,e){const n=new Float32Array(20),i=new ft(0,1,0);return new Tn({name:"SphericalGaussianBlur",defines:{n:20,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/e,CUBEUV_MAX_MIP:`${l}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:i}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}(n,l,t)}return n}_compileMaterial(l){const t=new _n(this._lodPlanes[0],l);this._renderer.compile(t,ri)}_sceneToCubeUV(l,t,e,n){const i=new Cn(90,1,t,e),r=[1,-1,1,1,1,1],a=[1,1,1,-1,-1,-1],q=this._renderer,s=q.autoClear,o=q.toneMapping;q.getClearColor(ai),q.toneMapping=R,q.autoClear=!1;const c=new ze({name:"PMREM.Background",side:1,depthWrite:!1,depthTest:!1}),m=new _n(new xn,c);let h=!1;const u=l.background;u?u.isColor&&(c.color.copy(u),l.background=null,h=!0):(c.color.copy(ai),h=!0);for(let t=0;t<6;t++){const e=t%3;0===e?(i.up.set(0,r[t],0),i.lookAt(a[t],0,0)):1===e?(i.up.set(0,0,r[t]),i.lookAt(0,a[t],0)):(i.up.set(0,r[t],0),i.lookAt(0,0,a[t]));const s=this._cubeSize;fi(n,e*s,t>2?s:0,s,s),q.setRenderTarget(n),h&&q.render(m,i),q.render(l,i)}m.geometry.dispose(),m.material.dispose(),q.toneMapping=o,q.autoClear=s,l.background=u}_textureToCubeUV(l,t){const e=this._renderer,n=l.mapping===O||l.mapping===F;n?(null===this._cubemapMaterial&&(this._cubemapMaterial=_i()),this._cubemapMaterial.uniforms.flipEnvMap.value=!1===l.isRenderTargetTexture?-1:1):null===this._equirectMaterial&&(this._equirectMaterial=gi());const i=n?this._cubemapMaterial:this._equirectMaterial,r=new _n(this._lodPlanes[0],i);i.uniforms.envMap.value=l;const a=this._cubeSize;fi(t,0,0,3*a,2*a),e.setRenderTarget(t),e.render(r,ri)}_applyPMREM(l){const t=this._renderer,e=t.autoClear;t.autoClear=!1;const n=this._lodPlanes.length;for(let t=1;t<n;t++){const e=Math.sqrt(this._sigmas[t]*this._sigmas[t]-this._sigmas[t-1]*this._sigmas[t-1]),i=ui[(n-t-1)%ui.length];this._blur(l,t-1,t,e,i)}t.autoClear=e}_blur(l,t,e,n,i){const r=this._pingPongRenderTarget;this._halfBlur(l,r,t,e,n,"latitudinal",i),this._halfBlur(r,l,e,e,n,"longitudinal",i)}_halfBlur(l,t,e,n,i,r,a){const q=this._renderer,s=this._blurMaterial;"latitudinal"!==r&&"longitudinal"!==r&&console.error("blur direction must be either latitudinal or longitudinal!");const o=new _n(this._lodPlanes[n],s),c=s.uniforms,m=this._sizeLods[e]-1,h=isFinite(i)?Math.PI/(2*m):2*Math.PI/39,u=i/h,d=isFinite(i)?1+Math.floor(3*u):20;d>20&&console.warn(`sigmaRadians, ${i}, is too large and will clip, as it requested ${d} samples when the maximum is set to 20`);const p=[];let f=0;for(let l=0;l<20;++l){const t=l/u,e=Math.exp(-t*t/2);p.push(e),0===l?f+=e:l<d&&(f+=2*e)}for(let l=0;l<p.length;l++)p[l]=p[l]/f;c.envMap.value=l.texture,c.samples.value=d,c.weights.value=p,c.latitudinal.value="latitudinal"===r,a&&(c.poleAxis.value=a);const{_lodMax:g}=this;c.dTheta.value=h,c.mipInt.value=g-e;const _=this._sizeLods[n];fi(t,3*_*(n>g-4?n-g+4:0),4*(this._cubeSize-_),3*_,2*_),q.setRenderTarget(t),q.render(o,ri)}}function pi(l,t,e){const n=new ht(l,t,e);return n.texture.mapping=z,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function fi(l,t,e,n,i){l.viewport.set(t,e,n,i),l.scissor.set(t,e,n,i)}function gi(){return new Tn({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function _i(){return new Tn({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function vi(l){let t=new WeakMap,e=null;function n(l){const e=l.target;e.removeEventListener("dispose",n);const i=t.get(e);void 0!==i&&(t.delete(e),i.dispose())}return{get:function(i){if(i&&i.isTexture){const r=i.mapping,a=303===r||304===r,q=r===O||r===F;if(a||q){let r=t.get(i);const s=void 0!==r?r.texture.pmremVersion:0;if(i.isRenderTargetTexture&&i.pmremVersion!==s)return null===e&&(e=new di(l)),r=a?e.fromEquirectangular(i,r):e.fromCubemap(i,r),r.texture.pmremVersion=i.pmremVersion,t.set(i,r),r.texture;if(void 0!==r)return r.texture;{const s=i.image;return a&&s&&s.height>0||q&&s&&function(l){let t=0;for(let e=0;e<6;e++)void 0!==l[e]&&t++;return 6===t}(s)?(null===e&&(e=new di(l)),r=a?e.fromEquirectangular(i):e.fromCubemap(i),r.texture.pmremVersion=i.pmremVersion,t.set(i,r),i.addEventListener("dispose",n),r.texture):null}}}return i},dispose:function(){t=new WeakMap,null!==e&&(e.dispose(),e=null)}}}function xi(l){const t={};function e(e){if(void 0!==t[e])return t[e];let n;switch(e){case"WEBGL_depth_texture":n=l.getExtension("WEBGL_depth_texture")||l.getExtension("MOZ_WEBGL_depth_texture")||l.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":n=l.getExtension("EXT_texture_filter_anisotropic")||l.getExtension("MOZ_EXT_texture_filter_anisotropic")||l.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":n=l.getExtension("WEBGL_compressed_texture_s3tc")||l.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||l.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":n=l.getExtension("WEBGL_compressed_texture_pvrtc")||l.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:n=l.getExtension(e)}return t[e]=n,n}return{has:function(l){return null!==e(l)},init:function(){e("EXT_color_buffer_float"),e("WEBGL_clip_cull_distance"),e("OES_texture_float_linear"),e("EXT_color_buffer_half_float"),e("WEBGL_multisampled_render_to_texture"),e("WEBGL_render_shared_exponent")},get:function(l){const t=e(l);return null===t&&console.warn("THREE.WebGLRenderer: "+l+" extension not supported."),t}}}function yi(l,t,e,n){const i={},r=new WeakMap;function a(l){const q=l.target;null!==q.index&&t.remove(q.index);for(const l in q.attributes)t.remove(q.attributes[l]);for(const l in q.morphAttributes){const e=q.morphAttributes[l];for(let l=0,n=e.length;l<n;l++)t.remove(e[l])}q.removeEventListener("dispose",a),delete i[q.id];const s=r.get(q);s&&(t.remove(s),r.delete(q)),n.releaseStatesOfGeometry(q),!0===q.isInstancedBufferGeometry&&delete q._maxInstanceCount,e.memory.geometries--}function q(l){const e=[],n=l.index,i=l.attributes.position;let a=0;if(null!==n){const l=n.array;a=n.version;for(let t=0,n=l.length;t<n;t+=3){const n=l[t+0],i=l[t+1],r=l[t+2];e.push(n,i,i,r,r,n)}}else{if(void 0===i)return;{const l=i.array;a=i.version;for(let t=0,n=l.length/3-1;t<n;t+=3){const l=t+0,n=t+1,i=t+2;e.push(l,n,n,i,i,l)}}}const q=new(Xl(e)?Ge:ke)(e,1);q.version=a;const s=r.get(l);s&&t.remove(s),r.set(l,q)}return{get:function(l,t){return!0===i[t.id]||(t.addEventListener("dispose",a),i[t.id]=!0,e.memory.geometries++),t},update:function(e){const n=e.attributes;for(const e in n)t.update(n[e],l.ARRAY_BUFFER);const i=e.morphAttributes;for(const e in i){const n=i[e];for(let e=0,i=n.length;e<i;e++)t.update(n[e],l.ARRAY_BUFFER)}},getWireframeAttribute:function(l){const t=r.get(l);if(t){const e=l.index;null!==e&&t.version<e.version&&q(l)}else q(l);return r.get(l)}}}function Mi(l,t,e){let n,i,r;function a(t,a,q){0!==q&&(l.drawElementsInstanced(n,a,i,t*r,q),e.update(a,n,q))}this.setMode=function(l){n=l},this.setIndex=function(l){i=l.type,r=l.bytesPerElement},this.render=function(t,a){l.drawElements(n,a,i,t*r),e.update(a,n,1)},this.renderInstances=a,this.renderMultiDraw=function(l,a,q){if(0===q)return;const s=t.get("WEBGL_multi_draw");if(null===s)for(let t=0;t<q;t++)this.render(l[t]/r,a[t]);else{s.multiDrawElementsWEBGL(n,a,0,i,l,0,q);let t=0;for(let l=0;l<q;l++)t+=a[l];e.update(t,n,1)}},this.renderMultiDrawInstances=function(l,q,s,o){if(0===s)return;const c=t.get("WEBGL_multi_draw");if(null===c)for(let t=0;t<l.length;t++)a(l[t]/r,q[t],o[t]);else{c.multiDrawElementsInstancedWEBGL(n,q,0,i,l,0,o,0,s);let t=0;for(let l=0;l<s;l++)t+=q[l];for(let l=0;l<o.length;l++)e.update(t,n,o[l])}}}function Si(l){const t={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:t,programs:null,autoReset:!0,reset:function(){t.calls=0,t.triangles=0,t.points=0,t.lines=0},update:function(e,n,i){switch(t.calls++,n){case l.TRIANGLES:t.triangles+=i*(e/3);break;case l.LINES:t.lines+=i*(e/2);break;case l.LINE_STRIP:t.lines+=i*(e-1);break;case l.LINE_LOOP:t.lines+=i*e;break;case l.POINTS:t.points+=i*e;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",n)}}}}function Ei(l,t,e){const n=new WeakMap,i=new ct;return{update:function(r,a,q){const s=r.morphTargetInfluences,o=a.morphAttributes.position||a.morphAttributes.normal||a.morphAttributes.color,c=void 0!==o?o.length:0;let m=n.get(a);if(void 0===m||m.count!==c){void 0!==m&&m.texture.dispose();const h=void 0!==a.morphAttributes.position,u=void 0!==a.morphAttributes.normal,d=void 0!==a.morphAttributes.color,p=a.morphAttributes.position||[],f=a.morphAttributes.normal||[],g=a.morphAttributes.color||[];let _=0;!0===h&&(_=1),!0===u&&(_=2),!0===d&&(_=3);let v=a.attributes.position.count*_,x=1;v>t.maxTextureSize&&(x=Math.ceil(v/t.maxTextureSize),v=t.maxTextureSize);const y=new Float32Array(v*x*4*c),M=new ut(y,v,x,c);M.type=K,M.needsUpdate=!0;const S=4*_;for(let T=0;T<c;T++){const b=p[T],w=f[T],A=g[T],R=v*x*4*T;for(let C=0;C<b.count;C++){const P=C*S;!0===h&&(i.fromBufferAttribute(b,C),y[R+P+0]=i.x,y[R+P+1]=i.y,y[R+P+2]=i.z,y[R+P+3]=0),!0===u&&(i.fromBufferAttribute(w,C),y[R+P+4]=i.x,y[R+P+5]=i.y,y[R+P+6]=i.z,y[R+P+7]=0),!0===d&&(i.fromBufferAttribute(A,C),y[R+P+8]=i.x,y[R+P+9]=i.y,y[R+P+10]=i.z,y[R+P+11]=4===A.itemSize?i.w:1)}}function E(){M.dispose(),n.delete(a),a.removeEventListener("dispose",E)}m={count:c,texture:M,size:new kl(v,x)},n.set(a,m),a.addEventListener("dispose",E)}if(!0===r.isInstancedMesh&&null!==r.morphTexture)q.getUniforms().setValue(l,"morphTexture",r.morphTexture,e);else{let L=0;for(let N=0;N<s.length;N++)L+=s[N];const U=a.morphTargetsRelative?1:1-L;q.getUniforms().setValue(l,"morphTargetBaseInfluence",U),q.getUniforms().setValue(l,"morphTargetInfluences",s)}q.getUniforms().setValue(l,"morphTargetsTexture",m.texture,e),q.getUniforms().setValue(l,"morphTargetsTextureSize",m.size)}}}function Ti(l,t,e,n){let i=new WeakMap;function r(l){const t=l.target;t.removeEventListener("dispose",r),e.remove(t.instanceMatrix),null!==t.instanceColor&&e.remove(t.instanceColor)}return{update:function(a){const q=n.render.frame,s=a.geometry,o=t.get(a,s);if(i.get(o)!==q&&(t.update(o),i.set(o,q)),a.isInstancedMesh&&(!1===a.hasEventListener("dispose",r)&&a.addEventListener("dispose",r),i.get(a)!==q&&(e.update(a.instanceMatrix,l.ARRAY_BUFFER),null!==a.instanceColor&&e.update(a.instanceColor,l.ARRAY_BUFFER),i.set(a,q))),a.isSkinnedMesh){const l=a.skeleton;i.get(l)!==q&&(l.update(),i.set(l,q))}return o},dispose:function(){i=new WeakMap}}}class bi extends ot{constructor(l,t,e,n,i,r,a,q,s,o){if((o=void 0!==o?o:tl)!==tl&&o!==el)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===e&&o===tl&&(e=Z),void 0===e&&o===el&&(e=Q),super(null,n,i,r,a,q,o,e,s),this.isDepthTexture=!0,this.image={width:l,height:t},this.magFilter=void 0!==a?a:k,this.minFilter=void 0!==q?q:k,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(l){return super.copy(l),this.compareFunction=l.compareFunction,this}toJSON(l){const t=super.toJSON(l);return null!==this.compareFunction&&(t.compareFunction=this.compareFunction),t}}const wi=new ot,Ai=new bi(1,1);Ai.compareFunction=515;const Ri=new ut,Ci=new dt,Pi=new Un,Li=[],Ui=[],Ni=new Float32Array(16),Ii=new Float32Array(9),Di=new Float32Array(4);function Oi(l,t,e){const n=l[0];if(n<=0||n>0)return l;const i=t*e;let r=Li[i];if(void 0===r&&(r=new Float32Array(i),Li[i]=r),0!==t){n.toArray(r,0);for(let n=1,i=0;n!==t;++n)i+=e,l[n].toArray(r,i)}return r}function Fi(l,t){if(l.length!==t.length)return!1;for(let e=0,n=l.length;e<n;e++)if(l[e]!==t[e])return!1;return!0}function zi(l,t){for(let e=0,n=t.length;e<n;e++)l[e]=t[e]}function Bi(l,t){let e=Ui[t];void 0===e&&(e=new Int32Array(t),Ui[t]=e);for(let n=0;n!==t;++n)e[n]=l.allocateTextureUnit();return e}function Vi(l,t){const e=this.cache;e[0]!==t&&(l.uniform1f(this.addr,t),e[0]=t)}function Hi(l,t){const e=this.cache;if(void 0!==t.x)e[0]===t.x&&e[1]===t.y||(l.uniform2f(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(Fi(e,t))return;l.uniform2fv(this.addr,t),zi(e,t)}}function ki(l,t){const e=this.cache;if(void 0!==t.x)e[0]===t.x&&e[1]===t.y&&e[2]===t.z||(l.uniform3f(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else if(void 0!==t.r)e[0]===t.r&&e[1]===t.g&&e[2]===t.b||(l.uniform3f(this.addr,t.r,t.g,t.b),e[0]=t.r,e[1]=t.g,e[2]=t.b);else{if(Fi(e,t))return;l.uniform3fv(this.addr,t),zi(e,t)}}function Gi(l,t){const e=this.cache;if(void 0!==t.x)e[0]===t.x&&e[1]===t.y&&e[2]===t.z&&e[3]===t.w||(l.uniform4f(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(Fi(e,t))return;l.uniform4fv(this.addr,t),zi(e,t)}}function Wi(l,t){const e=this.cache,n=t.elements;if(void 0===n){if(Fi(e,t))return;l.uniformMatrix2fv(this.addr,!1,t),zi(e,t)}else{if(Fi(e,n))return;Di.set(n),l.uniformMatrix2fv(this.addr,!1,Di),zi(e,n)}}function Xi(l,t){const e=this.cache,n=t.elements;if(void 0===n){if(Fi(e,t))return;l.uniformMatrix3fv(this.addr,!1,t),zi(e,t)}else{if(Fi(e,n))return;Ii.set(n),l.uniformMatrix3fv(this.addr,!1,Ii),zi(e,n)}}function ji(l,t){const e=this.cache,n=t.elements;if(void 0===n){if(Fi(e,t))return;l.uniformMatrix4fv(this.addr,!1,t),zi(e,t)}else{if(Fi(e,n))return;Ni.set(n),l.uniformMatrix4fv(this.addr,!1,Ni),zi(e,n)}}function Yi(l,t){const e=this.cache;e[0]!==t&&(l.uniform1i(this.addr,t),e[0]=t)}function Ji(l,t){const e=this.cache;if(void 0!==t.x)e[0]===t.x&&e[1]===t.y||(l.uniform2i(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(Fi(e,t))return;l.uniform2iv(this.addr,t),zi(e,t)}}function Zi(l,t){const e=this.cache;if(void 0!==t.x)e[0]===t.x&&e[1]===t.y&&e[2]===t.z||(l.uniform3i(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(Fi(e,t))return;l.uniform3iv(this.addr,t),zi(e,t)}}function Ki(l,t){const e=this.cache;if(void 0!==t.x)e[0]===t.x&&e[1]===t.y&&e[2]===t.z&&e[3]===t.w||(l.uniform4i(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(Fi(e,t))return;l.uniform4iv(this.addr,t),zi(e,t)}}function $i(l,t){const e=this.cache;e[0]!==t&&(l.uniform1ui(this.addr,t),e[0]=t)}function Qi(l,t){const e=this.cache;if(void 0!==t.x)e[0]===t.x&&e[1]===t.y||(l.uniform2ui(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(Fi(e,t))return;l.uniform2uiv(this.addr,t),zi(e,t)}}function lr(l,t){const e=this.cache;if(void 0!==t.x)e[0]===t.x&&e[1]===t.y&&e[2]===t.z||(l.uniform3ui(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(Fi(e,t))return;l.uniform3uiv(this.addr,t),zi(e,t)}}function tr(l,t){const e=this.cache;if(void 0!==t.x)e[0]===t.x&&e[1]===t.y&&e[2]===t.z&&e[3]===t.w||(l.uniform4ui(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(Fi(e,t))return;l.uniform4uiv(this.addr,t),zi(e,t)}}function er(l,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(l.uniform1i(this.addr,i),n[0]=i);const r=this.type===l.SAMPLER_2D_SHADOW?Ai:wi;e.setTexture2D(t||r,i)}function nr(l,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(l.uniform1i(this.addr,i),n[0]=i),e.setTexture3D(t||Ci,i)}function ir(l,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(l.uniform1i(this.addr,i),n[0]=i),e.setTextureCube(t||Pi,i)}function rr(l,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(l.uniform1i(this.addr,i),n[0]=i),e.setTexture2DArray(t||Ri,i)}function ar(l,t){l.uniform1fv(this.addr,t)}function qr(l,t){const e=Oi(t,this.size,2);l.uniform2fv(this.addr,e)}function sr(l,t){const e=Oi(t,this.size,3);l.uniform3fv(this.addr,e)}function or(l,t){const e=Oi(t,this.size,4);l.uniform4fv(this.addr,e)}function cr(l,t){const e=Oi(t,this.size,4);l.uniformMatrix2fv(this.addr,!1,e)}function mr(l,t){const e=Oi(t,this.size,9);l.uniformMatrix3fv(this.addr,!1,e)}function hr(l,t){const e=Oi(t,this.size,16);l.uniformMatrix4fv(this.addr,!1,e)}function ur(l,t){l.uniform1iv(this.addr,t)}function dr(l,t){l.uniform2iv(this.addr,t)}function pr(l,t){l.uniform3iv(this.addr,t)}function fr(l,t){l.uniform4iv(this.addr,t)}function gr(l,t){l.uniform1uiv(this.addr,t)}function _r(l,t){l.uniform2uiv(this.addr,t)}function vr(l,t){l.uniform3uiv(this.addr,t)}function xr(l,t){l.uniform4uiv(this.addr,t)}function yr(l,t,e){const n=this.cache,i=t.length,r=Bi(e,i);Fi(n,r)||(l.uniform1iv(this.addr,r),zi(n,r));for(let l=0;l!==i;++l)e.setTexture2D(t[l]||wi,r[l])}function Mr(l,t,e){const n=this.cache,i=t.length,r=Bi(e,i);Fi(n,r)||(l.uniform1iv(this.addr,r),zi(n,r));for(let l=0;l!==i;++l)e.setTexture3D(t[l]||Ci,r[l])}function Sr(l,t,e){const n=this.cache,i=t.length,r=Bi(e,i);Fi(n,r)||(l.uniform1iv(this.addr,r),zi(n,r));for(let l=0;l!==i;++l)e.setTextureCube(t[l]||Pi,r[l])}function Er(l,t,e){const n=this.cache,i=t.length,r=Bi(e,i);Fi(n,r)||(l.uniform1iv(this.addr,r),zi(n,r));for(let l=0;l!==i;++l)e.setTexture2DArray(t[l]||Ri,r[l])}class Tr{constructor(l,t,e){this.id=l,this.addr=e,this.cache=[],this.type=t.type,this.setValue=function(l){switch(l){case 5126:return Vi;case 35664:return Hi;case 35665:return ki;case 35666:return Gi;case 35674:return Wi;case 35675:return Xi;case 35676:return ji;case 5124:case 35670:return Yi;case 35667:case 35671:return Ji;case 35668:case 35672:return Zi;case 35669:case 35673:return Ki;case 5125:return $i;case 36294:return Qi;case 36295:return lr;case 36296:return tr;case 35678:case 36198:case 36298:case 36306:case 35682:return er;case 35679:case 36299:case 36307:return nr;case 35680:case 36300:case 36308:case 36293:return ir;case 36289:case 36303:case 36311:case 36292:return rr}}(t.type)}}class br{constructor(l,t,e){this.id=l,this.addr=e,this.cache=[],this.type=t.type,this.size=t.size,this.setValue=function(l){switch(l){case 5126:return ar;case 35664:return qr;case 35665:return sr;case 35666:return or;case 35674:return cr;case 35675:return mr;case 35676:return hr;case 5124:case 35670:return ur;case 35667:case 35671:return dr;case 35668:case 35672:return pr;case 35669:case 35673:return fr;case 5125:return gr;case 36294:return _r;case 36295:return vr;case 36296:return xr;case 35678:case 36198:case 36298:case 36306:case 35682:return yr;case 35679:case 36299:case 36307:return Mr;case 35680:case 36300:case 36308:case 36293:return Sr;case 36289:case 36303:case 36311:case 36292:return Er}}(t.type)}}class wr{constructor(l){this.id=l,this.seq=[],this.map={}}setValue(l,t,e){const n=this.seq;for(let i=0,r=n.length;i!==r;++i){const r=n[i];r.setValue(l,t[r.id],e)}}}const Ar=/(\w+)(\])?(\[|\.)?/g;function Rr(l,t){l.seq.push(t),l.map[t.id]=t}function Cr(l,t,e){const n=l.name,i=n.length;for(Ar.lastIndex=0;;){const r=Ar.exec(n),a=Ar.lastIndex;let q=r[1];const s="]"===r[2],o=r[3];if(s&&(q|=0),void 0===o||"["===o&&a+2===i){Rr(e,void 0===o?new Tr(q,l,t):new br(q,l,t));break}{let l=e.map[q];void 0===l&&(l=new wr(q),Rr(e,l)),e=l}}}class Pr{constructor(l,t){this.seq=[],this.map={};const e=l.getProgramParameter(t,l.ACTIVE_UNIFORMS);for(let n=0;n<e;++n){const e=l.getActiveUniform(t,n);Cr(e,l.getUniformLocation(t,e.name),this)}}setValue(l,t,e,n){const i=this.map[t];void 0!==i&&i.setValue(l,e,n)}setOptional(l,t,e){const n=t[e];void 0!==n&&this.setValue(l,e,n)}static upload(l,t,e,n){for(let i=0,r=t.length;i!==r;++i){const r=t[i],a=e[r.id];!1!==a.needsUpdate&&r.setValue(l,a.value,n)}}static seqWithValue(l,t){const e=[];for(let n=0,i=l.length;n!==i;++n){const i=l[n];i.id in t&&e.push(i)}return e}}function Lr(l,t,e){const n=l.createShader(t);return l.shaderSource(n,e),l.compileShader(n),n}const Ur=37297;let Nr=0;function Ir(l,t,e){const n=l.getShaderParameter(t,l.COMPILE_STATUS),i=l.getShaderInfoLog(t).trim();if(n&&""===i)return"";const r=/ERROR: 0:(\d+)/.exec(i);if(r){const n=parseInt(r[1]);return e.toUpperCase()+"\n\n"+i+"\n\n"+function(l,t){const e=l.split("\n"),n=[],i=Math.max(t-6,0),r=Math.min(t+6,e.length);for(let l=i;l<r;l++){const i=l+1;n.push(`${i===t?">":" "} ${i}: ${e[l]}`)}return n.join("\n")}(l.getShaderSource(t),n)}return i}function Dr(l,t){const e=function(l){const t=lt.getPrimaries(lt.workingColorSpace),e=lt.getPrimaries(l);let n;switch(t===e?n="":t===vl&&e===_l?n="LinearDisplayP3ToLinearSRGB":t===_l&&e===vl&&(n="LinearSRGBToLinearDisplayP3"),l){case ul:case pl:return[n,"LinearTransferOETF"];case hl:case dl:return[n,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space:",l),[n,"LinearTransferOETF"]}}(t);return`vec4 ${l}( vec4 value ) { return ${e[0]}( ${e[1]}( value ) ); }`}function Or(l,t){let e;switch(t){case C:e="Linear";break;case P:e="Reinhard";break;case L:e="OptimizedCineon";break;case U:e="ACESFilmic";break;case I:e="AgX";break;case D:e="Neutral";break;case N:e="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),e="Linear"}return"vec3 "+l+"( vec3 color ) { return "+e+"ToneMapping( color ); }"}function Fr(l){return""!==l}function zr(l,t){const e=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return l.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,e).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function Br(l,t){return l.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const Vr=/^[ \t]*#include +<([\w\d./]+)>/gm;function Hr(l){return l.replace(Vr,Gr)}const kr=new Map;function Gr(l,t){let e=Wn[t];if(void 0===e){const l=kr.get(t);if(void 0===l)throw new Error("Can not resolve #include <"+t+">");e=Wn[l],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',t,l)}return Hr(e)}const Wr=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Xr(l){return l.replace(Wr,jr)}function jr(l,t,e,n){let i="";for(let l=parseInt(t);l<parseInt(e);l++)i+=n.replace(/\[\s*i\s*\]/g,"[ "+l+" ]").replace(/UNROLLED_LOOP_INDEX/g,l);return i}function Yr(l){let t=`precision ${l.precision} float;\n\tprecision ${l.precision} int;\n\tprecision ${l.precision} sampler2D;\n\tprecision ${l.precision} samplerCube;\n\tprecision ${l.precision} sampler3D;\n\tprecision ${l.precision} sampler2DArray;\n\tprecision ${l.precision} sampler2DShadow;\n\tprecision ${l.precision} samplerCubeShadow;\n\tprecision ${l.precision} sampler2DArrayShadow;\n\tprecision ${l.precision} isampler2D;\n\tprecision ${l.precision} isampler3D;\n\tprecision ${l.precision} isamplerCube;\n\tprecision ${l.precision} isampler2DArray;\n\tprecision ${l.precision} usampler2D;\n\tprecision ${l.precision} usampler3D;\n\tprecision ${l.precision} usamplerCube;\n\tprecision ${l.precision} usampler2DArray;\n\t`;return"highp"===l.precision?t+="\n#define HIGH_PRECISION":"mediump"===l.precision?t+="\n#define MEDIUM_PRECISION":"lowp"===l.precision&&(t+="\n#define LOW_PRECISION"),t}function Jr(l,e,r,a){const q=l.getContext(),s=r.defines;let o=r.vertexShader,c=r.fragmentShader;const m=function(l){let e="SHADOWMAP_TYPE_BASIC";return l.shadowMapType===t?e="SHADOWMAP_TYPE_PCF":l.shadowMapType===n?e="SHADOWMAP_TYPE_PCF_SOFT":l.shadowMapType===i&&(e="SHADOWMAP_TYPE_VSM"),e}(r),h=function(l){let t="ENVMAP_TYPE_CUBE";if(l.envMap)switch(l.envMapMode){case O:case F:t="ENVMAP_TYPE_CUBE";break;case z:t="ENVMAP_TYPE_CUBE_UV"}return t}(r),u=function(l){let t="ENVMAP_MODE_REFLECTION";return l.envMap&&l.envMapMode===F&&(t="ENVMAP_MODE_REFRACTION"),t}(r),d=function(l){let t="ENVMAP_BLENDING_NONE";if(l.envMap)switch(l.combine){case b:t="ENVMAP_BLENDING_MULTIPLY";break;case w:t="ENVMAP_BLENDING_MIX";break;case A:t="ENVMAP_BLENDING_ADD"}return t}(r),p=function(l){const t=l.envMapCubeUVHeight;if(null===t)return null;const e=Math.log2(t)-2,n=1/t;return{texelWidth:1/(3*Math.max(Math.pow(2,e),112)),texelHeight:n,maxMip:e}}(r),f=function(l){return[l.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",l.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(Fr).join("\n")}(r),g=function(l){const t=[];for(const e in l){const n=l[e];!1!==n&&t.push("#define "+e+" "+n)}return t.join("\n")}(s),_=q.createProgram();let v,x,y=r.glslVersion?"#version "+r.glslVersion+"\n":"";r.isRawShaderMaterial?(v=["#define SHADER_TYPE "+r.shaderType,"#define SHADER_NAME "+r.shaderName,g].filter(Fr).join("\n"),v.length>0&&(v+="\n"),x=["#define SHADER_TYPE "+r.shaderType,"#define SHADER_NAME "+r.shaderName,g].filter(Fr).join("\n"),x.length>0&&(x+="\n")):(v=[Yr(r),"#define SHADER_TYPE "+r.shaderType,"#define SHADER_NAME "+r.shaderName,g,r.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",r.batching?"#define USE_BATCHING":"",r.instancing?"#define USE_INSTANCING":"",r.instancingColor?"#define USE_INSTANCING_COLOR":"",r.instancingMorph?"#define USE_INSTANCING_MORPH":"",r.useFog&&r.fog?"#define USE_FOG":"",r.useFog&&r.fogExp2?"#define FOG_EXP2":"",r.map?"#define USE_MAP":"",r.envMap?"#define USE_ENVMAP":"",r.envMap?"#define "+u:"",r.lightMap?"#define USE_LIGHTMAP":"",r.aoMap?"#define USE_AOMAP":"",r.bumpMap?"#define USE_BUMPMAP":"",r.normalMap?"#define USE_NORMALMAP":"",r.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",r.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",r.displacementMap?"#define USE_DISPLACEMENTMAP":"",r.emissiveMap?"#define USE_EMISSIVEMAP":"",r.anisotropy?"#define USE_ANISOTROPY":"",r.anisotropyMap?"#define USE_ANISOTROPYMAP":"",r.clearcoatMap?"#define USE_CLEARCOATMAP":"",r.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",r.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",r.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",r.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",r.specularMap?"#define USE_SPECULARMAP":"",r.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",r.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",r.roughnessMap?"#define USE_ROUGHNESSMAP":"",r.metalnessMap?"#define USE_METALNESSMAP":"",r.alphaMap?"#define USE_ALPHAMAP":"",r.alphaHash?"#define USE_ALPHAHASH":"",r.transmission?"#define USE_TRANSMISSION":"",r.transmissionMap?"#define USE_TRANSMISSIONMAP":"",r.thicknessMap?"#define USE_THICKNESSMAP":"",r.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",r.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",r.mapUv?"#define MAP_UV "+r.mapUv:"",r.alphaMapUv?"#define ALPHAMAP_UV "+r.alphaMapUv:"",r.lightMapUv?"#define LIGHTMAP_UV "+r.lightMapUv:"",r.aoMapUv?"#define AOMAP_UV "+r.aoMapUv:"",r.emissiveMapUv?"#define EMISSIVEMAP_UV "+r.emissiveMapUv:"",r.bumpMapUv?"#define BUMPMAP_UV "+r.bumpMapUv:"",r.normalMapUv?"#define NORMALMAP_UV "+r.normalMapUv:"",r.displacementMapUv?"#define DISPLACEMENTMAP_UV "+r.displacementMapUv:"",r.metalnessMapUv?"#define METALNESSMAP_UV "+r.metalnessMapUv:"",r.roughnessMapUv?"#define ROUGHNESSMAP_UV "+r.roughnessMapUv:"",r.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+r.anisotropyMapUv:"",r.clearcoatMapUv?"#define CLEARCOATMAP_UV "+r.clearcoatMapUv:"",r.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+r.clearcoatNormalMapUv:"",r.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+r.clearcoatRoughnessMapUv:"",r.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+r.iridescenceMapUv:"",r.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+r.iridescenceThicknessMapUv:"",r.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+r.sheenColorMapUv:"",r.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+r.sheenRoughnessMapUv:"",r.specularMapUv?"#define SPECULARMAP_UV "+r.specularMapUv:"",r.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+r.specularColorMapUv:"",r.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+r.specularIntensityMapUv:"",r.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+r.transmissionMapUv:"",r.thicknessMapUv?"#define THICKNESSMAP_UV "+r.thicknessMapUv:"",r.vertexTangents&&!1===r.flatShading?"#define USE_TANGENT":"",r.vertexColors?"#define USE_COLOR":"",r.vertexAlphas?"#define USE_COLOR_ALPHA":"",r.vertexUv1s?"#define USE_UV1":"",r.vertexUv2s?"#define USE_UV2":"",r.vertexUv3s?"#define USE_UV3":"",r.pointsUvs?"#define USE_POINTS_UV":"",r.flatShading?"#define FLAT_SHADED":"",r.skinning?"#define USE_SKINNING":"",r.morphTargets?"#define USE_MORPHTARGETS":"",r.morphNormals&&!1===r.flatShading?"#define USE_MORPHNORMALS":"",r.morphColors?"#define USE_MORPHCOLORS":"",r.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE":"",r.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+r.morphTextureStride:"",r.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+r.morphTargetsCount:"",r.doubleSided?"#define DOUBLE_SIDED":"",r.flipSided?"#define FLIP_SIDED":"",r.shadowMapEnabled?"#define USE_SHADOWMAP":"",r.shadowMapEnabled?"#define "+m:"",r.sizeAttenuation?"#define USE_SIZEATTENUATION":"",r.numLightProbes>0?"#define USE_LIGHT_PROBES":"",r.useLegacyLights?"#define LEGACY_LIGHTS":"",r.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","\tuniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","\tattribute vec2 uv1;","#endif","#ifdef USE_UV2","\tattribute vec2 uv2;","#endif","#ifdef USE_UV3","\tattribute vec2 uv3;","#endif","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Fr).join("\n"),x=[Yr(r),"#define SHADER_TYPE "+r.shaderType,"#define SHADER_NAME "+r.shaderName,g,r.useFog&&r.fog?"#define USE_FOG":"",r.useFog&&r.fogExp2?"#define FOG_EXP2":"",r.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",r.map?"#define USE_MAP":"",r.matcap?"#define USE_MATCAP":"",r.envMap?"#define USE_ENVMAP":"",r.envMap?"#define "+h:"",r.envMap?"#define "+u:"",r.envMap?"#define "+d:"",p?"#define CUBEUV_TEXEL_WIDTH "+p.texelWidth:"",p?"#define CUBEUV_TEXEL_HEIGHT "+p.texelHeight:"",p?"#define CUBEUV_MAX_MIP "+p.maxMip+".0":"",r.lightMap?"#define USE_LIGHTMAP":"",r.aoMap?"#define USE_AOMAP":"",r.bumpMap?"#define USE_BUMPMAP":"",r.normalMap?"#define USE_NORMALMAP":"",r.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",r.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",r.emissiveMap?"#define USE_EMISSIVEMAP":"",r.anisotropy?"#define USE_ANISOTROPY":"",r.anisotropyMap?"#define USE_ANISOTROPYMAP":"",r.clearcoat?"#define USE_CLEARCOAT":"",r.clearcoatMap?"#define USE_CLEARCOATMAP":"",r.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",r.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",r.dispersion?"#define USE_DISPERSION":"",r.iridescence?"#define USE_IRIDESCENCE":"",r.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",r.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",r.specularMap?"#define USE_SPECULARMAP":"",r.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",r.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",r.roughnessMap?"#define USE_ROUGHNESSMAP":"",r.metalnessMap?"#define USE_METALNESSMAP":"",r.alphaMap?"#define USE_ALPHAMAP":"",r.alphaTest?"#define USE_ALPHATEST":"",r.alphaHash?"#define USE_ALPHAHASH":"",r.sheen?"#define USE_SHEEN":"",r.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",r.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",r.transmission?"#define USE_TRANSMISSION":"",r.transmissionMap?"#define USE_TRANSMISSIONMAP":"",r.thicknessMap?"#define USE_THICKNESSMAP":"",r.vertexTangents&&!1===r.flatShading?"#define USE_TANGENT":"",r.vertexColors||r.instancingColor?"#define USE_COLOR":"",r.vertexAlphas?"#define USE_COLOR_ALPHA":"",r.vertexUv1s?"#define USE_UV1":"",r.vertexUv2s?"#define USE_UV2":"",r.vertexUv3s?"#define USE_UV3":"",r.pointsUvs?"#define USE_POINTS_UV":"",r.gradientMap?"#define USE_GRADIENTMAP":"",r.flatShading?"#define FLAT_SHADED":"",r.doubleSided?"#define DOUBLE_SIDED":"",r.flipSided?"#define FLIP_SIDED":"",r.shadowMapEnabled?"#define USE_SHADOWMAP":"",r.shadowMapEnabled?"#define "+m:"",r.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",r.numLightProbes>0?"#define USE_LIGHT_PROBES":"",r.useLegacyLights?"#define LEGACY_LIGHTS":"",r.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",r.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",r.toneMapping!==R?"#define TONE_MAPPING":"",r.toneMapping!==R?Wn.tonemapping_pars_fragment:"",r.toneMapping!==R?Or("toneMapping",r.toneMapping):"",r.dithering?"#define DITHERING":"",r.opaque?"#define OPAQUE":"",Wn.colorspace_pars_fragment,Dr("linearToOutputTexel",r.outputColorSpace),r.useDepthPacking?"#define DEPTH_PACKING "+r.depthPacking:"","\n"].filter(Fr).join("\n")),o=Hr(o),o=zr(o,r),o=Br(o,r),c=Hr(c),c=zr(c,r),c=Br(c,r),o=Xr(o),c=Xr(c),!0!==r.isRawShaderMaterial&&(y="#version 300 es\n",v=[f,"#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+v,x=["#define varying in",r.glslVersion===Rl?"":"layout(location = 0) out highp vec4 pc_fragColor;",r.glslVersion===Rl?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+x);const M=y+v+o,S=y+x+c,E=Lr(q,q.VERTEX_SHADER,M),T=Lr(q,q.FRAGMENT_SHADER,S);function C(t){if(l.debug.checkShaderErrors){const e=q.getProgramInfoLog(_).trim(),n=q.getShaderInfoLog(E).trim(),i=q.getShaderInfoLog(T).trim();let r=!0,a=!0;if(!1===q.getProgramParameter(_,q.LINK_STATUS))if(r=!1,"function"==typeof l.debug.onShaderError)l.debug.onShaderError(q,_,E,T);else{const l=Ir(q,E,"vertex"),n=Ir(q,T,"fragment");console.error("THREE.WebGLProgram: Shader Error "+q.getError()+" - VALIDATE_STATUS "+q.getProgramParameter(_,q.VALIDATE_STATUS)+"\n\nMaterial Name: "+t.name+"\nMaterial Type: "+t.type+"\n\nProgram Info Log: "+e+"\n"+l+"\n"+n)}else""!==e?console.warn("THREE.WebGLProgram: Program Info Log:",e):""!==n&&""!==i||(a=!1);a&&(t.diagnostics={runnable:r,programLog:e,vertexShader:{log:n,prefix:v},fragmentShader:{log:i,prefix:x}})}q.deleteShader(E),q.deleteShader(T),P=new Pr(q,_),L=function(l,t){const e={},n=l.getProgramParameter(t,l.ACTIVE_ATTRIBUTES);for(let i=0;i<n;i++){const n=l.getActiveAttrib(t,i),r=n.name;let a=1;n.type===l.FLOAT_MAT2&&(a=2),n.type===l.FLOAT_MAT3&&(a=3),n.type===l.FLOAT_MAT4&&(a=4),e[r]={type:n.type,location:l.getAttribLocation(t,r),locationSize:a}}return e}(q,_)}let P,L;q.attachShader(_,E),q.attachShader(_,T),void 0!==r.index0AttributeName?q.bindAttribLocation(_,0,r.index0AttributeName):!0===r.morphTargets&&q.bindAttribLocation(_,0,"position"),q.linkProgram(_),this.getUniforms=function(){return void 0===P&&C(this),P},this.getAttributes=function(){return void 0===L&&C(this),L};let U=!1===r.rendererExtensionParallelShaderCompile;return this.isReady=function(){return!1===U&&(U=q.getProgramParameter(_,Ur)),U},this.destroy=function(){a.releaseStatesOfProgram(this),q.deleteProgram(_),this.program=void 0},this.type=r.shaderType,this.name=r.shaderName,this.id=Nr++,this.cacheKey=e,this.usedTimes=1,this.program=_,this.vertexShader=E,this.fragmentShader=T,this}let Zr=0;class Kr{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(l){const t=l.vertexShader,e=l.fragmentShader,n=this._getShaderStage(t),i=this._getShaderStage(e),r=this._getShaderCacheForMaterial(l);return!1===r.has(n)&&(r.add(n),n.usedTimes++),!1===r.has(i)&&(r.add(i),i.usedTimes++),this}remove(l){const t=this.materialCache.get(l);for(const l of t)l.usedTimes--,0===l.usedTimes&&this.shaderCache.delete(l.code);return this.materialCache.delete(l),this}getVertexShaderID(l){return this._getShaderStage(l.vertexShader).id}getFragmentShaderID(l){return this._getShaderStage(l.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(l){const t=this.materialCache;let e=t.get(l);return void 0===e&&(e=new Set,t.set(l,e)),e}_getShaderStage(l){const t=this.shaderCache;let e=t.get(l);return void 0===e&&(e=new $r(l),t.set(l,e)),e}}class $r{constructor(l){this.id=Zr++,this.code=l,this.usedTimes=0}}function Qr(l,t,e,n,i,r,a){const q=new ne,s=new Kr,o=new Set,c=[],m=i.logarithmicDepthBuffer,h=i.vertexTextures;let u=i.precision;const d={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function p(l){return o.add(l),0===l?"uv":`uv${l}`}return{getParameters:function(r,q,c,f,g){const _=f.fog,v=g.geometry,x=r.isMeshStandardMaterial?f.environment:null,y=(r.isMeshStandardMaterial?e:t).get(r.envMap||x),M=y&&y.mapping===z?y.image.height:null,S=d[r.type];null!==r.precision&&(u=i.getMaxPrecision(r.precision),u!==r.precision&&console.warn("THREE.WebGLProgram.getParameters:",r.precision,"not supported, using",u,"instead."));const E=v.morphAttributes.position||v.morphAttributes.normal||v.morphAttributes.color,T=void 0!==E?E.length:0;let b,w,A,C,P=0;if(void 0!==v.morphAttributes.position&&(P=1),void 0!==v.morphAttributes.normal&&(P=2),void 0!==v.morphAttributes.color&&(P=3),S){const l=jn[S];b=l.vertexShader,w=l.fragmentShader}else b=r.vertexShader,w=r.fragmentShader,s.update(r),A=s.getVertexShaderID(r),C=s.getFragmentShaderID(r);const L=l.getRenderTarget(),U=!0===g.isInstancedMesh,N=!0===g.isBatchedMesh,I=!!r.map,D=!!r.matcap,O=!!y,F=!!r.aoMap,B=!!r.lightMap,V=!!r.bumpMap,H=!!r.normalMap,k=!!r.displacementMap,G=!!r.emissiveMap,W=!!r.metalnessMap,X=!!r.roughnessMap,j=r.anisotropy>0,Y=r.clearcoat>0,J=r.dispersion>0,Z=r.iridescence>0,K=r.sheen>0,$=r.transmission>0,Q=j&&!!r.anisotropyMap,ll=Y&&!!r.clearcoatMap,tl=Y&&!!r.clearcoatNormalMap,el=Y&&!!r.clearcoatRoughnessMap,nl=Z&&!!r.iridescenceMap,il=Z&&!!r.iridescenceThicknessMap,rl=K&&!!r.sheenColorMap,al=K&&!!r.sheenRoughnessMap,ql=!!r.specularMap,sl=!!r.specularColorMap,ol=!!r.specularIntensityMap,cl=$&&!!r.transmissionMap,ml=$&&!!r.thicknessMap,hl=!!r.gradientMap,dl=!!r.alphaMap,pl=r.alphaTest>0,fl=!!r.alphaHash,_l=!!r.extensions;let vl=R;r.toneMapped&&(null!==L&&!0!==L.isXRRenderTarget||(vl=l.toneMapping));const xl={shaderID:S,shaderType:r.type,shaderName:r.name,vertexShader:b,fragmentShader:w,defines:r.defines,customVertexShaderID:A,customFragmentShaderID:C,isRawShaderMaterial:!0===r.isRawShaderMaterial,glslVersion:r.glslVersion,precision:u,batching:N,instancing:U,instancingColor:U&&null!==g.instanceColor,instancingMorph:U&&null!==g.morphTexture,supportsVertexTextures:h,outputColorSpace:null===L?l.outputColorSpace:!0===L.isXRRenderTarget?L.texture.colorSpace:ul,alphaToCoverage:!!r.alphaToCoverage,map:I,matcap:D,envMap:O,envMapMode:O&&y.mapping,envMapCubeUVHeight:M,aoMap:F,lightMap:B,bumpMap:V,normalMap:H,displacementMap:h&&k,emissiveMap:G,normalMapObjectSpace:H&&1===r.normalMapType,normalMapTangentSpace:H&&0===r.normalMapType,metalnessMap:W,roughnessMap:X,anisotropy:j,anisotropyMap:Q,clearcoat:Y,clearcoatMap:ll,clearcoatNormalMap:tl,clearcoatRoughnessMap:el,dispersion:J,iridescence:Z,iridescenceMap:nl,iridescenceThicknessMap:il,sheen:K,sheenColorMap:rl,sheenRoughnessMap:al,specularMap:ql,specularColorMap:sl,specularIntensityMap:ol,transmission:$,transmissionMap:cl,thicknessMap:ml,gradientMap:hl,opaque:!1===r.transparent&&1===r.blending&&!1===r.alphaToCoverage,alphaMap:dl,alphaTest:pl,alphaHash:fl,combine:r.combine,mapUv:I&&p(r.map.channel),aoMapUv:F&&p(r.aoMap.channel),lightMapUv:B&&p(r.lightMap.channel),bumpMapUv:V&&p(r.bumpMap.channel),normalMapUv:H&&p(r.normalMap.channel),displacementMapUv:k&&p(r.displacementMap.channel),emissiveMapUv:G&&p(r.emissiveMap.channel),metalnessMapUv:W&&p(r.metalnessMap.channel),roughnessMapUv:X&&p(r.roughnessMap.channel),anisotropyMapUv:Q&&p(r.anisotropyMap.channel),clearcoatMapUv:ll&&p(r.clearcoatMap.channel),clearcoatNormalMapUv:tl&&p(r.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:el&&p(r.clearcoatRoughnessMap.channel),iridescenceMapUv:nl&&p(r.iridescenceMap.channel),iridescenceThicknessMapUv:il&&p(r.iridescenceThicknessMap.channel),sheenColorMapUv:rl&&p(r.sheenColorMap.channel),sheenRoughnessMapUv:al&&p(r.sheenRoughnessMap.channel),specularMapUv:ql&&p(r.specularMap.channel),specularColorMapUv:sl&&p(r.specularColorMap.channel),specularIntensityMapUv:ol&&p(r.specularIntensityMap.channel),transmissionMapUv:cl&&p(r.transmissionMap.channel),thicknessMapUv:ml&&p(r.thicknessMap.channel),alphaMapUv:dl&&p(r.alphaMap.channel),vertexTangents:!!v.attributes.tangent&&(H||j),vertexColors:r.vertexColors,vertexAlphas:!0===r.vertexColors&&!!v.attributes.color&&4===v.attributes.color.itemSize,pointsUvs:!0===g.isPoints&&!!v.attributes.uv&&(I||dl),fog:!!_,useFog:!0===r.fog,fogExp2:!!_&&_.isFogExp2,flatShading:!0===r.flatShading,sizeAttenuation:!0===r.sizeAttenuation,logarithmicDepthBuffer:m,skinning:!0===g.isSkinnedMesh,morphTargets:void 0!==v.morphAttributes.position,morphNormals:void 0!==v.morphAttributes.normal,morphColors:void 0!==v.morphAttributes.color,morphTargetsCount:T,morphTextureStride:P,numDirLights:q.directional.length,numPointLights:q.point.length,numSpotLights:q.spot.length,numSpotLightMaps:q.spotLightMap.length,numRectAreaLights:q.rectArea.length,numHemiLights:q.hemi.length,numDirLightShadows:q.directionalShadowMap.length,numPointLightShadows:q.pointShadowMap.length,numSpotLightShadows:q.spotShadowMap.length,numSpotLightShadowsWithMaps:q.numSpotLightShadowsWithMaps,numLightProbes:q.numLightProbes,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,dithering:r.dithering,shadowMapEnabled:l.shadowMap.enabled&&c.length>0,shadowMapType:l.shadowMap.type,toneMapping:vl,useLegacyLights:l._useLegacyLights,decodeVideoTexture:I&&!0===r.map.isVideoTexture&&lt.getTransfer(r.map.colorSpace)===gl,premultipliedAlpha:r.premultipliedAlpha,doubleSided:2===r.side,flipSided:1===r.side,useDepthPacking:r.depthPacking>=0,depthPacking:r.depthPacking||0,index0AttributeName:r.index0AttributeName,extensionClipCullDistance:_l&&!0===r.extensions.clipCullDistance&&n.has("WEBGL_clip_cull_distance"),extensionMultiDraw:_l&&!0===r.extensions.multiDraw&&n.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:n.has("KHR_parallel_shader_compile"),customProgramCacheKey:r.customProgramCacheKey()};return xl.vertexUv1s=o.has(1),xl.vertexUv2s=o.has(2),xl.vertexUv3s=o.has(3),o.clear(),xl},getProgramCacheKey:function(t){const e=[];if(t.shaderID?e.push(t.shaderID):(e.push(t.customVertexShaderID),e.push(t.customFragmentShaderID)),void 0!==t.defines)for(const l in t.defines)e.push(l),e.push(t.defines[l]);return!1===t.isRawShaderMaterial&&(function(l,t){l.push(t.precision),l.push(t.outputColorSpace),l.push(t.envMapMode),l.push(t.envMapCubeUVHeight),l.push(t.mapUv),l.push(t.alphaMapUv),l.push(t.lightMapUv),l.push(t.aoMapUv),l.push(t.bumpMapUv),l.push(t.normalMapUv),l.push(t.displacementMapUv),l.push(t.emissiveMapUv),l.push(t.metalnessMapUv),l.push(t.roughnessMapUv),l.push(t.anisotropyMapUv),l.push(t.clearcoatMapUv),l.push(t.clearcoatNormalMapUv),l.push(t.clearcoatRoughnessMapUv),l.push(t.iridescenceMapUv),l.push(t.iridescenceThicknessMapUv),l.push(t.sheenColorMapUv),l.push(t.sheenRoughnessMapUv),l.push(t.specularMapUv),l.push(t.specularColorMapUv),l.push(t.specularIntensityMapUv),l.push(t.transmissionMapUv),l.push(t.thicknessMapUv),l.push(t.combine),l.push(t.fogExp2),l.push(t.sizeAttenuation),l.push(t.morphTargetsCount),l.push(t.morphAttributeCount),l.push(t.numDirLights),l.push(t.numPointLights),l.push(t.numSpotLights),l.push(t.numSpotLightMaps),l.push(t.numHemiLights),l.push(t.numRectAreaLights),l.push(t.numDirLightShadows),l.push(t.numPointLightShadows),l.push(t.numSpotLightShadows),l.push(t.numSpotLightShadowsWithMaps),l.push(t.numLightProbes),l.push(t.shadowMapType),l.push(t.toneMapping),l.push(t.numClippingPlanes),l.push(t.numClipIntersection),l.push(t.depthPacking)}(e,t),function(l,t){q.disableAll(),t.supportsVertexTextures&&q.enable(0),t.instancing&&q.enable(1),t.instancingColor&&q.enable(2),t.instancingMorph&&q.enable(3),t.matcap&&q.enable(4),t.envMap&&q.enable(5),t.normalMapObjectSpace&&q.enable(6),t.normalMapTangentSpace&&q.enable(7),t.clearcoat&&q.enable(8),t.iridescence&&q.enable(9),t.alphaTest&&q.enable(10),t.vertexColors&&q.enable(11),t.vertexAlphas&&q.enable(12),t.vertexUv1s&&q.enable(13),t.vertexUv2s&&q.enable(14),t.vertexUv3s&&q.enable(15),t.vertexTangents&&q.enable(16),t.anisotropy&&q.enable(17),t.alphaHash&&q.enable(18),t.batching&&q.enable(19),t.dispersion&&q.enable(20),l.push(q.mask),q.disableAll(),t.fog&&q.enable(0),t.useFog&&q.enable(1),t.flatShading&&q.enable(2),t.logarithmicDepthBuffer&&q.enable(3),t.skinning&&q.enable(4),t.morphTargets&&q.enable(5),t.morphNormals&&q.enable(6),t.morphColors&&q.enable(7),t.premultipliedAlpha&&q.enable(8),t.shadowMapEnabled&&q.enable(9),t.useLegacyLights&&q.enable(10),t.doubleSided&&q.enable(11),t.flipSided&&q.enable(12),t.useDepthPacking&&q.enable(13),t.dithering&&q.enable(14),t.transmission&&q.enable(15),t.sheen&&q.enable(16),t.opaque&&q.enable(17),t.pointsUvs&&q.enable(18),t.decodeVideoTexture&&q.enable(19),t.alphaToCoverage&&q.enable(20),l.push(q.mask)}(e,t),e.push(l.outputColorSpace)),e.push(t.customProgramCacheKey),e.join()},getUniforms:function(l){const t=d[l.type];let e;if(t){const l=jn[t];e=En.clone(l.uniforms)}else e=l.uniforms;return e},acquireProgram:function(t,e){let n;for(let l=0,t=c.length;l<t;l++){const t=c[l];if(t.cacheKey===e){n=t,++n.usedTimes;break}}return void 0===n&&(n=new Jr(l,e,t,r),c.push(n)),n},releaseProgram:function(l){if(0==--l.usedTimes){const t=c.indexOf(l);c[t]=c[c.length-1],c.pop(),l.destroy()}},releaseShaderCache:function(l){s.remove(l)},programs:c,dispose:function(){s.dispose()}}}function la(){let l=new WeakMap;return{get:function(t){let e=l.get(t);return void 0===e&&(e={},l.set(t,e)),e},remove:function(t){l.delete(t)},update:function(t,e,n){l.get(t)[e]=n},dispose:function(){l=new WeakMap}}}function ta(l,t){return l.groupOrder!==t.groupOrder?l.groupOrder-t.groupOrder:l.renderOrder!==t.renderOrder?l.renderOrder-t.renderOrder:l.material.id!==t.material.id?l.material.id-t.material.id:l.z!==t.z?l.z-t.z:l.id-t.id}function ea(l,t){return l.groupOrder!==t.groupOrder?l.groupOrder-t.groupOrder:l.renderOrder!==t.renderOrder?l.renderOrder-t.renderOrder:l.z!==t.z?t.z-l.z:l.id-t.id}function na(){const l=[];let t=0;const e=[],n=[],i=[];function r(e,n,i,r,a,q){let s=l[t];return void 0===s?(s={id:e.id,object:e,geometry:n,material:i,groupOrder:r,renderOrder:e.renderOrder,z:a,group:q},l[t]=s):(s.id=e.id,s.object=e,s.geometry=n,s.material=i,s.groupOrder=r,s.renderOrder=e.renderOrder,s.z=a,s.group=q),t++,s}return{opaque:e,transmissive:n,transparent:i,init:function(){t=0,e.length=0,n.length=0,i.length=0},push:function(l,t,a,q,s,o){const c=r(l,t,a,q,s,o);a.transmission>0?n.push(c):!0===a.transparent?i.push(c):e.push(c)},unshift:function(l,t,a,q,s,o){const c=r(l,t,a,q,s,o);a.transmission>0?n.unshift(c):!0===a.transparent?i.unshift(c):e.unshift(c)},finish:function(){for(let e=t,n=l.length;e<n;e++){const t=l[e];if(null===t.id)break;t.id=null,t.object=null,t.geometry=null,t.material=null,t.group=null}},sort:function(l,t){e.length>1&&e.sort(l||ta),n.length>1&&n.sort(t||ea),i.length>1&&i.sort(t||ea)}}}function ia(){let l=new WeakMap;return{get:function(t,e){const n=l.get(t);let i;return void 0===n?(i=new na,l.set(t,[i])):e>=n.length?(i=new na,n.push(i)):i=n[e],i},dispose:function(){l=new WeakMap}}}function ra(){const l={};return{get:function(t){if(void 0!==l[t.id])return l[t.id];let e;switch(t.type){case"DirectionalLight":e={direction:new ft,color:new Ie};break;case"SpotLight":e={position:new ft,direction:new ft,color:new Ie,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":e={position:new ft,color:new Ie,distance:0,decay:0};break;case"HemisphereLight":e={direction:new ft,skyColor:new Ie,groundColor:new Ie};break;case"RectAreaLight":e={color:new Ie,position:new ft,halfWidth:new ft,halfHeight:new ft}}return l[t.id]=e,e}}}let aa=0;function qa(l,t){return(t.castShadow?2:0)-(l.castShadow?2:0)+(t.map?1:0)-(l.map?1:0)}function sa(l){const t=new ra,e=function(){const l={};return{get:function(t){if(void 0!==l[t.id])return l[t.id];let e;switch(t.type){case"DirectionalLight":case"SpotLight":e={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new kl};break;case"PointLight":e={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new kl,shadowCameraNear:1,shadowCameraFar:1e3}}return l[t.id]=e,e}}}(),n={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let l=0;l<9;l++)n.probe.push(new ft);const i=new ft,r=new Xt,a=new Xt;return{setup:function(i,r){let a=0,q=0,s=0;for(let l=0;l<9;l++)n.probe[l].set(0,0,0);let o=0,c=0,m=0,h=0,u=0,d=0,p=0,f=0,g=0,_=0,v=0;i.sort(qa);const x=!0===r?Math.PI:1;for(let l=0,r=i.length;l<r;l++){const r=i[l],y=r.color,M=r.intensity,S=r.distance,E=r.shadow&&r.shadow.map?r.shadow.map.texture:null;if(r.isAmbientLight)a+=y.r*M*x,q+=y.g*M*x,s+=y.b*M*x;else if(r.isLightProbe){for(let l=0;l<9;l++)n.probe[l].addScaledVector(r.sh.coefficients[l],M);v++}else if(r.isDirectionalLight){const l=t.get(r);if(l.color.copy(r.color).multiplyScalar(r.intensity*x),r.castShadow){const l=r.shadow,t=e.get(r);t.shadowBias=l.bias,t.shadowNormalBias=l.normalBias,t.shadowRadius=l.radius,t.shadowMapSize=l.mapSize,n.directionalShadow[o]=t,n.directionalShadowMap[o]=E,n.directionalShadowMatrix[o]=r.shadow.matrix,d++}n.directional[o]=l,o++}else if(r.isSpotLight){const l=t.get(r);l.position.setFromMatrixPosition(r.matrixWorld),l.color.copy(y).multiplyScalar(M*x),l.distance=S,l.coneCos=Math.cos(r.angle),l.penumbraCos=Math.cos(r.angle*(1-r.penumbra)),l.decay=r.decay,n.spot[m]=l;const i=r.shadow;if(r.map&&(n.spotLightMap[g]=r.map,g++,i.updateMatrices(r),r.castShadow&&_++),n.spotLightMatrix[m]=i.matrix,r.castShadow){const l=e.get(r);l.shadowBias=i.bias,l.shadowNormalBias=i.normalBias,l.shadowRadius=i.radius,l.shadowMapSize=i.mapSize,n.spotShadow[m]=l,n.spotShadowMap[m]=E,f++}m++}else if(r.isRectAreaLight){const l=t.get(r);l.color.copy(y).multiplyScalar(M),l.halfWidth.set(.5*r.width,0,0),l.halfHeight.set(0,.5*r.height,0),n.rectArea[h]=l,h++}else if(r.isPointLight){const l=t.get(r);if(l.color.copy(r.color).multiplyScalar(r.intensity*x),l.distance=r.distance,l.decay=r.decay,r.castShadow){const l=r.shadow,t=e.get(r);t.shadowBias=l.bias,t.shadowNormalBias=l.normalBias,t.shadowRadius=l.radius,t.shadowMapSize=l.mapSize,t.shadowCameraNear=l.camera.near,t.shadowCameraFar=l.camera.far,n.pointShadow[c]=t,n.pointShadowMap[c]=E,n.pointShadowMatrix[c]=r.shadow.matrix,p++}n.point[c]=l,c++}else if(r.isHemisphereLight){const l=t.get(r);l.skyColor.copy(r.color).multiplyScalar(M*x),l.groundColor.copy(r.groundColor).multiplyScalar(M*x),n.hemi[u]=l,u++}}h>0&&(!0===l.has("OES_texture_float_linear")?(n.rectAreaLTC1=Xn.LTC_FLOAT_1,n.rectAreaLTC2=Xn.LTC_FLOAT_2):(n.rectAreaLTC1=Xn.LTC_HALF_1,n.rectAreaLTC2=Xn.LTC_HALF_2)),n.ambient[0]=a,n.ambient[1]=q,n.ambient[2]=s;const y=n.hash;y.directionalLength===o&&y.pointLength===c&&y.spotLength===m&&y.rectAreaLength===h&&y.hemiLength===u&&y.numDirectionalShadows===d&&y.numPointShadows===p&&y.numSpotShadows===f&&y.numSpotMaps===g&&y.numLightProbes===v||(n.directional.length=o,n.spot.length=m,n.rectArea.length=h,n.point.length=c,n.hemi.length=u,n.directionalShadow.length=d,n.directionalShadowMap.length=d,n.pointShadow.length=p,n.pointShadowMap.length=p,n.spotShadow.length=f,n.spotShadowMap.length=f,n.directionalShadowMatrix.length=d,n.pointShadowMatrix.length=p,n.spotLightMatrix.length=f+g-_,n.spotLightMap.length=g,n.numSpotLightShadowsWithMaps=_,n.numLightProbes=v,y.directionalLength=o,y.pointLength=c,y.spotLength=m,y.rectAreaLength=h,y.hemiLength=u,y.numDirectionalShadows=d,y.numPointShadows=p,y.numSpotShadows=f,y.numSpotMaps=g,y.numLightProbes=v,n.version=aa++)},setupView:function(l,t){let e=0,q=0,s=0,o=0,c=0;const m=t.matrixWorldInverse;for(let t=0,h=l.length;t<h;t++){const h=l[t];if(h.isDirectionalLight){const l=n.directional[e];l.direction.setFromMatrixPosition(h.matrixWorld),i.setFromMatrixPosition(h.target.matrixWorld),l.direction.sub(i),l.direction.transformDirection(m),e++}else if(h.isSpotLight){const l=n.spot[s];l.position.setFromMatrixPosition(h.matrixWorld),l.position.applyMatrix4(m),l.direction.setFromMatrixPosition(h.matrixWorld),i.setFromMatrixPosition(h.target.matrixWorld),l.direction.sub(i),l.direction.transformDirection(m),s++}else if(h.isRectAreaLight){const l=n.rectArea[o];l.position.setFromMatrixPosition(h.matrixWorld),l.position.applyMatrix4(m),a.identity(),r.copy(h.matrixWorld),r.premultiply(m),a.extractRotation(r),l.halfWidth.set(.5*h.width,0,0),l.halfHeight.set(0,.5*h.height,0),l.halfWidth.applyMatrix4(a),l.halfHeight.applyMatrix4(a),o++}else if(h.isPointLight){const l=n.point[q];l.position.setFromMatrixPosition(h.matrixWorld),l.position.applyMatrix4(m),q++}else if(h.isHemisphereLight){const l=n.hemi[c];l.direction.setFromMatrixPosition(h.matrixWorld),l.direction.transformDirection(m),c++}}},state:n}}function oa(l){const t=new sa(l),e=[],n=[],i={lightsArray:e,shadowsArray:n,camera:null,lights:t,transmissionRenderTarget:{}};return{init:function(l){i.camera=l,e.length=0,n.length=0},state:i,setupLights:function(l){t.setup(e,l)},setupLightsView:function(l){t.setupView(e,l)},pushLight:function(l){e.push(l)},pushShadow:function(l){n.push(l)}}}function ca(l){let t=new WeakMap;return{get:function(e,n=0){const i=t.get(e);let r;return void 0===i?(r=new oa(l),t.set(e,[r])):n>=i.length?(r=new oa(l),i.push(r)):r=i[n],r},dispose:function(){t=new WeakMap}}}class ma extends Fe{constructor(l){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(l)}copy(l){return super.copy(l),this.depthPacking=l.depthPacking,this.map=l.map,this.alphaMap=l.alphaMap,this.displacementMap=l.displacementMap,this.displacementScale=l.displacementScale,this.displacementBias=l.displacementBias,this.wireframe=l.wireframe,this.wireframeLinewidth=l.wireframeLinewidth,this}}class ha extends Fe{constructor(l){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(l)}copy(l){return super.copy(l),this.map=l.map,this.alphaMap=l.alphaMap,this.displacementMap=l.displacementMap,this.displacementScale=l.displacementScale,this.displacementBias=l.displacementBias,this}}function ua(l,e,n){let s=new Vn;const o=new kl,c=new kl,m=new ct,h=new ma({depthPacking:3201}),u=new ha,d={},p=n.maxTextureSize,f={[r]:1,[a]:0,[q]:2},g=new Tn({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new kl},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),_=g.clone();_.defines.HORIZONTAL_PASS=1;const v=new Qe;v.setAttribute("position",new He(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const x=new _n(v,g),y=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=t;let M=this.type;function S(t,n){const i=e.update(x);g.defines.VSM_SAMPLES!==t.blurSamples&&(g.defines.VSM_SAMPLES=t.blurSamples,_.defines.VSM_SAMPLES=t.blurSamples,g.needsUpdate=!0,_.needsUpdate=!0),null===t.mapPass&&(t.mapPass=new ht(o.x,o.y)),g.uniforms.shadow_pass.value=t.map.texture,g.uniforms.resolution.value=t.mapSize,g.uniforms.radius.value=t.radius,l.setRenderTarget(t.mapPass),l.clear(),l.renderBufferDirect(n,null,i,g,x,null),_.uniforms.shadow_pass.value=t.mapPass.texture,_.uniforms.resolution.value=t.mapSize,_.uniforms.radius.value=t.radius,l.setRenderTarget(t.map),l.clear(),l.renderBufferDirect(n,null,i,_,x,null)}function E(t,e,n,r){let a=null;const q=!0===n.isPointLight?t.customDistanceMaterial:t.customDepthMaterial;if(void 0!==q)a=q;else if(a=!0===n.isPointLight?u:h,l.localClippingEnabled&&!0===e.clipShadows&&Array.isArray(e.clippingPlanes)&&0!==e.clippingPlanes.length||e.displacementMap&&0!==e.displacementScale||e.alphaMap&&e.alphaTest>0||e.map&&e.alphaTest>0){const l=a.uuid,t=e.uuid;let n=d[l];void 0===n&&(n={},d[l]=n);let i=n[t];void 0===i&&(i=a.clone(),n[t]=i,e.addEventListener("dispose",b)),a=i}return a.visible=e.visible,a.wireframe=e.wireframe,a.side=r===i?null!==e.shadowSide?e.shadowSide:e.side:null!==e.shadowSide?e.shadowSide:f[e.side],a.alphaMap=e.alphaMap,a.alphaTest=e.alphaTest,a.map=e.map,a.clipShadows=e.clipShadows,a.clippingPlanes=e.clippingPlanes,a.clipIntersection=e.clipIntersection,a.displacementMap=e.displacementMap,a.displacementScale=e.displacementScale,a.displacementBias=e.displacementBias,a.wireframeLinewidth=e.wireframeLinewidth,a.linewidth=e.linewidth,!0===n.isPointLight&&!0===a.isMeshDistanceMaterial&&(l.properties.get(a).light=n),a}function T(t,n,r,a,q){if(!1===t.visible)return;if(t.layers.test(n.layers)&&(t.isMesh||t.isLine||t.isPoints)&&(t.castShadow||t.receiveShadow&&q===i)&&(!t.frustumCulled||s.intersectsObject(t))){t.modelViewMatrix.multiplyMatrices(r.matrixWorldInverse,t.matrixWorld);const i=e.update(t),s=t.material;if(Array.isArray(s)){const e=i.groups;for(let o=0,c=e.length;o<c;o++){const c=e[o],m=s[c.materialIndex];if(m&&m.visible){const e=E(t,m,a,q);t.onBeforeShadow(l,t,n,r,i,e,c),l.renderBufferDirect(r,null,i,e,t,c),t.onAfterShadow(l,t,n,r,i,e,c)}}}else if(s.visible){const e=E(t,s,a,q);t.onBeforeShadow(l,t,n,r,i,e,null),l.renderBufferDirect(r,null,i,e,t,null),t.onAfterShadow(l,t,n,r,i,e,null)}}const o=t.children;for(let l=0,t=o.length;l<t;l++)T(o[l],n,r,a,q)}function b(l){l.target.removeEventListener("dispose",b);for(const t in d){const e=d[t],n=l.target.uuid;n in e&&(e[n].dispose(),delete e[n])}}this.render=function(t,e,n){if(!1===y.enabled)return;if(!1===y.autoUpdate&&!1===y.needsUpdate)return;if(0===t.length)return;const r=l.getRenderTarget(),a=l.getActiveCubeFace(),q=l.getActiveMipmapLevel(),h=l.state;h.setBlending(0),h.buffers.color.setClear(1,1,1,1),h.buffers.depth.setTest(!0),h.setScissorTest(!1);const u=M!==i&&this.type===i,d=M===i&&this.type!==i;for(let r=0,a=t.length;r<a;r++){const a=t[r],q=a.shadow;if(void 0===q){console.warn("THREE.WebGLShadowMap:",a,"has no shadow.");continue}if(!1===q.autoUpdate&&!1===q.needsUpdate)continue;o.copy(q.mapSize);const f=q.getFrameExtents();if(o.multiply(f),c.copy(q.mapSize),(o.x>p||o.y>p)&&(o.x>p&&(c.x=Math.floor(p/f.x),o.x=c.x*f.x,q.mapSize.x=c.x),o.y>p&&(c.y=Math.floor(p/f.y),o.y=c.y*f.y,q.mapSize.y=c.y)),null===q.map||!0===u||!0===d){const l=this.type!==i?{minFilter:k,magFilter:k}:{};null!==q.map&&q.map.dispose(),q.map=new ht(o.x,o.y,l),q.map.texture.name=a.name+".shadowMap",q.camera.updateProjectionMatrix()}l.setRenderTarget(q.map),l.clear();const g=q.getViewportCount();for(let l=0;l<g;l++){const t=q.getViewport(l);m.set(c.x*t.x,c.y*t.y,c.x*t.z,c.y*t.w),h.viewport(m),q.updateMatrices(a,l),s=q.getFrustum(),T(e,n,q.camera,a,this.type)}!0!==q.isPointLightShadow&&this.type===i&&S(q,n),q.needsUpdate=!1}M=this.type,y.needsUpdate=!1,l.setRenderTarget(r,a,q)}}function da(l){const t=new function(){let t=!1;const e=new ct;let n=null;const i=new ct(0,0,0,0);return{setMask:function(e){n===e||t||(l.colorMask(e,e,e,e),n=e)},setLocked:function(l){t=l},setClear:function(t,n,r,a,q){!0===q&&(t*=a,n*=a,r*=a),e.set(t,n,r,a),!1===i.equals(e)&&(l.clearColor(t,n,r,a),i.copy(e))},reset:function(){t=!1,n=null,i.set(-1,0,0,0)}}},e=new function(){let t=!1,e=null,n=null,i=null;return{setTest:function(t){t?nl(l.DEPTH_TEST):il(l.DEPTH_TEST)},setMask:function(n){e===n||t||(l.depthMask(n),e=n)},setFunc:function(t){if(n!==t){switch(t){case 0:l.depthFunc(l.NEVER);break;case 1:l.depthFunc(l.ALWAYS);break;case 2:l.depthFunc(l.LESS);break;case 3:default:l.depthFunc(l.LEQUAL);break;case 4:l.depthFunc(l.EQUAL);break;case 5:l.depthFunc(l.GEQUAL);break;case 6:l.depthFunc(l.GREATER);break;case 7:l.depthFunc(l.NOTEQUAL)}n=t}},setLocked:function(l){t=l},setClear:function(t){i!==t&&(l.clearDepth(t),i=t)},reset:function(){t=!1,e=null,n=null,i=null}}},n=new function(){let t=!1,e=null,n=null,i=null,r=null,a=null,q=null,s=null,o=null;return{setTest:function(e){t||(e?nl(l.STENCIL_TEST):il(l.STENCIL_TEST))},setMask:function(n){e===n||t||(l.stencilMask(n),e=n)},setFunc:function(t,e,a){n===t&&i===e&&r===a||(l.stencilFunc(t,e,a),n=t,i=e,r=a)},setOp:function(t,e,n){a===t&&q===e&&s===n||(l.stencilOp(t,e,n),a=t,q=e,s=n)},setLocked:function(l){t=l},setClear:function(t){o!==t&&(l.clearStencil(t),o=t)},reset:function(){t=!1,e=null,n=null,i=null,r=null,a=null,q=null,s=null,o=null}}},i=new WeakMap,r=new WeakMap;let a={},q={},b=new WeakMap,w=[],A=null,R=!1,C=null,P=null,L=null,U=null,N=null,I=null,D=null,O=new Ie(0,0,0),F=0,z=!1,B=null,V=null,H=null,k=null,G=null;const W=l.getParameter(l.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let X=!1,j=0;const Y=l.getParameter(l.VERSION);-1!==Y.indexOf("WebGL")?(j=parseFloat(/^WebGL (\d)/.exec(Y)[1]),X=j>=1):-1!==Y.indexOf("OpenGL ES")&&(j=parseFloat(/^OpenGL ES (\d)/.exec(Y)[1]),X=j>=2);let J=null,Z={};const K=l.getParameter(l.SCISSOR_BOX),$=l.getParameter(l.VIEWPORT),Q=(new ct).fromArray(K),ll=(new ct).fromArray($);function tl(t,e,n,i){const r=new Uint8Array(4),a=l.createTexture();l.bindTexture(t,a),l.texParameteri(t,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(t,l.TEXTURE_MAG_FILTER,l.NEAREST);for(let a=0;a<n;a++)t===l.TEXTURE_3D||t===l.TEXTURE_2D_ARRAY?l.texImage3D(e,0,l.RGBA,1,1,i,0,l.RGBA,l.UNSIGNED_BYTE,r):l.texImage2D(e+a,0,l.RGBA,1,1,0,l.RGBA,l.UNSIGNED_BYTE,r);return a}const el={};function nl(t){!0!==a[t]&&(l.enable(t),a[t]=!0)}function il(t){!1!==a[t]&&(l.disable(t),a[t]=!1)}el[l.TEXTURE_2D]=tl(l.TEXTURE_2D,l.TEXTURE_2D,1),el[l.TEXTURE_CUBE_MAP]=tl(l.TEXTURE_CUBE_MAP,l.TEXTURE_CUBE_MAP_POSITIVE_X,6),el[l.TEXTURE_2D_ARRAY]=tl(l.TEXTURE_2D_ARRAY,l.TEXTURE_2D_ARRAY,1,1),el[l.TEXTURE_3D]=tl(l.TEXTURE_3D,l.TEXTURE_3D,1,1),t.setClear(0,0,0,1),e.setClear(1),n.setClear(0),nl(l.DEPTH_TEST),e.setFunc(3),sl(!1),ol(1),nl(l.CULL_FACE),ql(0);const rl={[s]:l.FUNC_ADD,[o]:l.FUNC_SUBTRACT,[c]:l.FUNC_REVERSE_SUBTRACT};rl[103]=l.MIN,rl[104]=l.MAX;const al={[m]:l.ZERO,[h]:l.ONE,[u]:l.SRC_COLOR,[p]:l.SRC_ALPHA,[y]:l.SRC_ALPHA_SATURATE,[v]:l.DST_COLOR,[g]:l.DST_ALPHA,[d]:l.ONE_MINUS_SRC_COLOR,[f]:l.ONE_MINUS_SRC_ALPHA,[x]:l.ONE_MINUS_DST_COLOR,[_]:l.ONE_MINUS_DST_ALPHA,[M]:l.CONSTANT_COLOR,[S]:l.ONE_MINUS_CONSTANT_COLOR,[E]:l.CONSTANT_ALPHA,[T]:l.ONE_MINUS_CONSTANT_ALPHA};function ql(t,e,n,i,r,a,q,o,c,m){if(0!==t){if(!1===R&&(nl(l.BLEND),R=!0),5===t)r=r||e,a=a||n,q=q||i,e===P&&r===N||(l.blendEquationSeparate(rl[e],rl[r]),P=e,N=r),n===L&&i===U&&a===I&&q===D||(l.blendFuncSeparate(al[n],al[i],al[a],al[q]),L=n,U=i,I=a,D=q),!1!==o.equals(O)&&c===F||(l.blendColor(o.r,o.g,o.b,c),O.copy(o),F=c),C=t,z=!1;else if(t!==C||m!==z){if(P===s&&N===s||(l.blendEquation(l.FUNC_ADD),P=s,N=s),m)switch(t){case 1:l.blendFuncSeparate(l.ONE,l.ONE_MINUS_SRC_ALPHA,l.ONE,l.ONE_MINUS_SRC_ALPHA);break;case 2:l.blendFunc(l.ONE,l.ONE);break;case 3:l.blendFuncSeparate(l.ZERO,l.ONE_MINUS_SRC_COLOR,l.ZERO,l.ONE);break;case 4:l.blendFuncSeparate(l.ZERO,l.SRC_COLOR,l.ZERO,l.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}else switch(t){case 1:l.blendFuncSeparate(l.SRC_ALPHA,l.ONE_MINUS_SRC_ALPHA,l.ONE,l.ONE_MINUS_SRC_ALPHA);break;case 2:l.blendFunc(l.SRC_ALPHA,l.ONE);break;case 3:l.blendFuncSeparate(l.ZERO,l.ONE_MINUS_SRC_COLOR,l.ZERO,l.ONE);break;case 4:l.blendFunc(l.ZERO,l.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}L=null,U=null,I=null,D=null,O.set(0,0,0),F=0,C=t,z=m}}else!0===R&&(il(l.BLEND),R=!1)}function sl(t){B!==t&&(t?l.frontFace(l.CW):l.frontFace(l.CCW),B=t)}function ol(t){0!==t?(nl(l.CULL_FACE),t!==V&&(1===t?l.cullFace(l.BACK):2===t?l.cullFace(l.FRONT):l.cullFace(l.FRONT_AND_BACK))):il(l.CULL_FACE),V=t}function cl(t,e,n){t?(nl(l.POLYGON_OFFSET_FILL),k===e&&G===n||(l.polygonOffset(e,n),k=e,G=n)):il(l.POLYGON_OFFSET_FILL)}return{buffers:{color:t,depth:e,stencil:n},enable:nl,disable:il,bindFramebuffer:function(t,e){return q[t]!==e&&(l.bindFramebuffer(t,e),q[t]=e,t===l.DRAW_FRAMEBUFFER&&(q[l.FRAMEBUFFER]=e),t===l.FRAMEBUFFER&&(q[l.DRAW_FRAMEBUFFER]=e),!0)},drawBuffers:function(t,e){let n=w,i=!1;if(t){n=b.get(e),void 0===n&&(n=[],b.set(e,n));const r=t.textures;if(n.length!==r.length||n[0]!==l.COLOR_ATTACHMENT0){for(let t=0,e=r.length;t<e;t++)n[t]=l.COLOR_ATTACHMENT0+t;n.length=r.length,i=!0}}else n[0]!==l.BACK&&(n[0]=l.BACK,i=!0);i&&l.drawBuffers(n)},useProgram:function(t){return A!==t&&(l.useProgram(t),A=t,!0)},setBlending:ql,setMaterial:function(i,r){2===i.side?il(l.CULL_FACE):nl(l.CULL_FACE);let a=1===i.side;r&&(a=!a),sl(a),1===i.blending&&!1===i.transparent?ql(0):ql(i.blending,i.blendEquation,i.blendSrc,i.blendDst,i.blendEquationAlpha,i.blendSrcAlpha,i.blendDstAlpha,i.blendColor,i.blendAlpha,i.premultipliedAlpha),e.setFunc(i.depthFunc),e.setTest(i.depthTest),e.setMask(i.depthWrite),t.setMask(i.colorWrite);const q=i.stencilWrite;n.setTest(q),q&&(n.setMask(i.stencilWriteMask),n.setFunc(i.stencilFunc,i.stencilRef,i.stencilFuncMask),n.setOp(i.stencilFail,i.stencilZFail,i.stencilZPass)),cl(i.polygonOffset,i.polygonOffsetFactor,i.polygonOffsetUnits),!0===i.alphaToCoverage?nl(l.SAMPLE_ALPHA_TO_COVERAGE):il(l.SAMPLE_ALPHA_TO_COVERAGE)},setFlipSided:sl,setCullFace:ol,setLineWidth:function(t){t!==H&&(X&&l.lineWidth(t),H=t)},setPolygonOffset:cl,setScissorTest:function(t){t?nl(l.SCISSOR_TEST):il(l.SCISSOR_TEST)},activeTexture:function(t){void 0===t&&(t=l.TEXTURE0+W-1),J!==t&&(l.activeTexture(t),J=t)},bindTexture:function(t,e,n){void 0===n&&(n=null===J?l.TEXTURE0+W-1:J);let i=Z[n];void 0===i&&(i={type:void 0,texture:void 0},Z[n]=i),i.type===t&&i.texture===e||(J!==n&&(l.activeTexture(n),J=n),l.bindTexture(t,e||el[t]),i.type=t,i.texture=e)},unbindTexture:function(){const t=Z[J];void 0!==t&&void 0!==t.type&&(l.bindTexture(t.type,null),t.type=void 0,t.texture=void 0)},compressedTexImage2D:function(){try{l.compressedTexImage2D.apply(l,arguments)}catch(l){console.error("THREE.WebGLState:",l)}},compressedTexImage3D:function(){try{l.compressedTexImage3D.apply(l,arguments)}catch(l){console.error("THREE.WebGLState:",l)}},texImage2D:function(){try{l.texImage2D.apply(l,arguments)}catch(l){console.error("THREE.WebGLState:",l)}},texImage3D:function(){try{l.texImage3D.apply(l,arguments)}catch(l){console.error("THREE.WebGLState:",l)}},updateUBOMapping:function(t,e){let n=r.get(e);void 0===n&&(n=new WeakMap,r.set(e,n));let i=n.get(t);void 0===i&&(i=l.getUniformBlockIndex(e,t.name),n.set(t,i))},uniformBlockBinding:function(t,e){const n=r.get(e).get(t);i.get(e)!==n&&(l.uniformBlockBinding(e,n,t.__bindingPointIndex),i.set(e,n))},texStorage2D:function(){try{l.texStorage2D.apply(l,arguments)}catch(l){console.error("THREE.WebGLState:",l)}},texStorage3D:function(){try{l.texStorage3D.apply(l,arguments)}catch(l){console.error("THREE.WebGLState:",l)}},texSubImage2D:function(){try{l.texSubImage2D.apply(l,arguments)}catch(l){console.error("THREE.WebGLState:",l)}},texSubImage3D:function(){try{l.texSubImage3D.apply(l,arguments)}catch(l){console.error("THREE.WebGLState:",l)}},compressedTexSubImage2D:function(){try{l.compressedTexSubImage2D.apply(l,arguments)}catch(l){console.error("THREE.WebGLState:",l)}},compressedTexSubImage3D:function(){try{l.compressedTexSubImage3D.apply(l,arguments)}catch(l){console.error("THREE.WebGLState:",l)}},scissor:function(t){!1===Q.equals(t)&&(l.scissor(t.x,t.y,t.z,t.w),Q.copy(t))},viewport:function(t){!1===ll.equals(t)&&(l.viewport(t.x,t.y,t.z,t.w),ll.copy(t))},reset:function(){l.disable(l.BLEND),l.disable(l.CULL_FACE),l.disable(l.DEPTH_TEST),l.disable(l.POLYGON_OFFSET_FILL),l.disable(l.SCISSOR_TEST),l.disable(l.STENCIL_TEST),l.disable(l.SAMPLE_ALPHA_TO_COVERAGE),l.blendEquation(l.FUNC_ADD),l.blendFunc(l.ONE,l.ZERO),l.blendFuncSeparate(l.ONE,l.ZERO,l.ONE,l.ZERO),l.blendColor(0,0,0,0),l.colorMask(!0,!0,!0,!0),l.clearColor(0,0,0,0),l.depthMask(!0),l.depthFunc(l.LESS),l.clearDepth(1),l.stencilMask(4294967295),l.stencilFunc(l.ALWAYS,0,4294967295),l.stencilOp(l.KEEP,l.KEEP,l.KEEP),l.clearStencil(0),l.cullFace(l.BACK),l.frontFace(l.CCW),l.polygonOffset(0,0),l.activeTexture(l.TEXTURE0),l.bindFramebuffer(l.FRAMEBUFFER,null),l.bindFramebuffer(l.DRAW_FRAMEBUFFER,null),l.bindFramebuffer(l.READ_FRAMEBUFFER,null),l.useProgram(null),l.lineWidth(1),l.scissor(0,0,l.canvas.width,l.canvas.height),l.viewport(0,0,l.canvas.width,l.canvas.height),a={},J=null,Z={},q={},b=new WeakMap,w=[],A=null,R=!1,C=null,P=null,L=null,U=null,N=null,I=null,D=null,O=new Ie(0,0,0),F=0,z=!1,B=null,V=null,H=null,k=null,G=null,Q.set(0,0,l.canvas.width,l.canvas.height),ll.set(0,0,l.canvas.width,l.canvas.height),t.reset(),e.reset(),n.reset()}}}function pa(l,t,e,n,i,r,a){const q=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,s="undefined"!=typeof navigator&&/OculusBrowser/g.test(navigator.userAgent),o=new kl,c=new WeakMap;let m;const h=new WeakMap;let u=!1;try{u="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(l){}function d(l,t){return u?new OffscreenCanvas(l,t):jl("canvas")}function p(l,t,e){let n=1;const i=z(l);if((i.width>e||i.height>e)&&(n=e/Math.max(i.width,i.height)),n<1){if("undefined"!=typeof HTMLImageElement&&l instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&l instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&l instanceof ImageBitmap||"undefined"!=typeof VideoFrame&&l instanceof VideoFrame){const e=Math.floor(n*i.width),r=Math.floor(n*i.height);void 0===m&&(m=d(e,r));const a=t?d(e,r):m;return a.width=e,a.height=r,a.getContext("2d").drawImage(l,0,0,e,r),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+i.width+"x"+i.height+") to ("+e+"x"+r+")."),a}return"data"in l&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+i.width+"x"+i.height+")."),l}return l}function f(l){return l.generateMipmaps&&l.minFilter!==k&&l.minFilter!==X}function g(t){l.generateMipmap(t)}function _(e,n,i,r,a=!1){if(null!==e){if(void 0!==l[e])return l[e];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+e+"'")}let q=n;if(n===l.RED&&(i===l.FLOAT&&(q=l.R32F),i===l.HALF_FLOAT&&(q=l.R16F),i===l.UNSIGNED_BYTE&&(q=l.R8)),n===l.RED_INTEGER&&(i===l.UNSIGNED_BYTE&&(q=l.R8UI),i===l.UNSIGNED_SHORT&&(q=l.R16UI),i===l.UNSIGNED_INT&&(q=l.R32UI),i===l.BYTE&&(q=l.R8I),i===l.SHORT&&(q=l.R16I),i===l.INT&&(q=l.R32I)),n===l.RG&&(i===l.FLOAT&&(q=l.RG32F),i===l.HALF_FLOAT&&(q=l.RG16F),i===l.UNSIGNED_BYTE&&(q=l.RG8)),n===l.RG_INTEGER&&(i===l.UNSIGNED_BYTE&&(q=l.RG8UI),i===l.UNSIGNED_SHORT&&(q=l.RG16UI),i===l.UNSIGNED_INT&&(q=l.RG32UI),i===l.BYTE&&(q=l.RG8I),i===l.SHORT&&(q=l.RG16I),i===l.INT&&(q=l.RG32I)),n===l.RGB&&i===l.UNSIGNED_INT_5_9_9_9_REV&&(q=l.RGB9_E5),n===l.RGBA){const t=a?fl:lt.getTransfer(r);i===l.FLOAT&&(q=l.RGBA32F),i===l.HALF_FLOAT&&(q=l.RGBA16F),i===l.UNSIGNED_BYTE&&(q=t===gl?l.SRGB8_ALPHA8:l.RGBA8),i===l.UNSIGNED_SHORT_4_4_4_4&&(q=l.RGBA4),i===l.UNSIGNED_SHORT_5_5_5_1&&(q=l.RGB5_A1)}return q!==l.R16F&&q!==l.R32F&&q!==l.RG16F&&q!==l.RG32F&&q!==l.RGBA16F&&q!==l.RGBA32F||t.get("EXT_color_buffer_float"),q}function v(l,t){return!0===f(l)||l.isFramebufferTexture&&l.minFilter!==k&&l.minFilter!==X?Math.log2(Math.max(t.width,t.height))+1:void 0!==l.mipmaps&&l.mipmaps.length>0?l.mipmaps.length:l.isCompressedTexture&&Array.isArray(l.image)?t.mipmaps.length:1}function x(l){const t=l.target;t.removeEventListener("dispose",x),function(l){const t=n.get(l);if(void 0===t.__webglInit)return;const e=l.source,i=h.get(e);if(i){const n=i[t.__cacheKey];n.usedTimes--,0===n.usedTimes&&M(l),0===Object.keys(i).length&&h.delete(e)}n.remove(l)}(t),t.isVideoTexture&&c.delete(t)}function y(t){const e=t.target;e.removeEventListener("dispose",y),function(t){const e=n.get(t);if(t.depthTexture&&t.depthTexture.dispose(),t.isWebGLCubeRenderTarget)for(let t=0;t<6;t++){if(Array.isArray(e.__webglFramebuffer[t]))for(let n=0;n<e.__webglFramebuffer[t].length;n++)l.deleteFramebuffer(e.__webglFramebuffer[t][n]);else l.deleteFramebuffer(e.__webglFramebuffer[t]);e.__webglDepthbuffer&&l.deleteRenderbuffer(e.__webglDepthbuffer[t])}else{if(Array.isArray(e.__webglFramebuffer))for(let t=0;t<e.__webglFramebuffer.length;t++)l.deleteFramebuffer(e.__webglFramebuffer[t]);else l.deleteFramebuffer(e.__webglFramebuffer);if(e.__webglDepthbuffer&&l.deleteRenderbuffer(e.__webglDepthbuffer),e.__webglMultisampledFramebuffer&&l.deleteFramebuffer(e.__webglMultisampledFramebuffer),e.__webglColorRenderbuffer)for(let t=0;t<e.__webglColorRenderbuffer.length;t++)e.__webglColorRenderbuffer[t]&&l.deleteRenderbuffer(e.__webglColorRenderbuffer[t]);e.__webglDepthRenderbuffer&&l.deleteRenderbuffer(e.__webglDepthRenderbuffer)}const i=t.textures;for(let t=0,e=i.length;t<e;t++){const e=n.get(i[t]);e.__webglTexture&&(l.deleteTexture(e.__webglTexture),a.memory.textures--),n.remove(i[t])}n.remove(t)}(e)}function M(t){const e=n.get(t);l.deleteTexture(e.__webglTexture);const i=t.source;delete h.get(i)[e.__cacheKey],a.memory.textures--}let S=0;function E(t,i){const r=n.get(t);if(t.isVideoTexture&&function(l){const t=a.render.frame;c.get(l)!==t&&(c.set(l,t),l.update())}(t),!1===t.isRenderTargetTexture&&t.version>0&&r.__version!==t.version){const l=t.image;if(null===l)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else{if(!1!==l.complete)return void C(r,t,i);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}e.bindTexture(l.TEXTURE_2D,r.__webglTexture,l.TEXTURE0+i)}const T={[B]:l.REPEAT,[V]:l.CLAMP_TO_EDGE,[H]:l.MIRRORED_REPEAT},b={[k]:l.NEAREST,[G]:l.NEAREST_MIPMAP_NEAREST,[W]:l.NEAREST_MIPMAP_LINEAR,[X]:l.LINEAR,[j]:l.LINEAR_MIPMAP_NEAREST,[Y]:l.LINEAR_MIPMAP_LINEAR},w={[yl]:l.NEVER,[Al]:l.ALWAYS,[Ml]:l.LESS,[El]:l.LEQUAL,[Sl]:l.EQUAL,[wl]:l.GEQUAL,[Tl]:l.GREATER,[bl]:l.NOTEQUAL};function A(e,r){if(r.type!==K||!1!==t.has("OES_texture_float_linear")||r.magFilter!==X&&r.magFilter!==j&&r.magFilter!==W&&r.magFilter!==Y&&r.minFilter!==X&&r.minFilter!==j&&r.minFilter!==W&&r.minFilter!==Y||console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),l.texParameteri(e,l.TEXTURE_WRAP_S,T[r.wrapS]),l.texParameteri(e,l.TEXTURE_WRAP_T,T[r.wrapT]),e!==l.TEXTURE_3D&&e!==l.TEXTURE_2D_ARRAY||l.texParameteri(e,l.TEXTURE_WRAP_R,T[r.wrapR]),l.texParameteri(e,l.TEXTURE_MAG_FILTER,b[r.magFilter]),l.texParameteri(e,l.TEXTURE_MIN_FILTER,b[r.minFilter]),r.compareFunction&&(l.texParameteri(e,l.TEXTURE_COMPARE_MODE,l.COMPARE_REF_TO_TEXTURE),l.texParameteri(e,l.TEXTURE_COMPARE_FUNC,w[r.compareFunction])),!0===t.has("EXT_texture_filter_anisotropic")){if(r.magFilter===k)return;if(r.minFilter!==W&&r.minFilter!==Y)return;if(r.type===K&&!1===t.has("OES_texture_float_linear"))return;if(r.anisotropy>1||n.get(r).__currentAnisotropy){const a=t.get("EXT_texture_filter_anisotropic");l.texParameterf(e,a.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(r.anisotropy,i.getMaxAnisotropy())),n.get(r).__currentAnisotropy=r.anisotropy}}}function R(t,e){let n=!1;void 0===t.__webglInit&&(t.__webglInit=!0,e.addEventListener("dispose",x));const i=e.source;let r=h.get(i);void 0===r&&(r={},h.set(i,r));const q=function(l){const t=[];return t.push(l.wrapS),t.push(l.wrapT),t.push(l.wrapR||0),t.push(l.magFilter),t.push(l.minFilter),t.push(l.anisotropy),t.push(l.internalFormat),t.push(l.format),t.push(l.type),t.push(l.generateMipmaps),t.push(l.premultiplyAlpha),t.push(l.flipY),t.push(l.unpackAlignment),t.push(l.colorSpace),t.join()}(e);if(q!==t.__cacheKey){void 0===r[q]&&(r[q]={texture:l.createTexture(),usedTimes:0},a.memory.textures++,n=!0),r[q].usedTimes++;const i=r[t.__cacheKey];void 0!==i&&(r[t.__cacheKey].usedTimes--,0===i.usedTimes&&M(e)),t.__cacheKey=q,t.__webglTexture=r[q].texture}return n}function C(t,a,q){let s=l.TEXTURE_2D;(a.isDataArrayTexture||a.isCompressedArrayTexture)&&(s=l.TEXTURE_2D_ARRAY),a.isData3DTexture&&(s=l.TEXTURE_3D);const o=R(t,a),c=a.source;e.bindTexture(s,t.__webglTexture,l.TEXTURE0+q);const m=n.get(c);if(c.version!==m.__version||!0===o){e.activeTexture(l.TEXTURE0+q);const t=lt.getPrimaries(lt.workingColorSpace),n=a.colorSpace===ml?null:lt.getPrimaries(a.colorSpace),h=a.colorSpace===ml||t===n?l.NONE:l.BROWSER_DEFAULT_WEBGL;l.pixelStorei(l.UNPACK_FLIP_Y_WEBGL,a.flipY),l.pixelStorei(l.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha),l.pixelStorei(l.UNPACK_ALIGNMENT,a.unpackAlignment),l.pixelStorei(l.UNPACK_COLORSPACE_CONVERSION_WEBGL,h);let u=p(a.image,!1,i.maxTextureSize);u=F(a,u);const d=r.convert(a.format,a.colorSpace),x=r.convert(a.type);let y,M=_(a.internalFormat,d,x,a.colorSpace,a.isVideoTexture);A(s,a);const S=a.mipmaps,E=!0!==a.isVideoTexture,T=void 0===m.__version||!0===o,b=c.dataReady,w=v(a,u);if(a.isDepthTexture)M=l.DEPTH_COMPONENT16,a.type===K?M=l.DEPTH_COMPONENT32F:a.type===Z?M=l.DEPTH_COMPONENT24:a.type===Q&&(M=l.DEPTH24_STENCIL8),T&&(E?e.texStorage2D(l.TEXTURE_2D,1,M,u.width,u.height):e.texImage2D(l.TEXTURE_2D,0,M,u.width,u.height,0,d,x,null));else if(a.isDataTexture)if(S.length>0){E&&T&&e.texStorage2D(l.TEXTURE_2D,w,M,S[0].width,S[0].height);for(let t=0,n=S.length;t<n;t++)y=S[t],E?b&&e.texSubImage2D(l.TEXTURE_2D,t,0,0,y.width,y.height,d,x,y.data):e.texImage2D(l.TEXTURE_2D,t,M,y.width,y.height,0,d,x,y.data);a.generateMipmaps=!1}else E?(T&&e.texStorage2D(l.TEXTURE_2D,w,M,u.width,u.height),b&&e.texSubImage2D(l.TEXTURE_2D,0,0,0,u.width,u.height,d,x,u.data)):e.texImage2D(l.TEXTURE_2D,0,M,u.width,u.height,0,d,x,u.data);else if(a.isCompressedTexture)if(a.isCompressedArrayTexture){E&&T&&e.texStorage3D(l.TEXTURE_2D_ARRAY,w,M,S[0].width,S[0].height,u.depth);for(let t=0,n=S.length;t<n;t++)y=S[t],a.format!==ll?null!==d?E?b&&e.compressedTexSubImage3D(l.TEXTURE_2D_ARRAY,t,0,0,0,y.width,y.height,u.depth,d,y.data,0,0):e.compressedTexImage3D(l.TEXTURE_2D_ARRAY,t,M,y.width,y.height,u.depth,0,y.data,0,0):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):E?b&&e.texSubImage3D(l.TEXTURE_2D_ARRAY,t,0,0,0,y.width,y.height,u.depth,d,x,y.data):e.texImage3D(l.TEXTURE_2D_ARRAY,t,M,y.width,y.height,u.depth,0,d,x,y.data)}else{E&&T&&e.texStorage2D(l.TEXTURE_2D,w,M,S[0].width,S[0].height);for(let t=0,n=S.length;t<n;t++)y=S[t],a.format!==ll?null!==d?E?b&&e.compressedTexSubImage2D(l.TEXTURE_2D,t,0,0,y.width,y.height,d,y.data):e.compressedTexImage2D(l.TEXTURE_2D,t,M,y.width,y.height,0,y.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):E?b&&e.texSubImage2D(l.TEXTURE_2D,t,0,0,y.width,y.height,d,x,y.data):e.texImage2D(l.TEXTURE_2D,t,M,y.width,y.height,0,d,x,y.data)}else if(a.isDataArrayTexture)E?(T&&e.texStorage3D(l.TEXTURE_2D_ARRAY,w,M,u.width,u.height,u.depth),b&&e.texSubImage3D(l.TEXTURE_2D_ARRAY,0,0,0,0,u.width,u.height,u.depth,d,x,u.data)):e.texImage3D(l.TEXTURE_2D_ARRAY,0,M,u.width,u.height,u.depth,0,d,x,u.data);else if(a.isData3DTexture)E?(T&&e.texStorage3D(l.TEXTURE_3D,w,M,u.width,u.height,u.depth),b&&e.texSubImage3D(l.TEXTURE_3D,0,0,0,0,u.width,u.height,u.depth,d,x,u.data)):e.texImage3D(l.TEXTURE_3D,0,M,u.width,u.height,u.depth,0,d,x,u.data);else if(a.isFramebufferTexture){if(T)if(E)e.texStorage2D(l.TEXTURE_2D,w,M,u.width,u.height);else{let t=u.width,n=u.height;for(let i=0;i<w;i++)e.texImage2D(l.TEXTURE_2D,i,M,t,n,0,d,x,null),t>>=1,n>>=1}}else if(S.length>0){if(E&&T){const t=z(S[0]);e.texStorage2D(l.TEXTURE_2D,w,M,t.width,t.height)}for(let t=0,n=S.length;t<n;t++)y=S[t],E?b&&e.texSubImage2D(l.TEXTURE_2D,t,0,0,d,x,y):e.texImage2D(l.TEXTURE_2D,t,M,d,x,y);a.generateMipmaps=!1}else if(E){if(T){const t=z(u);e.texStorage2D(l.TEXTURE_2D,w,M,t.width,t.height)}b&&e.texSubImage2D(l.TEXTURE_2D,0,0,0,d,x,u)}else e.texImage2D(l.TEXTURE_2D,0,M,d,x,u);f(a)&&g(s),m.__version=c.version,a.onUpdate&&a.onUpdate(a)}t.__version=a.version}function P(t,i,a,s,o,c){const m=r.convert(a.format,a.colorSpace),h=r.convert(a.type),u=_(a.internalFormat,m,h,a.colorSpace);if(!n.get(i).__hasExternalTextures){const t=Math.max(1,i.width>>c),n=Math.max(1,i.height>>c);o===l.TEXTURE_3D||o===l.TEXTURE_2D_ARRAY?e.texImage3D(o,c,u,t,n,i.depth,0,m,h,null):e.texImage2D(o,c,u,t,n,0,m,h,null)}e.bindFramebuffer(l.FRAMEBUFFER,t),O(i)?q.framebufferTexture2DMultisampleEXT(l.FRAMEBUFFER,s,o,n.get(a).__webglTexture,0,D(i)):(o===l.TEXTURE_2D||o>=l.TEXTURE_CUBE_MAP_POSITIVE_X&&o<=l.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&l.framebufferTexture2D(l.FRAMEBUFFER,s,o,n.get(a).__webglTexture,c),e.bindFramebuffer(l.FRAMEBUFFER,null)}function L(t,e,n){if(l.bindRenderbuffer(l.RENDERBUFFER,t),e.depthBuffer&&!e.stencilBuffer){let i=l.DEPTH_COMPONENT24;if(n||O(e)){const t=e.depthTexture;t&&t.isDepthTexture&&(t.type===K?i=l.DEPTH_COMPONENT32F:t.type===Z&&(i=l.DEPTH_COMPONENT24));const n=D(e);O(e)?q.renderbufferStorageMultisampleEXT(l.RENDERBUFFER,n,i,e.width,e.height):l.renderbufferStorageMultisample(l.RENDERBUFFER,n,i,e.width,e.height)}else l.renderbufferStorage(l.RENDERBUFFER,i,e.width,e.height);l.framebufferRenderbuffer(l.FRAMEBUFFER,l.DEPTH_ATTACHMENT,l.RENDERBUFFER,t)}else if(e.depthBuffer&&e.stencilBuffer){const i=D(e);n&&!1===O(e)?l.renderbufferStorageMultisample(l.RENDERBUFFER,i,l.DEPTH24_STENCIL8,e.width,e.height):O(e)?q.renderbufferStorageMultisampleEXT(l.RENDERBUFFER,i,l.DEPTH24_STENCIL8,e.width,e.height):l.renderbufferStorage(l.RENDERBUFFER,l.DEPTH_STENCIL,e.width,e.height),l.framebufferRenderbuffer(l.FRAMEBUFFER,l.DEPTH_STENCIL_ATTACHMENT,l.RENDERBUFFER,t)}else{const t=e.textures;for(let i=0;i<t.length;i++){const a=t[i],s=r.convert(a.format,a.colorSpace),o=r.convert(a.type),c=_(a.internalFormat,s,o,a.colorSpace),m=D(e);n&&!1===O(e)?l.renderbufferStorageMultisample(l.RENDERBUFFER,m,c,e.width,e.height):O(e)?q.renderbufferStorageMultisampleEXT(l.RENDERBUFFER,m,c,e.width,e.height):l.renderbufferStorage(l.RENDERBUFFER,c,e.width,e.height)}}l.bindRenderbuffer(l.RENDERBUFFER,null)}function U(t){const i=n.get(t),r=!0===t.isWebGLCubeRenderTarget;if(t.depthTexture&&!i.__autoAllocateDepthBuffer){if(r)throw new Error("target.depthTexture not supported in Cube render targets");!function(t,i){if(i&&i.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(e.bindFramebuffer(l.FRAMEBUFFER,t),!i.depthTexture||!i.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");n.get(i.depthTexture).__webglTexture&&i.depthTexture.image.width===i.width&&i.depthTexture.image.height===i.height||(i.depthTexture.image.width=i.width,i.depthTexture.image.height=i.height,i.depthTexture.needsUpdate=!0),E(i.depthTexture,0);const r=n.get(i.depthTexture).__webglTexture,a=D(i);if(i.depthTexture.format===tl)O(i)?q.framebufferTexture2DMultisampleEXT(l.FRAMEBUFFER,l.DEPTH_ATTACHMENT,l.TEXTURE_2D,r,0,a):l.framebufferTexture2D(l.FRAMEBUFFER,l.DEPTH_ATTACHMENT,l.TEXTURE_2D,r,0);else{if(i.depthTexture.format!==el)throw new Error("Unknown depthTexture format");O(i)?q.framebufferTexture2DMultisampleEXT(l.FRAMEBUFFER,l.DEPTH_STENCIL_ATTACHMENT,l.TEXTURE_2D,r,0,a):l.framebufferTexture2D(l.FRAMEBUFFER,l.DEPTH_STENCIL_ATTACHMENT,l.TEXTURE_2D,r,0)}}(i.__webglFramebuffer,t)}else if(r){i.__webglDepthbuffer=[];for(let n=0;n<6;n++)e.bindFramebuffer(l.FRAMEBUFFER,i.__webglFramebuffer[n]),i.__webglDepthbuffer[n]=l.createRenderbuffer(),L(i.__webglDepthbuffer[n],t,!1)}else e.bindFramebuffer(l.FRAMEBUFFER,i.__webglFramebuffer),i.__webglDepthbuffer=l.createRenderbuffer(),L(i.__webglDepthbuffer,t,!1);e.bindFramebuffer(l.FRAMEBUFFER,null)}const N=[],I=[];function D(l){return Math.min(i.maxSamples,l.samples)}function O(l){const e=n.get(l);return l.samples>0&&!0===t.has("WEBGL_multisampled_render_to_texture")&&!1!==e.__useRenderToTexture}function F(l,t){const e=l.colorSpace,n=l.format,i=l.type;return!0===l.isCompressedTexture||!0===l.isVideoTexture||e!==ul&&e!==ml&&(lt.getTransfer(e)===gl?n===ll&&i===J||console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",e)),t}function z(l){return"undefined"!=typeof HTMLImageElement&&l instanceof HTMLImageElement?(o.width=l.naturalWidth||l.width,o.height=l.naturalHeight||l.height):"undefined"!=typeof VideoFrame&&l instanceof VideoFrame?(o.width=l.displayWidth,o.height=l.displayHeight):(o.width=l.width,o.height=l.height),o}this.allocateTextureUnit=function(){const l=S;return l>=i.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+l+" texture units while this GPU supports only "+i.maxTextures),S+=1,l},this.resetTextureUnits=function(){S=0},this.setTexture2D=E,this.setTexture2DArray=function(t,i){const r=n.get(t);t.version>0&&r.__version!==t.version?C(r,t,i):e.bindTexture(l.TEXTURE_2D_ARRAY,r.__webglTexture,l.TEXTURE0+i)},this.setTexture3D=function(t,i){const r=n.get(t);t.version>0&&r.__version!==t.version?C(r,t,i):e.bindTexture(l.TEXTURE_3D,r.__webglTexture,l.TEXTURE0+i)},this.setTextureCube=function(t,a){const q=n.get(t);t.version>0&&q.__version!==t.version?function(t,a,q){if(6!==a.image.length)return;const s=R(t,a),o=a.source;e.bindTexture(l.TEXTURE_CUBE_MAP,t.__webglTexture,l.TEXTURE0+q);const c=n.get(o);if(o.version!==c.__version||!0===s){e.activeTexture(l.TEXTURE0+q);const t=lt.getPrimaries(lt.workingColorSpace),n=a.colorSpace===ml?null:lt.getPrimaries(a.colorSpace),m=a.colorSpace===ml||t===n?l.NONE:l.BROWSER_DEFAULT_WEBGL;l.pixelStorei(l.UNPACK_FLIP_Y_WEBGL,a.flipY),l.pixelStorei(l.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha),l.pixelStorei(l.UNPACK_ALIGNMENT,a.unpackAlignment),l.pixelStorei(l.UNPACK_COLORSPACE_CONVERSION_WEBGL,m);const h=a.isCompressedTexture||a.image[0].isCompressedTexture,u=a.image[0]&&a.image[0].isDataTexture,d=[];for(let l=0;l<6;l++)d[l]=h||u?u?a.image[l].image:a.image[l]:p(a.image[l],!0,i.maxCubemapSize),d[l]=F(a,d[l]);const x=d[0],y=r.convert(a.format,a.colorSpace),M=r.convert(a.type),S=_(a.internalFormat,y,M,a.colorSpace),E=!0!==a.isVideoTexture,T=void 0===c.__version||!0===s,b=o.dataReady;let w,R=v(a,x);if(A(l.TEXTURE_CUBE_MAP,a),h){E&&T&&e.texStorage2D(l.TEXTURE_CUBE_MAP,R,S,x.width,x.height);for(let t=0;t<6;t++){w=d[t].mipmaps;for(let n=0;n<w.length;n++){const i=w[n];a.format!==ll?null!==y?E?b&&e.compressedTexSubImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+t,n,0,0,i.width,i.height,y,i.data):e.compressedTexImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+t,n,S,i.width,i.height,0,i.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):E?b&&e.texSubImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+t,n,0,0,i.width,i.height,y,M,i.data):e.texImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+t,n,S,i.width,i.height,0,y,M,i.data)}}}else{if(w=a.mipmaps,E&&T){w.length>0&&R++;const t=z(d[0]);e.texStorage2D(l.TEXTURE_CUBE_MAP,R,S,t.width,t.height)}for(let t=0;t<6;t++)if(u){E?b&&e.texSubImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,d[t].width,d[t].height,y,M,d[t].data):e.texImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,S,d[t].width,d[t].height,0,y,M,d[t].data);for(let n=0;n<w.length;n++){const i=w[n].image[t].image;E?b&&e.texSubImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+t,n+1,0,0,i.width,i.height,y,M,i.data):e.texImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+t,n+1,S,i.width,i.height,0,y,M,i.data)}}else{E?b&&e.texSubImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,y,M,d[t]):e.texImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,S,y,M,d[t]);for(let n=0;n<w.length;n++){const i=w[n];E?b&&e.texSubImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+t,n+1,0,0,y,M,i.image[t]):e.texImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+t,n+1,S,y,M,i.image[t])}}}f(a)&&g(l.TEXTURE_CUBE_MAP),c.__version=o.version,a.onUpdate&&a.onUpdate(a)}t.__version=a.version}(q,t,a):e.bindTexture(l.TEXTURE_CUBE_MAP,q.__webglTexture,l.TEXTURE0+a)},this.rebindTextures=function(t,e,i){const r=n.get(t);void 0!==e&&P(r.__webglFramebuffer,t,t.texture,l.COLOR_ATTACHMENT0,l.TEXTURE_2D,0),void 0!==i&&U(t)},this.setupRenderTarget=function(t){const i=t.texture,q=n.get(t),s=n.get(i);t.addEventListener("dispose",y);const o=t.textures,c=!0===t.isWebGLCubeRenderTarget,m=o.length>1;if(m||(void 0===s.__webglTexture&&(s.__webglTexture=l.createTexture()),s.__version=i.version,a.memory.textures++),c){q.__webglFramebuffer=[];for(let t=0;t<6;t++)if(i.mipmaps&&i.mipmaps.length>0){q.__webglFramebuffer[t]=[];for(let e=0;e<i.mipmaps.length;e++)q.__webglFramebuffer[t][e]=l.createFramebuffer()}else q.__webglFramebuffer[t]=l.createFramebuffer()}else{if(i.mipmaps&&i.mipmaps.length>0){q.__webglFramebuffer=[];for(let t=0;t<i.mipmaps.length;t++)q.__webglFramebuffer[t]=l.createFramebuffer()}else q.__webglFramebuffer=l.createFramebuffer();if(m)for(let t=0,e=o.length;t<e;t++){const e=n.get(o[t]);void 0===e.__webglTexture&&(e.__webglTexture=l.createTexture(),a.memory.textures++)}if(t.samples>0&&!1===O(t)){q.__webglMultisampledFramebuffer=l.createFramebuffer(),q.__webglColorRenderbuffer=[],e.bindFramebuffer(l.FRAMEBUFFER,q.__webglMultisampledFramebuffer);for(let e=0;e<o.length;e++){const n=o[e];q.__webglColorRenderbuffer[e]=l.createRenderbuffer(),l.bindRenderbuffer(l.RENDERBUFFER,q.__webglColorRenderbuffer[e]);const i=r.convert(n.format,n.colorSpace),a=r.convert(n.type),s=_(n.internalFormat,i,a,n.colorSpace,!0===t.isXRRenderTarget),c=D(t);l.renderbufferStorageMultisample(l.RENDERBUFFER,c,s,t.width,t.height),l.framebufferRenderbuffer(l.FRAMEBUFFER,l.COLOR_ATTACHMENT0+e,l.RENDERBUFFER,q.__webglColorRenderbuffer[e])}l.bindRenderbuffer(l.RENDERBUFFER,null),t.depthBuffer&&(q.__webglDepthRenderbuffer=l.createRenderbuffer(),L(q.__webglDepthRenderbuffer,t,!0)),e.bindFramebuffer(l.FRAMEBUFFER,null)}}if(c){e.bindTexture(l.TEXTURE_CUBE_MAP,s.__webglTexture),A(l.TEXTURE_CUBE_MAP,i);for(let e=0;e<6;e++)if(i.mipmaps&&i.mipmaps.length>0)for(let n=0;n<i.mipmaps.length;n++)P(q.__webglFramebuffer[e][n],t,i,l.COLOR_ATTACHMENT0,l.TEXTURE_CUBE_MAP_POSITIVE_X+e,n);else P(q.__webglFramebuffer[e],t,i,l.COLOR_ATTACHMENT0,l.TEXTURE_CUBE_MAP_POSITIVE_X+e,0);f(i)&&g(l.TEXTURE_CUBE_MAP),e.unbindTexture()}else if(m){for(let i=0,r=o.length;i<r;i++){const r=o[i],a=n.get(r);e.bindTexture(l.TEXTURE_2D,a.__webglTexture),A(l.TEXTURE_2D,r),P(q.__webglFramebuffer,t,r,l.COLOR_ATTACHMENT0+i,l.TEXTURE_2D,0),f(r)&&g(l.TEXTURE_2D)}e.unbindTexture()}else{let n=l.TEXTURE_2D;if((t.isWebGL3DRenderTarget||t.isWebGLArrayRenderTarget)&&(n=t.isWebGL3DRenderTarget?l.TEXTURE_3D:l.TEXTURE_2D_ARRAY),e.bindTexture(n,s.__webglTexture),A(n,i),i.mipmaps&&i.mipmaps.length>0)for(let e=0;e<i.mipmaps.length;e++)P(q.__webglFramebuffer[e],t,i,l.COLOR_ATTACHMENT0,n,e);else P(q.__webglFramebuffer,t,i,l.COLOR_ATTACHMENT0,n,0);f(i)&&g(n),e.unbindTexture()}t.depthBuffer&&U(t)},this.updateRenderTargetMipmap=function(t){const i=t.textures;for(let r=0,a=i.length;r<a;r++){const a=i[r];if(f(a)){const i=t.isWebGLCubeRenderTarget?l.TEXTURE_CUBE_MAP:l.TEXTURE_2D,r=n.get(a).__webglTexture;e.bindTexture(i,r),g(i),e.unbindTexture()}}},this.updateMultisampleRenderTarget=function(t){if(t.samples>0)if(!1===O(t)){const i=t.textures,r=t.width,a=t.height;let q=l.COLOR_BUFFER_BIT;const o=t.stencilBuffer?l.DEPTH_STENCIL_ATTACHMENT:l.DEPTH_ATTACHMENT,c=n.get(t),m=i.length>1;if(m)for(let t=0;t<i.length;t++)e.bindFramebuffer(l.FRAMEBUFFER,c.__webglMultisampledFramebuffer),l.framebufferRenderbuffer(l.FRAMEBUFFER,l.COLOR_ATTACHMENT0+t,l.RENDERBUFFER,null),e.bindFramebuffer(l.FRAMEBUFFER,c.__webglFramebuffer),l.framebufferTexture2D(l.DRAW_FRAMEBUFFER,l.COLOR_ATTACHMENT0+t,l.TEXTURE_2D,null,0);e.bindFramebuffer(l.READ_FRAMEBUFFER,c.__webglMultisampledFramebuffer),e.bindFramebuffer(l.DRAW_FRAMEBUFFER,c.__webglFramebuffer);for(let e=0;e<i.length;e++){if(t.resolveDepthBuffer&&(t.depthBuffer&&(q|=l.DEPTH_BUFFER_BIT),t.stencilBuffer&&t.resolveStencilBuffer&&(q|=l.STENCIL_BUFFER_BIT)),m){l.framebufferRenderbuffer(l.READ_FRAMEBUFFER,l.COLOR_ATTACHMENT0,l.RENDERBUFFER,c.__webglColorRenderbuffer[e]);const t=n.get(i[e]).__webglTexture;l.framebufferTexture2D(l.DRAW_FRAMEBUFFER,l.COLOR_ATTACHMENT0,l.TEXTURE_2D,t,0)}l.blitFramebuffer(0,0,r,a,0,0,r,a,q,l.NEAREST),!0===s&&(N.length=0,I.length=0,N.push(l.COLOR_ATTACHMENT0+e),t.depthBuffer&&!1===t.resolveDepthBuffer&&(N.push(o),I.push(o),l.invalidateFramebuffer(l.DRAW_FRAMEBUFFER,I)),l.invalidateFramebuffer(l.READ_FRAMEBUFFER,N))}if(e.bindFramebuffer(l.READ_FRAMEBUFFER,null),e.bindFramebuffer(l.DRAW_FRAMEBUFFER,null),m)for(let t=0;t<i.length;t++){e.bindFramebuffer(l.FRAMEBUFFER,c.__webglMultisampledFramebuffer),l.framebufferRenderbuffer(l.FRAMEBUFFER,l.COLOR_ATTACHMENT0+t,l.RENDERBUFFER,c.__webglColorRenderbuffer[t]);const r=n.get(i[t]).__webglTexture;e.bindFramebuffer(l.FRAMEBUFFER,c.__webglFramebuffer),l.framebufferTexture2D(l.DRAW_FRAMEBUFFER,l.COLOR_ATTACHMENT0+t,l.TEXTURE_2D,r,0)}e.bindFramebuffer(l.DRAW_FRAMEBUFFER,c.__webglMultisampledFramebuffer)}else if(t.depthBuffer&&!1===t.resolveDepthBuffer&&s){const e=t.stencilBuffer?l.DEPTH_STENCIL_ATTACHMENT:l.DEPTH_ATTACHMENT;l.invalidateFramebuffer(l.DRAW_FRAMEBUFFER,[e])}},this.setupDepthRenderbuffer=U,this.setupFrameBufferTexture=P,this.useMultisampledRTT=O}function fa(l,t){return{convert:function(e,n=""){let i;const r=lt.getTransfer(n);if(e===J)return l.UNSIGNED_BYTE;if(1017===e)return l.UNSIGNED_SHORT_4_4_4_4;if(1018===e)return l.UNSIGNED_SHORT_5_5_5_1;if(35902===e)return l.UNSIGNED_INT_5_9_9_9_REV;if(1010===e)return l.BYTE;if(1011===e)return l.SHORT;if(1012===e)return l.UNSIGNED_SHORT;if(1013===e)return l.INT;if(e===Z)return l.UNSIGNED_INT;if(e===K)return l.FLOAT;if(e===$)return l.HALF_FLOAT;if(1021===e)return l.ALPHA;if(1022===e)return l.RGB;if(e===ll)return l.RGBA;if(1024===e)return l.LUMINANCE;if(1025===e)return l.LUMINANCE_ALPHA;if(e===tl)return l.DEPTH_COMPONENT;if(e===el)return l.DEPTH_STENCIL;if(1028===e)return l.RED;if(1029===e)return l.RED_INTEGER;if(1030===e)return l.RG;if(1031===e)return l.RG_INTEGER;if(1033===e)return l.RGBA_INTEGER;if(e===nl||e===il||e===rl||e===al)if(r===gl){if(i=t.get("WEBGL_compressed_texture_s3tc_srgb"),null===i)return null;if(e===nl)return i.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(e===il)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(e===rl)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(e===al)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(i=t.get("WEBGL_compressed_texture_s3tc"),null===i)return null;if(e===nl)return i.COMPRESSED_RGB_S3TC_DXT1_EXT;if(e===il)return i.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(e===rl)return i.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(e===al)return i.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(35840===e||35841===e||35842===e||35843===e){if(i=t.get("WEBGL_compressed_texture_pvrtc"),null===i)return null;if(35840===e)return i.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===e)return i.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===e)return i.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===e)return i.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===e||37492===e||37496===e){if(i=t.get("WEBGL_compressed_texture_etc"),null===i)return null;if(36196===e||37492===e)return r===gl?i.COMPRESSED_SRGB8_ETC2:i.COMPRESSED_RGB8_ETC2;if(37496===e)return r===gl?i.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:i.COMPRESSED_RGBA8_ETC2_EAC}if(37808===e||37809===e||37810===e||37811===e||37812===e||37813===e||37814===e||37815===e||37816===e||37817===e||37818===e||37819===e||37820===e||37821===e){if(i=t.get("WEBGL_compressed_texture_astc"),null===i)return null;if(37808===e)return r===gl?i.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:i.COMPRESSED_RGBA_ASTC_4x4_KHR;if(37809===e)return r===gl?i.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:i.COMPRESSED_RGBA_ASTC_5x4_KHR;if(37810===e)return r===gl?i.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:i.COMPRESSED_RGBA_ASTC_5x5_KHR;if(37811===e)return r===gl?i.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:i.COMPRESSED_RGBA_ASTC_6x5_KHR;if(37812===e)return r===gl?i.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:i.COMPRESSED_RGBA_ASTC_6x6_KHR;if(37813===e)return r===gl?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:i.COMPRESSED_RGBA_ASTC_8x5_KHR;if(37814===e)return r===gl?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:i.COMPRESSED_RGBA_ASTC_8x6_KHR;if(37815===e)return r===gl?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:i.COMPRESSED_RGBA_ASTC_8x8_KHR;if(37816===e)return r===gl?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:i.COMPRESSED_RGBA_ASTC_10x5_KHR;if(37817===e)return r===gl?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:i.COMPRESSED_RGBA_ASTC_10x6_KHR;if(37818===e)return r===gl?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:i.COMPRESSED_RGBA_ASTC_10x8_KHR;if(37819===e)return r===gl?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:i.COMPRESSED_RGBA_ASTC_10x10_KHR;if(37820===e)return r===gl?i.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:i.COMPRESSED_RGBA_ASTC_12x10_KHR;if(37821===e)return r===gl?i.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:i.COMPRESSED_RGBA_ASTC_12x12_KHR}if(e===ql||36494===e||36495===e){if(i=t.get("EXT_texture_compression_bptc"),null===i)return null;if(e===ql)return r===gl?i.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:i.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(36494===e)return i.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(36495===e)return i.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}if(36283===e||36284===e||36285===e||36286===e){if(i=t.get("EXT_texture_compression_rgtc"),null===i)return null;if(e===ql)return i.COMPRESSED_RED_RGTC1_EXT;if(36284===e)return i.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(36285===e)return i.COMPRESSED_RED_GREEN_RGTC2_EXT;if(36286===e)return i.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}return e===Q?l.UNSIGNED_INT_24_8:void 0!==l[e]?l[e]:null}}}class ga extends Cn{constructor(l=[]){super(),this.isArrayCamera=!0,this.cameras=l}}class _a extends ve{constructor(){super(),this.isGroup=!0,this.type="Group"}}const va={type:"move"};class xa{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new _a,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new _a,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new ft,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new ft),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new _a,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new ft,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new ft),this._grip}dispatchEvent(l){return null!==this._targetRay&&this._targetRay.dispatchEvent(l),null!==this._grip&&this._grip.dispatchEvent(l),null!==this._hand&&this._hand.dispatchEvent(l),this}connect(l){if(l&&l.hand){const t=this._hand;if(t)for(const e of l.hand.values())this._getHandJoint(t,e)}return this.dispatchEvent({type:"connected",data:l}),this}disconnect(l){return this.dispatchEvent({type:"disconnected",data:l}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(l,t,e){let n=null,i=null,r=null;const a=this._targetRay,q=this._grip,s=this._hand;if(l&&"visible-blurred"!==t.session.visibilityState){if(s&&l.hand){r=!0;for(const n of l.hand.values()){const l=t.getJointPose(n,e),i=this._getHandJoint(s,n);null!==l&&(i.matrix.fromArray(l.transform.matrix),i.matrix.decompose(i.position,i.rotation,i.scale),i.matrixWorldNeedsUpdate=!0,i.jointRadius=l.radius),i.visible=null!==l}const n=s.joints["index-finger-tip"],i=s.joints["thumb-tip"],a=n.position.distanceTo(i.position),q=.02,o=.005;s.inputState.pinching&&a>q+o?(s.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:l.handedness,target:this})):!s.inputState.pinching&&a<=q-o&&(s.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:l.handedness,target:this}))}else null!==q&&l.gripSpace&&(i=t.getPose(l.gripSpace,e),null!==i&&(q.matrix.fromArray(i.transform.matrix),q.matrix.decompose(q.position,q.rotation,q.scale),q.matrixWorldNeedsUpdate=!0,i.linearVelocity?(q.hasLinearVelocity=!0,q.linearVelocity.copy(i.linearVelocity)):q.hasLinearVelocity=!1,i.angularVelocity?(q.hasAngularVelocity=!0,q.angularVelocity.copy(i.angularVelocity)):q.hasAngularVelocity=!1));null!==a&&(n=t.getPose(l.targetRaySpace,e),null===n&&null!==i&&(n=i),null!==n&&(a.matrix.fromArray(n.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),a.matrixWorldNeedsUpdate=!0,n.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(n.linearVelocity)):a.hasLinearVelocity=!1,n.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(n.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(va)))}return null!==a&&(a.visible=null!==n),null!==q&&(q.visible=null!==i),null!==s&&(s.visible=null!==r),this}_getHandJoint(l,t){if(void 0===l.joints[t.jointName]){const e=new _a;e.matrixAutoUpdate=!1,e.visible=!1,l.joints[t.jointName]=e,l.add(e)}return l.joints[t.jointName]}}class ya{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(l,t,e){if(null===this.texture){const n=new ot;l.properties.get(n).__webglTexture=t.texture,t.depthNear==e.depthNear&&t.depthFar==e.depthFar||(this.depthNear=t.depthNear,this.depthFar=t.depthFar),this.texture=n}}render(l,t){if(null!==this.texture){if(null===this.mesh){const l=t.cameras[0].viewport,e=new Tn({vertexShader:"\nvoid main() {\n\n\tgl_Position = vec4( position, 1.0 );\n\n}",fragmentShader:"\nuniform sampler2DArray depthColor;\nuniform float depthWidth;\nuniform float depthHeight;\n\nvoid main() {\n\n\tvec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );\n\n\tif ( coord.x >= 1.0 ) {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;\n\n\t} else {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;\n\n\t}\n\n}",uniforms:{depthColor:{value:this.texture},depthWidth:{value:l.z},depthHeight:{value:l.w}}});this.mesh=new _n(new Gn(20,20),e)}l.render(this.mesh,t)}}reset(){this.texture=null,this.mesh=null}}class Ma extends Ll{constructor(l,t){super();const e=this;let n=null,i=1,r=null,a="local-floor",q=1,s=null,o=null,c=null,m=null,h=null,u=null;const d=new ya,p=t.getContextAttributes();let f=null,g=null;const _=[],v=[],x=new kl;let y=null;const M=new Cn;M.layers.enable(1),M.viewport=new ct;const S=new Cn;S.layers.enable(2),S.viewport=new ct;const E=[M,S],T=new ga;T.layers.enable(1),T.layers.enable(2);let b=null,w=null;function A(l){const t=v.indexOf(l.inputSource);if(-1===t)return;const e=_[t];void 0!==e&&(e.update(l.inputSource,l.frame,s||r),e.dispatchEvent({type:l.type,data:l.inputSource}))}function R(){n.removeEventListener("select",A),n.removeEventListener("selectstart",A),n.removeEventListener("selectend",A),n.removeEventListener("squeeze",A),n.removeEventListener("squeezestart",A),n.removeEventListener("squeezeend",A),n.removeEventListener("end",R),n.removeEventListener("inputsourceschange",C);for(let l=0;l<_.length;l++){const t=v[l];null!==t&&(v[l]=null,_[l].disconnect(t))}b=null,w=null,d.reset(),l.setRenderTarget(f),h=null,m=null,c=null,n=null,g=null,I.stop(),e.isPresenting=!1,l.setPixelRatio(y),l.setSize(x.width,x.height,!1),e.dispatchEvent({type:"sessionend"})}function C(l){for(let t=0;t<l.removed.length;t++){const e=l.removed[t],n=v.indexOf(e);n>=0&&(v[n]=null,_[n].disconnect(e))}for(let t=0;t<l.added.length;t++){const e=l.added[t];let n=v.indexOf(e);if(-1===n){for(let l=0;l<_.length;l++){if(l>=v.length){v.push(e),n=l;break}if(null===v[l]){v[l]=e,n=l;break}}if(-1===n)break}const i=_[n];i&&i.connect(e)}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(l){let t=_[l];return void 0===t&&(t=new xa,_[l]=t),t.getTargetRaySpace()},this.getControllerGrip=function(l){let t=_[l];return void 0===t&&(t=new xa,_[l]=t),t.getGripSpace()},this.getHand=function(l){let t=_[l];return void 0===t&&(t=new xa,_[l]=t),t.getHandSpace()},this.setFramebufferScaleFactor=function(l){i=l,!0===e.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(l){a=l,!0===e.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return s||r},this.setReferenceSpace=function(l){s=l},this.getBaseLayer=function(){return null!==m?m:h},this.getBinding=function(){return c},this.getFrame=function(){return u},this.getSession=function(){return n},this.setSession=async function(o){if(n=o,null!==n){if(f=l.getRenderTarget(),n.addEventListener("select",A),n.addEventListener("selectstart",A),n.addEventListener("selectend",A),n.addEventListener("squeeze",A),n.addEventListener("squeezestart",A),n.addEventListener("squeezeend",A),n.addEventListener("end",R),n.addEventListener("inputsourceschange",C),!0!==p.xrCompatible&&await t.makeXRCompatible(),y=l.getPixelRatio(),l.getSize(x),void 0===n.renderState.layers){const e={antialias:p.antialias,alpha:!0,depth:p.depth,stencil:p.stencil,framebufferScaleFactor:i};h=new XRWebGLLayer(n,t,e),n.updateRenderState({baseLayer:h}),l.setPixelRatio(1),l.setSize(h.framebufferWidth,h.framebufferHeight,!1),g=new ht(h.framebufferWidth,h.framebufferHeight,{format:ll,type:J,colorSpace:l.outputColorSpace,stencilBuffer:p.stencil})}else{let e=null,r=null,a=null;p.depth&&(a=p.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24,e=p.stencil?el:tl,r=p.stencil?Q:Z);const q={colorFormat:t.RGBA8,depthFormat:a,scaleFactor:i};c=new XRWebGLBinding(n,t),m=c.createProjectionLayer(q),n.updateRenderState({layers:[m]}),l.setPixelRatio(1),l.setSize(m.textureWidth,m.textureHeight,!1),g=new ht(m.textureWidth,m.textureHeight,{format:ll,type:J,depthTexture:new bi(m.textureWidth,m.textureHeight,r,void 0,void 0,void 0,void 0,void 0,void 0,e),stencilBuffer:p.stencil,colorSpace:l.outputColorSpace,samples:p.antialias?4:0,resolveDepthBuffer:!1===m.ignoreDepthValues})}g.isXRRenderTarget=!0,this.setFoveation(q),s=null,r=await n.requestReferenceSpace(a),I.setContext(n),I.start(),e.isPresenting=!0,e.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(null!==n)return n.environmentBlendMode};const P=new ft,L=new ft;function U(l,t){null===t?l.matrixWorld.copy(l.matrix):l.matrixWorld.multiplyMatrices(t.matrixWorld,l.matrix),l.matrixWorldInverse.copy(l.matrixWorld).invert()}this.updateCamera=function(l){if(null===n)return;null!==d.texture&&(l.near=d.depthNear,l.far=d.depthFar),T.near=S.near=M.near=l.near,T.far=S.far=M.far=l.far,b===T.near&&w===T.far||(n.updateRenderState({depthNear:T.near,depthFar:T.far}),b=T.near,w=T.far,M.near=b,M.far=w,S.near=b,S.far=w,M.updateProjectionMatrix(),S.updateProjectionMatrix(),l.updateProjectionMatrix());const t=l.parent,e=T.cameras;U(T,t);for(let l=0;l<e.length;l++)U(e[l],t);2===e.length?function(l,t,e){P.setFromMatrixPosition(t.matrixWorld),L.setFromMatrixPosition(e.matrixWorld);const n=P.distanceTo(L),i=t.projectionMatrix.elements,r=e.projectionMatrix.elements,a=i[14]/(i[10]-1),q=i[14]/(i[10]+1),s=(i[9]+1)/i[5],o=(i[9]-1)/i[5],c=(i[8]-1)/i[0],m=(r[8]+1)/r[0],h=a*c,u=a*m,d=n/(-c+m),p=d*-c;t.matrixWorld.decompose(l.position,l.quaternion,l.scale),l.translateX(p),l.translateZ(d),l.matrixWorld.compose(l.position,l.quaternion,l.scale),l.matrixWorldInverse.copy(l.matrixWorld).invert();const f=a+d,g=q+d,_=h-p,v=u+(n-p),x=s*q/g*f,y=o*q/g*f;l.projectionMatrix.makePerspective(_,v,x,y,f,g),l.projectionMatrixInverse.copy(l.projectionMatrix).invert()}(T,M,S):T.projectionMatrix.copy(M.projectionMatrix),function(l,t,e){null===e?l.matrix.copy(t.matrixWorld):(l.matrix.copy(e.matrixWorld),l.matrix.invert(),l.matrix.multiply(t.matrixWorld)),l.matrix.decompose(l.position,l.quaternion,l.scale),l.updateMatrixWorld(!0),l.projectionMatrix.copy(t.projectionMatrix),l.projectionMatrixInverse.copy(t.projectionMatrixInverse),l.isPerspectiveCamera&&(l.fov=2*Il*Math.atan(1/l.projectionMatrix.elements[5]),l.zoom=1)}(l,T,t)},this.getCamera=function(){return T},this.getFoveation=function(){if(null!==m||null!==h)return q},this.setFoveation=function(l){q=l,null!==m&&(m.fixedFoveation=l),null!==h&&void 0!==h.fixedFoveation&&(h.fixedFoveation=l)},this.hasDepthSensing=function(){return null!==d.texture};let N=null;const I=new Hn;I.setAnimationLoop((function(t,i){if(o=i.getViewerPose(s||r),u=i,null!==o){const t=o.views;null!==h&&(l.setRenderTargetFramebuffer(g,h.framebuffer),l.setRenderTarget(g));let e=!1;t.length!==T.cameras.length&&(T.cameras.length=0,e=!0);for(let n=0;n<t.length;n++){const i=t[n];let r=null;if(null!==h)r=h.getViewport(i);else{const t=c.getViewSubImage(m,i);r=t.viewport,0===n&&(l.setRenderTargetTextures(g,t.colorTexture,m.ignoreDepthValues?void 0:t.depthStencilTexture),l.setRenderTarget(g))}let a=E[n];void 0===a&&(a=new Cn,a.layers.enable(n),a.viewport=new ct,E[n]=a),a.matrix.fromArray(i.transform.matrix),a.matrix.decompose(a.position,a.quaternion,a.scale),a.projectionMatrix.fromArray(i.projectionMatrix),a.projectionMatrixInverse.copy(a.projectionMatrix).invert(),a.viewport.set(r.x,r.y,r.width,r.height),0===n&&(T.matrix.copy(a.matrix),T.matrix.decompose(T.position,T.quaternion,T.scale)),!0===e&&T.cameras.push(a)}const i=n.enabledFeatures;if(i&&i.includes("depth-sensing")){const e=c.getDepthInformation(t[0]);e&&e.isValid&&e.texture&&d.init(l,e,n.renderState)}}for(let l=0;l<_.length;l++){const t=v[l],e=_[l];null!==t&&void 0!==e&&e.update(t,i,s||r)}d.render(l,T),N&&N(t,i),i.detectedPlanes&&e.dispatchEvent({type:"planesdetected",data:i}),u=null})),this.setAnimationLoop=function(l){N=l},this.dispose=function(){}}}const Sa=new ee,Ea=new Xt;function Ta(l,t){function e(l,t){!0===l.matrixAutoUpdate&&l.updateMatrix(),t.value.copy(l.matrix)}function n(n,i){n.opacity.value=i.opacity,i.color&&n.diffuse.value.copy(i.color),i.emissive&&n.emissive.value.copy(i.emissive).multiplyScalar(i.emissiveIntensity),i.map&&(n.map.value=i.map,e(i.map,n.mapTransform)),i.alphaMap&&(n.alphaMap.value=i.alphaMap,e(i.alphaMap,n.alphaMapTransform)),i.bumpMap&&(n.bumpMap.value=i.bumpMap,e(i.bumpMap,n.bumpMapTransform),n.bumpScale.value=i.bumpScale,1===i.side&&(n.bumpScale.value*=-1)),i.normalMap&&(n.normalMap.value=i.normalMap,e(i.normalMap,n.normalMapTransform),n.normalScale.value.copy(i.normalScale),1===i.side&&n.normalScale.value.negate()),i.displacementMap&&(n.displacementMap.value=i.displacementMap,e(i.displacementMap,n.displacementMapTransform),n.displacementScale.value=i.displacementScale,n.displacementBias.value=i.displacementBias),i.emissiveMap&&(n.emissiveMap.value=i.emissiveMap,e(i.emissiveMap,n.emissiveMapTransform)),i.specularMap&&(n.specularMap.value=i.specularMap,e(i.specularMap,n.specularMapTransform)),i.alphaTest>0&&(n.alphaTest.value=i.alphaTest);const r=t.get(i),a=r.envMap,q=r.envMapRotation;if(a&&(n.envMap.value=a,Sa.copy(q),Sa.x*=-1,Sa.y*=-1,Sa.z*=-1,a.isCubeTexture&&!1===a.isRenderTargetTexture&&(Sa.y*=-1,Sa.z*=-1),n.envMapRotation.value.setFromMatrix4(Ea.makeRotationFromEuler(Sa)),n.flipEnvMap.value=a.isCubeTexture&&!1===a.isRenderTargetTexture?-1:1,n.reflectivity.value=i.reflectivity,n.ior.value=i.ior,n.refractionRatio.value=i.refractionRatio),i.lightMap){n.lightMap.value=i.lightMap;const t=!0===l._useLegacyLights?Math.PI:1;n.lightMapIntensity.value=i.lightMapIntensity*t,e(i.lightMap,n.lightMapTransform)}i.aoMap&&(n.aoMap.value=i.aoMap,n.aoMapIntensity.value=i.aoMapIntensity,e(i.aoMap,n.aoMapTransform))}return{refreshFogUniforms:function(t,e){e.color.getRGB(t.fogColor.value,Sn(l)),e.isFog?(t.fogNear.value=e.near,t.fogFar.value=e.far):e.isFogExp2&&(t.fogDensity.value=e.density)},refreshMaterialUniforms:function(l,i,r,a,q){i.isMeshBasicMaterial||i.isMeshLambertMaterial?n(l,i):i.isMeshToonMaterial?(n(l,i),function(l,t){t.gradientMap&&(l.gradientMap.value=t.gradientMap)}(l,i)):i.isMeshPhongMaterial?(n(l,i),function(l,t){l.specular.value.copy(t.specular),l.shininess.value=Math.max(t.shininess,1e-4)}(l,i)):i.isMeshStandardMaterial?(n(l,i),function(l,t){l.metalness.value=t.metalness,t.metalnessMap&&(l.metalnessMap.value=t.metalnessMap,e(t.metalnessMap,l.metalnessMapTransform)),l.roughness.value=t.roughness,t.roughnessMap&&(l.roughnessMap.value=t.roughnessMap,e(t.roughnessMap,l.roughnessMapTransform)),t.envMap&&(l.envMapIntensity.value=t.envMapIntensity)}(l,i),i.isMeshPhysicalMaterial&&function(l,t,n){l.ior.value=t.ior,t.sheen>0&&(l.sheenColor.value.copy(t.sheenColor).multiplyScalar(t.sheen),l.sheenRoughness.value=t.sheenRoughness,t.sheenColorMap&&(l.sheenColorMap.value=t.sheenColorMap,e(t.sheenColorMap,l.sheenColorMapTransform)),t.sheenRoughnessMap&&(l.sheenRoughnessMap.value=t.sheenRoughnessMap,e(t.sheenRoughnessMap,l.sheenRoughnessMapTransform))),t.clearcoat>0&&(l.clearcoat.value=t.clearcoat,l.clearcoatRoughness.value=t.clearcoatRoughness,t.clearcoatMap&&(l.clearcoatMap.value=t.clearcoatMap,e(t.clearcoatMap,l.clearcoatMapTransform)),t.clearcoatRoughnessMap&&(l.clearcoatRoughnessMap.value=t.clearcoatRoughnessMap,e(t.clearcoatRoughnessMap,l.clearcoatRoughnessMapTransform)),t.clearcoatNormalMap&&(l.clearcoatNormalMap.value=t.clearcoatNormalMap,e(t.clearcoatNormalMap,l.clearcoatNormalMapTransform),l.clearcoatNormalScale.value.copy(t.clearcoatNormalScale),1===t.side&&l.clearcoatNormalScale.value.negate())),t.dispersion>0&&(l.dispersion.value=t.dispersion),t.iridescence>0&&(l.iridescence.value=t.iridescence,l.iridescenceIOR.value=t.iridescenceIOR,l.iridescenceThicknessMinimum.value=t.iridescenceThicknessRange[0],l.iridescenceThicknessMaximum.value=t.iridescenceThicknessRange[1],t.iridescenceMap&&(l.iridescenceMap.value=t.iridescenceMap,e(t.iridescenceMap,l.iridescenceMapTransform)),t.iridescenceThicknessMap&&(l.iridescenceThicknessMap.value=t.iridescenceThicknessMap,e(t.iridescenceThicknessMap,l.iridescenceThicknessMapTransform))),t.transmission>0&&(l.transmission.value=t.transmission,l.transmissionSamplerMap.value=n.texture,l.transmissionSamplerSize.value.set(n.width,n.height),t.transmissionMap&&(l.transmissionMap.value=t.transmissionMap,e(t.transmissionMap,l.transmissionMapTransform)),l.thickness.value=t.thickness,t.thicknessMap&&(l.thicknessMap.value=t.thicknessMap,e(t.thicknessMap,l.thicknessMapTransform)),l.attenuationDistance.value=t.attenuationDistance,l.attenuationColor.value.copy(t.attenuationColor)),t.anisotropy>0&&(l.anisotropyVector.value.set(t.anisotropy*Math.cos(t.anisotropyRotation),t.anisotropy*Math.sin(t.anisotropyRotation)),t.anisotropyMap&&(l.anisotropyMap.value=t.anisotropyMap,e(t.anisotropyMap,l.anisotropyMapTransform))),l.specularIntensity.value=t.specularIntensity,l.specularColor.value.copy(t.specularColor),t.specularColorMap&&(l.specularColorMap.value=t.specularColorMap,e(t.specularColorMap,l.specularColorMapTransform)),t.specularIntensityMap&&(l.specularIntensityMap.value=t.specularIntensityMap,e(t.specularIntensityMap,l.specularIntensityMapTransform))}(l,i,q)):i.isMeshMatcapMaterial?(n(l,i),function(l,t){t.matcap&&(l.matcap.value=t.matcap)}(l,i)):i.isMeshDepthMaterial?n(l,i):i.isMeshDistanceMaterial?(n(l,i),function(l,e){const n=t.get(e).light;l.referencePosition.value.setFromMatrixPosition(n.matrixWorld),l.nearDistance.value=n.shadow.camera.near,l.farDistance.value=n.shadow.camera.far}(l,i)):i.isMeshNormalMaterial?n(l,i):i.isLineBasicMaterial?(function(l,t){l.diffuse.value.copy(t.color),l.opacity.value=t.opacity,t.map&&(l.map.value=t.map,e(t.map,l.mapTransform))}(l,i),i.isLineDashedMaterial&&function(l,t){l.dashSize.value=t.dashSize,l.totalSize.value=t.dashSize+t.gapSize,l.scale.value=t.scale}(l,i)):i.isPointsMaterial?function(l,t,n,i){l.diffuse.value.copy(t.color),l.opacity.value=t.opacity,l.size.value=t.size*n,l.scale.value=.5*i,t.map&&(l.map.value=t.map,e(t.map,l.uvTransform)),t.alphaMap&&(l.alphaMap.value=t.alphaMap,e(t.alphaMap,l.alphaMapTransform)),t.alphaTest>0&&(l.alphaTest.value=t.alphaTest)}(l,i,r,a):i.isSpriteMaterial?function(l,t){l.diffuse.value.copy(t.color),l.opacity.value=t.opacity,l.rotation.value=t.rotation,t.map&&(l.map.value=t.map,e(t.map,l.mapTransform)),t.alphaMap&&(l.alphaMap.value=t.alphaMap,e(t.alphaMap,l.alphaMapTransform)),t.alphaTest>0&&(l.alphaTest.value=t.alphaTest)}(l,i):i.isShadowMaterial?(l.color.value.copy(i.color),l.opacity.value=i.opacity):i.isShaderMaterial&&(i.uniformsNeedUpdate=!1)}}}function ba(l,t,e,n){let i={},r={},a=[];const q=l.getParameter(l.MAX_UNIFORM_BUFFER_BINDINGS);function s(l,t,e,n){const i=l.value,r=t+"_"+e;if(void 0===n[r])return n[r]="number"==typeof i||"boolean"==typeof i?i:i.clone(),!0;{const l=n[r];if("number"==typeof i||"boolean"==typeof i){if(l!==i)return n[r]=i,!0}else if(!1===l.equals(i))return l.copy(i),!0}return!1}function o(l){const t={boundary:0,storage:0};return"number"==typeof l||"boolean"==typeof l?(t.boundary=4,t.storage=4):l.isVector2?(t.boundary=8,t.storage=8):l.isVector3||l.isColor?(t.boundary=16,t.storage=12):l.isVector4?(t.boundary=16,t.storage=16):l.isMatrix3?(t.boundary=48,t.storage=48):l.isMatrix4?(t.boundary=64,t.storage=64):l.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",l),t}function c(t){const e=t.target;e.removeEventListener("dispose",c);const n=a.indexOf(e.__bindingPointIndex);a.splice(n,1),l.deleteBuffer(i[e.id]),delete i[e.id],delete r[e.id]}return{bind:function(l,t){const e=t.program;n.uniformBlockBinding(l,e)},update:function(e,m){let h=i[e.id];void 0===h&&(function(l){const t=l.uniforms;let e=0;for(let l=0,n=t.length;l<n;l++){const n=Array.isArray(t[l])?t[l]:[t[l]];for(let l=0,t=n.length;l<t;l++){const t=n[l],i=Array.isArray(t.value)?t.value:[t.value];for(let l=0,n=i.length;l<n;l++){const n=o(i[l]),r=e%16;0!==r&&16-r<n.boundary&&(e+=16-r),t.__data=new Float32Array(n.storage/Float32Array.BYTES_PER_ELEMENT),t.__offset=e,e+=n.storage}}}const n=e%16;n>0&&(e+=16-n),l.__size=e,l.__cache={}}(e),h=function(t){const e=function(){for(let l=0;l<q;l++)if(-1===a.indexOf(l))return a.push(l),l;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}();t.__bindingPointIndex=e;const n=l.createBuffer(),i=t.__size,r=t.usage;return l.bindBuffer(l.UNIFORM_BUFFER,n),l.bufferData(l.UNIFORM_BUFFER,i,r),l.bindBuffer(l.UNIFORM_BUFFER,null),l.bindBufferBase(l.UNIFORM_BUFFER,e,n),n}(e),i[e.id]=h,e.addEventListener("dispose",c));const u=m.program;n.updateUBOMapping(e,u);const d=t.render.frame;r[e.id]!==d&&(function(t){const e=i[t.id],n=t.uniforms,r=t.__cache;l.bindBuffer(l.UNIFORM_BUFFER,e);for(let t=0,e=n.length;t<e;t++){const e=Array.isArray(n[t])?n[t]:[n[t]];for(let n=0,i=e.length;n<i;n++){const i=e[n];if(!0===s(i,t,n,r)){const t=i.__offset,e=Array.isArray(i.value)?i.value:[i.value];let n=0;for(let r=0;r<e.length;r++){const a=e[r],q=o(a);"number"==typeof a||"boolean"==typeof a?(i.__data[0]=a,l.bufferSubData(l.UNIFORM_BUFFER,t+n,i.__data)):a.isMatrix3?(i.__data[0]=a.elements[0],i.__data[1]=a.elements[1],i.__data[2]=a.elements[2],i.__data[3]=0,i.__data[4]=a.elements[3],i.__data[5]=a.elements[4],i.__data[6]=a.elements[5],i.__data[7]=0,i.__data[8]=a.elements[6],i.__data[9]=a.elements[7],i.__data[10]=a.elements[8],i.__data[11]=0):(a.toArray(i.__data,n),n+=q.storage/Float32Array.BYTES_PER_ELEMENT)}l.bufferSubData(l.UNIFORM_BUFFER,t,i.__data)}}}l.bindBuffer(l.UNIFORM_BUFFER,null)}(e),r[e.id]=d)},dispose:function(){for(const t in i)l.deleteBuffer(i[t]);a=[],i={},r={}}}}class wa extends ve{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new ee,this.environmentIntensity=1,this.environmentRotation=new ee,this.overrideMaterial=null,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(l,t){return super.copy(l,t),null!==l.background&&(this.background=l.background.clone()),null!==l.environment&&(this.environment=l.environment.clone()),null!==l.fog&&(this.fog=l.fog.clone()),this.backgroundBlurriness=l.backgroundBlurriness,this.backgroundIntensity=l.backgroundIntensity,this.backgroundRotation.copy(l.backgroundRotation),this.environmentIntensity=l.environmentIntensity,this.environmentRotation.copy(l.environmentRotation),null!==l.overrideMaterial&&(this.overrideMaterial=l.overrideMaterial.clone()),this.matrixAutoUpdate=l.matrixAutoUpdate,this}toJSON(l){const t=super.toJSON(l);return null!==this.fog&&(t.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(t.object.backgroundBlurriness=this.backgroundBlurriness),1!==this.backgroundIntensity&&(t.object.backgroundIntensity=this.backgroundIntensity),t.object.backgroundRotation=this.backgroundRotation.toArray(),1!==this.environmentIntensity&&(t.object.environmentIntensity=this.environmentIntensity),t.object.environmentRotation=this.environmentRotation.toArray(),t}}class Aa{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(l,t){const e=this.getUtoTmapping(l);return this.getPoint(e,t)}getPoints(l=5){const t=[];for(let e=0;e<=l;e++)t.push(this.getPoint(e/l));return t}getSpacedPoints(l=5){const t=[];for(let e=0;e<=l;e++)t.push(this.getPointAt(e/l));return t}getLength(){const l=this.getLengths();return l[l.length-1]}getLengths(l=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===l+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const t=[];let e,n=this.getPoint(0),i=0;t.push(0);for(let r=1;r<=l;r++)e=this.getPoint(r/l),i+=e.distanceTo(n),t.push(i),n=e;return this.cacheArcLengths=t,t}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(l,t){const e=this.getLengths();let n=0;const i=e.length;let r;r=t||l*e[i-1];let a,q=0,s=i-1;for(;q<=s;)if(n=Math.floor(q+(s-q)/2),a=e[n]-r,a<0)q=n+1;else{if(!(a>0)){s=n;break}s=n-1}if(n=s,e[n]===r)return n/(i-1);const o=e[n];return(n+(r-o)/(e[n+1]-o))/(i-1)}getTangent(l,t){const e=1e-4;let n=l-e,i=l+e;n<0&&(n=0),i>1&&(i=1);const r=this.getPoint(n),a=this.getPoint(i),q=t||(r.isVector2?new kl:new ft);return q.copy(a).sub(r).normalize(),q}getTangentAt(l,t){const e=this.getUtoTmapping(l);return this.getTangent(e,t)}computeFrenetFrames(l,t){const e=new ft,n=[],i=[],r=[],a=new ft,q=new Xt;for(let t=0;t<=l;t++){const e=t/l;n[t]=this.getTangentAt(e,new ft)}i[0]=new ft,r[0]=new ft;let s=Number.MAX_VALUE;const o=Math.abs(n[0].x),c=Math.abs(n[0].y),m=Math.abs(n[0].z);o<=s&&(s=o,e.set(1,0,0)),c<=s&&(s=c,e.set(0,1,0)),m<=s&&e.set(0,0,1),a.crossVectors(n[0],e).normalize(),i[0].crossVectors(n[0],a),r[0].crossVectors(n[0],i[0]);for(let t=1;t<=l;t++){if(i[t]=i[t-1].clone(),r[t]=r[t-1].clone(),a.crossVectors(n[t-1],n[t]),a.length()>Number.EPSILON){a.normalize();const l=Math.acos(Ol(n[t-1].dot(n[t]),-1,1));i[t].applyMatrix4(q.makeRotationAxis(a,l))}r[t].crossVectors(n[t],i[t])}if(!0===t){let t=Math.acos(Ol(i[0].dot(i[l]),-1,1));t/=l,n[0].dot(a.crossVectors(i[0],i[l]))>0&&(t=-t);for(let e=1;e<=l;e++)i[e].applyMatrix4(q.makeRotationAxis(n[e],t*e)),r[e].crossVectors(n[e],i[e])}return{tangents:n,normals:i,binormals:r}}clone(){return(new this.constructor).copy(this)}copy(l){return this.arcLengthDivisions=l.arcLengthDivisions,this}toJSON(){const l={metadata:{version:4.6,type:"Curve",generator:"Curve.toJSON"}};return l.arcLengthDivisions=this.arcLengthDivisions,l.type=this.type,l}fromJSON(l){return this.arcLengthDivisions=l.arcLengthDivisions,this}}class Ra extends Aa{constructor(l=0,t=0,e=1,n=1,i=0,r=2*Math.PI,a=!1,q=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=l,this.aY=t,this.xRadius=e,this.yRadius=n,this.aStartAngle=i,this.aEndAngle=r,this.aClockwise=a,this.aRotation=q}getPoint(l,t=new kl){const e=t,n=2*Math.PI;let i=this.aEndAngle-this.aStartAngle;const r=Math.abs(i)<Number.EPSILON;for(;i<0;)i+=n;for(;i>n;)i-=n;i<Number.EPSILON&&(i=r?0:n),!0!==this.aClockwise||r||(i===n?i=-n:i-=n);const a=this.aStartAngle+l*i;let q=this.aX+this.xRadius*Math.cos(a),s=this.aY+this.yRadius*Math.sin(a);if(0!==this.aRotation){const l=Math.cos(this.aRotation),t=Math.sin(this.aRotation),e=q-this.aX,n=s-this.aY;q=e*l-n*t+this.aX,s=e*t+n*l+this.aY}return e.set(q,s)}copy(l){return super.copy(l),this.aX=l.aX,this.aY=l.aY,this.xRadius=l.xRadius,this.yRadius=l.yRadius,this.aStartAngle=l.aStartAngle,this.aEndAngle=l.aEndAngle,this.aClockwise=l.aClockwise,this.aRotation=l.aRotation,this}toJSON(){const l=super.toJSON();return l.aX=this.aX,l.aY=this.aY,l.xRadius=this.xRadius,l.yRadius=this.yRadius,l.aStartAngle=this.aStartAngle,l.aEndAngle=this.aEndAngle,l.aClockwise=this.aClockwise,l.aRotation=this.aRotation,l}fromJSON(l){return super.fromJSON(l),this.aX=l.aX,this.aY=l.aY,this.xRadius=l.xRadius,this.yRadius=l.yRadius,this.aStartAngle=l.aStartAngle,this.aEndAngle=l.aEndAngle,this.aClockwise=l.aClockwise,this.aRotation=l.aRotation,this}}function Ca(){let l=0,t=0,e=0,n=0;function i(i,r,a,q){l=i,t=a,e=-3*i+3*r-2*a-q,n=2*i-2*r+a+q}return{initCatmullRom:function(l,t,e,n,r){i(t,e,r*(e-l),r*(n-t))},initNonuniformCatmullRom:function(l,t,e,n,r,a,q){let s=(t-l)/r-(e-l)/(r+a)+(e-t)/a,o=(e-t)/a-(n-t)/(a+q)+(n-e)/q;s*=a,o*=a,i(t,e,s,o)},calc:function(i){const r=i*i;return l+t*i+e*r+n*(r*i)}}}const Pa=new ft,La=new Ca,Ua=new Ca,Na=new Ca;function Ia(l,t,e,n,i){const r=.5*(n-t),a=.5*(i-e),q=l*l;return(2*e-2*n+r+a)*(l*q)+(-3*e+3*n-2*r-a)*q+r*l+e}function Da(l,t,e,n){return function(l,t){const e=1-l;return e*e*t}(l,t)+function(l,t){return 2*(1-l)*l*t}(l,e)+function(l,t){return l*l*t}(l,n)}function Oa(l,t,e,n,i){return function(l,t){const e=1-l;return e*e*e*t}(l,t)+function(l,t){const e=1-l;return 3*e*e*l*t}(l,e)+function(l,t){return 3*(1-l)*l*l*t}(l,n)+function(l,t){return l*l*l*t}(l,i)}class Fa extends Aa{constructor(l=new kl,t=new kl,e=new kl,n=new kl){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=l,this.v1=t,this.v2=e,this.v3=n}getPoint(l,t=new kl){const e=t,n=this.v0,i=this.v1,r=this.v2,a=this.v3;return e.set(Oa(l,n.x,i.x,r.x,a.x),Oa(l,n.y,i.y,r.y,a.y)),e}copy(l){return super.copy(l),this.v0.copy(l.v0),this.v1.copy(l.v1),this.v2.copy(l.v2),this.v3.copy(l.v3),this}toJSON(){const l=super.toJSON();return l.v0=this.v0.toArray(),l.v1=this.v1.toArray(),l.v2=this.v2.toArray(),l.v3=this.v3.toArray(),l}fromJSON(l){return super.fromJSON(l),this.v0.fromArray(l.v0),this.v1.fromArray(l.v1),this.v2.fromArray(l.v2),this.v3.fromArray(l.v3),this}}class za extends Aa{constructor(l=new kl,t=new kl){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=l,this.v2=t}getPoint(l,t=new kl){const e=t;return 1===l?e.copy(this.v2):(e.copy(this.v2).sub(this.v1),e.multiplyScalar(l).add(this.v1)),e}getPointAt(l,t){return this.getPoint(l,t)}getTangent(l,t=new kl){return t.subVectors(this.v2,this.v1).normalize()}getTangentAt(l,t){return this.getTangent(l,t)}copy(l){return super.copy(l),this.v1.copy(l.v1),this.v2.copy(l.v2),this}toJSON(){const l=super.toJSON();return l.v1=this.v1.toArray(),l.v2=this.v2.toArray(),l}fromJSON(l){return super.fromJSON(l),this.v1.fromArray(l.v1),this.v2.fromArray(l.v2),this}}class Ba extends Aa{constructor(l=new kl,t=new kl,e=new kl){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=l,this.v1=t,this.v2=e}getPoint(l,t=new kl){const e=t,n=this.v0,i=this.v1,r=this.v2;return e.set(Da(l,n.x,i.x,r.x),Da(l,n.y,i.y,r.y)),e}copy(l){return super.copy(l),this.v0.copy(l.v0),this.v1.copy(l.v1),this.v2.copy(l.v2),this}toJSON(){const l=super.toJSON();return l.v0=this.v0.toArray(),l.v1=this.v1.toArray(),l.v2=this.v2.toArray(),l}fromJSON(l){return super.fromJSON(l),this.v0.fromArray(l.v0),this.v1.fromArray(l.v1),this.v2.fromArray(l.v2),this}}class Va extends Aa{constructor(l=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=l}getPoint(l,t=new kl){const e=t,n=this.points,i=(n.length-1)*l,r=Math.floor(i),a=i-r,q=n[0===r?r:r-1],s=n[r],o=n[r>n.length-2?n.length-1:r+1],c=n[r>n.length-3?n.length-1:r+2];return e.set(Ia(a,q.x,s.x,o.x,c.x),Ia(a,q.y,s.y,o.y,c.y)),e}copy(l){super.copy(l),this.points=[];for(let t=0,e=l.points.length;t<e;t++){const e=l.points[t];this.points.push(e.clone())}return this}toJSON(){const l=super.toJSON();l.points=[];for(let t=0,e=this.points.length;t<e;t++){const e=this.points[t];l.points.push(e.toArray())}return l}fromJSON(l){super.fromJSON(l),this.points=[];for(let t=0,e=l.points.length;t<e;t++){const e=l.points[t];this.points.push((new kl).fromArray(e))}return this}}var Ha=Object.freeze({__proto__:null,ArcCurve:class extends Ra{constructor(l,t,e,n,i,r){super(l,t,e,e,n,i,r),this.isArcCurve=!0,this.type="ArcCurve"}},CatmullRomCurve3:class extends Aa{constructor(l=[],t=!1,e="centripetal",n=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=l,this.closed=t,this.curveType=e,this.tension=n}getPoint(l,t=new ft){const e=t,n=this.points,i=n.length,r=(i-(this.closed?0:1))*l;let a,q,s=Math.floor(r),o=r-s;this.closed?s+=s>0?0:(Math.floor(Math.abs(s)/i)+1)*i:0===o&&s===i-1&&(s=i-2,o=1),this.closed||s>0?a=n[(s-1)%i]:(Pa.subVectors(n[0],n[1]).add(n[0]),a=Pa);const c=n[s%i],m=n[(s+1)%i];if(this.closed||s+2<i?q=n[(s+2)%i]:(Pa.subVectors(n[i-1],n[i-2]).add(n[i-1]),q=Pa),"centripetal"===this.curveType||"chordal"===this.curveType){const l="chordal"===this.curveType?.5:.25;let t=Math.pow(a.distanceToSquared(c),l),e=Math.pow(c.distanceToSquared(m),l),n=Math.pow(m.distanceToSquared(q),l);e<1e-4&&(e=1),t<1e-4&&(t=e),n<1e-4&&(n=e),La.initNonuniformCatmullRom(a.x,c.x,m.x,q.x,t,e,n),Ua.initNonuniformCatmullRom(a.y,c.y,m.y,q.y,t,e,n),Na.initNonuniformCatmullRom(a.z,c.z,m.z,q.z,t,e,n)}else"catmullrom"===this.curveType&&(La.initCatmullRom(a.x,c.x,m.x,q.x,this.tension),Ua.initCatmullRom(a.y,c.y,m.y,q.y,this.tension),Na.initCatmullRom(a.z,c.z,m.z,q.z,this.tension));return e.set(La.calc(o),Ua.calc(o),Na.calc(o)),e}copy(l){super.copy(l),this.points=[];for(let t=0,e=l.points.length;t<e;t++){const e=l.points[t];this.points.push(e.clone())}return this.closed=l.closed,this.curveType=l.curveType,this.tension=l.tension,this}toJSON(){const l=super.toJSON();l.points=[];for(let t=0,e=this.points.length;t<e;t++){const e=this.points[t];l.points.push(e.toArray())}return l.closed=this.closed,l.curveType=this.curveType,l.tension=this.tension,l}fromJSON(l){super.fromJSON(l),this.points=[];for(let t=0,e=l.points.length;t<e;t++){const e=l.points[t];this.points.push((new ft).fromArray(e))}return this.closed=l.closed,this.curveType=l.curveType,this.tension=l.tension,this}},CubicBezierCurve:Fa,CubicBezierCurve3:class extends Aa{constructor(l=new ft,t=new ft,e=new ft,n=new ft){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=l,this.v1=t,this.v2=e,this.v3=n}getPoint(l,t=new ft){const e=t,n=this.v0,i=this.v1,r=this.v2,a=this.v3;return e.set(Oa(l,n.x,i.x,r.x,a.x),Oa(l,n.y,i.y,r.y,a.y),Oa(l,n.z,i.z,r.z,a.z)),e}copy(l){return super.copy(l),this.v0.copy(l.v0),this.v1.copy(l.v1),this.v2.copy(l.v2),this.v3.copy(l.v3),this}toJSON(){const l=super.toJSON();return l.v0=this.v0.toArray(),l.v1=this.v1.toArray(),l.v2=this.v2.toArray(),l.v3=this.v3.toArray(),l}fromJSON(l){return super.fromJSON(l),this.v0.fromArray(l.v0),this.v1.fromArray(l.v1),this.v2.fromArray(l.v2),this.v3.fromArray(l.v3),this}},EllipseCurve:Ra,LineCurve:za,LineCurve3:class extends Aa{constructor(l=new ft,t=new ft){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=l,this.v2=t}getPoint(l,t=new ft){const e=t;return 1===l?e.copy(this.v2):(e.copy(this.v2).sub(this.v1),e.multiplyScalar(l).add(this.v1)),e}getPointAt(l,t){return this.getPoint(l,t)}getTangent(l,t=new ft){return t.subVectors(this.v2,this.v1).normalize()}getTangentAt(l,t){return this.getTangent(l,t)}copy(l){return super.copy(l),this.v1.copy(l.v1),this.v2.copy(l.v2),this}toJSON(){const l=super.toJSON();return l.v1=this.v1.toArray(),l.v2=this.v2.toArray(),l}fromJSON(l){return super.fromJSON(l),this.v1.fromArray(l.v1),this.v2.fromArray(l.v2),this}},QuadraticBezierCurve:Ba,QuadraticBezierCurve3:class extends Aa{constructor(l=new ft,t=new ft,e=new ft){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=l,this.v1=t,this.v2=e}getPoint(l,t=new ft){const e=t,n=this.v0,i=this.v1,r=this.v2;return e.set(Da(l,n.x,i.x,r.x),Da(l,n.y,i.y,r.y),Da(l,n.z,i.z,r.z)),e}copy(l){return super.copy(l),this.v0.copy(l.v0),this.v1.copy(l.v1),this.v2.copy(l.v2),this}toJSON(){const l=super.toJSON();return l.v0=this.v0.toArray(),l.v1=this.v1.toArray(),l.v2=this.v2.toArray(),l}fromJSON(l){return super.fromJSON(l),this.v0.fromArray(l.v0),this.v1.fromArray(l.v1),this.v2.fromArray(l.v2),this}},SplineCurve:Va});class ka extends Aa{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(l){this.curves.push(l)}closePath(){const l=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);if(!l.equals(t)){const e=!0===l.isVector2?"LineCurve":"LineCurve3";this.curves.push(new Ha[e](t,l))}return this}getPoint(l,t){const e=l*this.getLength(),n=this.getCurveLengths();let i=0;for(;i<n.length;){if(n[i]>=e){const l=n[i]-e,r=this.curves[i],a=r.getLength(),q=0===a?0:1-l/a;return r.getPointAt(q,t)}i++}return null}getLength(){const l=this.getCurveLengths();return l[l.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const l=[];let t=0;for(let e=0,n=this.curves.length;e<n;e++)t+=this.curves[e].getLength(),l.push(t);return this.cacheLengths=l,l}getSpacedPoints(l=40){const t=[];for(let e=0;e<=l;e++)t.push(this.getPoint(e/l));return this.autoClose&&t.push(t[0]),t}getPoints(l=12){const t=[];let e;for(let n=0,i=this.curves;n<i.length;n++){const r=i[n],a=r.isEllipseCurve?2*l:r.isLineCurve||r.isLineCurve3?1:r.isSplineCurve?l*r.points.length:l,q=r.getPoints(a);for(let l=0;l<q.length;l++){const n=q[l];e&&e.equals(n)||(t.push(n),e=n)}}return this.autoClose&&t.length>1&&!t[t.length-1].equals(t[0])&&t.push(t[0]),t}copy(l){super.copy(l),this.curves=[];for(let t=0,e=l.curves.length;t<e;t++){const e=l.curves[t];this.curves.push(e.clone())}return this.autoClose=l.autoClose,this}toJSON(){const l=super.toJSON();l.autoClose=this.autoClose,l.curves=[];for(let t=0,e=this.curves.length;t<e;t++){const e=this.curves[t];l.curves.push(e.toJSON())}return l}fromJSON(l){super.fromJSON(l),this.autoClose=l.autoClose,this.curves=[];for(let t=0,e=l.curves.length;t<e;t++){const e=l.curves[t];this.curves.push((new Ha[e.type]).fromJSON(e))}return this}}class Ga extends ka{constructor(l){super(),this.type="Path",this.currentPoint=new kl,l&&this.setFromPoints(l)}setFromPoints(l){this.moveTo(l[0].x,l[0].y);for(let t=1,e=l.length;t<e;t++)this.lineTo(l[t].x,l[t].y);return this}moveTo(l,t){return this.currentPoint.set(l,t),this}lineTo(l,t){const e=new za(this.currentPoint.clone(),new kl(l,t));return this.curves.push(e),this.currentPoint.set(l,t),this}quadraticCurveTo(l,t,e,n){const i=new Ba(this.currentPoint.clone(),new kl(l,t),new kl(e,n));return this.curves.push(i),this.currentPoint.set(e,n),this}bezierCurveTo(l,t,e,n,i,r){const a=new Fa(this.currentPoint.clone(),new kl(l,t),new kl(e,n),new kl(i,r));return this.curves.push(a),this.currentPoint.set(i,r),this}splineThru(l){const t=[this.currentPoint.clone()].concat(l),e=new Va(t);return this.curves.push(e),this.currentPoint.copy(l[l.length-1]),this}arc(l,t,e,n,i,r){const a=this.currentPoint.x,q=this.currentPoint.y;return this.absarc(l+a,t+q,e,n,i,r),this}absarc(l,t,e,n,i,r){return this.absellipse(l,t,e,e,n,i,r),this}ellipse(l,t,e,n,i,r,a,q){const s=this.currentPoint.x,o=this.currentPoint.y;return this.absellipse(l+s,t+o,e,n,i,r,a,q),this}absellipse(l,t,e,n,i,r,a,q){const s=new Ra(l,t,e,n,i,r,a,q);if(this.curves.length>0){const l=s.getPoint(0);l.equals(this.currentPoint)||this.lineTo(l.x,l.y)}this.curves.push(s);const o=s.getPoint(1);return this.currentPoint.copy(o),this}copy(l){return super.copy(l),this.currentPoint.copy(l.currentPoint),this}toJSON(){const l=super.toJSON();return l.currentPoint=this.currentPoint.toArray(),l}fromJSON(l){return super.fromJSON(l),this.currentPoint.fromArray(l.currentPoint),this}}class Wa extends Ga{constructor(l){super(l),this.uuid=Dl(),this.type="Shape",this.holes=[]}getPointsHoles(l){const t=[];for(let e=0,n=this.holes.length;e<n;e++)t[e]=this.holes[e].getPoints(l);return t}extractPoints(l){return{shape:this.getPoints(l),holes:this.getPointsHoles(l)}}copy(l){super.copy(l),this.holes=[];for(let t=0,e=l.holes.length;t<e;t++){const e=l.holes[t];this.holes.push(e.clone())}return this}toJSON(){const l=super.toJSON();l.uuid=this.uuid,l.holes=[];for(let t=0,e=this.holes.length;t<e;t++){const e=this.holes[t];l.holes.push(e.toJSON())}return l}fromJSON(l){super.fromJSON(l),this.uuid=l.uuid,this.holes=[];for(let t=0,e=l.holes.length;t<e;t++){const e=l.holes[t];this.holes.push((new Ga).fromJSON(e))}return this}}function Xa(l,t,e,n,i){let r,a;if(i===function(l,t,e,n){let i=0;for(let r=t,a=e-n;r<e;r+=n)i+=(l[a]-l[r])*(l[r+1]+l[a+1]),a=r;return i}(l,t,e,n)>0)for(r=t;r<e;r+=n)a=uq(r,l[r],l[r+1],a);else for(r=e-n;r>=t;r-=n)a=uq(r,l[r],l[r+1],a);return a&&qq(a,a.next)&&(dq(a),a=a.next),a}function ja(l,t){if(!l)return l;t||(t=l);let e,n=l;do{if(e=!1,n.steiner||!qq(n,n.next)&&0!==aq(n.prev,n,n.next))n=n.next;else{if(dq(n),n=t=n.prev,n===n.next)break;e=!0}}while(e||n!==t);return t}function Ya(l,t,e,n,i,r,a){if(!l)return;!a&&r&&function(l,t,e,n){let i=l;do{0===i.z&&(i.z=eq(i.x,i.y,t,e,n)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next}while(i!==l);i.prevZ.nextZ=null,i.prevZ=null,function(l){let t,e,n,i,r,a,q,s,o=1;do{for(e=l,l=null,r=null,a=0;e;){for(a++,n=e,q=0,t=0;t<o&&(q++,n=n.nextZ,n);t++);for(s=o;q>0||s>0&&n;)0!==q&&(0===s||!n||e.z<=n.z)?(i=e,e=e.nextZ,q--):(i=n,n=n.nextZ,s--),r?r.nextZ=i:l=i,i.prevZ=r,r=i;e=n}r.nextZ=null,o*=2}while(a>1)}(i)}(l,n,i,r);let q,s,o=l;for(;l.prev!==l.next;)if(q=l.prev,s=l.next,r?Za(l,n,i,r):Ja(l))t.push(q.i/e|0),t.push(l.i/e|0),t.push(s.i/e|0),dq(l),l=s.next,o=s.next;else if((l=s)===o){a?1===a?Ya(l=Ka(ja(l),t,e),t,e,n,i,r,2):2===a&&$a(l,t,e,n,i,r):Ya(ja(l),t,e,n,i,r,1);break}}function Ja(l){const t=l.prev,e=l,n=l.next;if(aq(t,e,n)>=0)return!1;const i=t.x,r=e.x,a=n.x,q=t.y,s=e.y,o=n.y,c=i<r?i<a?i:a:r<a?r:a,m=q<s?q<o?q:o:s<o?s:o,h=i>r?i>a?i:a:r>a?r:a,u=q>s?q>o?q:o:s>o?s:o;let d=n.next;for(;d!==t;){if(d.x>=c&&d.x<=h&&d.y>=m&&d.y<=u&&iq(i,q,r,s,a,o,d.x,d.y)&&aq(d.prev,d,d.next)>=0)return!1;d=d.next}return!0}function Za(l,t,e,n){const i=l.prev,r=l,a=l.next;if(aq(i,r,a)>=0)return!1;const q=i.x,s=r.x,o=a.x,c=i.y,m=r.y,h=a.y,u=q<s?q<o?q:o:s<o?s:o,d=c<m?c<h?c:h:m<h?m:h,p=q>s?q>o?q:o:s>o?s:o,f=c>m?c>h?c:h:m>h?m:h,g=eq(u,d,t,e,n),_=eq(p,f,t,e,n);let v=l.prevZ,x=l.nextZ;for(;v&&v.z>=g&&x&&x.z<=_;){if(v.x>=u&&v.x<=p&&v.y>=d&&v.y<=f&&v!==i&&v!==a&&iq(q,c,s,m,o,h,v.x,v.y)&&aq(v.prev,v,v.next)>=0)return!1;if(v=v.prevZ,x.x>=u&&x.x<=p&&x.y>=d&&x.y<=f&&x!==i&&x!==a&&iq(q,c,s,m,o,h,x.x,x.y)&&aq(x.prev,x,x.next)>=0)return!1;x=x.nextZ}for(;v&&v.z>=g;){if(v.x>=u&&v.x<=p&&v.y>=d&&v.y<=f&&v!==i&&v!==a&&iq(q,c,s,m,o,h,v.x,v.y)&&aq(v.prev,v,v.next)>=0)return!1;v=v.prevZ}for(;x&&x.z<=_;){if(x.x>=u&&x.x<=p&&x.y>=d&&x.y<=f&&x!==i&&x!==a&&iq(q,c,s,m,o,h,x.x,x.y)&&aq(x.prev,x,x.next)>=0)return!1;x=x.nextZ}return!0}function Ka(l,t,e){let n=l;do{const i=n.prev,r=n.next.next;!qq(i,r)&&sq(i,n,n.next,r)&&mq(i,r)&&mq(r,i)&&(t.push(i.i/e|0),t.push(n.i/e|0),t.push(r.i/e|0),dq(n),dq(n.next),n=l=r),n=n.next}while(n!==l);return ja(n)}function $a(l,t,e,n,i,r){let a=l;do{let l=a.next.next;for(;l!==a.prev;){if(a.i!==l.i&&rq(a,l)){let q=hq(a,l);return a=ja(a,a.next),q=ja(q,q.next),Ya(a,t,e,n,i,r,0),void Ya(q,t,e,n,i,r,0)}l=l.next}a=a.next}while(a!==l)}function Qa(l,t){return l.x-t.x}function lq(l,t){const e=function(l,t){let e,n=t,i=-1/0;const r=l.x,a=l.y;do{if(a<=n.y&&a>=n.next.y&&n.next.y!==n.y){const l=n.x+(a-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(l<=r&&l>i&&(i=l,e=n.x<n.next.x?n:n.next,l===r))return e}n=n.next}while(n!==t);if(!e)return null;const q=e,s=e.x,o=e.y;let c,m=1/0;n=e;do{r>=n.x&&n.x>=s&&r!==n.x&&iq(a<o?r:i,a,s,o,a<o?i:r,a,n.x,n.y)&&(c=Math.abs(a-n.y)/(r-n.x),mq(n,l)&&(c<m||c===m&&(n.x>e.x||n.x===e.x&&tq(e,n)))&&(e=n,m=c)),n=n.next}while(n!==q);return e}(l,t);if(!e)return t;const n=hq(e,l);return ja(n,n.next),ja(e,e.next)}function tq(l,t){return aq(l.prev,l,t.prev)<0&&aq(t.next,l,l.next)<0}function eq(l,t,e,n,i){return(l=1431655765&((l=858993459&((l=252645135&((l=16711935&((l=(l-e)*i|0)|l<<8))|l<<4))|l<<2))|l<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=(t-n)*i|0)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function nq(l){let t=l,e=l;do{(t.x<e.x||t.x===e.x&&t.y<e.y)&&(e=t),t=t.next}while(t!==l);return e}function iq(l,t,e,n,i,r,a,q){return(i-a)*(t-q)>=(l-a)*(r-q)&&(l-a)*(n-q)>=(e-a)*(t-q)&&(e-a)*(r-q)>=(i-a)*(n-q)}function rq(l,t){return l.next.i!==t.i&&l.prev.i!==t.i&&!function(l,t){let e=l;do{if(e.i!==l.i&&e.next.i!==l.i&&e.i!==t.i&&e.next.i!==t.i&&sq(e,e.next,l,t))return!0;e=e.next}while(e!==l);return!1}(l,t)&&(mq(l,t)&&mq(t,l)&&function(l,t){let e=l,n=!1;const i=(l.x+t.x)/2,r=(l.y+t.y)/2;do{e.y>r!=e.next.y>r&&e.next.y!==e.y&&i<(e.next.x-e.x)*(r-e.y)/(e.next.y-e.y)+e.x&&(n=!n),e=e.next}while(e!==l);return n}(l,t)&&(aq(l.prev,l,t.prev)||aq(l,t.prev,t))||qq(l,t)&&aq(l.prev,l,l.next)>0&&aq(t.prev,t,t.next)>0)}function aq(l,t,e){return(t.y-l.y)*(e.x-t.x)-(t.x-l.x)*(e.y-t.y)}function qq(l,t){return l.x===t.x&&l.y===t.y}function sq(l,t,e,n){const i=cq(aq(l,t,e)),r=cq(aq(l,t,n)),a=cq(aq(e,n,l)),q=cq(aq(e,n,t));return i!==r&&a!==q||!(0!==i||!oq(l,e,t))||!(0!==r||!oq(l,n,t))||!(0!==a||!oq(e,l,n))||!(0!==q||!oq(e,t,n))}function oq(l,t,e){return t.x<=Math.max(l.x,e.x)&&t.x>=Math.min(l.x,e.x)&&t.y<=Math.max(l.y,e.y)&&t.y>=Math.min(l.y,e.y)}function cq(l){return l>0?1:l<0?-1:0}function mq(l,t){return aq(l.prev,l,l.next)<0?aq(l,t,l.next)>=0&&aq(l,l.prev,t)>=0:aq(l,t,l.prev)<0||aq(l,l.next,t)<0}function hq(l,t){const e=new pq(l.i,l.x,l.y),n=new pq(t.i,t.x,t.y),i=l.next,r=t.prev;return l.next=t,t.prev=l,e.next=i,i.prev=e,n.next=e,e.prev=n,r.next=n,n.prev=r,n}function uq(l,t,e,n){const i=new pq(l,t,e);return n?(i.next=n.next,i.prev=n,n.next.prev=i,n.next=i):(i.prev=i,i.next=i),i}function dq(l){l.next.prev=l.prev,l.prev.next=l.next,l.prevZ&&(l.prevZ.nextZ=l.nextZ),l.nextZ&&(l.nextZ.prevZ=l.prevZ)}function pq(l,t,e){this.i=l,this.x=t,this.y=e,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}class fq{static area(l){const t=l.length;let e=0;for(let n=t-1,i=0;i<t;n=i++)e+=l[n].x*l[i].y-l[i].x*l[n].y;return.5*e}static isClockWise(l){return fq.area(l)<0}static triangulateShape(l,t){const e=[],n=[],i=[];gq(l),_q(e,l);let r=l.length;t.forEach(gq);for(let l=0;l<t.length;l++)n.push(r),r+=t[l].length,_q(e,t[l]);const a=function(l,t,e=2){const n=t&&t.length,i=n?t[0]*e:l.length;let r=Xa(l,0,i,e,!0);const a=[];if(!r||r.next===r.prev)return a;let q,s,o,c,m,h,u;if(n&&(r=function(l,t,e,n){const i=[];let r,a,q,s,o;for(r=0,a=t.length;r<a;r++)q=t[r]*n,s=r<a-1?t[r+1]*n:l.length,o=Xa(l,q,s,n,!1),o===o.next&&(o.steiner=!0),i.push(nq(o));for(i.sort(Qa),r=0;r<i.length;r++)e=lq(i[r],e);return e}(l,t,r,e)),l.length>80*e){q=o=l[0],s=c=l[1];for(let t=e;t<i;t+=e)m=l[t],h=l[t+1],m<q&&(q=m),h<s&&(s=h),m>o&&(o=m),h>c&&(c=h);u=Math.max(o-q,c-s),u=0!==u?32767/u:0}return Ya(r,a,e,q,s,u,0),a}(e,n);for(let l=0;l<a.length;l+=3)i.push(a.slice(l,l+3));return i}}function gq(l){const t=l.length;t>2&&l[t-1].equals(l[0])&&l.pop()}function _q(l,t){for(let e=0;e<t.length;e++)l.push(t[e].x),l.push(t[e].y)}class vq extends Qe{constructor(l=new Wa([new kl(.5,.5),new kl(-.5,.5),new kl(-.5,-.5),new kl(.5,-.5)]),t={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:l,options:t},l=Array.isArray(l)?l:[l];const e=this,n=[],i=[];for(let t=0,e=l.length;t<e;t++)r(l[t]);function r(l){const r=[],a=void 0!==t.curveSegments?t.curveSegments:12,q=void 0!==t.steps?t.steps:1,s=void 0!==t.depth?t.depth:1;let o=void 0===t.bevelEnabled||t.bevelEnabled,c=void 0!==t.bevelThickness?t.bevelThickness:.2,m=void 0!==t.bevelSize?t.bevelSize:c-.1,h=void 0!==t.bevelOffset?t.bevelOffset:0,u=void 0!==t.bevelSegments?t.bevelSegments:3;const d=t.extrudePath,p=void 0!==t.UVGenerator?t.UVGenerator:xq;let f,g,_,v,x,y=!1;d&&(f=d.getSpacedPoints(q),y=!0,o=!1,g=d.computeFrenetFrames(q,!1),_=new ft,v=new ft,x=new ft),o||(u=0,c=0,m=0,h=0);const M=l.extractPoints(a);let S=M.shape;const E=M.holes;if(!fq.isClockWise(S)){S=S.reverse();for(let l=0,t=E.length;l<t;l++){const t=E[l];fq.isClockWise(t)&&(E[l]=t.reverse())}}const T=fq.triangulateShape(S,E),b=S;for(let l=0,t=E.length;l<t;l++){const t=E[l];S=S.concat(t)}function w(l,t,e){return t||console.error("THREE.ExtrudeGeometry: vec does not exist"),l.clone().addScaledVector(t,e)}const A=S.length,R=T.length;function C(l,t,e){let n,i,r;const a=l.x-t.x,q=l.y-t.y,s=e.x-l.x,o=e.y-l.y,c=a*a+q*q,m=a*o-q*s;if(Math.abs(m)>Number.EPSILON){const m=Math.sqrt(c),h=Math.sqrt(s*s+o*o),u=t.x-q/m,d=t.y+a/m,p=((e.x-o/h-u)*o-(e.y+s/h-d)*s)/(a*o-q*s);n=u+a*p-l.x,i=d+q*p-l.y;const f=n*n+i*i;if(f<=2)return new kl(n,i);r=Math.sqrt(f/2)}else{let l=!1;a>Number.EPSILON?s>Number.EPSILON&&(l=!0):a<-Number.EPSILON?s<-Number.EPSILON&&(l=!0):Math.sign(q)===Math.sign(o)&&(l=!0),l?(n=-q,i=a,r=Math.sqrt(c)):(n=a,i=q,r=Math.sqrt(c/2))}return new kl(n/r,i/r)}const P=[];for(let l=0,t=b.length,e=t-1,n=l+1;l<t;l++,e++,n++)e===t&&(e=0),n===t&&(n=0),P[l]=C(b[l],b[e],b[n]);const L=[];let U,N=P.concat();for(let l=0,t=E.length;l<t;l++){const t=E[l];U=[];for(let l=0,e=t.length,n=e-1,i=l+1;l<e;l++,n++,i++)n===e&&(n=0),i===e&&(i=0),U[l]=C(t[l],t[n],t[i]);L.push(U),N=N.concat(U)}for(let l=0;l<u;l++){const t=l/u,e=c*Math.cos(t*Math.PI/2),n=m*Math.sin(t*Math.PI/2)+h;for(let l=0,t=b.length;l<t;l++){const t=w(b[l],P[l],n);O(t.x,t.y,-e)}for(let l=0,t=E.length;l<t;l++){const t=E[l];U=L[l];for(let l=0,i=t.length;l<i;l++){const i=w(t[l],U[l],n);O(i.x,i.y,-e)}}}const I=m+h;for(let l=0;l<A;l++){const t=o?w(S[l],N[l],I):S[l];y?(v.copy(g.normals[0]).multiplyScalar(t.x),_.copy(g.binormals[0]).multiplyScalar(t.y),x.copy(f[0]).add(v).add(_),O(x.x,x.y,x.z)):O(t.x,t.y,0)}for(let l=1;l<=q;l++)for(let t=0;t<A;t++){const e=o?w(S[t],N[t],I):S[t];y?(v.copy(g.normals[l]).multiplyScalar(e.x),_.copy(g.binormals[l]).multiplyScalar(e.y),x.copy(f[l]).add(v).add(_),O(x.x,x.y,x.z)):O(e.x,e.y,s/q*l)}for(let l=u-1;l>=0;l--){const t=l/u,e=c*Math.cos(t*Math.PI/2),n=m*Math.sin(t*Math.PI/2)+h;for(let l=0,t=b.length;l<t;l++){const t=w(b[l],P[l],n);O(t.x,t.y,s+e)}for(let l=0,t=E.length;l<t;l++){const t=E[l];U=L[l];for(let l=0,i=t.length;l<i;l++){const i=w(t[l],U[l],n);y?O(i.x,i.y+f[q-1].y,f[q-1].x+e):O(i.x,i.y,s+e)}}}function D(l,t){let e=l.length;for(;--e>=0;){const n=e;let i=e-1;i<0&&(i=l.length-1);for(let l=0,e=q+2*u;l<e;l++){const e=A*l,r=A*(l+1);z(t+n+e,t+i+e,t+i+r,t+n+r)}}}function O(l,t,e){r.push(l),r.push(t),r.push(e)}function F(l,t,i){B(l),B(t),B(i);const r=n.length/3,a=p.generateTopUV(e,n,r-3,r-2,r-1);V(a[0]),V(a[1]),V(a[2])}function z(l,t,i,r){B(l),B(t),B(r),B(t),B(i),B(r);const a=n.length/3,q=p.generateSideWallUV(e,n,a-6,a-3,a-2,a-1);V(q[0]),V(q[1]),V(q[3]),V(q[1]),V(q[2]),V(q[3])}function B(l){n.push(r[3*l+0]),n.push(r[3*l+1]),n.push(r[3*l+2])}function V(l){i.push(l.x),i.push(l.y)}!function(){const l=n.length/3;if(o){let l=0,t=A*l;for(let l=0;l<R;l++){const e=T[l];F(e[2]+t,e[1]+t,e[0]+t)}l=q+2*u,t=A*l;for(let l=0;l<R;l++){const e=T[l];F(e[0]+t,e[1]+t,e[2]+t)}}else{for(let l=0;l<R;l++){const t=T[l];F(t[2],t[1],t[0])}for(let l=0;l<R;l++){const t=T[l];F(t[0]+A*q,t[1]+A*q,t[2]+A*q)}}e.addGroup(l,n.length/3-l,0)}(),function(){const l=n.length/3;let t=0;D(b,t),t+=b.length;for(let l=0,e=E.length;l<e;l++){const e=E[l];D(e,t),t+=e.length}e.addGroup(l,n.length/3-l,1)}()}this.setAttribute("position",new We(n,3)),this.setAttribute("uv",new We(i,2)),this.computeVertexNormals()}copy(l){return super.copy(l),this.parameters=Object.assign({},l.parameters),this}toJSON(){const l=super.toJSON();return function(l,t,e){if(e.shapes=[],Array.isArray(l))for(let t=0,n=l.length;t<n;t++){const n=l[t];e.shapes.push(n.uuid)}else e.shapes.push(l.uuid);return e.options=Object.assign({},t),void 0!==t.extrudePath&&(e.options.extrudePath=t.extrudePath.toJSON()),e}(this.parameters.shapes,this.parameters.options,l)}static fromJSON(l,t){const e=[];for(let n=0,i=l.shapes.length;n<i;n++){const i=t[l.shapes[n]];e.push(i)}const n=l.options.extrudePath;return void 0!==n&&(l.options.extrudePath=(new Ha[n.type]).fromJSON(n)),new vq(e,l.options)}}const xq={generateTopUV:function(l,t,e,n,i){const r=t[3*e],a=t[3*e+1],q=t[3*n],s=t[3*n+1],o=t[3*i],c=t[3*i+1];return[new kl(r,a),new kl(q,s),new kl(o,c)]},generateSideWallUV:function(l,t,e,n,i,r){const a=t[3*e],q=t[3*e+1],s=t[3*e+2],o=t[3*n],c=t[3*n+1],m=t[3*n+2],h=t[3*i],u=t[3*i+1],d=t[3*i+2],p=t[3*r],f=t[3*r+1],g=t[3*r+2];return Math.abs(q-c)<Math.abs(a-o)?[new kl(a,1-s),new kl(o,1-m),new kl(h,1-d),new kl(p,1-g)]:[new kl(q,1-s),new kl(c,1-m),new kl(u,1-d),new kl(f,1-g)]}};class yq extends Qe{constructor(l=1,t=32,e=16,n=0,i=2*Math.PI,r=0,a=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:l,widthSegments:t,heightSegments:e,phiStart:n,phiLength:i,thetaStart:r,thetaLength:a},t=Math.max(3,Math.floor(t)),e=Math.max(2,Math.floor(e));const q=Math.min(r+a,Math.PI);let s=0;const o=[],c=new ft,m=new ft,h=[],u=[],d=[],p=[];for(let h=0;h<=e;h++){const f=[],g=h/e;let _=0;0===h&&0===r?_=.5/t:h===e&&q===Math.PI&&(_=-.5/t);for(let e=0;e<=t;e++){const q=e/t;c.x=-l*Math.cos(n+q*i)*Math.sin(r+g*a),c.y=l*Math.cos(r+g*a),c.z=l*Math.sin(n+q*i)*Math.sin(r+g*a),u.push(c.x,c.y,c.z),m.copy(c).normalize(),d.push(m.x,m.y,m.z),p.push(q+_,1-g),f.push(s++)}o.push(f)}for(let l=0;l<e;l++)for(let n=0;n<t;n++){const t=o[l][n+1],i=o[l][n],a=o[l+1][n],s=o[l+1][n+1];(0!==l||r>0)&&h.push(t,i,s),(l!==e-1||q<Math.PI)&&h.push(i,a,s)}this.setIndex(h),this.setAttribute("position",new We(u,3)),this.setAttribute("normal",new We(d,3)),this.setAttribute("uv",new We(p,2))}copy(l){return super.copy(l),this.parameters=Object.assign({},l.parameters),this}static fromJSON(l){return new yq(l.radius,l.widthSegments,l.heightSegments,l.phiStart,l.phiLength,l.thetaStart,l.thetaLength)}}class Mq extends Qe{constructor(l=1,t=.4,e=12,n=48,i=2*Math.PI){super(),this.type="TorusGeometry",this.parameters={radius:l,tube:t,radialSegments:e,tubularSegments:n,arc:i},e=Math.floor(e),n=Math.floor(n);const r=[],a=[],q=[],s=[],o=new ft,c=new ft,m=new ft;for(let r=0;r<=e;r++)for(let h=0;h<=n;h++){const u=h/n*i,d=r/e*Math.PI*2;c.x=(l+t*Math.cos(d))*Math.cos(u),c.y=(l+t*Math.cos(d))*Math.sin(u),c.z=t*Math.sin(d),a.push(c.x,c.y,c.z),o.x=l*Math.cos(u),o.y=l*Math.sin(u),m.subVectors(c,o).normalize(),q.push(m.x,m.y,m.z),s.push(h/n),s.push(r/e)}for(let l=1;l<=e;l++)for(let t=1;t<=n;t++){const e=(n+1)*l+t-1,i=(n+1)*(l-1)+t-1,a=(n+1)*(l-1)+t,q=(n+1)*l+t;r.push(e,i,q),r.push(i,a,q)}this.setIndex(r),this.setAttribute("position",new We(a,3)),this.setAttribute("normal",new We(q,3)),this.setAttribute("uv",new We(s,2))}copy(l){return super.copy(l),this.parameters=Object.assign({},l.parameters),this}static fromJSON(l){return new Mq(l.radius,l.tube,l.radialSegments,l.tubularSegments,l.arc)}}class Sq extends Fe{constructor(l){super(),this.isMeshStandardMaterial=!0,this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new Ie(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ie(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new kl(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new ee,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(l)}copy(l){return super.copy(l),this.defines={STANDARD:""},this.color.copy(l.color),this.roughness=l.roughness,this.metalness=l.metalness,this.map=l.map,this.lightMap=l.lightMap,this.lightMapIntensity=l.lightMapIntensity,this.aoMap=l.aoMap,this.aoMapIntensity=l.aoMapIntensity,this.emissive.copy(l.emissive),this.emissiveMap=l.emissiveMap,this.emissiveIntensity=l.emissiveIntensity,this.bumpMap=l.bumpMap,this.bumpScale=l.bumpScale,this.normalMap=l.normalMap,this.normalMapType=l.normalMapType,this.normalScale.copy(l.normalScale),this.displacementMap=l.displacementMap,this.displacementScale=l.displacementScale,this.displacementBias=l.displacementBias,this.roughnessMap=l.roughnessMap,this.metalnessMap=l.metalnessMap,this.alphaMap=l.alphaMap,this.envMap=l.envMap,this.envMapRotation.copy(l.envMapRotation),this.envMapIntensity=l.envMapIntensity,this.wireframe=l.wireframe,this.wireframeLinewidth=l.wireframeLinewidth,this.wireframeLinecap=l.wireframeLinecap,this.wireframeLinejoin=l.wireframeLinejoin,this.flatShading=l.flatShading,this.fog=l.fog,this}}function Eq(l,t,e){return!l||!e&&l.constructor===t?l:"number"==typeof t.BYTES_PER_ELEMENT?new t(l):Array.prototype.slice.call(l)}class Tq{constructor(l,t,e,n){this.parameterPositions=l,this._cachedIndex=0,this.resultBuffer=void 0!==n?n:new t.constructor(e),this.sampleValues=t,this.valueSize=e,this.settings=null,this.DefaultSettings_={}}evaluate(l){const t=this.parameterPositions;let e=this._cachedIndex,n=t[e],i=t[e-1];l:{t:{let r;e:{n:if(!(l<n)){for(let r=e+2;;){if(void 0===n){if(l<i)break n;return e=t.length,this._cachedIndex=e,this.copySampleValue_(e-1)}if(e===r)break;if(i=n,n=t[++e],l<n)break t}r=t.length;break e}if(l>=i)break l;{const a=t[1];l<a&&(e=2,i=a);for(let r=e-2;;){if(void 0===i)return this._cachedIndex=0,this.copySampleValue_(0);if(e===r)break;if(n=i,i=t[--e-1],l>=i)break t}r=e,e=0}}for(;e<r;){const n=e+r>>>1;l<t[n]?r=n:e=n+1}if(n=t[e],i=t[e-1],void 0===i)return this._cachedIndex=0,this.copySampleValue_(0);if(void 0===n)return e=t.length,this._cachedIndex=e,this.copySampleValue_(e-1)}this._cachedIndex=e,this.intervalChanged_(e,i,n)}return this.interpolate_(e,i,l,n)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(l){const t=this.resultBuffer,e=this.sampleValues,n=this.valueSize,i=l*n;for(let l=0;l!==n;++l)t[l]=e[i+l];return t}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class bq extends Tq{constructor(l,t,e,n){super(l,t,e,n),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:2400,endingEnd:2400}}intervalChanged_(l,t,e){const n=this.parameterPositions;let i=l-2,r=l+1,a=n[i],q=n[r];if(void 0===a)switch(this.getSettings_().endingStart){case 2401:i=l,a=2*t-e;break;case 2402:i=n.length-2,a=t+n[i]-n[i+1];break;default:i=l,a=e}if(void 0===q)switch(this.getSettings_().endingEnd){case 2401:r=l,q=2*e-t;break;case 2402:r=1,q=e+n[1]-n[0];break;default:r=l-1,q=t}const s=.5*(e-t),o=this.valueSize;this._weightPrev=s/(t-a),this._weightNext=s/(q-e),this._offsetPrev=i*o,this._offsetNext=r*o}interpolate_(l,t,e,n){const i=this.resultBuffer,r=this.sampleValues,a=this.valueSize,q=l*a,s=q-a,o=this._offsetPrev,c=this._offsetNext,m=this._weightPrev,h=this._weightNext,u=(e-t)/(n-t),d=u*u,p=d*u,f=-m*p+2*m*d-m*u,g=(1+m)*p+(-1.5-2*m)*d+(-.5+m)*u+1,_=(-1-h)*p+(1.5+h)*d+.5*u,v=h*p-h*d;for(let l=0;l!==a;++l)i[l]=f*r[o+l]+g*r[s+l]+_*r[q+l]+v*r[c+l];return i}}class wq extends Tq{constructor(l,t,e,n){super(l,t,e,n)}interpolate_(l,t,e,n){const i=this.resultBuffer,r=this.sampleValues,a=this.valueSize,q=l*a,s=q-a,o=(e-t)/(n-t),c=1-o;for(let l=0;l!==a;++l)i[l]=r[s+l]*c+r[q+l]*o;return i}}class Aq extends Tq{constructor(l,t,e,n){super(l,t,e,n)}interpolate_(l){return this.copySampleValue_(l-1)}}class Rq{constructor(l,t,e,n){if(void 0===l)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===t||0===t.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+l);this.name=l,this.times=Eq(t,this.TimeBufferType),this.values=Eq(e,this.ValueBufferType),this.setInterpolation(n||this.DefaultInterpolation)}static toJSON(l){const t=l.constructor;let e;if(t.toJSON!==this.toJSON)e=t.toJSON(l);else{e={name:l.name,times:Eq(l.times,Array),values:Eq(l.values,Array)};const t=l.getInterpolation();t!==l.DefaultInterpolation&&(e.interpolation=t)}return e.type=l.ValueTypeName,e}InterpolantFactoryMethodDiscrete(l){return new Aq(this.times,this.values,this.getValueSize(),l)}InterpolantFactoryMethodLinear(l){return new wq(this.times,this.values,this.getValueSize(),l)}InterpolantFactoryMethodSmooth(l){return new bq(this.times,this.values,this.getValueSize(),l)}setInterpolation(l){let t;switch(l){case sl:t=this.InterpolantFactoryMethodDiscrete;break;case ol:t=this.InterpolantFactoryMethodLinear;break;case cl:t=this.InterpolantFactoryMethodSmooth}if(void 0===t){const t="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(l===this.DefaultInterpolation)throw new Error(t);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",t),this}return this.createInterpolant=t,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return sl;case this.InterpolantFactoryMethodLinear:return ol;case this.InterpolantFactoryMethodSmooth:return cl}}getValueSize(){return this.values.length/this.times.length}shift(l){if(0!==l){const t=this.times;for(let e=0,n=t.length;e!==n;++e)t[e]+=l}return this}scale(l){if(1!==l){const t=this.times;for(let e=0,n=t.length;e!==n;++e)t[e]*=l}return this}trim(l,t){const e=this.times,n=e.length;let i=0,r=n-1;for(;i!==n&&e[i]<l;)++i;for(;-1!==r&&e[r]>t;)--r;if(++r,0!==i||r!==n){i>=r&&(r=Math.max(r,1),i=r-1);const l=this.getValueSize();this.times=e.slice(i,r),this.values=this.values.slice(i*l,r*l)}return this}validate(){let l=!0;const t=this.getValueSize();t-Math.floor(t)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),l=!1);const e=this.times,n=this.values,i=e.length;0===i&&(console.error("THREE.KeyframeTrack: Track is empty.",this),l=!1);let r=null;for(let t=0;t!==i;t++){const n=e[t];if("number"==typeof n&&isNaN(n)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,t,n),l=!1;break}if(null!==r&&r>n){console.error("THREE.KeyframeTrack: Out of order keys.",this,t,n,r),l=!1;break}r=n}if(void 0!==n&&(a=n,ArrayBuffer.isView(a)&&!(a instanceof DataView)))for(let t=0,e=n.length;t!==e;++t){const e=n[t];if(isNaN(e)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,t,e),l=!1;break}}var a;return l}optimize(){const l=this.times.slice(),t=this.values.slice(),e=this.getValueSize(),n=this.getInterpolation()===cl,i=l.length-1;let r=1;for(let a=1;a<i;++a){let i=!1;const q=l[a];if(q!==l[a+1]&&(1!==a||q!==l[0]))if(n)i=!0;else{const l=a*e,n=l-e,r=l+e;for(let a=0;a!==e;++a){const e=t[l+a];if(e!==t[n+a]||e!==t[r+a]){i=!0;break}}}if(i){if(a!==r){l[r]=l[a];const n=a*e,i=r*e;for(let l=0;l!==e;++l)t[i+l]=t[n+l]}++r}}if(i>0){l[r]=l[i];for(let l=i*e,n=r*e,a=0;a!==e;++a)t[n+a]=t[l+a];++r}return r!==l.length?(this.times=l.slice(0,r),this.values=t.slice(0,r*e)):(this.times=l,this.values=t),this}clone(){const l=this.times.slice(),t=this.values.slice(),e=new(0,this.constructor)(this.name,l,t);return e.createInterpolant=this.createInterpolant,e}}Rq.prototype.TimeBufferType=Float32Array,Rq.prototype.ValueBufferType=Float32Array,Rq.prototype.DefaultInterpolation=ol;class Cq extends Rq{}Cq.prototype.ValueTypeName="bool",Cq.prototype.ValueBufferType=Array,Cq.prototype.DefaultInterpolation=sl,Cq.prototype.InterpolantFactoryMethodLinear=void 0,Cq.prototype.InterpolantFactoryMethodSmooth=void 0;(class extends Rq{}).prototype.ValueTypeName="color";(class extends Rq{}).prototype.ValueTypeName="number";class Pq extends Tq{constructor(l,t,e,n){super(l,t,e,n)}interpolate_(l,t,e,n){const i=this.resultBuffer,r=this.sampleValues,a=this.valueSize,q=(e-t)/(n-t);let s=l*a;for(let l=s+a;s!==l;s+=4)pt.slerpFlat(i,0,r,s-a,r,s,q);return i}}class Lq extends Rq{InterpolantFactoryMethodLinear(l){return new Pq(this.times,this.values,this.getValueSize(),l)}}Lq.prototype.ValueTypeName="quaternion",Lq.prototype.DefaultInterpolation=ol,Lq.prototype.InterpolantFactoryMethodSmooth=void 0;class Uq extends Rq{}Uq.prototype.ValueTypeName="string",Uq.prototype.ValueBufferType=Array,Uq.prototype.DefaultInterpolation=sl,Uq.prototype.InterpolantFactoryMethodLinear=void 0,Uq.prototype.InterpolantFactoryMethodSmooth=void 0;(class extends Rq{}).prototype.ValueTypeName="vector";const Nq={enabled:!1,files:{},add:function(l,t){!1!==this.enabled&&(this.files[l]=t)},get:function(l){if(!1!==this.enabled)return this.files[l]},remove:function(l){delete this.files[l]},clear:function(){this.files={}}};class Iq{constructor(l,t,e){const n=this;let i,r=!1,a=0,q=0;const s=[];this.onStart=void 0,this.onLoad=l,this.onProgress=t,this.onError=e,this.itemStart=function(l){q++,!1===r&&void 0!==n.onStart&&n.onStart(l,a,q),r=!0},this.itemEnd=function(l){a++,void 0!==n.onProgress&&n.onProgress(l,a,q),a===q&&(r=!1,void 0!==n.onLoad&&n.onLoad())},this.itemError=function(l){void 0!==n.onError&&n.onError(l)},this.resolveURL=function(l){return i?i(l):l},this.setURLModifier=function(l){return i=l,this},this.addHandler=function(l,t){return s.push(l,t),this},this.removeHandler=function(l){const t=s.indexOf(l);return-1!==t&&s.splice(t,2),this},this.getHandler=function(l){for(let t=0,e=s.length;t<e;t+=2){const e=s[t],n=s[t+1];if(e.global&&(e.lastIndex=0),e.test(l))return n}return null}}}const Dq=new Iq;class Oq{constructor(l){this.manager=void 0!==l?l:Dq,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(l,t){const e=this;return new Promise((function(n,i){e.load(l,n,t,i)}))}parse(){}setCrossOrigin(l){return this.crossOrigin=l,this}setWithCredentials(l){return this.withCredentials=l,this}setPath(l){return this.path=l,this}setResourcePath(l){return this.resourcePath=l,this}setRequestHeader(l){return this.requestHeader=l,this}}Oq.DEFAULT_MATERIAL_NAME="__DEFAULT";const Fq={};class zq extends Error{constructor(l,t){super(l),this.response=t}}class Bq extends Oq{constructor(l){super(l)}load(l,t,e,n){void 0===l&&(l=""),void 0!==this.path&&(l=this.path+l),l=this.manager.resolveURL(l);const i=Nq.get(l);if(void 0!==i)return this.manager.itemStart(l),setTimeout((()=>{t&&t(i),this.manager.itemEnd(l)}),0),i;if(void 0!==Fq[l])return void Fq[l].push({onLoad:t,onProgress:e,onError:n});Fq[l]=[],Fq[l].push({onLoad:t,onProgress:e,onError:n});const r=new Request(l,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),a=this.mimeType,q=this.responseType;fetch(r).then((t=>{if(200===t.status||0===t.status){if(0===t.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),"undefined"==typeof ReadableStream||void 0===t.body||void 0===t.body.getReader)return t;const e=Fq[l],n=t.body.getReader(),i=t.headers.get("X-File-Size")||t.headers.get("Content-Length"),r=i?parseInt(i):0,a=0!==r;let q=0;const s=new ReadableStream({start(l){!function t(){n.read().then((({done:n,value:i})=>{if(n)l.close();else{q+=i.byteLength;const n=new ProgressEvent("progress",{lengthComputable:a,loaded:q,total:r});for(let l=0,t=e.length;l<t;l++){const t=e[l];t.onProgress&&t.onProgress(n)}l.enqueue(i),t()}}))}()}});return new Response(s)}throw new zq(`fetch for "${t.url}" responded with ${t.status}: ${t.statusText}`,t)})).then((l=>{switch(q){case"arraybuffer":return l.arrayBuffer();case"blob":return l.blob();case"document":return l.text().then((l=>(new DOMParser).parseFromString(l,a)));case"json":return l.json();default:if(void 0===a)return l.text();{const t=/charset="?([^;"\s]*)"?/i.exec(a),e=t&&t[1]?t[1].toLowerCase():void 0,n=new TextDecoder(e);return l.arrayBuffer().then((l=>n.decode(l)))}}})).then((t=>{Nq.add(l,t);const e=Fq[l];delete Fq[l];for(let l=0,n=e.length;l<n;l++){const n=e[l];n.onLoad&&n.onLoad(t)}})).catch((t=>{const e=Fq[l];if(void 0===e)throw this.manager.itemError(l),t;delete Fq[l];for(let l=0,n=e.length;l<n;l++){const n=e[l];n.onError&&n.onError(t)}this.manager.itemError(l)})).finally((()=>{this.manager.itemEnd(l)})),this.manager.itemStart(l)}setResponseType(l){return this.responseType=l,this}setMimeType(l){return this.mimeType=l,this}}class Vq extends Oq{constructor(l){super(l)}load(l,t,e,n){void 0!==this.path&&(l=this.path+l),l=this.manager.resolveURL(l);const i=this,r=Nq.get(l);if(void 0!==r)return i.manager.itemStart(l),setTimeout((function(){t&&t(r),i.manager.itemEnd(l)}),0),r;const a=jl("img");function q(){o(),Nq.add(l,this),t&&t(this),i.manager.itemEnd(l)}function s(t){o(),n&&n(t),i.manager.itemError(l),i.manager.itemEnd(l)}function o(){a.removeEventListener("load",q,!1),a.removeEventListener("error",s,!1)}return a.addEventListener("load",q,!1),a.addEventListener("error",s,!1),"data:"!==l.slice(0,5)&&void 0!==this.crossOrigin&&(a.crossOrigin=this.crossOrigin),i.manager.itemStart(l),a.src=l,a}}class Hq extends ve{constructor(l,t=1){super(),this.isLight=!0,this.type="Light",this.color=new Ie(l),this.intensity=t}dispose(){}copy(l,t){return super.copy(l,t),this.color.copy(l.color),this.intensity=l.intensity,this}toJSON(l){const t=super.toJSON(l);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,void 0!==this.groundColor&&(t.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(t.object.distance=this.distance),void 0!==this.angle&&(t.object.angle=this.angle),void 0!==this.decay&&(t.object.decay=this.decay),void 0!==this.penumbra&&(t.object.penumbra=this.penumbra),void 0!==this.shadow&&(t.object.shadow=this.shadow.toJSON()),t}}const kq=new Xt,Gq=new ft,Wq=new ft;class Xq{constructor(l){this.camera=l,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new kl(512,512),this.map=null,this.mapPass=null,this.matrix=new Xt,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Vn,this._frameExtents=new kl(1,1),this._viewportCount=1,this._viewports=[new ct(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(l){const t=this.camera,e=this.matrix;Gq.setFromMatrixPosition(l.matrixWorld),t.position.copy(Gq),Wq.setFromMatrixPosition(l.target.matrixWorld),t.lookAt(Wq),t.updateMatrixWorld(),kq.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(kq),e.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),e.multiply(kq)}getViewport(l){return this._viewports[l]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(l){return this.camera=l.camera.clone(),this.bias=l.bias,this.radius=l.radius,this.mapSize.copy(l.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const l={};return 0!==this.bias&&(l.bias=this.bias),0!==this.normalBias&&(l.normalBias=this.normalBias),1!==this.radius&&(l.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(l.mapSize=this.mapSize.toArray()),l.camera=this.camera.toJSON(!1).object,delete l.camera.matrix,l}}const jq=new Xt,Yq=new ft,Jq=new ft;class Zq extends Xq{constructor(){super(new Cn(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new kl(4,2),this._viewportCount=6,this._viewports=[new ct(2,1,1,1),new ct(0,1,1,1),new ct(3,1,1,1),new ct(1,1,1,1),new ct(3,0,1,1),new ct(1,0,1,1)],this._cubeDirections=[new ft(1,0,0),new ft(-1,0,0),new ft(0,0,1),new ft(0,0,-1),new ft(0,1,0),new ft(0,-1,0)],this._cubeUps=[new ft(0,1,0),new ft(0,1,0),new ft(0,1,0),new ft(0,1,0),new ft(0,0,1),new ft(0,0,-1)]}updateMatrices(l,t=0){const e=this.camera,n=this.matrix,i=l.distance||e.far;i!==e.far&&(e.far=i,e.updateProjectionMatrix()),Yq.setFromMatrixPosition(l.matrixWorld),e.position.copy(Yq),Jq.copy(e.position),Jq.add(this._cubeDirections[t]),e.up.copy(this._cubeUps[t]),e.lookAt(Jq),e.updateMatrixWorld(),n.makeTranslation(-Yq.x,-Yq.y,-Yq.z),jq.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(jq)}}function Kq(){return("undefined"==typeof performance?Date:performance).now()}const $q="\\[\\]\\.:\\/",Qq=new RegExp("["+$q+"]","g"),ls="[^"+$q+"]",ts="[^"+$q.replace("\\.","")+"]",es=new RegExp("^"+/((?:WC+[\/:])*)/.source.replace("WC",ls)+/(WCOD+)?/.source.replace("WCOD",ts)+/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",ls)+/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",ls)+"$"),ns=["material","materials","bones","map"];class is{constructor(l,t,e){this.path=t,this.parsedPath=e||is.parseTrackName(t),this.node=is.findNode(l,this.parsedPath.nodeName),this.rootNode=l,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(l,t,e){return l&&l.isAnimationObjectGroup?new is.Composite(l,t,e):new is(l,t,e)}static sanitizeNodeName(l){return l.replace(/\s/g,"_").replace(Qq,"")}static parseTrackName(l){const t=es.exec(l);if(null===t)throw new Error("PropertyBinding: Cannot parse trackName: "+l);const e={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},n=e.nodeName&&e.nodeName.lastIndexOf(".");if(void 0!==n&&-1!==n){const l=e.nodeName.substring(n+1);-1!==ns.indexOf(l)&&(e.nodeName=e.nodeName.substring(0,n),e.objectName=l)}if(null===e.propertyName||0===e.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+l);return e}static findNode(l,t){if(void 0===t||""===t||"."===t||-1===t||t===l.name||t===l.uuid)return l;if(l.skeleton){const e=l.skeleton.getBoneByName(t);if(void 0!==e)return e}if(l.children){const e=function(l){for(let n=0;n<l.length;n++){const i=l[n];if(i.name===t||i.uuid===t)return i;const r=e(i.children);if(r)return r}return null},n=e(l.children);if(n)return n}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(l,t){l[t]=this.targetObject[this.propertyName]}_getValue_array(l,t){const e=this.resolvedProperty;for(let n=0,i=e.length;n!==i;++n)l[t++]=e[n]}_getValue_arrayElement(l,t){l[t]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(l,t){this.resolvedProperty.toArray(l,t)}_setValue_direct(l,t){this.targetObject[this.propertyName]=l[t]}_setValue_direct_setNeedsUpdate(l,t){this.targetObject[this.propertyName]=l[t],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(l,t){this.targetObject[this.propertyName]=l[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(l,t){const e=this.resolvedProperty;for(let n=0,i=e.length;n!==i;++n)e[n]=l[t++]}_setValue_array_setNeedsUpdate(l,t){const e=this.resolvedProperty;for(let n=0,i=e.length;n!==i;++n)e[n]=l[t++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(l,t){const e=this.resolvedProperty;for(let n=0,i=e.length;n!==i;++n)e[n]=l[t++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(l,t){this.resolvedProperty[this.propertyIndex]=l[t]}_setValue_arrayElement_setNeedsUpdate(l,t){this.resolvedProperty[this.propertyIndex]=l[t],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(l,t){this.resolvedProperty[this.propertyIndex]=l[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(l,t){this.resolvedProperty.fromArray(l,t)}_setValue_fromArray_setNeedsUpdate(l,t){this.resolvedProperty.fromArray(l,t),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(l,t){this.resolvedProperty.fromArray(l,t),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(l,t){this.bind(),this.getValue(l,t)}_setValue_unbound(l,t){this.bind(),this.setValue(l,t)}bind(){let l=this.node;const t=this.parsedPath,e=t.objectName,n=t.propertyName;let i=t.propertyIndex;if(l||(l=is.findNode(this.rootNode,t.nodeName),this.node=l),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!l)return void console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");if(e){let n=t.objectIndex;switch(e){case"materials":if(!l.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!l.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);l=l.material.materials;break;case"bones":if(!l.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);l=l.skeleton.bones;for(let t=0;t<l.length;t++)if(l[t].name===n){n=t;break}break;case"map":if("map"in l){l=l.map;break}if(!l.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!l.material.map)return void console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);l=l.material.map;break;default:if(void 0===l[e])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);l=l[e]}if(void 0!==n){if(void 0===l[n])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,l);l=l[n]}}const r=l[n];if(void 0===r){const e=t.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+e+"."+n+" but it wasn't found.",l)}let a=this.Versioning.None;this.targetObject=l,void 0!==l.needsUpdate?a=this.Versioning.NeedsUpdate:void 0!==l.matrixWorldNeedsUpdate&&(a=this.Versioning.MatrixWorldNeedsUpdate);let q=this.BindingType.Direct;if(void 0!==i){if("morphTargetInfluences"===n){if(!l.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(!l.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);void 0!==l.morphTargetDictionary[i]&&(i=l.morphTargetDictionary[i])}q=this.BindingType.ArrayElement,this.resolvedProperty=r,this.propertyIndex=i}else void 0!==r.fromArray&&void 0!==r.toArray?(q=this.BindingType.HasFromToArray,this.resolvedProperty=r):Array.isArray(r)?(q=this.BindingType.EntireArray,this.resolvedProperty=r):this.propertyName=n;this.getValue=this.GetterByBindingType[q],this.setValue=this.SetterByBindingTypeAndVersioning[q][a]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}is.Composite=class{constructor(l,t,e){const n=e||is.parseTrackName(t);this._targetGroup=l,this._bindings=l.subscribe_(t,n)}getValue(l,t){this.bind();const e=this._targetGroup.nCachedObjects_,n=this._bindings[e];void 0!==n&&n.getValue(l,t)}setValue(l,t){const e=this._bindings;for(let n=this._targetGroup.nCachedObjects_,i=e.length;n!==i;++n)e[n].setValue(l,t)}bind(){const l=this._bindings;for(let t=this._targetGroup.nCachedObjects_,e=l.length;t!==e;++t)l[t].bind()}unbind(){const l=this._bindings;for(let t=this._targetGroup.nCachedObjects_,e=l.length;t!==e;++t)l[t].unbind()}},is.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},is.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},is.prototype.GetterByBindingType=[is.prototype._getValue_direct,is.prototype._getValue_array,is.prototype._getValue_arrayElement,is.prototype._getValue_toArray],is.prototype.SetterByBindingTypeAndVersioning=[[is.prototype._setValue_direct,is.prototype._setValue_direct_setNeedsUpdate,is.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[is.prototype._setValue_array,is.prototype._setValue_array_setNeedsUpdate,is.prototype._setValue_array_setMatrixWorldNeedsUpdate],[is.prototype._setValue_arrayElement,is.prototype._setValue_arrayElement_setNeedsUpdate,is.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[is.prototype._setValue_fromArray,is.prototype._setValue_fromArray_setNeedsUpdate,is.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]],new Float32Array(1);class rs{constructor(){this.type="ShapePath",this.color=new Ie,this.subPaths=[],this.currentPath=null}moveTo(l,t){return this.currentPath=new Ga,this.subPaths.push(this.currentPath),this.currentPath.moveTo(l,t),this}lineTo(l,t){return this.currentPath.lineTo(l,t),this}quadraticCurveTo(l,t,e,n){return this.currentPath.quadraticCurveTo(l,t,e,n),this}bezierCurveTo(l,t,e,n,i,r){return this.currentPath.bezierCurveTo(l,t,e,n,i,r),this}splineThru(l){return this.currentPath.splineThru(l),this}toShapes(l){function t(l,t){const e=t.length;let n=!1;for(let i=e-1,r=0;r<e;i=r++){let e=t[i],a=t[r],q=a.x-e.x,s=a.y-e.y;if(Math.abs(s)>Number.EPSILON){if(s<0&&(e=t[r],q=-q,a=t[i],s=-s),l.y<e.y||l.y>a.y)continue;if(l.y===e.y){if(l.x===e.x)return!0}else{const t=s*(l.x-e.x)-q*(l.y-e.y);if(0===t)return!0;if(t<0)continue;n=!n}}else{if(l.y!==e.y)continue;if(a.x<=l.x&&l.x<=e.x||e.x<=l.x&&l.x<=a.x)return!0}}return n}const e=fq.isClockWise,n=this.subPaths;if(0===n.length)return[];let i,r,a;const q=[];if(1===n.length)return r=n[0],a=new Wa,a.curves=r.curves,q.push(a),q;let s=!e(n[0].getPoints());s=l?!s:s;const o=[],c=[];let m,h,u=[],d=0;c[d]=void 0,u[d]=[];for(let t=0,a=n.length;t<a;t++)r=n[t],m=r.getPoints(),i=e(m),i=l?!i:i,i?(!s&&c[d]&&d++,c[d]={s:new Wa,p:m},c[d].s.curves=r.curves,s&&d++,u[d]=[]):u[d].push({h:r,p:m[0]});if(!c[0])return function(l){const t=[];for(let e=0,n=l.length;e<n;e++){const n=l[e],i=new Wa;i.curves=n.curves,t.push(i)}return t}(n);if(c.length>1){let l=!1,e=0;for(let l=0,t=c.length;l<t;l++)o[l]=[];for(let n=0,i=c.length;n<i;n++){const i=u[n];for(let r=0;r<i.length;r++){const a=i[r];let q=!0;for(let i=0;i<c.length;i++)t(a.p,c[i].p)&&(n!==i&&e++,q?(q=!1,o[i].push(a)):l=!0);q&&o[n].push(a)}}e>0&&!1===l&&(u=o)}for(let l=0,t=c.length;l<t;l++){a=c[l].s,q.push(a),h=u[l];for(let l=0,t=h.length;l<t;l++)a.holes.push(h[l].h)}return q}}"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:l}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=l);var as=e(72),qs=e.n(as),ss=e(825),os=e.n(ss),cs=e(659),ms=e.n(cs),hs=e(56),us=e.n(hs),ds=e(540),ps=e.n(ds),fs=e(113),gs=e.n(fs),_s=e(365),vs={};vs.styleTagTransform=gs(),vs.setAttributes=us(),vs.insert=ms().bind(null,"head"),vs.domAPI=os(),vs.insertStyleElement=ps(),qs()(_s.A,vs),_s.A&&_s.A.locals&&_s.A.locals;const xs=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i;class ys{constructor(l){this.isFont=!0,this.type="Font",this.data=l}generateShapes(l,t=100){const e=[],n=function(l,t,e){const n=Array.from(l),i=t/e.resolution,r=(e.boundingBox.yMax-e.boundingBox.yMin+e.underlineThickness)*i,a=[];let q=0,s=0;for(let l=0;l<n.length;l++){const t=n[l];if("\n"===t)q=0,s-=r;else{const l=Ms(t,i,q,s,e);q+=l.offsetX,a.push(l.path)}}return a}(l,t,this.data);for(let l=0,t=n.length;l<t;l++)e.push(...n[l].toShapes());return e}}function Ms(l,t,e,n,i){const r=i.glyphs[l]||i.glyphs["?"];if(!r)return void console.error('THREE.Font: character "'+l+'" does not exists in font family '+i.familyName+".");const a=new rs;let q,s,o,c,m,h,u,d;if(r.o){const l=r._cachedOutline||(r._cachedOutline=r.o.split(" "));for(let i=0,r=l.length;i<r;)switch(l[i++]){case"m":q=l[i++]*t+e,s=l[i++]*t+n,a.moveTo(q,s);break;case"l":q=l[i++]*t+e,s=l[i++]*t+n,a.lineTo(q,s);break;case"q":o=l[i++]*t+e,c=l[i++]*t+n,m=l[i++]*t+e,h=l[i++]*t+n,a.quadraticCurveTo(m,h,o,c);break;case"b":o=l[i++]*t+e,c=l[i++]*t+n,m=l[i++]*t+e,h=l[i++]*t+n,u=l[i++]*t+e,d=l[i++]*t+n,a.bezierCurveTo(m,h,u,d,o,c)}}return{offsetX:r.ha*t,path:a}}const Ss=e.p+"76515f684c525a20d923.jpg",Es=e.p+"a2edaf8548e78714814b.jpg",Ts=e.p+"573c0a93c594c41b13ab.jpg",bs=e.p+"8a9ef15290563f508489.png",ws=e.p+"9463d6e48794772dfa5a.jpg",As=e.p+"8b6fc0ef9657f92eb2a9.jpg",Rs=JSON.parse('{"glyphs":{"0":{"ha":949,"x_min":-14,"x_max":949,"o":"m 471 1014 q 614 963 614 1014 q 627 922 627 926 l 587 885 q 549 868 562 885 q 522 875 528 875 q 465 848 491 856 q 468 838 468 841 q 532 861 475 838 l 563 861 q 576 875 568 861 l 593 871 q 651 895 619 895 l 651 899 l 648 899 q 610 895 618 895 l 607 902 q 627 922 627 910 l 631 922 q 658 899 652 922 q 739 878 706 882 q 760 888 743 888 q 763 885 763 888 l 770 888 l 797 888 q 821 861 814 877 q 807 827 811 861 l 814 824 q 821 858 814 833 l 824 858 q 885 770 848 838 l 885 756 l 882 749 q 912 695 902 749 l 905 695 q 882 736 882 707 l 865 732 l 844 732 l 844 726 l 868 719 l 878 719 q 916 678 881 699 q 949 431 949 592 l 922 400 q 909 326 922 332 l 885 326 l 844 342 q 793 322 827 330 l 773 322 q 770 326 770 322 q 661 295 713 304 l 644 298 q 627 288 627 292 l 610 295 q 624 359 617 337 l 617 363 l 621 387 l 621 478 q 624 515 621 492 q 610 624 618 544 q 641 637 641 630 q 637 641 637 637 q 610 634 625 634 l 604 644 q 614 668 604 656 l 610 668 q 600 665 604 665 q 587 699 587 686 l 607 702 l 600 692 l 600 688 l 614 688 q 699 736 652 736 q 732 726 713 736 q 773 746 732 737 l 773 749 q 760 756 760 749 l 760 760 q 770 770 760 764 q 787 756 770 765 l 821 756 q 844 770 839 756 l 844 777 l 841 777 q 797 766 827 766 q 770 780 786 766 l 763 780 q 715 743 763 754 l 712 743 l 702 749 l 692 749 l 607 709 q 553 746 576 709 q 488 770 540 746 l 427 763 q 417 766 420 766 q 376 736 417 756 q 349 685 376 728 q 278 644 349 652 q 271 651 278 651 q 217 631 261 651 q 180 651 204 642 l 180 644 q 227 624 180 636 q 268 641 245 635 l 275 637 l 292 637 q 329 644 296 637 l 332 637 q 315 590 326 590 q 319 563 319 566 q 309 495 319 495 q 264 526 306 495 q 258 519 258 524 q 315 471 311 488 l 312 448 q 315 437 315 441 q 309 431 309 436 q 315 417 315 422 q 312 393 315 407 q 315 359 315 376 l 315 346 q 319 342 315 342 q 305 329 315 332 q 292 332 299 332 l 288 332 l 288 326 l 309 326 q 332 231 319 326 q 410 122 364 142 q 434 109 420 122 q 461 112 458 112 q 471 109 468 109 l 471 98 q 420 3 445 70 l 420 -10 q 417 -14 417 -10 q 366 10 383 10 q 326 24 357 10 l 315 24 q 281 0 303 24 q 288 -7 283 -7 q 315 7 302 7 l 336 7 l 349 -3 l 376 -3 q 407 -27 394 -3 q 434 -37 434 -27 q 431 -47 431 -44 l 437 -47 q 441 -41 437 -41 q 478 -71 478 -45 l 488 -88 l 488 -125 q 478 -136 488 -130 l 444 -136 q 420 -129 420 -136 l 407 -132 q 264 -95 264 -110 l 264 -88 q 281 -47 264 -82 l 275 -47 l 254 -88 q 251 -92 254 -92 q 234 -85 240 -85 l 237 -61 l 237 -34 q 261 0 249 -25 q 264 -3 261 -3 l 268 3 l 268 7 l 264 7 l 258 3 q 251 14 258 14 l 237 14 l 241 7 l 241 -10 q 224 -27 224 -24 l 224 -68 q 217 -75 224 -75 q 51 119 102 -6 q 17 214 19 180 q 71 248 52 242 q 112 237 102 237 l 153 244 q 203 227 203 235 q 200 176 200 193 l 203 170 q 200 156 200 163 q 254 78 200 136 q 264 54 261 54 q 248 31 264 51 l 248 24 l 258 24 q 268 41 260 41 l 275 41 q 285 17 275 19 l 288 17 q 251 105 266 105 l 220 146 q 210 200 214 154 q 220 258 214 253 l 220 271 q 193 254 208 254 l 176 254 l 153 261 q 122 254 131 254 l 112 254 q 71 264 80 264 q 41 254 53 254 q 27 275 27 254 l 20 275 l 20 251 q 44 241 42 251 l 44 237 l 17 237 q 0 295 0 245 q 7 302 7 295 l -3 342 q 27 387 3 368 l 27 390 l 24 390 l 14 383 l 10 383 l 10 400 l 3 400 l 0 387 l -14 387 l -14 498 q -3 526 -14 509 q -10 546 -10 536 q 0 549 -3 549 l 0 559 q 7 587 0 563 l 7 593 q 3 607 7 601 q 41 651 14 651 l 41 658 q 14 648 24 648 l 10 648 l 10 651 q 37 715 21 715 l 41 715 q 37 726 37 722 q 54 749 37 731 l 51 763 q 75 810 63 783 l 81 807 l 85 807 q 129 858 90 807 q 125 861 125 858 q 102 844 122 861 l 102 848 q 153 902 102 857 q 217 882 201 894 l 231 882 l 231 885 q 190 912 202 912 l 186 912 l 176 905 l 166 905 q 285 983 189 944 q 356 1000 345 1000 l 346 987 l 346 983 q 417 1010 382 1010 l 448 1007 q 471 1014 461 1014 m 631 1021 q 800 926 727 995 l 793 922 l 770 922 l 746 916 l 692 929 l 692 926 q 631 1021 631 975 m 309 956 l 309 953 l 312 953 q 326 970 312 970 l 326 980 l 322 980 q 309 956 309 975 m 248 943 l 251 943 q 258 949 258 943 l 258 953 q 248 943 253 953 m 529 946 l 529 943 q 536 949 536 943 l 536 953 q 529 946 529 951 m 210 916 l 214 916 q 224 926 218 916 l 220 926 q 210 916 216 926 m 532 902 l 532 895 q 539 888 534 888 l 543 888 l 543 895 q 536 902 543 902 l 532 902 m 217 878 l 214 871 l 214 865 l 227 865 l 227 868 q 217 878 227 873 m 217 854 l 217 848 l 227 834 l 227 817 q 214 810 214 817 l 214 807 l 227 807 q 234 817 227 817 l 241 817 q 264 773 241 787 l 275 780 q 356 749 336 762 q 370 746 362 746 l 373 753 l 353 773 q 359 800 359 794 l 353 800 q 346 790 353 790 l 342 790 l 332 797 l 332 793 l 339 783 l 339 773 l 322 773 q 258 793 298 789 q 231 834 253 834 l 231 854 l 217 854 m 410 844 l 414 844 q 420 851 420 844 l 417 851 q 410 844 410 850 m 390 838 l 400 838 q 407 844 407 838 l 397 844 q 390 838 390 843 m 326 834 q 319 821 326 829 l 319 817 q 326 810 320 810 l 329 810 l 329 827 l 332 834 l 326 834 m 420 831 l 420 827 l 427 817 l 427 814 l 420 804 l 420 797 q 454 827 454 825 l 454 831 q 451 827 451 831 l 427 831 l 420 831 m 376 817 l 380 817 q 387 824 387 817 l 387 827 q 376 817 382 827 m 502 804 l 502 797 q 519 780 502 792 l 519 783 q 502 804 507 804 m 81 793 l 81 777 l 88 777 l 88 793 l 81 793 m 109 793 l 105 787 l 115 787 q 109 793 115 793 m 532 773 l 532 770 q 546 753 541 753 l 549 753 q 536 773 541 773 l 532 773 m 264 766 l 264 756 l 271 756 l 271 766 l 264 766 m 71 743 l 71 719 l 88 715 l 88 729 q 78 743 78 729 l 71 743 m 176 699 l 183 695 q 193 699 190 699 l 193 702 q 186 709 193 709 q 176 699 182 709 m 88 671 q 115 634 115 671 l 125 627 q 173 651 147 627 l 173 654 l 163 654 q 122 641 163 641 q 98 685 113 669 q 88 671 94 685 m 271 682 l 271 675 q 292 685 289 675 q 271 682 287 682 m 773 441 l 773 437 l 777 437 q 787 448 781 437 l 787 451 q 773 441 773 446 m 54 417 l 51 410 l 51 407 l 54 407 q 61 414 61 407 l 54 417 m 763 410 l 760 404 l 760 400 l 763 400 q 770 407 770 400 l 763 410 m 939 339 l 943 332 q 939 322 939 326 q 932 329 932 322 l 932 332 q 939 339 934 339 m 865 309 q 905 298 875 309 l 905 292 l 899 281 l 926 203 q 939 197 934 203 q 885 81 906 81 l 888 64 q 529 -146 751 -146 q 522 -139 522 -146 l 522 -75 l 512 -61 l 512 -51 q 522 -27 522 -39 l 515 -27 q 495 -54 505 -54 q 451 -14 451 -37 q 505 81 492 66 q 549 112 505 102 q 624 237 598 142 q 661 264 624 258 q 671 271 671 268 l 678 268 l 699 268 q 634 173 699 173 q 607 136 634 149 l 607 109 l 614 109 q 682 183 614 130 q 709 264 699 197 q 851 298 794 292 q 865 309 851 302 m 919 315 l 939 305 q 926 237 936 295 l 922 237 q 899 302 909 237 q 919 315 919 313 m 220 285 l 220 281 q 241 302 225 281 l 241 309 q 220 285 235 309 m 593 98 l 580 64 l 587 61 q 600 95 600 87 l 593 98 m 509 75 l 505 68 q 522 44 513 68 l 526 44 q 553 64 526 64 l 553 71 l 526 71 l 509 75 m 509 0 l 515 0 q 526 20 515 8 l 526 27 q 509 0 520 27 m 132 10 l 132 0 l 136 0 q 142 7 142 0 l 142 14 q 132 10 136 10 m 770 -10 l 770 -20 l 773 -20 q 780 -14 780 -20 l 773 -10 l 770 -10 z "},"1":{"ha":610,"x_min":0,"x_max":610,"o":"m 383 1027 q 414 973 414 1027 q 397 946 413 967 l 397 939 q 417 902 397 928 q 390 871 417 890 l 387 858 q 400 773 400 793 q 349 746 380 773 q 288 729 330 746 l 275 732 q 234 719 239 719 q 170 756 220 719 l 125 763 q 98 760 113 760 q 78 766 89 760 q 61 760 61 766 q 41 773 41 768 q 217 827 155 788 q 332 1014 296 878 q 383 1027 332 1027 m 515 1027 l 515 1024 l 522 1027 l 546 1027 q 553 1021 553 1026 l 553 1017 q 498 994 553 998 q 485 1007 485 997 l 478 1007 l 471 1004 q 448 1017 471 1009 l 448 1024 l 475 1024 l 515 1027 m 573 1027 q 583 1017 578 1027 l 583 1007 q 573 980 583 997 q 549 1000 549 996 q 573 1027 569 1027 m 431 1024 q 441 1021 437 1021 l 441 1010 q 431 990 441 993 l 417 1014 q 431 1024 417 1019 m 481 1024 q 498 1021 487 1021 l 498 1010 l 492 1010 l 492 1000 l 495 1000 q 505 1010 498 1000 q 529 1004 507 1010 l 570 1010 q 576 997 570 997 l 583 1000 q 590 994 585 994 l 607 997 l 610 973 l 610 970 q 607 939 610 939 q 610 888 610 905 l 610 604 l 607 604 q 576 658 595 610 l 576 682 l 556 743 l 559 760 q 519 787 559 775 q 495 807 519 798 l 461 797 l 454 797 q 441 827 449 797 l 444 834 q 434 875 439 875 q 465 926 465 911 q 441 960 447 945 q 478 1017 457 1004 l 481 1024 m 380 994 l 366 980 l 387 980 l 387 987 q 380 994 387 994 m 468 922 l 468 916 l 475 916 q 485 926 479 916 l 485 932 q 468 922 474 922 m 539 848 l 543 848 q 549 854 549 848 l 549 878 q 563 902 549 890 l 563 905 l 559 905 q 539 848 544 905 m 329 899 l 329 888 l 336 888 l 336 899 l 329 899 m 536 834 q 522 810 536 827 l 522 807 q 539 831 530 809 l 539 834 l 536 834 m 17 777 l 17 773 q 3 763 17 768 l 3 773 q 17 777 11 773 m 417 766 q 427 763 420 766 l 461 766 q 509 736 483 736 q 529 651 509 713 l 529 624 q 570 556 545 577 l 566 515 l 566 478 q 583 451 583 463 l 583 393 q 573 376 583 376 l 573 370 q 583 353 583 370 l 583 305 q 543 217 583 298 q 475 244 479 244 l 471 244 q 458 241 464 244 l 434 248 l 346 224 q 254 312 277 267 l 254 380 q 258 383 254 383 l 254 390 l 254 549 q 241 553 241 549 l 234 549 l 190 549 q 186 553 186 549 l 180 549 l 159 549 q 139 556 150 549 q 119 549 128 549 l 10 549 q 0 559 5 549 l 0 566 q 7 573 1 573 l 27 573 l 27 580 l 10 580 q 0 600 0 583 l 0 661 l 3 702 l 0 702 l 3 709 l 3 712 q 0 726 3 720 q 31 760 8 751 l 34 760 q 58 749 57 756 q 71 753 60 749 q 153 749 133 749 q 231 705 180 739 q 271 722 261 722 l 278 722 l 288 715 l 302 715 q 370 739 320 728 q 417 766 374 753 m 444 715 l 444 712 l 448 712 q 458 715 454 715 l 458 722 l 451 722 q 444 715 444 721 m 173 621 l 173 617 q 180 610 174 610 l 186 610 l 186 621 l 173 621 m 75 580 q 98 566 75 573 l 109 566 l 109 570 q 81 580 94 570 l 75 580 m 410 566 l 410 559 q 434 570 434 564 l 434 573 l 424 573 q 410 566 416 566 m 281 559 l 278 553 l 278 549 l 288 549 l 288 553 q 281 559 288 559 m 417 526 l 424 526 q 532 556 521 545 q 529 559 529 556 q 417 526 417 534 m 366 543 l 363 529 l 366 529 q 373 536 373 529 l 373 543 l 366 543 m 387 539 l 387 529 l 393 529 q 400 536 400 529 l 400 543 l 397 543 q 387 539 390 539 m 336 509 q 329 502 336 502 l 329 495 l 339 495 l 339 509 l 336 509 m 376 498 l 376 495 l 383 495 q 393 498 390 498 l 393 502 l 387 502 q 376 498 380 498 m 261 261 q 271 258 268 258 l 271 251 l 268 244 q 278 248 275 248 q 346 207 299 231 l 431 231 q 458 224 448 224 q 478 231 469 231 q 543 210 501 220 q 546 197 546 204 l 546 183 l 488 166 l 485 166 q 454 197 481 166 l 454 190 q 488 153 474 157 q 451 81 479 81 q 434 44 444 81 q 349 -31 371 1 q 312 -51 320 -31 q 298 -54 300 -54 q 295 -44 295 -47 l 288 -44 l 288 -51 q 268 -95 288 -80 l 264 -95 q 254 -85 260 -95 l 254 14 q 261 20 256 20 l 264 20 q 298 -10 264 14 l 298 -17 l 302 -17 l 302 3 q 254 51 254 23 l 254 220 q 264 244 254 232 q 258 251 258 244 l 258 254 l 261 261 m 576 217 l 583 217 l 583 197 l 580 180 l 576 180 q 570 186 570 180 q 576 217 570 195 m 580 176 l 583 159 q 573 156 576 156 q 563 159 566 159 l 563 163 q 580 176 563 168 m 529 156 l 556 156 q 583 122 583 138 l 583 115 l 580 81 l 583 81 l 580 75 l 580 61 q 583 47 580 54 q 580 44 583 44 l 583 20 l 583 -41 q 580 -44 583 -44 l 583 -51 l 583 -85 q 573 -95 583 -90 l 532 -95 q 529 -92 529 -95 l 522 -95 l 502 -95 q 420 -34 487 -95 q 400 -17 410 -34 q 458 27 422 6 q 498 78 473 78 q 515 139 498 94 q 529 156 515 149 m 383 -27 l 387 -27 q 454 -88 404 -34 q 448 -95 454 -95 l 346 -95 l 326 -92 q 309 -95 320 -95 l 302 -95 q 295 -88 295 -95 q 356 -41 295 -66 q 366 -44 363 -44 q 383 -27 366 -39 z "},"2":{"ha":949,"x_min":0,"x_max":966,"o":"m 424 1143 l 424 1139 l 431 1143 l 488 1143 q 495 1136 495 1141 q 444 1122 495 1126 q 441 1126 444 1126 l 437 1119 l 444 1116 l 465 1116 q 519 1129 515 1129 q 549 1034 549 1064 q 505 977 529 1029 q 454 919 505 938 q 417 895 439 895 q 390 939 405 907 q 376 936 378 936 l 363 939 q 329 932 338 932 q 288 953 300 932 l 288 956 l 295 966 q 244 980 278 966 l 244 977 q 298 916 275 951 q 326 909 320 909 l 342 912 l 356 909 q 387 912 374 912 q 393 892 393 901 l 393 888 q 305 763 335 855 q 237 749 254 749 l 237 746 l 268 746 l 305 756 q 309 753 305 753 l 305 729 l 305 695 q 295 685 305 690 l 224 685 q 190 688 208 685 q 159 685 177 685 l 153 685 q 146 695 146 685 l 159 722 l 156 722 q 119 688 134 688 q 68 685 89 685 l 64 692 l 64 695 q 85 746 64 707 l 85 749 q 27 838 27 805 q 51 875 27 875 l 61 875 q 58 895 61 878 q 88 970 72 970 l 112 977 l 129 977 l 149 973 q 176 1021 159 973 q 186 1031 181 1021 l 186 1048 q 197 1051 190 1048 q 214 1031 214 1046 l 207 1017 q 210 1014 210 1017 l 261 1027 q 271 1024 268 1024 l 271 1004 q 285 990 271 998 l 288 990 l 288 994 q 278 1007 281 1007 l 281 1024 q 278 1034 281 1027 q 319 1099 307 1084 l 319 1102 q 285 1075 292 1075 l 292 1061 l 264 1034 l 241 1034 q 217 1058 217 1034 q 193 1068 200 1068 q 186 1061 193 1061 l 183 1068 q 288 1116 248 1116 q 424 1143 368 1143 m 556 1119 l 563 1119 q 617 1105 602 1119 l 637 1109 q 688 1095 651 1102 l 688 1092 q 617 1078 688 1082 l 614 1072 q 654 1068 631 1072 l 709 1082 q 882 960 774 1082 q 926 848 926 878 l 922 841 q 929 821 929 830 q 926 807 929 813 l 936 790 l 936 749 q 909 722 932 722 q 875 729 875 724 q 871 726 871 729 l 848 729 l 807 729 q 749 678 793 729 q 719 661 719 673 q 695 621 719 626 q 624 563 643 563 l 573 543 q 559 553 559 548 q 566 604 566 602 q 556 624 556 607 q 631 682 556 673 l 644 688 q 654 682 644 682 q 675 688 665 688 l 692 688 l 692 692 q 661 709 692 698 q 590 685 661 699 l 590 688 q 607 756 607 730 l 607 777 q 475 882 607 858 l 471 888 l 478 892 l 485 888 q 536 932 521 913 q 549 929 542 929 l 553 936 q 532 943 532 936 l 532 956 q 576 1007 559 998 l 583 1024 l 573 1041 l 573 1044 l 576 1061 q 556 1119 560 1061 m 417 1095 l 417 1092 l 420 1092 q 437 1109 425 1092 l 434 1109 q 417 1095 417 1100 m 339 1102 l 339 1088 q 376 1099 376 1091 l 373 1099 l 353 1095 l 342 1102 l 339 1102 m 254 1068 l 254 1061 l 258 1061 q 264 1068 264 1061 l 254 1068 m 587 1065 l 587 1061 l 610 1061 l 610 1068 l 604 1068 l 587 1065 m 651 1058 q 627 1038 651 1044 l 627 1034 q 631 1031 631 1034 q 671 1055 671 1043 q 651 1058 656 1055 m 749 1031 l 760 1031 q 766 1038 766 1031 l 760 1041 q 749 1031 755 1041 m 176 1038 l 180 1038 q 186 1031 186 1036 l 186 1021 q 136 970 154 971 l 115 973 l 115 977 q 176 1038 115 987 m 800 1024 l 800 1010 q 807 1017 807 1010 l 807 1024 l 800 1024 m 190 963 l 190 960 l 197 960 q 200 963 200 960 l 207 960 l 214 960 q 244 973 244 966 q 224 990 244 979 q 190 963 200 981 m 804 949 l 800 943 l 814 932 l 831 932 l 831 929 q 800 912 831 926 l 800 905 l 804 905 l 831 922 l 871 909 l 871 905 q 861 875 871 899 q 888 916 868 877 l 868 919 l 868 922 l 875 932 l 875 939 q 868 946 875 946 q 848 939 857 939 q 804 949 829 949 m 702 946 l 702 939 q 719 932 708 939 l 722 939 l 702 946 m 743 916 l 743 912 q 777 892 743 892 l 780 899 q 753 916 753 899 l 743 916 m 810 899 q 793 882 810 882 l 793 875 l 804 875 q 821 899 807 875 l 810 899 m 705 875 q 715 878 712 878 l 715 888 q 705 875 711 888 m 237 885 l 237 878 l 258 878 l 258 885 l 237 885 m 695 865 l 695 861 q 702 868 702 861 l 702 871 q 695 865 695 870 m 814 841 l 821 783 l 827 783 l 824 824 l 824 827 q 861 844 824 833 l 861 851 q 854 858 861 858 q 814 841 829 841 m 92 854 l 92 848 l 105 848 q 98 854 105 854 l 92 854 m 109 848 l 122 848 l 122 854 l 115 854 q 109 848 109 853 m 865 844 q 875 834 865 840 q 916 841 899 841 q 909 848 916 848 l 888 848 l 865 844 m 641 766 l 641 753 l 644 753 q 671 800 644 756 l 668 800 q 641 766 665 800 m 834 777 l 834 770 q 868 746 847 770 l 871 746 l 871 749 q 834 777 851 777 m 31 770 l 37 770 q 61 753 37 761 q 78 726 61 746 q 54 665 65 665 l 31 665 q 20 675 26 665 q 31 770 24 733 m 105 743 l 109 743 q 119 753 113 743 l 119 760 q 105 743 112 758 m 159 739 l 159 736 q 170 712 170 721 l 173 712 q 180 719 180 712 l 180 722 q 159 739 171 722 m 871 715 q 892 688 892 708 q 888 678 888 682 q 905 631 888 661 q 756 471 874 559 q 532 339 547 339 l 532 353 q 576 431 532 380 q 600 465 576 440 q 570 515 570 495 q 651 546 583 526 q 810 705 802 705 q 871 715 810 712 m 899 712 l 929 712 l 929 709 q 916 654 929 694 q 899 712 902 654 m 536 617 l 539 617 q 546 570 546 585 l 536 532 q 573 471 552 498 l 573 468 q 539 420 562 468 q 519 387 519 408 q 380 465 487 387 l 370 465 q 366 461 366 465 q 346 478 352 466 q 536 617 495 583 m 336 475 q 393 441 393 447 q 512 373 419 432 l 515 373 q 431 271 515 338 l 431 268 l 461 268 l 468 264 q 441 186 468 239 q 434 156 434 159 q 437 146 437 149 q 373 115 373 146 l 373 109 q 376 105 373 105 q 319 51 353 51 q 288 58 294 58 q 254 54 278 54 q 217 95 254 64 q 207 149 217 117 l 217 149 l 234 136 l 254 136 q 217 159 217 153 q 183 197 205 197 l 163 186 q 85 217 85 196 q 81 237 85 233 q 336 475 103 319 m 539 248 l 549 248 q 576 241 564 248 q 583 248 578 248 l 624 248 q 661 234 644 248 l 665 234 q 671 248 665 248 l 682 248 q 709 241 696 248 q 746 248 722 248 l 892 248 l 892 244 q 851 227 892 240 q 780 190 851 214 q 753 200 763 200 l 732 200 q 715 193 715 199 q 661 207 675 198 q 634 200 644 200 q 576 237 634 213 l 573 237 l 631 186 q 668 173 661 186 l 675 176 l 688 176 q 739 180 705 176 q 749 190 739 190 q 760 186 756 186 l 760 183 q 743 173 760 173 l 746 149 q 736 119 742 119 q 739 102 739 113 l 746 102 q 763 125 746 120 l 760 132 l 760 142 q 824 183 779 183 q 858 203 824 188 q 939 234 858 216 q 966 207 950 234 q 960 173 966 198 q 966 153 966 162 l 966 61 q 963 24 966 47 q 966 -3 966 20 l 966 -10 q 953 -20 966 -20 l 932 -17 l 912 -20 l 888 -17 q 858 -20 870 -20 l 858 -10 q 888 14 872 14 q 895 3 895 14 l 902 3 q 899 17 902 11 q 902 31 902 23 l 895 31 q 851 7 882 31 l 851 3 l 854 -3 l 848 -7 l 844 -7 l 844 3 l 834 3 q 817 -3 826 -3 l 817 -14 l 834 -10 l 838 -10 l 838 -14 q 831 -20 838 -20 q 821 -17 824 -17 q 817 -20 817 -17 q 770 -3 770 -14 l 770 24 q 804 51 770 27 l 797 51 q 770 44 791 44 q 766 58 766 56 q 770 75 770 62 q 760 71 763 71 q 753 88 753 80 l 746 88 q 702 64 702 73 l 702 61 q 726 47 717 61 q 746 61 746 47 q 756 51 751 61 l 756 34 q 760 -3 756 20 q 749 -20 755 -20 l 648 -20 q 644 -17 644 -20 l 637 -20 l 610 -20 q 593 -14 593 -20 q 566 -20 581 -20 l 539 -20 q 481 47 481 -7 q 485 58 485 54 q 434 98 460 72 l 434 102 l 448 102 q 492 132 492 102 q 526 244 519 203 q 539 248 532 248 m 912 268 l 922 268 q 932 258 927 268 l 922 251 q 912 261 918 251 l 912 268 m 64 224 l 68 224 q 71 197 68 216 q 41 183 59 197 l 41 190 q 64 224 55 220 m 905 217 l 905 210 q 912 203 907 203 l 916 210 q 909 217 916 217 l 905 217 m 580 176 l 590 176 q 597 183 597 176 l 590 186 q 580 176 585 186 m 176 183 l 180 183 q 203 166 197 183 q 197 159 203 159 l 193 159 q 170 176 170 173 q 176 183 171 183 m 81 180 q 142 170 116 170 l 163 173 q 203 109 203 127 l 200 85 q 244 14 244 47 l 244 3 l 227 0 l 37 0 q 0 10 0 0 l 0 44 q 14 71 0 56 l 14 78 l 7 78 l 7 81 l 27 112 l 27 119 l 17 119 l 17 125 q 81 180 17 180 m 821 170 l 821 163 l 827 163 q 838 173 832 163 l 838 176 l 827 176 q 821 170 821 175 m 878 173 l 878 166 q 885 159 880 159 q 892 166 892 159 l 892 176 l 888 176 q 878 173 882 173 m 600 163 l 600 156 l 621 156 l 621 159 l 600 163 m 780 142 l 780 136 l 787 136 q 797 153 787 142 l 797 156 l 793 156 q 780 142 788 156 m 834 149 l 848 149 l 848 156 l 841 156 q 834 149 834 155 m 658 136 l 658 129 l 661 129 q 671 139 666 129 l 671 142 l 665 142 q 658 136 658 141 m 743 142 l 743 136 l 753 136 l 753 142 l 743 142 m 387 105 l 397 105 q 407 95 401 105 q 400 88 407 88 q 387 92 394 92 l 387 105 m 831 88 q 834 78 834 81 q 824 68 829 78 l 831 68 q 848 92 848 78 l 841 95 l 838 95 q 831 88 831 94 m 854 85 l 854 78 l 858 78 q 878 92 878 86 l 878 95 q 854 85 866 85 m 699 88 l 709 88 l 709 81 l 705 81 q 699 88 699 81 m 410 85 q 434 17 434 66 l 448 14 l 448 0 l 288 0 q 281 10 281 0 q 302 27 287 27 q 329 24 326 24 q 383 78 359 24 q 410 85 389 78 m 800 68 l 797 61 l 817 61 l 817 64 l 800 68 m 109 41 l 102 31 l 102 27 l 119 27 l 119 37 q 109 41 115 37 m 580 41 l 580 37 q 587 31 581 31 l 590 31 l 590 41 l 580 41 m 261 27 l 278 27 q 254 0 267 3 l 251 7 q 261 27 254 27 z "},"3":{"ha":743,"x_min":-20,"x_max":949,"o":"m 481 1149 l 488 1146 l 532 1146 l 539 1143 q 529 1075 536 1107 q 546 1119 538 1080 l 543 1126 l 543 1133 q 556 1143 543 1141 q 766 1078 654 1143 q 790 1061 790 1067 l 790 1055 q 763 1061 787 1055 l 760 1061 l 760 1058 q 793 1041 760 1050 l 790 1024 l 790 1021 l 797 1021 l 797 1034 l 800 1051 l 807 1051 q 878 966 862 1003 l 878 956 q 841 946 872 956 q 821 966 836 946 q 817 939 817 942 l 821 939 q 831 943 827 943 q 841 939 838 939 l 841 929 l 827 929 q 814 932 820 929 q 773 888 804 932 l 749 871 l 743 871 l 732 878 l 702 878 q 607 817 663 817 q 543 895 597 858 q 522 970 543 913 l 526 977 q 509 1000 526 1000 q 468 1031 499 1000 l 465 1031 q 427 1021 454 1031 q 400 1102 413 1021 q 437 1146 400 1107 l 454 1146 q 461 1139 461 1145 q 481 1149 481 1146 m 404 1163 l 407 1156 q 380 1122 380 1140 l 380 1119 q 393 1041 393 1059 q 339 1010 382 1041 q 288 994 307 1010 l 271 997 l 258 997 l 258 990 l 251 990 q 227 983 227 989 q 146 1027 149 1027 l 132 1024 q 122 1027 125 1027 l 122 1031 q 363 1156 175 1112 q 404 1163 395 1163 m 617 1092 l 624 1088 l 627 1095 l 627 1099 l 624 1099 q 617 1092 617 1097 m 668 1075 l 671 1068 q 685 1082 682 1071 l 678 1085 q 668 1075 673 1085 m 712 1065 l 712 1061 q 726 1048 712 1056 l 732 1048 q 739 1058 739 1048 q 726 1075 732 1074 l 722 1075 q 712 1065 718 1075 m 519 1065 q 515 1055 519 1061 l 522 1055 q 526 1065 522 1058 l 519 1065 m 658 1024 q 651 1007 658 1018 l 658 1004 l 671 1017 q 665 1024 671 1024 l 658 1024 m 448 1014 q 502 980 471 990 q 522 905 502 948 l 522 899 l 475 902 q 342 824 380 902 q 315 783 337 783 l 305 783 q 302 787 302 783 l 295 783 l 281 783 q 278 787 278 783 l 271 783 l 153 783 q 136 800 136 783 l 129 800 q 125 783 129 789 q 119 787 119 783 q 68 783 85 783 l 44 783 q 34 793 39 783 q 112 997 34 897 l 119 997 l 142 994 q 153 997 149 997 q 224 949 153 991 q 254 966 250 963 l 258 966 q 288 960 267 966 q 319 977 301 964 l 326 977 q 329 973 329 977 q 390 1004 339 973 q 417 1010 393 1004 l 444 1010 q 448 1014 448 1010 m 797 1010 l 797 1004 q 800 994 800 997 l 804 994 l 804 1004 q 797 1010 804 1010 m 437 966 l 437 956 q 458 966 458 960 q 454 970 454 966 q 437 966 449 966 m 739 946 l 739 932 l 746 932 l 746 946 l 739 946 m 892 939 q 929 831 929 939 q 810 621 929 694 l 810 617 q 895 553 880 576 q 851 529 876 529 l 827 529 q 797 539 810 529 q 770 536 779 536 q 777 529 771 529 q 797 532 779 529 q 831 522 814 522 l 848 522 q 888 532 857 522 l 892 532 q 909 471 892 518 q 892 444 892 456 l 895 444 q 922 468 915 455 q 909 495 909 482 q 929 509 916 509 q 949 458 939 490 q 943 434 943 444 q 949 427 949 433 l 949 410 q 919 390 943 410 q 854 380 865 380 q 844 383 848 383 l 844 387 q 882 427 874 412 l 882 431 q 807 380 823 380 q 790 376 795 380 q 746 390 759 390 l 719 376 q 682 380 689 380 q 658 366 682 373 q 614 444 636 366 q 593 465 610 444 l 593 478 q 651 573 610 519 l 665 573 l 665 580 l 658 580 l 651 576 l 648 583 l 648 617 l 654 617 l 654 621 l 651 621 q 641 617 644 617 q 631 651 633 626 q 654 692 654 688 q 604 726 654 699 q 600 729 604 729 q 631 800 614 751 l 654 797 q 729 858 729 821 l 749 858 q 777 851 774 851 q 804 871 801 851 q 800 882 800 878 q 834 912 817 883 q 868 932 858 912 q 892 939 878 932 m 166 865 l 166 861 q 173 854 168 854 q 180 861 180 854 l 180 865 l 166 865 m 68 824 l 68 821 q 88 814 86 814 q 71 824 88 821 l 68 824 m 275 814 l 275 810 l 281 810 l 281 821 q 275 814 275 819 m 824 804 l 831 800 l 838 810 l 831 810 q 824 804 824 809 m 271 797 l 278 793 l 281 793 l 281 804 l 278 804 q 271 797 271 802 m 773 722 l 773 719 l 780 719 l 780 729 q 773 722 773 728 m 726 722 q 715 695 715 705 l 715 688 l 722 688 q 732 719 722 694 l 726 722 m 841 712 l 841 709 l 844 709 q 851 715 851 709 l 851 719 l 848 719 q 841 712 841 718 m 563 715 q 607 699 568 715 l 607 692 q 583 634 583 677 l 583 627 q 566 617 566 625 l 566 614 l 573 614 l 587 624 q 600 583 600 624 q 549 481 549 497 l 546 481 q 414 495 492 495 l 407 505 q 410 515 407 515 l 407 549 l 407 682 q 414 688 408 688 l 431 688 q 563 715 514 688 m 685 675 l 682 668 l 695 668 l 695 671 q 685 675 692 671 m 705 576 l 702 570 q 743 543 740 543 l 743 546 l 705 576 m 878 539 l 885 539 q 902 519 890 539 l 902 512 q 888 505 897 512 q 878 539 882 513 m 715 522 l 712 515 l 712 509 l 719 509 q 722 519 719 512 l 715 522 m 719 478 l 719 471 q 726 465 720 465 l 729 465 l 729 478 l 719 478 m 637 468 l 637 461 l 644 461 q 651 468 651 461 q 648 471 648 468 q 637 468 641 468 m 3 410 l 27 407 q 54 410 40 410 q 58 407 58 410 l 75 410 l 170 410 q 176 404 176 409 l 176 400 q 166 387 166 400 l 170 373 l 159 329 q 176 359 165 329 q 173 397 173 382 q 207 410 197 410 l 281 410 q 298 336 288 410 q 363 264 327 276 l 363 258 q 298 210 330 218 l 281 193 l 268 193 l 268 200 l 261 200 q 234 105 261 184 l 237 105 l 227 88 l 227 85 q 251 44 251 56 l 251 27 q 95 112 182 37 q 119 156 119 139 l 119 163 q 112 170 119 170 q 85 122 112 141 q -7 281 7 203 l 0 295 q -20 376 -20 295 l -17 383 q -20 397 -20 389 q 3 410 -17 410 m 936 390 l 939 383 q 844 136 939 237 q 824 112 839 136 l 821 112 l 821 122 q 834 136 827 136 l 834 149 q 821 156 834 156 l 821 166 l 810 200 q 861 302 840 250 q 865 315 865 308 l 865 322 l 851 339 q 905 373 866 373 q 936 390 905 387 m 621 366 q 631 342 621 342 l 665 359 q 688 353 678 353 q 732 366 715 366 l 756 356 l 821 363 l 841 353 q 854 366 842 366 l 854 353 q 838 346 838 352 q 854 315 854 319 q 817 231 836 262 q 800 207 809 231 q 810 163 800 192 q 807 159 807 163 q 821 146 810 159 q 783 85 803 85 l 783 92 l 780 92 q 715 47 762 62 l 705 47 q 651 85 673 60 q 553 98 570 92 q 515 92 534 92 q 481 146 511 113 q 427 200 481 156 q 393 227 427 205 q 420 251 393 231 l 427 248 l 522 248 q 573 281 522 254 q 614 363 599 310 l 621 366 m 102 298 l 95 302 q 75 295 81 295 q 47 302 68 295 q 34 298 41 298 l 34 292 l 51 295 q 85 271 61 295 q 119 295 85 290 q 129 292 129 295 l 129 288 l 136 288 q 142 295 142 288 l 170 275 l 190 275 q 197 281 197 275 q 146 305 146 285 l 153 315 l 153 319 l 149 319 l 102 298 m 210 278 q 268 251 258 278 q 295 234 277 251 l 298 241 l 298 248 q 244 281 286 248 q 231 285 238 285 l 217 285 q 210 278 210 283 m 380 220 q 465 132 421 191 q 471 115 471 132 q 407 88 443 88 q 356 61 384 61 q 319 17 341 35 q 275 41 290 17 l 275 44 q 285 47 278 44 q 292 41 286 41 l 292 44 q 258 85 260 84 l 258 88 q 285 156 285 108 q 336 200 296 177 q 380 220 364 202 m 122 193 l 122 173 l 129 173 l 129 193 l 122 193 m 780 186 l 787 183 q 793 190 793 183 l 787 193 q 780 186 780 192 m 709 156 l 709 149 l 719 149 q 726 156 726 149 l 726 163 l 722 163 q 709 156 714 156 m 766 125 l 766 122 l 773 122 l 790 125 l 790 136 l 787 136 q 766 125 766 132 m 648 115 q 641 98 648 109 l 644 98 l 661 102 l 661 115 l 648 115 m 485 112 q 505 68 490 112 l 512 64 l 515 71 q 512 75 512 71 l 519 78 l 549 78 l 549 75 l 546 58 q 563 75 548 58 l 590 75 q 600 64 595 75 q 593 58 593 63 l 593 51 q 604 41 593 46 l 607 47 l 607 71 l 610 71 q 668 37 652 71 l 668 31 l 573 7 q 563 10 566 10 l 566 27 l 563 27 q 546 3 555 25 q 454 0 484 0 l 431 0 q 366 10 376 0 q 353 7 359 10 q 342 14 342 10 q 356 31 349 29 l 363 31 l 363 24 l 373 24 q 417 75 373 51 q 431 85 417 85 l 448 81 l 444 75 l 444 68 l 448 68 l 454 71 l 451 78 q 485 112 473 93 m 522 61 q 529 47 529 53 l 539 47 l 539 54 q 526 61 534 54 l 522 61 m 427 44 l 434 44 q 441 51 441 44 l 441 54 l 437 54 q 427 44 433 54 m 563 47 l 576 47 l 576 54 l 570 54 q 563 47 563 53 m 390 47 q 387 37 390 44 l 393 34 q 400 41 400 34 q 393 47 400 47 l 390 47 m 498 24 l 509 17 l 512 17 q 526 44 521 17 q 515 47 519 47 q 498 24 498 43 m 539 41 l 539 31 q 549 34 546 34 l 549 41 l 539 41 m 461 34 l 461 27 l 492 24 l 492 34 l 488 34 l 475 31 q 461 34 469 34 z "},"4":{"ha":814,"x_min":-27,"x_max":963,"o":"m 549 1109 l 580 1109 l 580 1102 l 546 1092 q 532 1102 532 1097 l 532 1105 l 549 1109 m 607 1109 l 627 1109 l 637 1102 q 665 1109 661 1109 l 827 1109 q 838 1099 832 1109 q 834 1078 838 1084 q 838 1014 838 1041 l 838 966 q 715 885 814 885 q 668 1000 686 907 q 654 1041 668 1007 l 658 1048 q 621 1078 658 1078 q 600 1105 621 1085 l 607 1109 m 773 1078 l 777 1078 l 790 1082 l 790 1095 l 783 1095 q 773 1078 776 1095 m 509 1082 l 546 1082 q 593 1051 562 1062 q 617 970 593 1021 q 614 939 614 951 q 634 899 620 939 q 658 868 654 868 q 651 844 651 851 q 654 817 654 820 l 651 793 l 699 766 l 699 763 q 675 715 675 741 l 678 709 q 658 692 678 699 q 665 685 659 685 l 668 685 l 682 695 q 695 658 692 684 q 648 573 695 652 q 627 532 637 532 q 634 509 629 509 q 580 481 634 498 l 570 481 l 546 505 l 543 505 q 573 468 547 487 q 543 400 564 400 q 519 356 527 400 q 437 288 484 342 q 400 268 400 288 q 387 264 394 264 l 380 264 l 380 271 l 376 271 q 349 231 376 233 l 248 231 q 220 237 244 231 q 214 231 220 231 l 92 231 q 75 237 75 231 q 54 231 64 231 l -17 231 q -27 241 -22 231 l -27 309 q 0 349 -27 334 l -24 349 l -27 366 l -27 400 q -24 417 -27 412 l -27 437 l -27 465 q 41 566 -27 512 q 64 604 47 566 l 85 610 l 95 597 q 88 570 88 575 l 92 570 q 102 593 100 570 q 95 624 95 606 l 132 678 l 139 678 l 156 665 l 166 665 q 170 668 170 665 q 231 637 205 668 l 248 637 q 298 641 264 637 q 326 610 298 625 q 244 515 261 515 l 241 515 l 244 509 l 244 505 l 231 485 l 231 478 l 275 478 l 281 475 l 278 461 q 281 441 281 444 q 271 400 281 437 l 278 400 q 288 431 288 425 l 288 434 l 285 454 q 322 478 289 478 l 485 478 q 488 515 485 492 q 485 526 485 522 q 515 546 485 538 q 539 543 529 543 l 563 546 q 621 532 585 536 q 515 563 586 563 q 488 553 498 553 l 485 570 l 485 804 l 481 804 l 339 627 q 305 654 320 627 l 298 658 q 244 654 264 654 l 234 654 q 214 682 229 654 l 210 682 q 203 671 210 671 q 136 682 196 678 l 136 685 q 258 827 218 788 l 261 827 l 275 817 l 281 817 l 281 824 q 264 834 264 827 l 264 838 q 451 1055 426 1037 q 509 1082 471 1076 m 559 1031 l 559 1027 q 580 1031 565 1031 l 580 1038 l 566 1038 q 559 1031 559 1036 m 817 902 q 824 895 824 901 l 824 790 q 821 726 824 758 q 824 675 824 711 q 821 644 824 663 q 824 604 824 627 l 824 600 q 821 570 824 583 q 824 536 824 552 l 824 509 l 817 485 l 827 478 l 936 478 q 943 471 943 477 q 888 448 922 448 q 844 461 857 461 l 817 448 q 780 451 794 451 q 756 437 774 437 q 682 475 714 475 l 678 481 l 678 485 q 688 495 688 485 q 682 502 682 495 q 753 644 682 555 l 763 644 l 763 648 q 746 665 746 648 l 746 675 l 749 692 q 732 712 732 692 q 729 715 729 712 q 753 756 729 730 l 753 770 l 699 797 l 699 831 q 732 871 724 868 l 749 868 q 817 902 777 868 m 529 882 l 529 878 l 539 878 q 549 888 544 878 l 543 892 l 539 892 q 529 882 534 892 m 526 841 l 526 838 l 529 838 l 644 868 q 648 878 648 875 q 526 841 532 850 m 393 875 l 393 865 l 397 865 q 404 871 404 865 l 397 875 l 393 875 m 498 848 l 505 844 q 515 851 505 851 l 515 861 l 512 861 q 498 848 507 861 m 478 858 q 471 844 478 852 l 471 841 l 475 841 q 488 854 480 841 l 488 858 l 478 858 m 349 824 l 349 821 l 356 821 q 363 827 363 821 l 363 831 l 356 831 q 349 824 349 829 m 448 831 q 441 814 448 823 l 441 810 l 451 810 l 454 827 l 454 831 l 448 831 m 505 817 l 509 817 q 515 824 515 817 l 512 824 q 505 817 505 823 m 322 810 l 322 797 q 329 790 323 790 l 332 797 l 332 810 l 322 810 m 804 746 l 800 739 l 807 736 q 814 743 814 736 q 804 746 810 743 m 285 722 l 288 722 q 302 736 294 722 l 302 743 q 285 722 297 743 m 326 729 l 332 726 l 339 736 l 339 739 q 326 729 326 734 m 200 617 q 203 604 203 611 l 207 604 l 207 614 l 200 617 m 207 590 q 186 566 207 576 l 190 559 l 190 556 l 186 549 l 190 549 q 210 580 210 562 l 210 590 l 207 590 m 112 536 l 105 522 l 112 522 q 119 529 119 522 q 112 536 119 536 m 210 512 q 180 515 198 512 q 170 512 173 512 q 139 515 151 515 l 129 502 l 129 495 l 132 495 l 142 502 q 261 519 220 502 l 261 522 l 254 532 q 210 512 224 512 m 102 512 q 95 498 102 507 l 112 498 q 119 505 119 498 l 119 509 l 102 512 m 64 475 l 71 471 l 71 481 q 68 485 71 485 q 81 502 73 502 l 81 509 l 78 509 q 64 475 68 509 m 695 495 q 702 488 696 488 l 705 488 q 709 498 705 492 l 702 502 q 695 495 695 500 m 68 468 l 68 465 q 85 420 69 444 q 81 407 81 414 l 81 404 q 92 414 86 404 l 92 424 q 71 468 78 436 l 68 468 m 641 471 l 668 471 q 743 434 692 450 l 739 427 q 749 414 745 414 q 783 431 762 414 q 807 424 797 424 q 851 437 837 437 q 878 427 870 427 q 939 434 886 427 q 963 383 963 434 q 922 285 963 325 l 922 268 q 926 234 926 249 q 888 231 903 231 l 865 231 q 844 237 855 231 q 824 231 833 231 l 824 227 q 821 153 824 203 l 824 153 l 821 146 l 821 142 l 824 125 l 817 122 q 770 156 794 131 q 675 170 675 165 q 637 163 656 163 q 600 217 625 191 q 556 261 600 229 q 512 298 556 269 q 576 349 519 311 q 600 390 583 390 q 617 431 617 390 q 634 468 624 435 l 641 471 m 956 468 l 963 468 l 963 458 q 956 451 963 451 l 949 451 q 943 458 943 451 l 956 468 m 85 393 l 85 376 q 34 349 85 364 q 41 342 35 342 l 44 342 q 95 370 57 342 l 92 393 l 85 393 m 695 390 l 695 376 l 699 376 q 705 383 705 376 q 699 390 705 390 l 695 390 m 193 366 l 163 373 l 159 366 q 190 353 190 366 q 200 342 190 348 l 207 342 q 244 366 207 362 q 248 370 244 370 q 251 359 251 363 l 254 359 q 261 366 261 359 q 305 346 283 346 l 309 346 q 315 353 315 346 q 264 373 282 353 l 261 373 l 271 387 l 268 387 q 193 366 209 366 m 98 366 l 92 356 l 105 353 l 102 329 l 109 329 q 122 353 109 344 l 122 356 l 115 353 l 112 353 l 98 366 m 329 349 q 383 329 372 349 q 410 302 410 311 q 417 319 417 302 q 366 353 405 319 q 339 356 353 356 l 336 356 q 329 349 329 355 m 960 315 l 963 309 l 963 241 q 953 231 963 236 l 946 231 q 929 271 942 231 q 960 315 938 297 m 105 295 l 105 292 l 112 292 l 112 302 q 105 295 105 300 m 220 302 l 220 292 l 227 288 l 227 292 q 224 302 224 298 l 220 302 m 31 288 l 31 285 l 34 285 q 44 288 41 288 l 44 295 l 37 295 q 31 288 31 294 m 495 288 l 498 288 q 556 237 524 279 q 590 186 570 237 q 522 156 573 166 q 515 149 522 149 l 512 156 l 512 183 q 515 214 512 195 q 512 231 512 219 l 420 231 q 414 237 414 231 l 414 241 q 485 278 452 278 q 495 288 485 283 m 241 264 l 241 244 l 248 244 l 248 264 l 241 264 m 902 264 l 902 254 l 912 254 l 912 264 l 902 264 m 95 244 l 95 241 l 98 241 q 109 258 106 241 q 95 244 103 258 m 770 186 q 763 173 770 181 l 770 170 q 780 173 777 173 l 780 180 q 773 186 780 186 l 770 186 m 607 183 l 610 183 q 644 129 619 129 q 654 119 644 126 q 682 146 662 119 l 709 146 q 719 115 715 146 l 726 115 l 726 136 q 732 142 727 142 q 766 136 766 140 q 790 109 772 124 q 787 98 787 102 l 797 98 l 797 105 q 824 78 824 105 l 824 61 q 814 0 824 0 l 810 0 q 790 7 801 0 l 770 0 q 766 14 766 6 l 763 14 l 743 0 l 631 0 q 597 17 610 17 q 593 3 593 11 l 587 3 l 563 0 q 553 10 563 5 q 519 0 545 4 q 512 7 519 7 q 515 10 512 10 l 512 51 l 512 71 q 519 119 512 83 q 515 129 515 125 q 553 156 545 156 l 570 153 q 607 183 581 154 m 644 149 l 661 149 q 668 142 668 148 q 661 125 661 132 l 654 125 q 637 139 637 134 l 637 142 q 644 149 639 149 m 553 125 l 553 115 l 556 115 q 559 125 556 119 l 553 125 m 682 119 l 695 119 l 695 125 l 688 125 q 682 119 682 124 m 621 105 l 614 105 l 593 102 q 580 105 587 105 l 580 98 l 614 95 q 617 98 614 98 q 627 88 617 94 l 631 88 q 648 102 646 102 q 644 119 644 107 l 641 119 q 621 105 621 119 m 658 112 l 658 102 l 668 102 l 668 112 l 658 112 m 678 98 q 671 81 678 90 l 671 78 l 682 78 q 685 98 682 81 l 678 98 m 675 68 l 675 58 l 688 58 l 688 61 q 682 68 688 68 l 675 68 m 729 27 q 739 20 729 20 q 756 58 749 20 q 753 68 753 64 q 732 27 745 68 l 729 27 m 648 27 l 648 20 q 658 17 651 20 l 665 27 l 665 31 l 648 27 z "},"5":{"ha":949,"x_min":0,"x_max":963,"o":"m 153 1136 l 153 1133 l 159 1136 l 170 1136 q 180 1133 180 1136 l 197 1136 l 200 1136 q 244 1133 222 1136 l 264 1136 q 295 1095 272 1136 l 298 1095 l 295 1078 l 295 1072 q 319 1041 319 1044 l 319 1034 q 197 990 218 990 q 125 970 130 975 l 153 970 q 332 1031 248 994 q 424 936 338 1002 l 424 909 q 397 865 424 865 l 373 865 q 342 709 342 720 l 346 709 q 427 739 412 739 q 444 719 431 739 l 444 715 q 387 631 436 711 q 281 685 376 631 l 278 685 l 278 678 q 370 627 290 678 q 387 617 387 627 q 339 543 379 587 l 342 536 l 342 529 q 332 488 342 500 q 41 498 88 498 q 34 505 41 505 q 54 607 44 571 l 51 607 q 85 749 75 749 l 132 760 q 183 726 144 760 q 217 719 199 726 l 217 722 q 176 743 217 732 l 163 760 q 166 787 166 779 l 153 766 q 125 773 150 766 l 85 760 q 81 770 81 766 q 153 1136 138 1136 m 315 1136 l 336 1136 q 342 1129 342 1135 q 319 1119 326 1119 l 309 1133 l 315 1136 m 410 1136 l 454 1136 q 471 1133 466 1136 l 492 1136 l 587 1136 q 593 1129 593 1135 l 593 1126 l 590 1119 q 651 1136 609 1136 l 675 1136 q 678 1133 678 1136 l 685 1136 l 688 1136 l 688 1133 q 678 1126 688 1126 l 678 1116 q 702 1133 696 1116 q 715 1136 708 1136 l 746 1136 l 749 1122 l 753 1122 q 773 1136 753 1136 l 780 1136 q 810 1133 798 1136 q 844 1136 828 1136 l 858 1136 q 868 1126 863 1136 l 868 1112 q 861 1105 868 1105 l 841 1116 q 810 1112 823 1112 l 810 1105 q 817 1099 812 1099 q 841 1105 841 1099 q 868 1078 868 1097 l 868 1075 q 865 1061 868 1067 q 868 1048 868 1055 l 868 1038 q 858 1021 868 1021 l 858 1014 q 868 1007 868 1014 l 868 963 q 854 953 868 953 q 844 956 848 956 l 844 949 q 868 936 868 947 l 868 875 q 858 865 868 870 l 821 865 q 787 916 804 875 q 790 926 790 922 q 783 956 790 931 q 787 960 787 956 q 797 956 790 960 q 851 990 851 963 q 854 1000 854 990 l 854 1004 q 844 1014 844 1004 l 838 1014 l 841 994 q 793 970 829 970 l 783 970 l 749 973 l 749 970 l 743 973 l 715 973 q 654 943 668 973 q 604 916 637 916 l 604 912 q 570 865 604 865 l 563 865 q 549 868 549 865 l 526 865 l 444 865 l 444 868 q 481 919 444 919 q 498 926 498 919 q 509 922 505 922 l 526 932 l 529 932 l 539 926 q 576 939 576 935 q 543 949 576 947 q 451 926 519 933 q 427 973 451 959 l 420 970 q 417 987 420 987 l 400 987 q 359 1048 375 1029 q 322 1095 322 1074 q 359 1126 322 1100 l 359 1133 q 410 1136 393 1136 m 393 1109 l 393 1102 l 400 1102 q 407 1109 407 1102 q 404 1112 404 1109 q 393 1109 397 1109 m 702 1082 q 705 1072 702 1078 q 699 1048 705 1065 q 712 1027 707 1027 q 715 1031 712 1031 q 709 1075 712 1038 q 746 1088 743 1088 l 746 1095 q 739 1102 746 1102 l 702 1082 m 780 1092 l 749 1092 l 749 1088 q 756 1082 751 1082 l 763 1082 q 783 1088 772 1082 q 814 1078 793 1088 l 817 1085 l 817 1088 q 797 1095 797 1088 l 780 1092 m 563 1058 q 526 1004 526 1013 l 529 1004 q 566 1048 560 1048 l 566 1058 l 563 1058 m 726 1017 l 726 1014 q 760 983 735 1014 l 760 987 q 729 1017 760 1006 l 726 1017 m 763 960 q 780 895 777 960 q 797 878 797 880 l 797 871 q 790 865 797 865 l 712 865 q 699 868 705 865 q 685 865 692 865 l 621 865 q 614 871 614 865 l 614 875 q 709 956 696 956 q 763 960 743 960 m 583 932 l 583 922 l 587 922 q 593 929 593 922 l 587 932 l 583 932 m 580 760 q 875 634 766 760 l 875 631 l 793 580 l 787 580 l 780 583 q 773 570 780 578 l 773 546 q 743 505 773 517 q 678 471 720 505 q 634 454 667 471 q 583 519 627 454 q 458 553 541 553 l 414 580 q 420 604 420 593 l 417 604 q 465 678 419 624 q 485 709 465 688 l 485 712 l 461 739 l 461 743 q 580 760 461 755 m 237 712 q 278 692 237 707 q 281 688 278 688 l 285 688 q 237 712 276 712 m 787 668 l 793 665 l 797 665 q 807 675 802 665 l 807 678 l 797 678 q 787 668 792 678 m 882 610 l 888 610 q 895 580 888 592 q 875 522 878 554 q 865 515 865 522 l 865 512 l 871 502 l 871 498 l 807 498 q 777 522 777 513 q 824 583 777 570 q 882 610 873 610 m 899 604 q 909 587 906 604 l 905 587 q 899 593 899 587 l 899 604 m 916 556 l 926 556 q 956 451 956 483 l 953 444 q 963 410 963 427 q 960 407 963 407 l 963 390 l 963 353 q 953 319 963 336 l 960 315 q 936 254 947 254 l 919 254 l 922 271 l 899 268 q 892 281 892 276 l 882 281 l 878 268 q 885 248 885 257 l 882 241 l 885 241 q 895 244 892 244 q 912 237 906 237 q 882 197 912 220 q 895 183 882 191 q 919 200 895 192 l 922 200 l 922 197 q 899 159 915 179 l 892 163 l 885 163 l 878 159 l 882 142 l 882 139 q 854 105 876 139 q 661 10 741 10 l 661 24 l 654 24 l 654 7 q 583 -10 652 -5 l 566 -7 l 563 -14 q 461 34 467 25 l 461 51 q 451 41 456 51 l 451 24 q 465 0 465 9 l 468 0 q 475 20 468 20 q 522 -14 522 -11 l 522 -17 l 505 -20 q 481 -17 495 -20 l 451 -20 q 373 -7 373 -18 q 434 85 373 64 q 451 88 439 88 q 465 58 456 58 l 465 61 q 461 98 461 84 q 465 109 465 105 q 410 85 437 87 q 363 -7 363 63 l 356 -10 q 136 85 252 -1 l 105 119 q 149 159 105 121 q 180 248 159 181 l 197 251 l 220 248 q 278 302 248 248 q 295 305 283 305 l 295 309 l 288 319 l 288 322 q 329 241 329 298 q 390 173 372 222 l 407 173 q 410 176 410 173 q 468 112 468 155 l 475 112 l 475 122 l 488 122 l 488 102 q 495 95 490 95 q 576 146 495 128 q 621 173 602 173 l 631 173 q 627 115 627 127 l 637 109 l 637 115 q 634 142 637 124 q 641 163 637 163 l 631 220 q 641 227 631 227 l 631 241 l 631 271 q 668 292 650 292 l 668 295 l 654 295 q 634 288 644 288 l 627 288 l 627 292 q 648 359 627 359 l 651 359 q 634 383 634 370 l 634 410 q 682 431 634 417 q 732 461 689 431 q 797 478 785 478 q 810 465 810 475 l 824 465 q 827 468 827 465 l 834 465 q 871 468 857 468 l 875 468 l 878 451 l 882 451 l 882 461 q 878 465 878 461 q 885 471 885 465 q 895 468 892 468 l 899 468 l 899 471 q 885 485 885 471 q 899 505 885 488 q 895 519 895 517 q 916 556 908 556 m 400 559 l 407 559 q 427 543 427 548 q 383 522 407 538 l 380 522 q 373 529 373 522 l 373 532 q 400 559 373 536 m 760 465 l 760 458 l 770 458 l 770 465 l 760 465 m 790 454 q 797 448 791 448 l 800 454 l 800 461 l 797 461 q 790 454 790 460 m 719 458 l 719 448 l 726 448 l 726 458 l 719 458 m 810 441 l 817 437 l 827 444 l 844 441 l 844 448 q 838 454 844 454 l 834 454 q 810 441 816 454 m 715 424 l 705 410 l 705 407 l 712 407 q 722 417 717 407 q 715 424 722 424 m 763 410 l 773 404 q 780 420 780 414 l 773 420 q 763 410 768 420 m 678 404 q 665 383 665 387 l 671 380 q 685 397 671 387 q 678 404 685 404 m 719 400 l 715 393 l 726 393 q 719 400 726 400 m 319 346 q 332 336 332 341 l 332 329 l 326 329 q 312 342 320 329 l 319 346 m 715 336 l 719 329 l 719 326 l 709 312 l 712 312 q 732 322 725 322 l 732 332 q 726 339 732 339 l 722 339 l 715 336 m 746 326 q 763 336 763 330 l 763 339 q 746 326 746 330 m 251 339 l 254 332 l 254 329 q 207 298 228 298 q 170 302 177 302 q 142 298 159 298 q 122 326 142 302 q 251 339 138 329 m 88 322 q 129 271 129 297 l 129 244 q 146 271 134 244 q 159 275 152 275 l 163 268 l 119 183 q 85 156 115 183 q 0 312 23 220 q 88 322 20 319 m 682 305 l 699 305 q 692 312 699 312 l 688 312 q 682 305 682 311 m 336 312 l 339 312 q 441 244 382 262 q 600 305 562 244 l 607 305 q 610 248 610 259 l 607 234 q 621 214 614 234 q 563 180 621 207 q 485 153 555 172 q 461 186 480 153 q 424 214 455 186 q 404 220 413 220 q 393 210 404 216 l 390 210 q 383 220 383 210 l 387 227 q 346 271 382 243 q 336 285 339 285 q 339 295 339 292 l 336 312 m 702 275 q 712 264 702 270 l 729 278 l 743 278 q 749 268 743 268 l 753 268 q 749 281 753 275 q 753 295 753 288 l 746 295 q 702 275 702 280 m 641 292 l 641 285 l 644 285 q 654 288 651 288 l 654 292 l 641 292 m 844 271 q 841 261 844 268 l 848 258 q 854 264 854 258 q 848 271 854 271 l 844 271 m 668 258 l 668 254 q 682 258 675 254 q 692 237 692 258 l 695 237 q 712 261 703 239 l 695 261 q 688 268 695 268 q 668 258 668 264 m 919 261 l 922 261 q 929 254 929 260 l 922 251 l 919 251 q 912 258 912 251 l 919 261 m 804 237 l 804 227 l 814 227 l 814 237 l 804 237 m 848 220 l 848 210 l 854 210 l 854 220 l 848 220 m 515 217 l 515 207 l 522 207 l 522 217 l 515 217 m 861 170 l 861 166 q 868 173 868 166 l 868 176 q 861 170 861 175 m 631 125 q 648 98 636 106 l 651 105 q 634 125 638 125 l 631 125 m 492 92 l 498 88 q 509 112 502 102 l 509 115 l 505 115 q 492 92 498 115 m 668 88 l 675 71 l 675 61 q 688 71 688 66 l 688 75 q 671 88 688 79 l 668 88 m 644 75 l 644 68 q 651 61 646 61 l 651 68 q 644 75 651 75 z "},"6":{"ha":949,"x_min":-14,"x_max":977,"o":"m 458 1149 l 475 1149 q 505 1143 484 1149 l 546 1146 q 573 1136 554 1146 l 590 1139 q 644 1122 615 1138 q 654 1126 648 1122 q 858 997 795 1088 q 865 943 858 985 l 871 943 l 868 949 l 868 963 q 875 970 869 970 q 919 858 919 908 q 892 851 907 851 l 882 851 q 868 854 874 851 q 844 848 851 848 q 831 851 838 851 l 831 858 q 861 885 831 861 q 865 882 861 882 q 895 916 887 902 q 885 919 888 919 l 888 936 l 882 939 l 875 939 l 875 932 q 882 926 876 926 q 821 861 882 908 q 793 844 821 849 l 787 848 q 749 844 764 844 l 743 844 q 712 865 712 844 l 705 865 q 678 878 678 865 q 685 895 685 889 q 675 932 678 895 q 665 939 665 932 l 665 943 q 688 953 665 949 l 688 960 q 654 953 663 956 q 621 1007 654 977 l 621 1014 q 641 1041 624 1014 l 641 1044 l 634 1044 l 610 1041 q 593 1082 595 1061 l 587 1082 l 587 1078 q 610 1004 587 1067 q 637 970 610 984 q 668 888 668 902 q 651 865 668 885 q 675 848 675 853 l 675 844 q 668 838 675 838 l 648 838 l 627 834 q 614 854 614 838 l 614 861 l 631 858 q 648 868 648 861 q 631 875 640 868 l 634 882 l 631 899 l 627 899 q 614 865 621 865 q 590 892 599 869 q 610 902 603 902 l 610 909 l 587 895 l 580 895 q 495 922 547 922 l 481 922 q 383 882 383 909 q 329 777 338 836 q 309 726 322 741 l 309 702 l 295 661 q 302 648 298 648 q 234 587 294 587 q 176 566 193 566 q 132 597 165 566 l 119 597 l 119 587 q 166 556 132 587 q 197 559 184 559 q 210 543 210 553 q 203 512 203 521 l 203 509 q 217 454 209 494 q 220 451 220 454 q 190 404 205 404 l 190 397 q 241 353 207 397 q 298 264 263 350 q 292 231 292 249 q 295 197 295 201 q 231 115 253 139 l 231 112 l 217 112 q 176 98 180 98 l 173 98 q 109 170 109 149 q 37 288 81 173 q 47 292 44 292 l 47 295 q 24 322 24 295 l 10 366 q 14 380 14 372 q -3 454 2 380 l 3 458 l 7 458 l 14 454 l 17 461 q -10 492 -10 461 l -7 509 q -14 570 -14 543 l -14 597 q 31 644 10 616 l 47 648 l 58 648 q 98 600 65 648 l 109 593 l 112 593 l 112 600 q 68 648 77 648 l 68 651 l 71 675 l 64 678 q 58 665 64 673 q 20 692 50 665 l 20 688 l 47 658 q 41 651 41 656 l 34 654 l 20 654 q -3 621 20 637 l -10 621 l -10 648 q -3 685 -10 652 q -7 688 -3 688 q 3 702 -5 702 l 0 719 q 17 783 9 783 l 27 777 l 41 777 l 41 783 q 17 790 17 783 q 37 821 17 821 l 41 821 l 27 834 q 136 1010 66 941 l 153 1007 q 146 1024 146 1018 q 444 1146 277 1146 q 458 1149 444 1149 m 593 1133 l 593 1126 q 600 1095 593 1118 l 607 1095 q 597 1133 607 1133 l 593 1133 m 465 1072 l 465 1065 l 468 1065 q 485 1078 485 1074 q 478 1085 485 1085 q 465 1072 473 1085 m 658 1051 l 658 1048 l 665 1048 q 675 1058 669 1048 l 675 1061 l 668 1061 q 658 1051 663 1061 m 712 1058 l 709 1051 l 709 1048 q 715 1041 710 1041 l 719 1048 l 719 1051 q 712 1058 719 1058 m 739 1055 l 739 1048 l 753 1048 l 753 1055 l 739 1055 m 685 1034 l 685 1027 l 702 1031 l 702 1034 q 695 1041 702 1041 l 692 1041 q 685 1034 685 1040 m 773 1031 l 770 1024 l 770 1021 l 790 1021 l 790 1027 q 773 1031 779 1027 m 288 1014 l 288 1010 l 305 1010 q 312 1017 312 1010 l 305 1017 l 288 1014 m 234 987 q 237 983 237 987 l 264 1000 l 281 1000 l 281 1007 q 234 987 234 1002 m 844 1000 l 844 994 l 848 994 q 858 1004 852 994 l 851 1007 q 844 1000 844 1006 m 475 987 l 475 983 l 481 983 q 492 994 486 983 l 492 1000 l 488 1000 q 475 987 483 1000 m 193 973 l 200 970 l 217 973 q 207 983 217 978 l 203 983 q 193 973 199 983 m 529 966 l 526 960 l 526 953 l 529 953 q 536 960 536 953 q 529 966 536 966 m 631 956 q 621 939 631 950 l 621 929 l 617 929 l 617 922 q 637 902 632 922 l 641 902 l 641 916 q 634 943 641 943 l 637 949 l 637 956 l 631 956 m 180 943 l 180 932 l 183 932 q 190 939 190 932 l 190 943 l 180 943 m 726 936 l 732 932 l 736 932 l 736 943 l 732 943 q 726 936 726 941 m 770 926 l 793 926 q 800 932 800 926 l 800 936 l 780 936 q 770 926 775 936 m 159 929 q 142 885 159 908 l 146 885 q 183 922 149 885 l 183 926 l 166 922 l 166 929 l 159 929 m 705 905 l 705 899 q 715 892 705 892 q 739 909 737 901 q 722 922 739 913 q 705 905 718 922 m 332 878 l 329 871 q 353 868 349 871 l 356 875 l 332 878 m 783 878 l 783 871 l 793 871 q 787 878 793 878 l 783 878 m 756 865 l 766 858 l 770 865 q 763 871 770 871 q 756 865 756 870 m 712 858 l 719 848 l 719 844 l 699 844 l 699 854 q 712 858 701 854 m 190 834 l 190 831 q 217 838 202 838 l 227 838 l 227 844 l 200 844 q 190 834 195 844 m 119 783 q 125 777 120 777 q 180 831 145 831 l 180 838 q 119 783 139 838 m 244 834 l 244 827 q 271 821 266 821 q 244 834 271 827 m 302 834 l 278 821 l 281 821 q 309 831 309 823 l 302 834 m 68 814 l 68 807 l 78 807 l 78 814 l 68 814 m 71 773 l 71 770 q 81 763 81 770 l 81 749 l 71 736 l 71 722 q 112 763 99 763 q 105 770 112 770 l 102 770 q 95 760 95 770 l 85 760 q 75 773 85 773 l 71 773 m 573 773 q 692 760 637 773 l 692 753 q 668 726 692 739 q 665 712 668 718 q 682 637 671 669 q 651 617 682 633 q 566 583 651 604 l 549 587 q 502 573 549 580 q 431 614 450 614 q 420 610 427 614 q 353 621 374 614 q 339 614 339 618 q 319 627 319 622 l 319 641 q 326 658 319 658 q 315 675 319 675 q 329 702 322 702 q 339 699 336 699 q 549 770 452 770 q 553 766 553 770 q 573 773 564 773 m 715 729 l 719 729 q 817 682 746 729 l 817 678 l 814 661 l 821 661 l 821 675 l 824 675 q 946 495 914 607 q 960 437 956 463 q 865 404 937 404 q 824 519 824 459 q 807 590 807 543 q 749 621 782 590 q 709 610 719 610 q 688 688 698 610 l 685 688 q 715 729 715 726 m 332 726 l 336 719 l 329 715 l 326 715 l 326 719 q 332 726 327 726 m 71 705 l 71 692 q 78 699 78 692 l 78 705 l 71 705 m 804 651 q 800 641 804 648 l 807 641 q 810 651 807 644 l 804 651 m 692 600 l 709 597 l 743 600 q 787 570 758 570 q 810 488 787 543 q 807 458 807 470 q 827 414 814 458 q 851 387 847 387 q 844 359 844 369 q 848 332 848 335 q 844 309 844 319 q 892 281 892 289 q 871 241 871 263 q 851 210 869 210 l 851 203 l 861 203 l 871 210 l 875 210 q 888 176 884 210 q 790 64 861 101 q 753 78 762 78 l 749 78 q 736 75 742 78 l 712 81 l 627 58 q 495 173 609 59 l 481 173 q 454 170 467 173 q 410 197 410 170 l 407 197 l 397 190 q 424 156 404 167 l 454 156 l 488 159 q 529 119 488 148 l 529 112 q 512 102 512 109 l 519 98 l 532 109 l 536 109 q 617 44 536 86 q 624 41 617 41 q 705 61 655 51 q 736 58 718 61 q 756 64 749 64 q 770 54 770 60 l 770 51 q 519 0 650 0 l 505 0 q 488 47 493 0 q 505 58 488 58 l 505 64 l 502 64 q 478 41 478 56 q 488 14 488 39 l 488 7 l 485 0 q 376 17 394 7 l 376 14 q 366 17 370 17 l 366 24 l 370 24 l 383 20 q 427 37 399 31 l 427 41 q 420 47 427 47 l 417 47 q 376 27 404 35 q 346 37 367 27 q 339 31 346 31 l 315 31 q 281 47 307 37 l 281 54 l 271 47 q 224 75 271 50 l 224 78 q 244 105 244 86 q 278 129 248 116 q 288 102 288 115 q 281 95 281 100 l 281 88 l 285 88 q 295 115 293 88 q 288 122 288 115 l 288 136 q 332 197 288 153 q 322 241 322 213 l 329 264 l 329 268 q 234 397 329 300 q 231 410 231 403 l 231 414 q 258 461 249 429 l 258 465 l 254 465 q 248 454 254 454 q 234 478 242 454 l 237 485 l 237 498 q 231 512 231 507 q 237 539 231 522 q 231 556 231 550 q 264 580 241 580 l 268 580 q 281 576 275 580 l 309 593 l 312 593 q 339 583 326 593 l 356 587 l 404 583 l 410 587 q 502 539 454 583 q 346 407 373 539 l 346 380 q 434 248 346 290 q 451 237 440 248 l 509 237 q 634 349 606 237 q 654 370 634 357 l 654 376 l 644 376 q 637 366 644 366 l 634 373 l 634 414 q 556 526 634 481 q 515 536 523 536 l 515 539 q 553 556 515 547 l 576 549 l 651 576 q 692 597 667 593 l 692 600 m 726 553 l 726 546 l 729 546 q 739 549 736 549 l 739 556 q 726 553 733 553 m 37 451 l 37 441 l 44 441 l 44 444 q 37 451 44 451 m 88 424 l 88 414 l 112 414 l 119 410 l 119 417 q 88 424 96 420 m 285 414 l 285 410 l 302 407 l 305 407 l 305 414 l 298 414 q 295 410 295 414 l 288 414 l 285 414 m 173 404 l 190 404 q 183 410 190 410 l 180 410 q 173 404 173 409 m 692 400 l 692 393 q 712 404 712 397 l 712 407 l 705 407 q 692 400 697 400 m 973 397 l 977 373 q 932 203 955 203 q 926 193 932 193 q 916 207 926 207 l 916 224 l 909 234 q 932 275 909 245 q 892 305 932 295 l 878 319 l 878 349 l 905 387 l 929 387 q 973 397 967 397 m 695 363 l 695 359 l 705 359 q 814 393 814 381 l 810 393 l 695 363 m 44 380 q 58 366 44 374 l 61 373 q 54 380 61 380 l 44 380 m 807 373 l 807 370 q 814 376 814 370 l 814 380 q 807 373 807 378 m 665 366 q 668 363 668 366 q 682 373 682 368 l 682 376 l 675 376 q 665 366 670 376 m 58 363 l 58 356 l 61 339 l 64 339 l 64 356 q 58 363 64 363 m 766 356 l 763 349 l 770 346 l 773 353 l 766 356 m 614 227 l 610 220 l 617 217 l 621 224 l 614 227 m 336 200 l 336 197 q 346 183 341 183 l 370 183 q 383 180 377 183 q 393 183 390 183 l 393 193 q 383 197 390 193 q 356 193 365 193 q 336 200 350 193 m 105 197 l 105 190 q 119 183 111 190 l 122 183 l 122 186 q 105 197 122 194 m 356 170 l 356 156 l 363 156 l 363 159 q 359 170 359 166 l 356 170 m 366 136 q 370 122 370 130 l 373 122 l 373 132 l 366 136 m 370 109 q 353 68 370 100 l 353 64 q 376 92 366 72 l 376 109 l 370 109 m 227 102 l 231 102 l 231 95 q 210 81 231 90 q 197 92 197 87 l 197 95 l 200 95 l 217 92 q 227 102 217 96 m 512 75 l 512 71 l 536 71 q 543 78 543 71 l 536 78 l 512 75 z "},"7":{"ha":949,"x_min":34,"x_max":929,"o":"m 44 1112 l 58 1112 q 92 1105 64 1112 q 112 1112 102 1112 l 217 1112 q 220 1102 217 1102 q 288 1112 255 1112 q 309 1109 304 1112 q 363 1112 343 1112 l 485 1112 q 488 1109 488 1112 l 495 1112 l 526 1112 l 536 1105 q 532 1095 532 1099 l 532 1092 l 536 1092 q 543 1102 536 1102 q 576 1034 555 1089 l 573 1010 l 576 1010 q 583 1017 583 1010 l 583 1048 q 553 1109 564 1067 l 559 1112 l 563 1112 q 590 1109 587 1112 q 627 1112 613 1112 l 654 1112 q 671 1102 671 1112 l 675 1102 l 675 1109 l 688 1109 q 715 1112 703 1109 q 743 1109 728 1109 l 760 1112 l 783 1095 l 783 1112 l 919 1112 q 929 1102 924 1112 l 929 990 q 919 983 929 983 l 919 973 l 926 963 l 926 960 q 919 953 926 953 l 902 956 q 871 953 884 953 l 871 949 l 888 946 q 909 949 906 949 q 929 936 916 947 q 926 932 929 932 q 929 882 929 899 l 929 875 q 848 790 929 858 q 756 661 770 688 l 753 661 l 736 665 q 746 648 746 654 q 631 400 689 555 q 607 393 614 393 q 573 454 607 431 l 566 454 l 559 451 q 532 498 538 481 q 481 546 513 520 l 478 563 q 519 587 478 581 l 515 593 l 515 600 q 570 644 570 625 l 583 644 l 600 648 l 600 651 q 573 661 573 651 q 621 722 578 693 q 624 736 624 728 q 614 756 624 744 l 614 763 q 658 783 614 769 q 661 787 658 787 q 702 783 696 783 l 756 800 q 763 793 758 793 l 770 793 q 773 797 773 793 l 780 793 l 797 793 l 821 797 l 821 804 l 800 804 q 793 821 800 821 l 793 804 l 787 800 q 736 807 744 807 q 648 787 725 798 l 624 777 l 614 777 q 593 844 606 777 q 590 848 590 844 l 590 861 q 600 865 593 861 q 543 966 543 950 l 570 1004 l 570 1007 l 559 1007 q 532 956 552 1004 q 576 885 547 910 q 580 868 576 873 q 566 841 571 841 l 563 841 q 546 848 546 841 q 549 858 549 854 l 546 858 q 515 841 528 841 l 444 841 q 441 844 441 841 l 434 841 l 404 841 q 376 844 380 841 q 339 841 353 841 l 254 841 q 248 848 248 841 q 305 905 256 905 q 336 919 305 909 q 363 960 336 930 l 363 963 l 359 963 q 326 919 350 957 l 288 909 l 281 909 q 278 912 278 909 q 254 895 275 912 l 251 895 q 153 949 176 914 q 146 963 150 963 l 149 970 l 149 980 l 115 1027 l 119 1034 q 115 1044 115 1041 q 119 1055 119 1051 q 102 1065 102 1059 l 102 1075 l 105 1099 l 98 1102 l 92 1085 l 98 1044 q 102 1048 102 1044 q 112 1044 109 1044 l 112 1038 q 81 1010 81 1015 l 88 1010 q 109 1017 99 1017 q 142 936 123 1017 q 237 882 169 907 l 237 871 q 220 841 231 841 l 112 841 q 75 844 98 841 q 47 841 71 841 l 44 841 q 34 851 39 841 l 34 919 q 37 970 34 936 q 34 973 34 970 l 41 977 q 81 943 58 977 l 88 939 l 92 939 l 92 943 q 58 990 66 966 l 41 987 q 34 1007 34 998 l 34 1102 q 44 1112 34 1107 m 773 1092 l 773 1088 q 800 1048 783 1080 l 800 1051 q 777 1092 800 1071 l 773 1092 m 461 1085 q 451 1072 461 1080 l 468 1068 l 471 1085 l 461 1085 m 858 1082 l 858 1078 q 865 1072 859 1072 l 868 1072 l 868 1082 l 858 1082 m 278 1061 l 275 1038 l 281 1034 q 285 1061 281 1048 l 278 1061 m 356 1051 l 356 1044 l 359 1044 q 366 1051 366 1044 l 356 1051 m 427 1014 l 427 1010 q 448 1048 439 1010 l 427 1014 m 393 1034 q 383 1027 393 1027 l 383 1024 q 397 1014 389 1024 l 400 1031 l 393 1034 m 607 1034 l 607 1031 l 610 1024 q 600 1021 604 1021 l 600 1014 l 614 1014 l 614 1034 l 607 1034 m 800 1034 l 800 1027 q 817 1010 800 1023 l 817 1017 q 804 1034 810 1033 l 800 1034 m 278 1027 l 278 1010 l 281 1010 l 285 1024 l 278 1027 m 47 1007 l 47 1004 l 51 1004 q 58 1010 58 1004 l 58 1014 l 54 1014 q 47 1007 47 1013 m 393 1010 l 393 997 l 410 1000 l 410 1007 q 400 1010 407 1007 q 397 1007 400 1007 q 393 1010 397 1010 m 519 1007 l 515 990 l 526 990 q 532 997 532 990 q 529 1007 529 1004 l 519 1007 m 261 990 l 244 994 q 271 980 244 989 l 278 980 l 278 997 l 275 997 q 261 990 267 990 m 373 994 q 359 977 373 989 q 376 990 376 980 l 376 994 l 373 994 m 410 977 l 410 973 l 420 973 q 427 980 427 973 l 427 983 l 417 983 q 410 977 410 982 m 634 973 q 631 963 634 970 l 637 960 q 644 966 644 960 l 644 973 l 634 973 m 838 932 l 841 932 l 854 949 l 851 949 q 838 932 844 948 m 610 939 l 610 932 l 627 932 l 627 939 q 621 943 621 939 q 610 939 614 939 m 766 922 l 777 922 l 777 929 l 773 929 q 766 922 766 928 m 98 919 l 98 912 l 112 912 q 105 919 112 919 l 98 919 m 793 882 l 787 885 q 766 861 779 885 l 743 861 l 743 854 l 770 854 q 777 844 777 854 l 780 844 l 777 861 l 777 868 q 817 902 801 868 l 814 902 q 793 882 796 893 m 617 892 q 590 865 605 865 l 590 861 q 597 854 591 854 l 600 854 q 634 885 616 879 l 685 871 q 736 878 732 878 q 729 885 736 885 l 712 885 q 685 875 696 875 q 675 888 680 888 l 658 885 q 617 892 634 892 m 312 854 l 312 851 l 319 851 q 326 858 326 851 l 319 861 q 312 854 312 860 m 566 814 q 593 736 587 764 q 566 709 593 732 q 546 671 566 701 q 495 614 546 631 q 461 590 485 590 q 431 644 445 596 q 566 814 489 730 m 654 753 l 654 749 q 661 743 656 743 q 685 760 685 754 l 678 763 q 654 753 658 753 m 780 746 l 793 746 l 793 753 l 787 753 q 780 746 780 751 m 756 736 l 753 729 l 753 726 l 756 726 q 763 732 763 726 l 756 736 m 699 678 l 699 671 l 702 671 q 709 678 709 671 l 699 678 m 420 607 l 424 607 q 451 566 427 607 l 454 566 l 451 549 l 451 539 q 475 515 469 515 l 475 505 q 353 458 393 468 l 329 458 l 329 461 q 407 604 363 535 q 420 607 413 607 m 529 573 q 546 570 541 573 l 549 576 l 543 580 l 536 580 q 529 573 529 578 m 488 559 l 495 556 l 498 563 l 498 570 q 488 559 494 570 m 461 502 q 553 417 524 421 q 559 397 559 406 l 559 373 q 549 332 549 341 l 549 312 l 556 302 l 546 241 q 553 231 553 241 q 522 102 538 102 q 387 180 437 136 l 370 176 q 312 210 346 210 q 254 241 303 241 l 251 241 q 231 231 238 231 l 231 234 q 315 448 286 448 q 461 502 389 462 m 600 383 l 614 383 q 597 319 597 330 l 593 319 q 583 336 587 319 q 600 383 591 383 m 319 258 q 315 248 319 254 l 322 244 l 322 258 l 319 258 m 281 217 q 339 183 300 217 q 393 159 359 183 q 434 136 408 159 q 522 85 443 136 q 543 71 543 78 q 498 3 543 56 q 488 -14 498 -14 l 217 -14 q 210 -3 210 -14 q 258 207 233 207 l 281 217 m 434 186 l 434 176 l 437 176 q 444 183 444 176 l 437 186 l 434 186 m 546 31 l 553 20 q 532 0 553 0 l 519 3 l 519 7 q 546 31 531 24 z "},"8":{"ha":949,"x_min":-20,"x_max":977,"o":"m 437 1149 l 444 1146 l 454 1146 l 475 1149 l 481 1146 q 492 1149 485 1146 q 590 1129 590 1145 l 587 1112 l 593 1112 q 607 1136 593 1134 q 736 1092 676 1119 l 736 1085 l 726 1072 l 726 1068 q 749 1082 749 1078 q 763 1068 760 1078 q 688 1027 715 1031 l 688 1031 q 668 1024 677 1024 l 671 1017 q 770 1061 707 1017 q 854 990 813 1047 q 895 885 895 926 q 865 865 865 869 q 854 844 865 857 l 861 841 l 865 841 q 882 871 865 863 l 899 871 l 902 854 q 899 824 902 842 q 902 821 899 821 q 831 658 902 734 q 766 614 821 648 q 787 580 766 593 q 797 590 797 580 l 800 590 q 858 526 858 574 l 865 526 l 865 529 l 861 546 l 865 546 q 909 492 886 531 l 909 481 l 905 481 q 885 502 885 481 l 878 502 l 878 492 l 875 475 l 885 475 l 902 471 q 892 461 902 469 l 875 465 q 831 420 861 465 l 810 407 q 773 414 806 407 l 763 414 q 702 359 734 372 q 637 349 695 353 q 583 505 618 364 q 570 536 583 536 q 522 566 557 536 q 481 556 492 556 q 461 634 471 556 l 458 634 q 492 692 492 673 q 556 719 533 692 q 573 722 568 719 l 570 729 q 590 766 590 758 l 593 766 l 614 753 l 644 760 l 644 770 l 631 770 q 624 763 624 768 q 600 780 600 774 q 648 831 627 817 q 651 827 648 827 q 682 861 673 848 q 671 865 675 865 l 675 882 l 668 885 l 661 885 l 661 878 q 668 871 663 871 q 607 807 668 854 l 607 797 l 597 797 l 597 814 q 502 926 597 892 l 502 929 l 485 926 l 434 926 q 407 953 430 926 l 407 960 q 427 987 410 960 l 427 990 l 420 990 l 397 987 q 380 1027 381 1006 l 373 1027 l 373 1024 q 397 949 373 1013 q 410 929 397 929 l 410 919 q 336 858 336 888 q 322 821 332 858 l 326 807 l 322 790 q 390 705 351 705 q 468 688 390 696 l 468 685 q 444 654 468 665 l 437 637 q 454 563 444 595 q 424 543 454 558 q 339 509 424 530 l 322 512 q 275 498 322 505 q 203 539 222 539 q 197 536 197 539 q 129 546 136 539 q 112 539 112 546 q 92 553 92 547 l 92 559 q 156 604 96 569 q 102 644 156 610 q 98 665 102 660 q 115 699 115 688 q 88 654 106 692 q 34 766 34 707 l 44 766 q 27 777 44 774 l 27 787 l 37 787 q 20 817 20 797 l 20 827 q 47 946 20 906 l 54 946 l 54 956 q 51 960 54 960 q 163 1075 51 989 q 234 1095 184 1087 q 244 1099 234 1099 l 254 1099 q 295 1088 263 1099 q 349 1109 314 1088 q 359 1105 356 1105 l 356 1088 l 356 1082 l 366 1082 l 366 1099 q 376 1105 366 1105 l 376 1112 q 359 1139 359 1112 q 420 1146 395 1146 l 420 1143 q 437 1149 437 1146 m 424 1126 l 424 1122 l 434 1122 l 434 1133 l 431 1133 q 424 1126 424 1131 m 339 1133 q 349 1129 346 1129 l 349 1126 q 302 1099 332 1099 q 278 1109 290 1109 l 268 1109 l 268 1116 q 339 1133 326 1133 m 393 1109 q 400 1095 400 1101 l 410 1095 q 400 1109 406 1109 l 393 1109 m 587 1078 l 587 1075 l 590 1075 q 600 1085 595 1075 l 600 1088 l 597 1088 q 587 1078 592 1088 m 380 1078 l 380 1072 q 387 1041 380 1063 l 393 1041 q 383 1078 393 1078 l 380 1078 m 610 1075 l 610 1065 q 631 1058 623 1065 l 631 1061 q 617 1075 631 1067 l 610 1075 m 688 1044 l 688 1041 q 699 1051 693 1041 l 699 1055 q 688 1044 694 1055 m 644 1034 l 644 1027 q 665 1010 652 1027 l 675 1024 q 644 1034 656 1034 m 251 1017 l 251 1010 l 254 1010 q 271 1024 271 1019 q 264 1031 271 1031 q 251 1017 259 1031 m 604 1024 l 604 1021 l 607 1021 q 614 1027 614 1021 l 614 1031 l 610 1031 q 604 1024 604 1029 m 444 997 l 444 994 l 451 994 q 461 1004 456 994 l 461 1007 l 454 1007 q 444 997 450 1007 m 498 1004 l 495 997 l 495 994 q 502 987 496 987 l 505 994 l 505 997 q 498 1004 505 1004 m 526 1000 l 526 994 l 539 994 l 539 1000 l 526 1000 m 471 980 l 471 973 l 488 977 l 488 980 q 481 987 488 987 l 478 987 q 471 980 471 985 m 651 980 q 644 973 651 973 q 665 888 658 956 l 671 888 l 668 895 l 668 902 q 678 926 668 913 l 678 929 l 668 929 l 668 943 q 671 946 668 946 l 668 953 l 668 960 q 682 977 668 962 l 675 980 l 668 977 l 651 980 m 559 977 l 556 970 l 556 966 l 576 966 l 576 973 q 559 977 565 973 m 75 960 l 75 956 l 92 956 q 98 963 98 956 l 92 963 l 75 960 m 631 946 l 631 939 l 634 939 q 644 949 639 939 l 637 953 q 631 946 631 951 m 261 932 l 261 929 l 268 929 q 278 939 273 929 l 278 946 l 275 946 q 261 932 269 946 m 315 912 l 312 905 l 312 899 l 315 899 q 322 905 322 899 q 315 912 322 912 m 773 902 l 773 895 l 777 895 q 783 902 783 895 l 773 902 m 190 844 l 190 827 q 207 807 202 807 l 207 814 l 197 827 l 197 844 l 190 844 m 871 831 l 871 804 l 865 793 l 865 787 l 871 787 q 878 814 871 790 l 878 831 l 871 831 m 119 824 l 115 817 q 139 814 135 817 l 142 821 l 119 824 m 248 777 l 248 773 l 254 773 q 319 787 271 787 l 322 787 l 322 793 q 248 777 276 793 m 210 780 q 214 753 214 762 q 203 749 207 749 l 203 739 l 207 739 q 224 766 216 739 q 217 787 217 766 q 210 780 210 785 m 88 780 l 64 766 l 68 766 q 95 777 95 768 l 88 780 m 671 760 l 678 756 q 685 763 685 756 l 678 766 q 671 760 671 765 m 702 749 l 702 746 q 709 739 703 739 l 715 739 q 729 749 715 749 l 729 753 l 712 753 q 702 749 705 749 m 675 743 l 675 732 l 688 732 q 678 743 688 737 l 675 743 m 159 739 q 163 729 163 732 l 166 729 q 173 736 173 729 l 173 739 l 159 739 m 699 719 l 695 702 l 732 692 l 732 695 q 699 719 716 715 m 739 688 l 766 688 l 766 692 q 760 699 766 699 q 739 688 739 696 m 641 692 l 641 685 l 644 685 q 651 692 651 685 l 641 692 m 607 651 q 614 644 608 644 q 617 654 614 654 l 614 661 l 614 665 q 627 675 614 673 l 627 682 l 621 682 q 607 651 607 677 m 600 607 l 607 607 q 614 631 607 623 l 614 637 q 600 607 604 637 m 688 631 q 695 624 690 624 l 699 631 l 688 631 m 749 621 l 739 607 l 746 604 q 756 607 753 607 l 756 614 q 749 621 756 621 m 590 597 q 587 587 590 593 l 593 587 q 597 597 593 590 l 590 597 m 722 539 l 729 536 l 746 553 q 739 559 746 559 q 722 539 729 557 m 478 546 l 495 543 l 529 546 q 573 515 545 515 l 576 492 l 576 488 l 570 488 q 478 512 541 512 q 336 427 371 512 q 329 376 329 395 l 329 349 q 427 241 329 275 q 465 234 441 234 l 485 234 q 610 292 578 234 q 631 336 626 336 l 637 332 q 631 305 631 315 q 634 278 634 281 q 631 254 631 264 q 678 227 678 235 q 658 186 658 209 q 637 156 655 156 l 637 149 l 648 149 l 658 156 l 661 156 q 675 122 671 156 q 621 24 675 115 q 587 7 621 10 q 539 24 544 24 l 536 24 q 522 20 528 24 l 498 27 q 420 7 425 7 l 420 3 q 312 92 378 15 q 281 119 304 92 l 268 119 q 241 115 254 119 q 197 142 197 115 l 193 142 l 183 136 q 210 102 191 113 l 241 102 l 275 105 q 315 64 275 94 l 315 58 q 298 47 298 55 l 305 44 l 319 54 l 322 54 q 359 14 322 40 l 359 10 l 356 10 q 329 24 329 10 l 305 24 q 302 20 302 24 q 142 88 235 30 q 102 122 119 98 q 119 142 114 142 q 109 186 109 159 l 115 210 l 115 214 q 20 342 115 246 q 17 356 17 349 l 17 359 q 44 407 35 374 l 44 410 l 41 410 q 34 400 41 400 q 20 424 28 400 q 24 434 24 431 q 20 461 24 437 q 95 539 39 515 l 98 539 q 125 529 113 539 l 142 532 l 190 529 l 197 532 q 292 485 229 532 l 298 485 q 339 502 327 502 l 363 495 l 437 522 q 478 543 454 538 l 478 546 m 814 481 l 810 475 l 810 468 l 814 468 q 821 475 821 468 q 814 481 821 481 m 953 461 q 977 342 977 412 q 834 81 977 184 l 817 85 l 817 81 q 821 71 821 75 q 675 17 738 26 l 675 20 q 722 98 675 36 l 719 122 l 719 146 l 709 146 l 709 163 l 702 173 q 726 214 702 184 q 685 244 726 234 l 671 258 l 671 288 l 699 326 l 722 326 q 807 387 771 326 q 848 376 828 387 q 875 390 875 382 l 875 414 q 902 434 893 414 l 953 461 m 7 414 l 14 414 q 20 397 14 408 q 3 370 20 379 q 0 373 3 373 l 7 414 m 234 404 l 234 400 q 244 390 234 395 l 251 390 l 251 400 l 234 404 m 71 359 l 71 356 l 88 353 l 92 353 l 92 359 l 85 359 q 81 356 81 359 l 75 359 l 71 359 m 139 359 q 180 342 139 349 l 180 349 l 163 349 l 149 359 l 139 359 m 193 353 l 193 346 l 203 346 l 203 353 l 193 353 m 899 339 l 899 336 l 902 336 q 919 349 919 345 l 919 353 l 916 353 q 899 339 900 346 m -14 332 q 51 261 3 309 q 78 203 71 224 q 71 170 71 188 q 75 136 75 140 q 71 125 71 129 l 68 125 q -20 329 -20 222 l -14 332 m 203 326 l 203 312 l 214 312 q 203 326 209 326 m 217 309 q 258 281 220 300 l 261 281 l 261 285 q 220 309 258 285 l 217 309 m 302 288 l 302 285 l 312 285 q 319 292 319 285 l 319 295 l 309 295 q 302 288 302 294 m 176 281 l 170 271 q 176 264 171 264 l 180 264 q 186 271 186 264 q 176 281 186 276 m 275 275 l 278 258 l 285 258 l 285 275 l 275 275 m 916 248 l 916 244 l 919 244 q 926 251 926 244 l 926 254 l 922 254 q 916 248 916 253 m 787 237 l 787 227 q 793 220 788 220 q 800 248 800 238 l 797 248 q 787 237 792 248 m 271 227 l 271 220 q 278 227 278 220 l 278 234 q 271 227 271 233 m 756 210 l 753 203 l 760 200 l 773 200 q 756 210 773 206 m 234 183 l 237 183 q 258 203 242 183 l 254 203 q 234 183 250 203 m 278 197 l 278 190 l 281 190 q 288 197 288 190 l 278 197 m 400 173 l 397 166 l 404 163 l 407 170 l 400 173 m 122 146 l 122 142 q 132 129 127 129 l 156 129 q 170 125 163 129 q 180 129 176 129 l 180 139 q 170 142 176 139 q 142 139 151 139 q 122 146 136 139 m 142 115 l 142 102 l 149 102 l 149 105 q 146 115 146 112 l 142 115 m 705 112 q 712 105 707 105 l 732 105 q 726 112 732 112 l 705 112 m 773 109 l 773 102 q 790 95 782 102 l 790 98 q 780 109 790 103 l 773 109 m 485 7 l 505 7 l 505 3 l 488 0 l 485 0 l 485 7 z "},"9":{"ha":949,"x_min":0,"x_max":963,"o":"m 444 1149 q 580 1116 580 1149 l 580 1105 q 573 1078 573 1081 q 587 1065 576 1067 l 587 1072 q 580 1082 583 1082 q 590 1105 590 1102 q 580 1129 590 1114 l 583 1136 q 831 1004 747 1097 q 919 841 910 899 l 919 834 l 916 827 q 963 573 949 827 q 960 539 960 543 l 963 532 q 953 478 958 485 l 956 465 q 949 434 953 440 l 953 434 q 824 146 912 235 l 817 146 l 817 149 l 827 183 l 827 186 q 766 319 766 276 q 756 322 760 322 l 756 339 q 743 393 751 347 l 749 397 l 770 397 l 793 400 q 810 390 793 394 l 814 390 l 814 393 q 797 404 797 396 l 797 414 q 814 431 805 414 l 814 437 q 804 454 804 448 l 797 454 l 797 451 l 800 427 q 763 407 791 418 q 668 414 690 414 q 631 407 660 414 q 627 410 631 410 l 631 444 l 631 471 l 624 471 q 410 397 511 397 q 376 424 401 398 l 370 424 l 363 420 q 336 468 341 451 q 285 515 317 490 l 281 532 q 322 556 281 551 l 319 563 l 319 570 q 373 614 373 595 l 376 614 q 404 617 391 614 l 424 614 q 427 617 427 614 l 492 610 q 543 627 538 627 l 563 617 l 566 624 q 553 634 553 624 q 604 692 579 644 l 624 770 q 604 841 604 831 q 634 871 620 841 l 631 871 q 610 851 613 863 l 604 854 q 590 851 597 851 q 478 912 546 912 l 437 912 q 373 882 420 912 q 346 936 366 882 l 373 973 l 373 977 l 363 977 q 336 926 355 974 l 359 871 l 359 868 q 329 793 339 838 q 298 787 317 787 q 329 773 298 783 l 329 736 q 363 648 329 714 l 363 641 q 312 583 363 601 q 278 559 302 559 q 248 604 271 559 l 244 604 l 237 600 l 224 604 q 186 597 200 597 q 146 614 168 597 l 146 617 l 156 631 l 156 641 l 153 641 q 142 631 153 631 l 102 644 l 102 641 q 139 610 102 635 q 190 573 139 578 l 203 576 q 214 573 210 573 q 244 576 232 576 q 271 536 258 542 l 268 519 l 268 509 q 292 485 286 485 l 292 475 q 200 437 257 458 q 54 563 157 437 q 20 648 20 627 q 44 695 20 660 q 58 715 44 715 q 71 695 71 712 l 68 682 q 119 692 97 685 l 132 682 l 129 675 l 129 668 q 146 654 129 663 l 146 658 q 136 699 141 665 q 139 709 139 705 l 132 709 q 125 699 132 699 l 105 699 q 78 712 80 699 l 81 712 q 54 729 77 729 q 44 726 47 726 q 34 743 44 735 q 78 865 54 865 q 139 892 139 887 q 166 929 139 899 l 166 932 l 163 932 q 129 888 153 926 l 92 878 l 85 878 q 81 882 81 878 q 58 865 78 882 l 54 865 q 17 882 31 865 q 88 1010 50 979 l 98 1004 q 298 1133 98 1072 l 298 1129 q 444 1149 370 1149 m 339 1112 l 339 1085 l 336 1065 l 336 1061 l 339 1061 q 346 1072 339 1072 q 380 1004 359 1059 l 376 980 l 380 980 q 387 987 387 980 l 387 1017 q 346 1119 346 1072 q 339 1112 339 1118 m 590 1061 l 590 1058 q 617 1017 600 1049 l 617 1021 q 593 1061 617 1040 l 590 1061 m 278 1055 q 268 1041 278 1050 l 285 1038 l 288 1055 l 278 1055 m 173 1021 l 173 1014 l 176 1014 q 183 1021 183 1014 l 173 1021 m 244 983 l 244 980 q 264 1017 256 980 l 244 983 m 210 1004 q 200 997 210 997 l 200 994 q 214 983 205 994 l 217 1000 l 210 1004 m 424 1004 l 424 1000 l 427 994 q 417 990 420 990 l 417 983 l 431 983 l 431 1004 l 424 1004 m 617 1004 l 617 997 q 634 980 617 992 l 634 987 q 621 1004 627 1002 l 617 1004 m 95 997 l 95 980 l 98 980 l 102 994 l 95 997 m 210 980 l 210 966 l 227 970 l 227 977 q 217 980 224 977 q 214 977 217 977 q 210 980 214 980 m 336 977 l 332 960 l 342 960 q 349 966 349 960 q 346 977 346 973 l 336 977 m 78 960 l 61 963 q 88 949 61 959 l 95 949 l 95 966 l 92 966 q 78 960 83 960 m 190 963 q 176 946 190 958 q 193 960 193 949 l 193 963 l 190 963 m 732 949 q 722 953 726 953 l 722 939 l 726 939 q 753 946 749 946 q 780 943 777 943 l 780 946 q 777 956 777 953 l 732 949 m 227 946 l 227 943 l 237 943 q 244 949 244 943 l 244 953 l 234 953 q 227 946 227 951 m 451 943 q 448 932 451 939 l 454 929 q 461 936 461 929 l 461 943 l 451 943 m 783 943 l 783 939 q 810 926 783 930 l 827 926 l 827 929 q 783 943 791 943 m 675 922 l 675 919 l 692 916 q 712 919 709 919 q 732 912 723 912 l 743 912 l 743 916 q 732 926 743 920 l 719 922 l 705 926 q 675 922 687 922 m 760 922 q 766 916 761 916 l 770 916 q 777 922 777 916 q 773 926 773 922 q 760 922 767 922 m 654 902 l 658 902 l 671 919 l 668 919 q 654 902 661 918 m 583 892 l 593 892 l 593 899 l 590 899 q 583 892 583 897 m 17 861 q 41 848 41 853 l 41 841 l 14 749 q 34 705 34 715 q 10 682 31 705 q 0 760 0 713 q 17 861 4 861 m 129 824 l 129 821 l 136 821 q 142 827 142 821 l 136 831 q 129 824 129 829 m 858 807 l 858 804 q 868 800 861 804 l 871 807 l 871 814 l 865 814 q 858 807 858 812 m 183 787 l 183 770 q 220 777 207 777 l 220 783 l 197 780 q 190 787 197 787 l 183 787 m 871 766 l 871 746 q 878 753 878 746 l 878 773 q 871 766 871 772 m 142 715 l 149 715 q 176 763 157 740 l 173 763 q 142 715 142 738 m 98 753 l 98 746 l 102 746 q 109 753 109 746 l 98 753 m 865 736 l 858 692 q 871 736 866 692 l 865 736 m 34 654 l 34 644 l 41 644 l 51 651 l 54 651 l 51 644 l 58 644 q 88 658 85 650 q 71 675 88 663 l 34 654 m 763 624 l 763 621 l 766 621 q 790 648 784 633 l 783 648 q 763 624 777 648 m 376 637 l 383 637 q 404 621 404 626 l 397 621 q 376 631 379 621 l 376 637 m 648 634 l 648 624 q 678 610 678 616 q 644 597 644 603 l 644 590 l 654 590 q 678 607 654 599 q 715 587 715 597 q 705 559 705 570 l 709 559 q 732 600 715 559 l 726 604 l 719 604 l 712 600 l 712 604 l 719 614 l 719 627 q 692 624 716 627 q 648 634 673 634 m 753 614 l 749 607 q 760 604 753 607 l 760 607 q 753 614 760 614 m 590 600 l 587 593 q 610 576 591 576 l 631 576 q 604 587 631 583 q 590 600 604 592 m 654 583 q 637 566 654 566 l 637 563 q 644 556 639 556 q 661 583 658 556 l 654 583 m 532 536 l 532 532 q 559 566 536 532 l 559 573 q 532 536 549 568 m 81 563 l 102 563 q 95 570 102 570 l 88 570 q 81 563 81 568 m 770 553 l 770 539 l 773 539 q 804 543 785 539 q 824 536 814 536 l 827 536 l 827 543 q 797 553 803 553 l 770 553 m 346 543 q 363 539 357 543 l 366 546 l 359 549 l 353 549 q 346 543 346 548 m 868 546 q 854 522 868 522 q 841 536 854 528 l 834 536 l 834 529 q 882 512 869 512 l 871 529 q 878 536 878 529 q 871 546 871 536 l 868 546 m 661 519 l 661 481 q 668 468 668 473 l 671 468 l 671 505 l 668 512 q 709 529 675 519 q 719 519 709 524 q 760 526 746 526 l 773 519 l 777 526 l 777 529 l 770 529 q 766 526 766 529 q 746 532 755 532 l 732 532 l 709 529 l 702 543 q 661 519 678 534 m 305 529 l 312 526 l 315 532 l 315 539 q 305 529 311 539 m 899 532 l 902 526 q 912 529 909 529 l 912 532 l 899 532 m 770 495 l 766 488 l 773 485 l 780 485 q 770 495 780 490 m 485 444 l 488 444 l 515 478 l 515 485 l 512 485 q 485 444 505 483 m 298 451 l 359 380 l 353 376 q 217 410 281 376 l 217 414 q 298 451 266 433 m 682 458 l 682 454 q 719 424 696 454 l 719 427 q 692 458 719 441 l 682 458 m 719 400 q 739 332 737 400 q 760 305 755 325 l 756 285 q 814 183 789 216 q 804 149 804 153 l 804 146 q 814 139 804 139 l 814 136 q 485 0 685 0 l 451 0 q 373 20 389 0 q 417 105 373 66 q 444 149 417 117 q 417 190 417 180 l 417 200 q 522 234 448 220 q 614 339 583 261 q 692 397 633 397 q 719 400 711 400 m 322 312 q 359 261 330 312 q 387 244 380 244 l 383 210 q 417 159 397 182 l 417 153 q 380 102 410 153 q 359 71 375 102 q 224 149 274 106 l 207 146 q 149 180 183 180 q 136 207 136 194 q 85 210 102 210 q 64 200 81 200 q 44 248 54 200 q 54 281 44 262 q 51 295 51 288 q 322 312 73 298 m 31 292 q 44 271 44 288 l 37 268 l 34 268 l 31 285 l 31 292 m 136 227 q 132 220 136 220 q 136 210 136 214 l 139 210 l 139 227 l 136 227 m 85 186 q 142 153 104 186 q 197 129 163 153 q 237 105 211 129 q 326 54 246 105 q 346 41 346 47 q 319 0 332 0 q 122 88 197 25 q 58 173 58 151 q 85 186 68 181 m 251 156 l 251 146 l 254 146 q 261 153 261 146 l 254 156 l 251 156 m 746 109 l 746 105 l 760 105 q 766 112 766 105 l 766 119 q 746 109 746 117 z "}," ":{"ha":412,"x_min":0,"x_max":0,"o":""},"A":{"ha":1048,"x_min":-68,"x_max":1129,"o":"m 342 1129 l 458 1129 l 481 1122 q 512 1129 504 1129 l 532 1129 q 536 1126 536 1129 l 543 1129 l 546 1129 l 559 1112 l 583 1119 q 610 1099 608 1106 l 610 1065 q 614 1061 610 1061 q 597 1038 614 1058 l 597 1024 q 614 994 597 1016 q 587 960 614 975 l 587 949 q 600 865 587 927 q 549 834 587 865 q 526 827 541 834 l 519 831 q 485 817 495 817 l 468 821 q 431 807 468 816 q 363 844 427 807 q 349 848 357 848 l 302 848 q 271 854 294 848 q 258 848 258 852 q 241 861 242 854 q 312 1048 298 1035 l 309 1055 q 342 1129 323 1099 m 621 1129 l 624 1129 q 651 1126 633 1129 q 675 1129 665 1129 q 685 1112 679 1112 q 688 1126 688 1118 l 709 1126 q 726 1085 722 1126 q 722 1082 722 1085 l 715 1085 l 695 1082 l 678 1095 l 671 1095 q 699 1072 671 1077 q 729 1075 717 1075 q 760 997 760 1013 q 743 980 755 997 l 743 953 q 719 895 743 933 l 726 895 q 749 977 749 935 q 766 983 754 983 q 871 682 858 736 l 871 678 q 783 658 834 658 q 743 773 743 717 q 726 817 729 796 q 729 831 729 823 q 692 854 729 839 q 671 875 692 859 q 641 865 656 875 l 637 865 q 610 932 610 865 q 607 953 607 938 q 634 980 611 953 l 634 987 q 614 1031 634 991 l 614 1034 q 654 1092 628 1071 q 668 1088 661 1088 l 668 1099 q 644 1119 644 1099 l 627 1119 q 621 1126 621 1119 l 621 1129 m 627 1112 q 641 1102 641 1107 l 641 1092 q 631 1082 641 1087 l 624 1082 q 614 1099 624 1092 q 627 1112 616 1109 m 431 1102 l 431 1099 l 448 1095 l 454 1095 l 454 1102 l 431 1102 m 380 1085 l 380 1082 l 387 1082 q 427 1095 400 1092 l 427 1099 l 414 1099 q 380 1085 408 1099 m 563 1075 l 563 1068 l 583 1068 l 583 1078 l 580 1078 l 563 1075 m 349 1075 q 336 1051 349 1065 l 342 1048 l 356 1072 l 349 1075 m 665 1004 l 675 1004 q 685 1014 680 1004 l 685 1021 l 682 1021 q 665 1004 677 1021 m 610 834 l 624 831 q 654 834 642 834 q 699 804 661 815 q 722 715 699 785 l 719 692 q 739 648 726 692 l 763 621 l 756 593 l 760 570 q 756 543 756 551 l 807 519 q 783 478 783 494 q 763 444 783 444 q 770 437 764 437 l 773 437 l 783 444 l 787 444 q 800 410 796 444 q 753 326 800 400 q 736 288 744 288 l 729 288 q 661 312 671 312 q 648 309 654 312 q 621 315 630 315 l 556 295 l 543 292 q 458 359 503 306 q 465 366 459 366 l 631 366 q 587 526 631 379 q 576 563 576 557 q 580 566 580 563 q 522 749 568 576 l 515 753 q 468 610 511 753 l 471 610 q 417 441 432 462 q 420 431 420 434 q 407 407 416 407 l 393 407 q 366 404 379 407 q 322 431 322 406 l 319 431 l 309 424 q 336 390 309 411 l 363 390 l 404 393 q 407 383 407 387 l 404 366 l 417 366 q 441 353 435 366 l 441 346 l 427 342 l 427 332 l 431 332 l 444 342 l 448 342 q 529 278 448 320 q 536 275 529 275 l 607 295 l 617 295 q 648 292 629 295 q 668 298 661 298 q 736 281 709 281 l 736 264 q 739 261 736 261 q 682 231 739 252 q 648 261 675 231 l 648 254 q 678 227 659 227 q 651 153 678 163 q 624 129 640 153 l 519 129 l 509 136 q 488 129 498 129 l 380 129 l 370 136 l 353 132 l 349 139 q 295 119 336 139 l 295 122 q 268 112 268 119 l 268 105 q 281 88 281 93 l 285 88 l 285 109 q 326 115 313 115 q 302 51 313 51 l 302 34 q 281 -20 293 -20 l 203 -20 q 180 -14 180 -20 q 159 -20 169 -20 l 31 -20 q 0 -17 18 -20 q -17 -20 -5 -20 q -27 -17 -24 -17 l -27 -7 l -24 17 q -44 61 -44 34 q -20 125 -28 125 q 10 115 -5 125 l 17 115 l 17 122 q -17 129 -4 129 l -17 136 q 44 309 -17 155 l 61 305 l 68 305 q 81 322 73 305 q 75 329 81 329 l 68 329 q 61 315 68 315 l 54 315 l 61 326 l 61 329 q 51 336 51 329 q 146 600 122 526 l 149 600 q 224 498 197 576 q 217 461 217 480 l 220 431 q 159 353 180 374 q 119 339 159 348 q 92 322 92 326 l 92 312 q 98 305 93 305 l 105 329 l 119 329 q 146 336 122 329 q 122 315 136 315 l 122 309 l 129 309 q 159 346 159 321 q 193 363 185 363 q 200 336 200 345 q 193 329 193 334 l 193 322 l 197 322 q 207 353 205 322 q 200 359 200 353 l 200 363 q 244 431 200 389 q 295 414 253 417 q 305 417 302 417 l 305 427 q 295 431 302 427 q 268 427 277 427 q 234 471 234 427 q 241 502 241 494 q 156 621 241 534 l 156 624 q 231 824 216 801 l 234 824 q 251 817 251 824 q 264 821 253 817 q 353 817 321 817 q 427 773 413 773 q 461 790 427 779 q 492 783 484 783 q 515 800 515 795 l 532 797 q 610 834 603 834 m 644 804 l 644 800 l 661 804 l 661 810 l 651 810 q 644 804 644 809 m 370 709 q 373 699 373 702 l 383 699 l 383 709 l 370 709 m 203 668 l 203 665 l 220 661 l 224 661 l 224 668 l 217 668 q 214 665 214 668 l 207 668 l 203 668 m 271 668 q 295 654 271 663 l 305 654 l 305 658 l 271 668 m 614 651 l 624 651 q 631 658 631 651 l 631 661 l 624 661 q 614 651 619 661 m 882 654 q 919 553 890 654 l 916 546 q 970 417 936 520 q 980 387 980 389 q 953 380 973 380 q 987 370 953 373 q 1031 244 1014 298 q 990 220 1006 220 q 926 234 975 220 q 905 220 926 229 l 865 224 q 841 210 859 210 l 838 210 q 793 244 799 243 q 780 241 786 244 q 760 248 766 248 l 760 251 l 773 264 l 766 275 q 834 414 777 342 l 831 437 l 831 461 q 817 495 817 461 q 838 529 821 508 l 838 539 q 787 576 787 563 q 783 607 783 589 q 810 641 789 607 q 882 654 850 641 m 614 617 l 614 614 l 617 614 q 732 648 732 634 l 729 648 q 614 617 667 633 m 336 637 l 336 624 l 342 624 l 342 631 q 336 637 342 637 m 726 627 l 726 624 q 732 631 732 624 l 732 634 q 726 627 726 633 m 587 624 l 587 621 l 593 621 q 600 627 600 621 l 600 631 l 593 631 q 587 624 587 629 m 356 614 q 390 590 360 604 l 393 590 l 393 593 q 359 614 389 593 l 356 614 m 685 610 l 682 604 l 688 600 l 692 607 l 685 610 m 434 597 l 434 593 l 444 593 q 451 600 451 593 l 451 604 l 441 604 q 434 597 434 602 m 309 590 l 302 580 q 309 573 303 573 l 312 573 q 319 580 319 573 l 319 587 q 309 590 315 587 m 407 583 l 410 566 l 417 566 l 417 583 l 407 583 m 404 532 l 404 529 l 410 529 l 410 539 q 404 532 404 538 m 888 519 l 885 512 l 892 509 l 905 509 q 888 519 905 515 m 366 492 l 370 492 q 390 512 380 492 l 387 512 q 366 492 382 512 m 410 505 l 410 498 l 414 498 q 420 505 420 498 l 410 505 m 841 420 l 841 417 l 858 414 l 865 414 q 858 420 865 420 l 841 420 m 905 417 l 905 410 q 946 387 911 410 l 946 390 q 912 417 946 393 l 905 417 m 285 390 l 285 387 q 288 376 288 380 l 292 376 l 292 390 l 285 390 m 861 366 l 858 359 l 868 359 q 861 366 868 366 m 292 363 l 271 322 l 281 322 q 295 346 281 329 l 295 363 l 292 363 m 905 339 l 905 336 l 912 336 q 919 342 919 336 l 919 346 l 912 346 q 905 339 905 345 m 159 336 l 159 326 l 163 326 q 173 329 170 329 q 166 336 173 336 l 159 336 m 929 336 l 929 329 l 939 329 l 939 336 l 929 336 m 434 326 l 454 326 q 461 332 461 326 l 441 332 q 434 326 434 331 m 922 315 q 929 309 924 309 l 932 309 l 932 322 l 929 322 q 922 315 922 321 m 397 298 l 407 292 q 424 312 407 312 l 424 319 l 420 319 q 397 298 400 311 m 98 309 l 98 302 l 105 302 q 109 315 105 309 l 105 315 q 98 309 98 314 m 170 312 l 170 305 l 180 305 q 173 312 180 312 l 170 312 m 841 305 l 848 302 q 854 309 854 302 l 854 312 l 848 312 q 841 305 841 311 m 197 309 l 193 292 q 203 302 198 292 l 203 309 l 197 309 m 295 281 q 268 288 274 288 q 258 281 258 285 q 220 295 231 288 l 217 295 l 220 288 l 220 285 l 214 275 l 214 271 l 217 264 l 234 275 q 312 278 296 278 q 346 292 312 284 l 346 295 q 339 302 346 302 l 336 302 q 295 281 323 290 m 186 285 l 186 271 l 197 271 q 203 278 203 271 l 193 285 l 186 285 m 407 275 l 407 264 q 414 258 408 258 l 414 268 q 407 275 414 275 m 783 271 l 783 261 l 790 261 l 790 271 l 783 271 m 153 268 l 149 254 q 163 207 156 207 l 166 207 l 166 210 q 153 258 155 258 l 156 264 l 156 268 l 153 268 m 197 248 l 207 248 l 207 254 l 203 254 q 197 248 197 253 m 390 237 q 393 217 393 220 q 383 170 393 201 q 400 207 400 184 q 397 234 397 231 q 414 248 414 243 l 414 251 q 390 237 395 251 m 773 197 q 827 159 773 188 l 834 159 l 841 163 l 841 156 q 838 153 841 153 q 848 139 843 139 q 882 153 855 139 l 905 149 q 943 163 926 153 q 980 153 966 153 l 994 153 q 997 156 997 153 q 1000 153 1000 156 l 1041 156 l 1051 156 q 1072 92 1072 121 q 1075 95 1075 92 q 1129 -44 1088 95 l 1122 -47 q 1082 -44 1099 -47 q 1041 -47 1064 -47 q 1027 -7 1036 -21 l 1068 64 l 1072 88 l 1065 88 q 1048 44 1060 88 q 1021 0 1021 12 l 1021 -7 q 1024 -41 1024 -26 l 1000 -47 l 956 -47 l 943 -37 q 919 -47 930 -47 l 899 -47 q 865 -44 882 -47 q 834 -47 852 -47 l 821 -47 q 817 -44 817 -47 l 810 -47 l 770 -47 q 719 102 760 -47 l 695 102 q 688 109 688 102 l 688 112 q 715 136 715 112 l 712 142 q 749 197 728 197 l 773 197 m 1034 234 l 1038 227 l 1031 224 l 1027 224 l 1027 227 q 1034 234 1029 234 m 170 203 l 166 170 l 166 166 l 173 156 l 173 153 q 132 122 168 142 l 119 122 q 88 119 106 122 q 68 125 77 125 q 88 109 68 121 q 115 115 92 109 l 132 112 q 180 146 165 126 q 173 176 176 153 q 176 200 176 190 l 170 203 m 241 142 l 241 136 l 268 136 q 261 142 268 142 l 241 142 m 41 139 l 41 136 q 47 129 42 129 l 61 129 q 51 139 61 134 l 41 139 m 217 132 l 227 132 l 227 139 l 224 139 q 217 132 217 138 m 180 129 l 180 125 q 190 119 190 125 l 186 102 l 193 98 q 197 119 193 119 q 190 136 190 130 l 186 136 q 180 129 180 134 m 71 88 l 71 85 q 85 98 77 85 l 85 102 q 71 88 79 102 m 112 58 q 115 54 115 58 q 129 64 129 60 l 122 68 q 112 58 117 68 m -44 58 l -34 37 l -34 3 l -51 0 l -61 0 q -68 7 -68 0 q -44 58 -52 51 m 197 37 l 197 34 l 200 34 q 207 41 207 34 l 207 44 l 203 44 q 197 37 197 43 m 987 34 l 987 24 l 990 24 q 997 31 997 24 l 997 34 l 987 34 m 180 17 q 186 10 181 10 l 190 17 l 190 24 l 186 24 q 180 17 180 22 z "},"B":{"ha":814,"x_min":-14,"x_max":1061,"o":"m -3 1146 l 115 1146 l 122 1143 q 102 1075 109 1083 q 122 1027 122 1040 q 71 977 82 977 l 54 980 l 37 977 q 27 987 27 977 l 20 987 l 24 980 q -7 939 -7 954 l -14 939 l -14 1136 q -3 1146 -14 1141 m 197 1133 q 234 1129 222 1133 q 278 1133 256 1133 l 319 1133 q 346 1129 333 1133 q 373 1133 359 1133 l 434 1133 l 448 1119 q 461 1133 448 1124 l 471 1133 q 481 1122 476 1133 q 410 1095 450 1095 q 397 1099 404 1099 l 397 1095 q 410 1085 397 1092 q 475 1105 440 1085 q 512 1014 487 1105 l 481 980 q 465 949 481 973 q 414 892 465 909 q 383 868 414 877 q 349 912 370 872 l 346 912 l 339 909 l 326 912 q 288 905 302 905 q 248 922 273 905 l 248 926 q 261 943 248 928 q 237 1004 241 974 q 278 1072 265 1055 l 275 1072 q 244 1048 255 1048 q 251 1038 248 1038 q 227 1007 244 1021 l 207 1007 q 180 1017 182 1007 q 183 1021 180 1021 q 159 1038 178 1038 l 146 1038 l 136 1055 q 166 1133 146 1133 l 197 1133 m 502 1133 q 512 1129 505 1133 q 539 1133 515 1129 q 637 1129 614 1129 q 644 1122 639 1122 q 648 1126 648 1122 l 665 1122 q 675 1126 668 1122 q 692 1116 692 1122 l 699 1119 l 702 1119 q 932 1027 812 1119 q 1000 858 1000 951 q 994 841 1000 852 l 1000 827 q 943 695 977 695 q 878 617 943 668 q 848 705 848 637 l 851 705 q 895 712 895 707 l 916 739 l 916 746 q 905 763 905 757 l 899 763 l 899 760 l 902 736 q 861 715 888 722 q 821 722 842 715 q 817 719 817 722 l 793 722 l 780 722 q 712 685 729 722 q 665 665 701 665 q 641 614 665 614 q 580 553 641 607 l 573 556 l 522 536 q 505 549 507 543 q 512 597 512 575 q 502 617 505 597 q 532 665 507 665 q 593 678 587 678 l 597 671 q 624 682 614 682 l 641 682 l 641 685 q 631 695 641 690 l 614 695 l 614 699 q 651 763 651 730 l 651 814 q 634 841 635 835 q 661 875 638 841 l 661 882 l 631 844 l 624 844 q 553 868 605 858 l 519 865 l 458 865 q 420 878 420 865 q 475 922 475 903 l 488 922 l 505 926 l 505 929 q 478 939 478 929 q 526 1000 484 972 q 529 1014 529 1006 q 519 1034 529 1022 l 519 1041 q 570 1065 519 1046 q 607 1061 577 1065 q 648 1075 616 1061 q 695 1072 677 1072 l 709 1072 l 726 1075 l 726 1082 l 705 1082 q 699 1099 705 1099 l 699 1082 q 688 1078 692 1078 q 685 1092 685 1084 l 678 1092 q 671 1082 678 1086 l 654 1085 l 648 1085 q 624 1075 636 1085 l 590 1075 q 529 1055 575 1075 l 522 1055 q 505 1088 514 1055 q 509 1099 509 1095 q 495 1129 495 1126 l 502 1133 m 285 1105 l 285 1078 q 322 1085 309 1085 l 322 1092 l 298 1088 q 288 1105 288 1099 l 285 1105 m 773 1072 l 783 1072 l 783 1078 l 780 1078 q 773 1072 773 1077 m 197 1061 q 203 1055 198 1055 q 214 1058 210 1058 l 214 1061 l 197 1061 m 543 1044 l 543 1038 q 580 1017 563 1038 l 604 1038 l 587 1038 q 573 1031 578 1031 q 543 1044 549 1044 m 699 1031 l 699 1024 l 712 1024 l 712 1031 l 699 1031 m 159 1024 q 176 1007 176 1019 q 170 987 170 996 l 173 987 q 231 1000 180 994 q 234 990 234 994 l 231 973 q 254 949 239 972 l 254 946 q 244 939 254 939 q 207 953 240 939 l 207 946 q 248 899 248 917 q 292 882 264 882 q 305 885 294 882 q 315 882 312 882 q 346 885 334 885 q 373 841 366 846 q 370 831 373 838 q 373 780 373 797 q 302 746 373 770 q 203 722 279 736 l 203 719 l 227 719 q 363 760 314 739 l 366 760 q 373 753 373 758 l 373 682 l 488 682 q 498 671 493 682 l 498 654 q 488 607 488 610 l 488 590 l 495 580 l 485 519 l 512 475 l 505 471 l 373 471 l 373 437 q 363 431 373 431 q 326 458 359 431 l 295 461 q 329 448 295 452 q 370 420 332 437 l 373 404 l 373 349 q 370 322 373 335 q 373 295 373 309 l 373 264 l 407 264 q 414 258 414 263 l 414 248 q 387 176 414 233 q 380 146 380 155 q 383 142 383 146 q 322 105 322 137 q 268 44 322 64 l 264 44 q 234 51 249 51 q 203 44 212 44 q 163 95 203 51 q 153 139 163 130 l 153 142 l 166 142 l 183 129 l 203 129 l 203 132 q 146 186 168 132 l 139 190 q 109 180 131 190 q 34 210 34 190 q 31 227 34 222 q 34 258 34 245 l 34 285 l 51 285 q 58 292 58 285 q 47 298 58 298 q 37 292 37 295 q 0 319 0 292 q 3 346 0 342 q 0 383 0 369 l 0 387 q 3 427 0 417 q 0 478 0 457 l 0 536 q 20 553 0 540 l 37 549 l 64 549 q 132 563 125 563 q 146 536 142 536 l 153 536 l 153 543 l 142 556 q 156 597 156 579 q 142 621 142 602 l 136 621 l 132 604 q 146 590 138 604 l 142 573 q 88 570 123 573 q 78 573 81 573 q 58 566 67 566 l 47 566 q 34 593 41 566 l 37 600 l 37 607 q 24 668 31 652 q 44 729 44 713 q 3 777 27 729 q 0 807 0 789 l 0 838 q 24 851 0 845 l 17 865 q 34 936 26 883 q 71 949 65 949 l 95 949 q 109 946 102 949 q 149 1014 118 946 q 159 1024 149 1024 m 675 1014 l 671 1007 l 671 1004 l 675 1004 q 682 1010 682 1004 l 675 1014 m 136 963 l 136 953 l 149 953 l 149 960 l 156 960 q 159 953 156 953 l 190 963 l 190 966 q 173 983 190 971 l 136 963 m 617 956 l 617 949 l 627 949 l 627 956 l 617 956 m 865 932 l 865 929 l 868 929 q 892 956 886 941 l 885 956 q 865 932 879 956 m 746 943 l 746 939 q 763 926 746 935 l 780 926 l 780 922 l 746 905 l 746 899 l 756 899 q 777 916 756 906 q 821 895 821 907 q 807 875 821 892 l 807 868 l 810 868 q 844 909 827 899 q 817 912 842 909 q 814 909 817 909 l 814 912 l 821 922 l 821 936 q 793 932 796 932 q 749 943 777 943 l 746 943 m 654 936 l 654 929 q 665 926 658 929 l 668 932 q 654 936 661 932 m 688 909 q 712 885 688 885 l 729 885 l 729 892 l 712 892 q 695 909 710 892 l 688 909 m 756 892 q 739 875 756 875 l 739 865 l 749 865 q 766 888 755 865 l 766 892 l 756 892 m 183 878 l 183 871 l 200 871 l 200 878 l 183 878 m 871 861 l 871 848 l 875 848 q 905 851 887 848 q 960 824 934 844 l 977 824 q 980 844 977 840 q 973 861 973 844 l 966 861 l 970 844 l 970 841 q 960 834 970 834 q 902 861 913 861 l 871 861 m 763 827 l 766 821 l 763 800 q 770 773 770 777 l 777 773 l 770 821 q 810 838 798 838 q 821 827 810 833 q 858 834 844 834 q 875 827 864 834 l 878 834 l 878 841 q 875 838 875 841 l 841 841 l 824 841 q 821 838 821 841 q 804 851 805 842 q 763 827 780 842 m 41 848 l 41 841 l 47 841 q 54 848 54 841 l 41 848 m 58 848 q 64 841 59 841 l 68 841 l 68 848 l 58 848 m 871 804 l 868 797 l 875 793 l 878 793 l 878 797 q 871 804 878 804 m 783 766 l 783 763 q 821 726 805 763 l 824 726 l 824 736 q 793 766 802 766 l 783 766 m 58 749 q 47 732 58 743 l 51 732 q 64 746 56 732 l 64 749 l 58 749 m 7 746 q 27 715 24 716 q 10 658 10 670 l 20 644 l 20 634 q 17 631 20 631 q 27 604 27 614 l 27 593 q 3 563 27 563 l 0 570 l 0 604 q 7 624 0 613 q 0 675 0 656 l 0 739 q 7 746 1 746 m 112 722 l 112 719 l 115 702 q 95 658 95 663 q 119 621 113 621 l 122 621 q 105 658 105 654 q 129 712 105 669 l 112 722 m 899 709 l 899 702 q 932 695 924 695 l 932 702 l 926 702 q 899 709 911 702 m 821 709 q 841 644 839 709 q 861 614 858 630 q 858 600 858 608 l 858 593 q 912 498 891 526 l 916 498 l 916 492 l 905 458 l 905 454 q 960 410 948 433 l 966 407 l 966 414 l 960 437 l 966 441 q 987 431 987 439 l 987 424 q 909 363 975 395 q 838 322 872 336 l 834 315 l 834 288 q 766 241 834 260 q 688 203 742 215 q 661 214 686 214 l 644 214 q 627 207 627 213 q 576 220 589 212 q 556 214 570 220 q 492 258 492 251 l 492 261 l 498 264 l 532 264 l 566 261 q 627 275 566 268 q 692 349 692 302 l 692 387 q 593 468 692 450 q 519 505 519 468 l 519 509 q 597 539 523 516 q 685 637 675 608 q 756 699 694 637 q 821 709 766 705 m 519 682 l 522 682 l 522 675 l 512 675 q 519 682 513 682 m 878 590 l 882 590 q 1010 475 968 559 l 1021 454 q 1017 451 1017 454 l 1010 454 q 949 444 982 448 q 919 454 928 454 l 919 458 q 929 481 919 469 l 929 495 q 878 587 897 543 l 878 590 m 234 515 l 193 519 l 190 519 q 149 505 179 509 l 149 498 l 170 495 q 200 509 197 509 q 258 475 222 509 q 292 468 274 475 l 292 471 q 248 492 292 479 q 237 512 237 507 q 244 532 244 523 l 244 536 l 241 536 q 234 515 234 536 m 112 471 l 119 468 l 125 468 q 132 475 132 468 q 125 481 132 481 q 112 471 112 477 m 1031 410 q 1061 329 1061 401 l 1058 329 l 1061 322 l 1061 298 q 899 31 1061 123 q 838 10 852 10 l 838 17 l 831 17 l 743 -17 l 736 -14 q 709 -20 724 -20 l 705 -14 l 705 14 q 736 34 705 17 l 743 31 l 746 37 l 736 37 q 705 27 730 37 l 702 34 l 702 37 l 705 61 q 682 78 690 61 l 641 58 q 637 54 637 58 l 637 47 q 658 34 658 47 q 685 44 677 39 l 688 44 l 688 24 q 692 20 688 20 l 688 14 l 688 -20 q 614 -27 660 -27 l 607 -27 q 576 -24 589 -27 q 543 -27 559 -27 l 465 -27 q 414 41 422 -27 q 366 85 414 47 q 431 136 431 85 q 454 200 431 144 l 454 227 q 465 237 454 232 l 492 237 q 556 173 556 185 l 576 173 q 604 159 591 173 q 685 176 672 165 q 695 173 692 173 l 695 170 q 678 159 695 159 l 678 132 q 682 129 678 129 q 671 98 671 106 l 671 92 l 682 92 q 699 112 682 112 q 692 125 692 120 q 756 170 711 170 q 838 210 817 210 q 865 220 854 220 q 892 203 883 220 q 902 210 902 207 q 912 207 905 210 l 946 210 q 960 186 952 186 l 960 197 l 953 207 l 960 210 l 963 210 l 970 207 l 970 210 q 963 237 963 222 q 980 288 971 237 l 997 305 l 997 309 q 977 336 977 309 q 1014 407 1004 336 l 1031 410 m 848 417 l 854 414 l 861 414 q 868 420 868 414 l 868 427 q 848 417 848 425 m 1000 366 l 1024 366 q 1031 373 1031 366 q 1027 376 1027 373 q 1000 366 1000 373 m 946 359 q 956 332 951 332 q 936 271 936 281 q 926 264 926 271 l 926 261 l 932 251 l 932 248 l 905 248 q 892 244 898 248 q 838 271 838 254 q 895 336 838 320 q 946 359 936 359 m 7 288 q 17 248 13 282 q 14 214 14 230 q 17 190 17 199 l 3 186 l 0 193 l 0 281 q 7 288 1 288 m 936 210 l 936 200 l 943 200 l 943 203 q 936 210 943 210 m 854 207 l 854 197 q 861 203 861 197 l 861 207 l 854 207 m 875 190 l 875 186 l 878 186 q 895 193 889 193 q 905 190 902 190 l 905 197 q 899 203 905 203 q 875 190 880 203 m 529 176 l 529 166 l 532 166 q 546 176 546 172 l 539 180 q 529 176 532 176 m 125 176 l 136 176 q 149 153 149 171 l 146 153 q 119 170 119 164 q 125 176 120 176 m 27 173 q 85 163 64 163 q 112 166 104 166 q 153 105 153 113 q 146 88 153 88 q 186 34 146 79 q 190 20 190 28 l 190 7 q 183 0 190 0 l 10 0 q 0 10 5 0 l 0 61 q 3 92 0 79 q 0 125 0 109 l 0 159 q 27 173 0 170 m 770 163 l 770 156 l 773 156 q 783 159 780 159 l 783 170 l 777 170 q 770 163 770 168 m 824 163 q 827 153 827 156 l 831 153 q 841 163 836 153 l 841 166 l 831 166 l 824 163 m 546 156 l 546 149 l 566 149 l 566 153 l 546 156 m 729 139 l 729 132 q 746 146 746 141 l 746 149 l 739 149 q 729 139 734 149 m 604 125 l 610 125 q 617 132 617 125 l 617 136 l 614 136 q 604 125 609 136 m 692 136 l 692 129 l 702 129 q 695 136 702 136 l 692 136 m 339 98 l 349 98 l 353 81 q 332 92 332 85 q 339 98 334 98 m 404 95 l 404 85 l 410 85 l 410 95 l 404 95 m 777 85 q 780 68 780 79 l 790 68 l 793 85 l 787 88 l 783 88 l 777 85 m 807 78 l 807 75 l 814 75 l 817 81 q 807 78 810 78 m 356 81 q 383 10 383 56 l 390 10 l 390 0 l 237 0 q 231 7 231 0 l 231 10 q 248 20 231 18 l 278 17 q 329 71 329 38 q 356 81 340 71 m 746 58 l 746 54 l 766 54 l 766 58 l 746 58 m 431 41 l 431 31 l 434 31 q 441 37 441 31 l 434 41 l 431 41 m 526 34 l 526 31 q 532 24 527 24 q 539 31 539 24 l 539 34 l 526 34 m 51 31 l 51 20 l 64 20 l 64 31 l 51 31 m 203 20 l 224 20 l 224 17 q 203 0 218 0 l 200 7 q 203 20 203 13 z "},"C":{"ha":1153,"x_min":-20,"x_max":1139,"o":"m 549 1156 l 570 1153 l 593 1156 l 610 1153 q 637 1156 623 1156 q 648 1126 646 1145 l 641 1112 l 644 1112 q 654 1143 650 1112 q 651 1146 651 1143 l 661 1153 q 899 1085 760 1146 l 899 1075 q 871 1082 895 1075 l 868 1082 l 868 1078 l 905 1055 q 909 1072 909 1060 q 1031 970 943 1072 l 1031 966 l 1027 966 q 983 977 1020 966 q 949 966 981 977 q 929 990 942 966 l 929 963 l 949 960 l 949 949 l 943 949 l 922 953 q 878 902 913 953 q 858 892 870 902 l 851 892 l 841 899 l 810 899 q 726 838 769 838 q 654 905 654 863 q 631 990 650 942 l 634 997 q 610 1024 634 1024 q 576 1051 604 1024 l 573 1051 q 536 1041 562 1051 q 512 1129 519 1041 q 549 1156 539 1156 m 512 1153 q 488 1126 488 1138 q 505 1044 495 1081 q 448 1010 481 1034 q 397 994 419 1010 q 366 997 378 997 l 366 990 l 359 990 q 336 983 336 989 q 254 1027 259 1027 q 244 1024 251 1027 l 224 1027 l 217 1024 q 203 1027 211 1027 l 203 1031 q 488 1153 342 1139 l 512 1153 m 726 1119 l 726 1109 l 729 1109 q 736 1116 736 1109 l 736 1119 l 726 1119 m 777 1095 l 780 1088 q 793 1099 793 1094 q 787 1105 793 1105 q 777 1095 782 1105 m 637 1099 q 634 1088 637 1095 l 637 1088 l 641 1095 l 641 1099 l 637 1099 m 821 1085 l 821 1082 q 844 1068 826 1068 l 848 1075 q 838 1095 848 1093 l 831 1095 q 821 1085 826 1095 m 902 1048 l 902 1044 q 909 1010 909 1019 l 916 1010 q 905 1048 916 1019 l 902 1048 m 766 1041 l 763 1027 l 766 1027 q 780 1031 768 1027 l 780 1041 l 766 1041 m 556 1034 q 610 1000 580 1013 q 631 919 610 982 l 631 892 l 637 882 l 634 875 l 627 878 q 580 882 601 878 q 536 875 543 878 q 526 885 536 880 l 522 885 l 522 871 l 505 871 q 397 729 414 806 q 383 695 391 705 l 387 688 q 370 559 381 669 l 366 559 l 315 607 q 261 604 281 604 l 251 604 q 234 617 249 604 l 237 624 q 231 631 237 631 q 220 621 228 631 l 153 634 q 146 661 146 646 l 146 665 l 153 705 q 58 827 142 743 l 58 841 q 149 977 104 935 q 197 1017 175 1017 l 214 1017 q 251 1014 228 1017 q 264 1017 257 1017 q 332 970 264 1012 q 363 987 359 983 l 376 987 q 397 980 386 987 q 437 997 428 997 l 437 994 q 498 1024 448 994 q 526 1031 502 1024 l 553 1031 q 556 1034 556 1031 m 546 987 l 546 977 l 549 977 l 566 980 l 566 987 l 546 987 m 848 966 l 848 956 l 851 956 q 858 963 858 956 l 858 966 l 848 966 m 983 960 q 1027 949 1013 949 q 1038 953 1034 953 q 1119 787 1077 928 q 1133 699 1133 729 l 1126 695 l 1055 695 q 1038 702 1038 695 q 1010 695 1025 695 l 790 695 q 760 783 783 695 q 743 817 743 799 q 817 868 801 834 q 831 882 818 882 q 871 871 860 871 q 892 885 892 880 l 892 899 l 888 905 q 919 929 909 905 l 980 960 l 983 960 m 275 885 l 275 882 q 281 875 276 875 l 288 875 l 288 885 l 275 885 m 105 848 l 105 841 l 129 841 l 129 844 q 105 848 119 844 m 180 844 l 180 841 q 197 834 194 834 l 200 834 l 200 838 q 183 844 194 838 l 180 844 m 383 834 l 383 831 l 390 831 l 390 841 q 383 834 383 840 m 383 824 l 383 814 l 390 814 l 390 824 l 383 824 m 31 814 q 81 766 52 787 l 115 695 q 109 661 109 680 l 112 631 q -14 529 51 529 q -20 553 -20 546 q -7 682 -17 646 l -10 682 q 31 814 13 794 m 268 787 q 298 766 287 766 l 298 773 q 268 787 270 787 m 339 773 l 339 770 l 346 770 q 353 777 353 770 l 353 780 l 346 780 q 339 773 339 779 m 207 760 l 207 753 l 220 753 l 220 760 q 214 766 220 766 q 207 760 207 765 m 312 763 l 312 760 l 315 743 q 322 749 322 743 l 322 756 q 315 763 322 763 l 312 763 m 834 739 q 824 722 834 733 l 824 712 q 831 705 825 705 l 841 739 l 834 739 m 949 732 l 949 729 l 953 729 q 960 736 960 729 l 960 739 l 956 739 q 949 732 949 738 m 1041 722 l 1041 719 q 1048 712 1042 712 l 1051 719 l 1051 722 l 1041 722 m 275 671 l 278 671 q 292 685 283 671 l 292 688 l 288 688 q 275 671 281 687 m 315 682 l 315 678 l 326 678 l 326 685 q 315 682 319 682 m 248 648 l 248 637 q 254 644 254 637 l 254 648 l 248 648 m 149 627 l 156 627 q 173 614 171 614 l 183 614 q 186 617 186 614 l 193 614 l 214 614 l 220 617 q 251 587 224 600 l 268 590 l 281 587 q 315 590 299 590 q 353 549 315 578 l 339 536 l 339 532 l 346 532 q 353 543 353 532 q 390 390 371 543 q 478 268 411 316 q 458 237 458 245 l 444 237 q 414 214 425 237 l 397 214 l 397 224 l 390 224 l 393 207 q 370 142 387 207 q 356 102 365 142 q 380 75 369 94 l 380 47 q 336 24 358 47 l 332 24 q 302 47 309 47 q 281 41 291 41 q 217 119 251 41 q 248 176 248 163 l 248 186 l 241 186 q 210 125 241 175 q 190 112 210 112 l 180 112 q 54 298 77 209 q 81 332 81 309 l 81 339 q 75 346 81 346 l 71 346 q 75 336 75 339 q 44 309 75 309 q 7 468 7 437 q 31 526 11 526 q 51 536 39 526 l 54 536 l 54 522 q 37 509 37 522 l 41 509 q 71 543 71 517 q 102 559 90 559 l 112 546 q 105 519 105 522 q 119 543 113 519 q 112 570 112 555 q 149 627 112 581 m 190 570 l 190 566 q 193 553 193 560 l 197 553 l 197 559 q 193 570 193 566 l 190 570 m 197 549 q 173 512 197 530 q 180 502 180 512 l 183 502 q 200 522 189 502 l 200 549 l 197 549 m 24 509 l 24 502 l 27 502 q 34 509 34 502 l 24 509 m 81 509 l 81 505 l 95 505 l 95 509 l 81 509 m 332 509 l 332 502 l 346 502 l 363 505 l 363 509 l 332 509 m 302 471 l 309 471 q 312 427 309 469 q 295 414 295 418 l 298 393 q 288 356 296 363 l 288 349 l 295 349 q 305 373 295 358 q 302 410 305 387 q 319 424 303 419 l 312 481 q 329 495 329 490 l 329 498 q 302 471 302 498 m 203 461 l 200 461 q 170 465 188 461 q 159 461 163 461 q 125 465 142 465 q 112 454 125 454 q 92 461 101 461 l 85 448 q 92 444 92 448 q 119 451 104 451 q 109 427 119 439 q 125 451 120 427 q 251 468 197 451 l 251 475 q 244 481 251 481 l 241 481 q 203 461 218 461 m 58 444 l 58 441 l 61 441 q 71 451 61 451 l 71 458 l 68 458 q 58 444 63 458 m 790 437 q 804 434 798 437 q 875 437 848 437 l 888 437 l 909 434 l 916 437 q 929 434 922 434 l 932 434 l 939 437 l 943 431 q 878 397 918 397 q 834 410 847 410 q 804 397 808 397 q 780 404 780 397 q 790 437 780 423 m 983 437 l 1034 437 l 1034 434 q 977 404 1029 415 q 939 400 954 400 l 932 400 l 932 407 q 983 437 958 437 m 1061 437 l 1133 437 q 1139 431 1139 436 l 1139 420 q 1129 383 1139 383 q 1058 427 1109 383 l 1055 427 l 1055 431 q 1061 437 1056 437 m 58 417 l 58 414 q 75 363 58 401 l 78 363 l 81 376 q 61 417 71 376 l 58 417 m 1051 410 q 1065 390 1059 410 q 1129 359 1129 373 q 1027 146 1105 247 q 990 125 1010 125 l 994 119 l 994 115 q 895 37 943 61 q 882 54 892 37 q 916 92 886 92 q 943 156 930 156 l 943 166 q 929 176 943 175 l 929 197 q 919 220 922 207 q 956 281 926 242 q 973 326 961 313 l 973 346 l 960 359 q 1014 393 975 393 q 1051 410 1021 410 m 841 387 l 865 376 l 929 383 q 963 332 949 383 q 909 227 938 260 q 919 183 909 221 q 909 180 912 180 l 909 176 q 929 166 929 176 q 912 102 920 145 q 871 78 871 83 l 871 47 q 793 78 831 47 q 760 105 786 78 q 685 115 715 109 l 685 112 q 665 119 665 115 q 627 112 646 112 q 590 166 614 140 q 536 220 590 177 q 502 248 536 225 q 509 254 503 254 q 583 244 551 244 l 607 244 q 773 376 725 244 l 777 376 q 797 373 794 373 q 841 387 827 387 m 963 387 l 966 380 q 960 373 966 373 l 953 373 l 953 383 q 963 387 956 383 m 186 315 q 156 322 163 319 q 146 319 149 319 l 146 315 q 186 295 180 315 l 193 292 q 227 312 193 312 q 241 315 227 315 l 241 309 l 248 309 l 248 312 l 244 319 q 261 336 252 319 l 261 339 l 258 339 q 186 315 214 319 m 254 322 l 254 319 q 295 295 264 295 l 298 295 q 305 302 305 295 q 254 322 268 302 m 88 315 l 85 309 l 85 305 l 92 305 l 92 278 l 98 278 q 102 302 102 293 l 88 315 m 119 315 l 119 309 l 122 309 q 129 315 129 309 l 119 315 m 319 298 q 373 278 362 298 l 404 254 l 407 261 l 407 264 q 359 302 378 280 q 329 305 341 305 l 326 305 q 319 298 319 304 m 95 275 l 92 261 l 98 261 l 98 275 l 95 275 m 210 251 l 210 241 l 217 237 l 217 241 q 214 251 214 248 l 210 251 m 485 237 l 488 237 q 549 183 513 229 q 580 136 561 183 q 512 105 564 116 q 458 75 512 96 q 427 37 458 62 q 387 58 399 37 l 387 64 l 393 64 l 404 58 l 404 61 q 366 109 395 73 q 397 180 389 120 q 451 224 405 199 q 485 237 474 224 m 231 214 l 231 193 l 237 193 l 237 214 l 231 214 m 888 207 l 895 203 l 902 203 l 902 214 l 895 214 q 888 207 888 212 m 573 58 l 570 51 l 570 47 q 597 44 572 47 l 600 51 l 600 54 l 590 54 l 573 58 m 563 -3 l 570 -7 l 573 0 l 573 3 l 570 3 q 563 -3 563 2 m 665 17 l 665 7 l 675 7 l 675 17 l 665 17 m 817 170 l 827 170 q 834 176 834 170 l 834 183 l 831 183 q 817 170 825 183 m 448 24 l 448 20 q 465 3 448 16 l 468 3 l 468 7 q 448 24 460 24 m 670 46 l 668 47 q 667 43 668 45 l 670 46 m 648 61 l 648 51 l 651 51 q 658 58 658 51 l 658 61 l 648 61 m 633 51 q 634 61 634 55 q 624 68 634 68 q 608 52 616 68 q 621 37 612 44 q 627 41 625 39 l 627 44 q 633 51 629 50 m 498 68 q 495 58 498 64 l 502 54 q 509 61 509 54 l 509 68 l 498 68 m 671 68 l 682 68 q 688 75 688 68 l 678 75 q 671 68 671 73 m 753 125 l 753 119 l 770 122 l 770 129 q 763 136 770 136 q 753 125 758 136 m 878 146 l 878 142 l 885 142 l 902 146 l 902 156 l 899 156 q 878 146 878 154 m 633 51 l 658 51 l 658 47 l 654 31 l 667 43 q 661 34 665 39 l 661 27 l 671 27 l 675 44 l 670 46 l 671 47 l 699 47 q 709 17 705 47 l 715 17 l 715 37 q 722 44 717 44 q 756 37 756 42 q 780 10 756 33 q 777 0 777 3 l 787 0 l 787 7 q 834 -17 812 2 q 858 -10 848 -10 q 871 -20 871 -15 l 871 -24 q 743 -64 768 -64 q 739 -61 743 -61 q 746 -37 746 -47 l 739 -34 q 726 -68 732 -34 q 682 -78 682 -75 l 675 -75 l 654 -75 l 654 -64 l 631 -78 l 624 -75 q 607 -81 613 -81 l 590 -78 q 559 -81 572 -81 q 556 -78 559 -78 l 556 -81 l 549 -78 l 536 -78 q 475 -64 475 -74 q 478 -54 478 -58 l 468 -47 q 458 -68 468 -65 q 353 -41 405 -58 l 353 -37 q 397 -14 375 -14 q 444 -20 422 -20 l 448 -20 q 465 3 448 -12 l 471 3 l 471 -3 l 478 -3 q 485 3 485 -3 l 485 24 q 539 58 500 24 l 546 58 q 556 54 553 54 l 553 47 l 553 41 l 563 41 l 563 47 l 559 54 q 593 85 574 54 l 600 85 q 608 52 600 66 q 607 51 608 52 q 617 37 612 37 l 621 37 q 644 24 630 29 l 648 24 l 648 27 q 627 41 637 27 l 627 41 q 633 51 631 45 z "},"D":{"ha":1085,"x_min":-14,"x_max":1102,"o":"m -3 1133 l 34 1133 q 92 1092 54 1133 q 166 1061 92 1061 q 193 1068 178 1068 q 217 1004 217 1025 q 244 966 226 989 q 92 912 160 925 q 64 905 92 905 l 47 909 l 44 902 l 44 899 l 54 899 q 207 943 180 922 q 244 963 226 943 q 302 895 250 962 q 346 861 338 882 l 342 844 l 346 827 q 336 793 336 810 l 336 770 l 342 760 l 332 712 q 359 644 332 701 q 309 559 359 641 q 203 614 298 559 l 200 614 l 200 607 q 292 556 212 607 q 309 546 309 555 q 261 475 300 511 l 264 461 q 234 363 264 412 q 227 336 234 348 q 231 322 231 330 q 166 292 166 317 l 170 275 q 115 227 149 227 l 75 231 q 54 224 68 231 q 10 281 10 269 q 0 319 10 304 l 0 326 q 41 309 33 309 l 41 312 l 47 309 l 51 309 l 51 312 q -14 390 7 312 l -14 502 l -10 526 l -14 526 q -10 529 -14 529 l -14 570 l -14 641 q -7 661 -14 650 q -14 682 -14 672 l -14 709 q 0 715 -14 715 q -10 739 0 732 q 0 766 0 756 q -14 817 -14 806 q -10 831 -14 825 q -14 868 -14 854 l -14 882 q -7 902 -14 891 q -14 922 -14 913 l -14 1122 q -3 1133 -14 1127 m 88 1133 l 95 1133 q 119 1122 106 1133 q 136 1133 119 1133 l 315 1133 q 326 1122 320 1133 q 275 1072 326 1096 q 241 1048 257 1048 q 210 1092 230 1059 l 200 1092 l 200 1088 q 190 1092 193 1092 q 149 1085 186 1092 q 109 1109 122 1085 l 115 1119 q 112 1122 112 1119 l 105 1119 q 88 1129 88 1123 l 88 1133 m 363 1133 l 400 1133 q 427 1126 415 1133 q 465 1133 441 1133 l 481 1133 q 512 1126 490 1133 q 519 1133 513 1133 l 543 1133 l 556 1122 q 580 1129 563 1122 l 587 1126 l 593 1129 q 637 1105 610 1129 q 651 1109 644 1109 l 651 1099 q 641 1092 641 1099 l 644 1092 l 661 1095 q 692 1075 692 1084 q 685 1055 685 1064 l 685 1051 l 688 1051 q 709 1085 688 1057 q 692 1095 709 1091 l 699 1112 q 729 1099 718 1109 q 743 1102 731 1099 q 899 1031 846 1074 q 875 1024 890 1024 l 875 1017 q 912 1024 879 1017 q 956 977 956 992 q 994 939 978 977 q 1068 807 1033 912 q 1065 797 1065 800 q 1102 610 1089 797 q 1099 573 1102 603 q 1102 559 1102 567 l 1095 556 l 1085 563 l 1078 563 l 1078 556 q 1102 526 1093 541 q 1004 207 1102 378 l 990 193 l 987 193 q 973 210 987 210 q 966 200 970 200 q 909 186 944 200 l 895 193 q 875 173 887 173 l 875 186 q 882 207 875 196 l 875 210 l 858 200 l 854 200 q 848 207 848 200 q 851 220 851 213 l 827 217 q 821 237 821 224 q 827 248 824 237 l 821 251 q 807 217 814 251 q 814 197 814 206 q 807 190 807 195 l 814 190 q 821 200 821 190 l 824 200 q 841 186 824 186 q 810 146 841 170 q 824 132 810 140 q 851 153 824 138 q 916 173 851 168 q 922 163 922 173 l 939 163 l 956 159 l 956 156 q 932 132 956 151 l 929 132 l 929 149 l 922 149 l 922 136 q 821 61 922 104 l 817 61 l 817 64 l 821 78 q 817 88 817 85 l 804 88 l 804 85 q 810 64 804 75 q 732 27 800 44 q 627 7 642 7 q 610 17 610 7 l 604 17 l 607 10 q 570 0 577 6 l 556 0 q 543 3 543 0 l 519 0 l 461 0 q 424 3 447 0 q 404 0 419 0 q 393 3 397 3 q 387 44 393 20 l 410 71 q 420 44 417 71 l 424 44 q 461 78 424 78 q 549 125 502 95 q 566 136 566 125 q 559 173 559 167 q 570 176 566 176 q 556 220 556 191 q 597 241 585 241 l 597 244 l 580 244 l 570 237 l 556 237 q 553 251 556 251 l 556 258 l 556 268 l 546 268 l 617 302 q 665 326 659 326 l 661 332 q 705 390 693 380 l 705 397 q 702 400 705 400 q 726 427 709 427 q 739 414 739 424 l 753 414 q 756 417 756 414 l 763 414 q 800 420 767 414 l 804 420 l 824 417 l 827 417 l 827 420 q 814 434 814 420 q 827 454 814 437 l 824 468 q 848 512 836 498 l 848 515 q 831 536 831 515 l 831 539 q 865 604 865 564 l 865 607 q 777 539 842 572 q 732 515 743 515 l 729 522 l 729 576 q 743 604 729 589 l 743 607 q 729 617 729 607 l 729 641 q 648 824 729 749 q 604 844 609 844 q 702 888 604 888 q 719 817 710 873 q 736 793 730 817 l 732 773 q 790 671 769 700 l 790 665 l 777 641 l 777 637 q 821 610 777 633 q 834 593 827 595 l 838 593 l 834 617 l 841 621 l 844 621 q 861 614 861 620 l 878 617 l 882 617 q 919 597 889 617 q 936 587 927 597 q 1004 631 978 631 q 1024 621 1007 621 l 1044 624 l 1065 617 l 1068 624 l 1068 631 q 1048 637 1062 631 l 1027 634 l 1024 634 q 987 641 1019 634 l 973 641 q 905 614 958 614 q 885 634 892 633 q 824 627 851 627 q 793 644 793 631 q 807 671 805 671 q 743 810 743 764 q 722 844 737 810 l 726 851 q 719 885 726 858 q 722 888 722 885 q 732 885 726 888 q 787 919 787 892 q 790 929 790 919 l 790 932 q 773 943 784 932 l 773 939 l 777 916 q 732 899 748 899 l 719 899 l 685 902 l 685 899 l 678 902 l 627 902 q 576 854 610 902 q 481 882 550 854 q 424 865 481 869 l 390 865 q 359 902 373 902 q 356 916 356 902 l 339 912 l 336 912 q 322 932 336 917 q 261 1007 322 954 l 258 1024 q 295 1055 258 1029 q 332 1078 295 1067 q 370 1105 347 1105 l 370 1109 q 353 1119 353 1109 l 353 1122 q 363 1133 353 1127 m 366 1109 q 373 1102 368 1102 l 380 1102 q 373 1109 380 1109 l 366 1109 m 607 1085 l 607 1082 l 610 1082 q 621 1092 615 1082 l 614 1092 q 607 1085 607 1090 m 549 1088 q 559 1068 551 1068 l 570 1068 q 556 1088 562 1088 l 549 1088 m 583 1075 l 580 1068 l 590 1068 q 583 1075 590 1075 m 617 1072 q 600 1055 617 1055 l 600 1051 q 607 1044 602 1044 q 627 1068 611 1044 l 627 1072 l 617 1072 m 519 1065 l 515 1051 l 522 1051 q 532 1061 522 1061 l 532 1065 l 519 1065 m 41 1058 l 41 1051 l 44 1051 q 51 1058 51 1051 l 41 1058 m 732 1041 l 732 1034 l 736 1027 q 763 1034 763 1029 l 804 1017 l 807 1017 l 807 1024 q 763 1044 800 1024 q 732 1041 745 1041 m 315 1038 l 315 1031 l 322 1031 q 329 1038 329 1031 q 326 1041 326 1038 q 315 1038 319 1038 m 492 1024 l 492 1014 l 495 1014 q 505 1038 505 1034 q 492 1024 500 1038 m 831 1034 q 814 1014 831 1014 q 824 1004 814 1009 l 838 1004 q 844 1024 838 1017 q 831 1034 844 1029 m 621 1014 l 627 960 l 634 960 l 634 994 l 631 1000 l 668 1021 q 678 1010 668 1016 l 685 1010 q 712 1017 688 1010 q 722 1014 719 1014 l 722 1017 l 719 1024 l 695 1021 l 668 1021 q 661 1031 668 1031 q 621 1014 633 1014 m 271 1021 l 271 1017 l 278 1017 l 278 1027 q 271 1021 271 1026 m 726 1017 q 736 1007 726 1013 l 739 1007 l 739 1017 l 726 1017 m 729 983 l 729 980 q 736 973 730 973 l 739 980 l 732 983 l 729 983 m 451 943 l 451 932 l 454 932 q 485 980 454 937 l 478 980 q 451 943 474 980 m 648 946 l 648 943 q 682 912 660 943 l 682 916 q 651 946 682 935 l 648 946 m 773 882 l 773 878 l 787 878 l 787 882 l 773 882 m 946 810 l 943 804 l 943 800 l 960 800 l 960 807 l 946 810 m 370 807 l 373 807 l 373 783 l 370 783 q 363 790 363 783 l 363 800 q 370 807 364 807 m 366 736 l 373 736 l 373 732 q 366 726 373 726 l 366 736 m 95 712 q 81 695 95 695 q 61 702 71 702 q 17 688 28 688 l 10 688 l 10 678 l 37 678 q 68 688 50 688 q 119 654 81 688 q 173 631 142 654 q 203 617 191 631 l 207 617 q 156 644 207 634 q 115 668 156 663 l 98 688 l 102 709 l 102 712 l 95 712 m 1051 614 l 1051 604 q 1061 593 1051 599 l 1065 600 l 1065 604 q 1055 614 1065 608 l 1051 614 m 370 580 l 373 573 l 373 498 q 366 492 373 492 l 363 492 l 336 509 q 370 580 336 556 m 861 546 l 871 546 l 888 549 l 888 556 q 861 546 861 554 m 807 543 q 814 502 810 539 q 797 451 800 484 q 787 444 787 451 l 787 441 l 793 431 l 790 424 l 773 427 l 729 427 q 705 444 705 441 q 715 492 705 454 q 712 495 712 492 l 807 543 m 319 488 l 329 488 q 373 461 373 468 l 373 434 q 366 427 373 427 l 356 427 l 349 444 l 342 444 l 342 434 q 373 397 373 415 l 373 264 l 441 264 l 475 268 q 478 264 475 264 l 475 258 l 475 254 l 481 254 l 488 258 q 495 241 495 247 q 526 254 513 242 l 529 254 l 529 251 q 539 142 529 178 l 539 136 l 478 105 q 414 85 478 100 q 410 81 414 81 q 383 115 403 81 q 346 142 377 115 q 326 149 335 149 q 315 139 326 144 l 312 139 q 302 149 307 139 l 309 149 q 268 200 309 172 q 248 254 253 254 q 207 285 225 285 l 207 295 l 217 295 q 271 346 271 295 q 295 400 271 359 q 292 404 295 404 l 298 451 q 295 465 295 457 q 319 488 298 465 m 712 383 q 719 376 713 376 l 722 383 l 722 390 l 719 390 q 712 383 712 389 m 732 370 l 736 370 q 766 373 754 373 l 766 376 q 756 383 766 383 q 732 370 732 378 m 895 383 l 895 380 q 902 373 897 373 l 905 380 l 899 383 l 895 383 m 685 346 l 685 336 l 692 336 q 699 342 699 336 l 699 349 l 695 349 q 685 346 688 346 m 0 346 l 10 346 l 10 336 l 3 336 q 0 346 3 339 m 949 302 l 956 302 q 966 305 963 305 l 966 315 l 960 315 q 949 302 955 315 m 902 305 q 892 275 902 297 l 916 268 l 922 278 l 922 281 l 912 281 l 912 275 l 909 275 l 905 292 l 909 305 l 902 305 m 0 298 l 3 298 q 14 281 8 298 q 7 261 7 271 q 51 197 51 218 l 51 173 l 71 203 l 78 203 q 85 197 85 202 q 34 109 52 129 l 7 85 q 0 92 0 85 l 0 254 q 3 268 0 262 q 0 281 0 274 l 0 298 m 197 261 q 224 214 197 248 q 248 156 224 169 q 292 102 267 156 l 309 102 q 312 105 312 102 q 370 47 370 81 q 298 7 355 22 q 261 -20 277 -20 l 231 -20 q 227 -17 227 -20 l 220 -20 l -3 -20 q -14 -10 -8 -20 l -14 0 q 51 88 -14 41 q 85 176 77 165 q 176 231 176 183 q 197 234 182 234 l 197 237 l 180 251 l 180 258 l 197 261 m 682 271 q 665 258 682 258 l 665 254 l 668 254 q 688 271 682 254 l 682 271 m 637 268 l 637 264 l 644 251 l 637 251 l 637 244 q 654 251 648 251 l 654 261 q 648 268 654 268 l 637 268 m 939 258 q 926 237 939 251 l 926 234 l 943 234 l 949 258 l 939 258 m 871 244 l 871 241 q 882 231 871 236 l 885 231 q 892 237 892 231 l 892 241 l 875 244 l 871 244 m 604 241 l 604 234 l 624 234 q 617 241 624 241 l 604 241 m 624 203 q 627 190 627 197 l 621 186 l 617 186 q 610 200 617 200 q 590 190 599 190 l 590 183 q 604 186 597 183 q 614 170 614 186 l 617 170 l 654 210 l 658 210 l 671 197 q 675 224 671 205 l 668 224 q 624 203 624 212 m 563 220 l 563 214 l 566 214 q 576 217 573 217 l 576 220 l 563 220 m 387 210 q 393 203 388 203 q 400 210 400 203 l 400 217 l 393 217 q 387 210 387 216 m 766 200 l 766 190 l 773 190 l 773 200 l 766 200 m 838 190 l 848 190 l 848 180 l 844 180 q 838 186 838 180 l 838 190 m 963 180 l 963 176 q 953 166 963 172 l 946 166 q 939 173 939 166 l 939 176 l 963 180 m 726 166 l 726 156 q 732 163 732 156 l 732 166 l 726 166 m 770 149 q 766 139 770 146 l 777 139 l 777 149 l 770 149 m 434 142 q 437 132 437 136 l 444 132 l 444 146 l 441 146 l 434 142 m 546 122 l 543 68 l 563 31 l 566 31 q 573 37 573 31 q 549 92 549 58 q 553 119 553 111 l 546 122 m 783 105 l 783 95 l 790 95 l 790 102 l 793 102 q 800 92 800 102 q 810 112 810 95 q 807 115 807 112 q 783 105 792 105 m 414 17 l 417 17 q 431 41 421 17 l 431 44 l 427 44 q 414 17 418 44 m 366 37 q 376 7 370 14 q 356 0 366 0 l 305 0 l 305 10 q 366 37 348 37 z "},"E":{"ha":949,"x_min":-7,"x_max":953,"o":"m 3 1133 q 20 1119 3 1122 l 24 1112 q 20 1099 20 1106 q 41 1129 24 1099 q 88 1133 60 1129 l 109 1129 q 170 1133 140 1133 l 186 1133 q 224 1129 201 1133 l 231 1133 q 234 1129 234 1133 l 275 1133 l 393 1133 q 404 1116 399 1133 q 451 1133 420 1127 l 590 1133 l 610 1129 q 627 1133 616 1133 q 668 1129 633 1133 l 675 1133 q 722 1116 683 1133 l 722 1109 q 712 1105 712 1109 q 702 1109 705 1109 q 654 1041 654 1109 q 631 953 631 1015 q 634 939 634 947 q 614 916 614 926 l 600 916 q 519 953 520 948 q 488 973 502 973 q 563 912 524 926 q 593 892 585 902 q 580 865 585 865 l 366 865 l 366 709 l 526 709 l 526 705 q 468 682 526 699 q 373 576 401 620 q 309 522 367 576 q 271 515 295 515 l 251 515 q 231 553 231 515 q 210 593 228 593 l 207 610 l 210 627 q 153 729 177 697 l 153 739 q 163 770 163 752 l 163 773 q 102 817 134 773 l 102 824 q 183 875 107 831 q 234 905 234 901 l 234 943 q 302 980 238 962 q 376 1017 312 1000 q 404 1007 393 1007 l 410 1007 q 444 1014 417 1007 l 461 1010 l 468 1014 q 492 1004 485 1004 l 522 1007 q 583 960 522 1003 l 583 953 l 590 953 q 522 1024 590 971 q 492 1034 492 1024 l 458 1031 q 448 1034 454 1031 q 427 1027 434 1027 l 427 1031 q 400 1021 410 1021 l 397 1021 l 397 1027 q 410 1038 397 1036 l 410 1065 q 407 1068 410 1068 l 417 1088 l 417 1102 l 407 1102 q 393 1082 407 1082 l 397 1075 q 332 1024 397 1038 l 295 1004 q 231 977 292 993 l 220 977 q 200 990 203 977 l 149 983 q 139 987 142 987 q 129 983 132 983 q 109 990 115 990 l 109 983 q 125 973 125 983 l 125 970 q 115 953 125 953 l 115 946 q 119 943 115 943 q 92 888 114 911 l 92 885 l 95 885 q 105 888 102 888 q 112 861 112 876 q 75 787 86 861 l 61 783 q 17 807 26 807 q 7 804 10 804 l 14 814 l 10 814 l -7 810 l -7 1021 l -3 1041 q -7 1058 -7 1046 l -7 1088 q -3 1092 -7 1092 l -7 1099 l -7 1122 q 3 1133 -7 1127 m 753 1133 q 760 1126 760 1131 l 753 1122 q 746 1129 746 1122 l 753 1133 m 790 1133 l 922 1133 q 939 1078 932 1133 q 912 1092 916 1092 l 895 1092 l 895 1088 q 946 1027 935 1088 l 946 875 q 936 865 946 870 l 885 865 q 882 868 882 865 l 875 865 l 654 865 l 637 868 l 637 871 q 678 929 650 896 l 678 936 q 709 1041 678 996 q 715 1068 709 1056 q 712 1082 712 1074 q 773 1102 773 1088 l 773 1129 l 790 1133 m 454 1088 l 454 1085 l 461 1085 q 468 1092 468 1085 l 468 1099 l 465 1099 q 454 1088 460 1099 m 339 1092 l 329 1072 l 336 1072 q 349 1092 349 1078 l 339 1092 m 285 1082 l 285 1075 l 295 1075 l 295 1082 l 285 1082 m 512 1072 l 512 1068 l 529 1068 l 529 1075 l 512 1072 m 234 1058 l 234 1055 l 244 1055 l 251 1058 q 248 1068 248 1065 l 244 1068 q 234 1058 239 1068 m 292 1055 q 295 1051 295 1055 q 305 1055 302 1055 l 305 1065 l 302 1065 q 292 1055 297 1065 m 529 1051 l 529 1044 l 546 1048 l 546 1051 l 536 1051 q 532 1048 536 1048 q 529 1051 532 1051 m 180 1031 l 166 1031 l 166 1024 l 183 1021 l 190 1021 q 203 1034 195 1021 q 200 1038 200 1034 q 180 1031 189 1031 m 31 1027 l 31 1017 l 44 1017 q 34 1027 44 1022 l 31 1027 m 214 1024 l 214 1014 l 217 1014 q 224 1021 224 1014 l 217 1024 l 214 1024 m 146 977 l 153 973 q 183 977 165 973 q 197 973 189 973 l 203 977 q 237 953 237 962 q 183 888 237 901 q 129 861 136 861 l 119 895 q 139 949 132 918 q 149 960 144 949 l 142 970 l 146 977 m 44 848 l 64 848 q 71 854 71 848 l 71 858 l 64 858 q 44 848 44 856 m 102 814 q 115 783 111 814 l 98 783 q 88 793 94 783 l 88 797 q 102 814 97 814 m 214 810 l 207 800 l 207 793 l 231 800 l 231 807 l 214 810 m 44 790 q 64 770 53 772 q 129 777 109 777 q 156 766 148 766 q 142 726 142 729 q 210 590 184 684 q 231 519 219 590 l 224 515 l 203 515 l 180 512 q 173 519 180 519 l 170 519 l 176 509 l 176 505 q 159 475 159 488 q 173 461 159 469 l 176 461 l 173 485 q 210 505 180 494 l 251 505 q 288 454 251 466 l 292 454 l 292 458 q 258 495 258 471 l 258 502 l 261 502 q 278 498 273 502 q 356 526 342 498 q 407 563 359 545 q 441 617 407 597 q 498 668 492 668 q 553 685 509 668 l 559 685 q 570 675 564 685 q 563 624 563 643 q 573 614 568 624 q 522 553 573 553 q 488 536 488 548 l 495 536 q 563 549 517 543 q 590 498 568 498 q 597 488 590 488 q 610 492 603 492 q 637 444 635 456 l 631 441 l 481 441 q 468 448 473 448 q 448 441 457 441 l 373 441 l 373 346 q 363 336 373 341 q 373 309 373 319 l 373 305 l 370 285 q 383 261 374 261 q 420 264 406 264 l 427 264 l 448 261 l 454 264 q 458 261 458 264 l 475 264 l 583 264 q 553 224 583 242 l 546 210 q 556 180 546 206 l 505 156 l 461 163 q 458 159 461 159 l 458 163 q 424 146 428 146 l 380 153 q 346 146 351 146 l 346 139 l 349 139 l 366 142 q 373 119 373 125 l 376 119 l 376 129 q 373 139 373 136 q 393 146 384 146 q 397 139 393 139 l 404 142 q 424 136 414 136 l 427 136 q 522 156 460 149 q 559 166 522 163 q 570 132 566 154 q 566 122 566 125 q 580 85 580 102 l 580 81 q 570 78 576 81 l 617 7 l 617 3 l 600 0 l 576 3 l 559 0 q 539 10 539 0 q 488 0 507 0 l 481 0 q 444 3 456 0 q 400 0 422 0 l 326 0 l 315 7 q 288 0 312 7 l 275 0 q 248 3 251 0 q 210 0 224 0 l 149 0 q 119 3 132 0 q 85 0 101 0 l 10 0 q 0 10 5 0 l 0 644 q 3 682 0 659 q 0 709 0 685 l 0 770 q 7 787 1 787 q 44 790 37 790 m 597 722 l 831 722 l 848 688 l 848 532 q 793 502 848 502 q 675 458 785 502 q 590 539 621 539 q 583 559 583 550 l 583 580 q 593 627 593 624 l 593 637 q 587 658 593 647 q 597 712 587 661 l 597 722 m 437 539 l 437 529 q 468 522 460 526 l 485 536 q 475 549 478 549 q 437 539 456 539 m 824 492 l 834 492 q 841 485 841 490 l 841 451 q 831 441 841 446 l 709 441 q 702 448 702 441 q 800 485 767 477 q 824 492 816 485 m 485 478 q 475 454 485 471 l 478 454 q 488 475 484 454 l 488 478 l 485 478 m 295 451 q 302 414 302 437 l 302 404 q 264 383 302 397 q 251 393 264 392 q 217 387 230 387 l 217 380 l 220 380 q 264 383 222 380 q 275 370 270 370 q 315 390 275 378 q 305 451 312 426 l 295 451 m 88 404 l 88 400 q 98 393 88 393 l 98 383 q 88 376 88 383 q 102 366 102 376 l 105 366 q 112 387 105 387 l 119 387 l 132 376 l 142 376 q 88 404 114 404 m 197 393 l 197 383 q 207 387 203 387 l 207 390 q 197 393 203 390 m 47 376 l 51 376 l 75 380 l 75 387 l 68 387 q 47 376 47 385 m 146 376 q 176 359 146 366 q 190 363 178 359 q 203 359 196 359 l 203 370 l 200 376 q 176 370 176 374 q 149 376 164 376 l 146 376 m 302 329 l 319 329 q 336 346 319 346 l 336 356 q 302 329 319 356 m 261 353 q 241 315 261 349 q 261 309 248 309 q 251 298 261 304 q 254 285 254 292 l 258 285 q 278 292 267 285 q 319 278 291 284 l 329 278 l 329 281 q 295 298 329 292 l 295 305 q 309 312 309 305 l 305 312 l 292 309 q 258 322 258 317 q 264 349 258 326 l 264 353 l 261 353 m 342 336 l 342 329 l 356 329 l 356 336 l 342 336 m 315 312 l 322 309 q 329 326 329 319 l 326 326 q 315 312 321 326 m 210 302 l 224 302 q 217 309 224 309 q 210 302 210 307 m 183 268 l 183 264 l 186 264 q 210 288 191 264 l 210 292 l 203 292 q 183 268 197 292 m 624 264 l 807 264 q 838 210 838 264 q 824 197 832 210 l 824 190 q 851 217 847 217 q 861 214 858 214 l 868 217 q 895 190 892 217 q 916 183 905 190 q 929 186 922 186 q 939 170 929 177 q 888 44 918 44 q 858 34 860 34 l 858 31 l 861 31 l 882 34 l 888 34 l 895 31 q 912 47 895 35 l 919 47 q 946 27 946 47 l 946 10 q 936 0 946 5 q 909 3 933 0 q 895 0 903 0 q 888 7 895 7 q 868 0 878 0 l 838 0 l 838 14 l 848 31 l 841 31 q 787 0 828 0 l 766 0 q 763 3 763 0 l 756 0 l 648 0 q 614 41 625 0 q 590 78 590 50 q 621 115 598 115 q 678 125 621 123 l 678 132 q 665 136 667 136 q 590 122 608 122 l 563 207 q 590 234 563 212 q 624 264 590 260 m 841 264 l 885 264 q 905 241 901 241 l 909 241 q 949 261 916 241 l 953 254 q 926 197 953 243 q 905 217 916 197 l 912 231 l 905 234 q 851 224 905 224 l 848 231 l 851 248 q 838 254 843 254 q 841 264 841 261 m 102 200 l 105 180 l 109 180 l 112 203 q 109 207 109 203 q 115 214 115 207 l 115 220 q 102 200 109 220 m 390 214 q 397 207 391 207 q 404 214 404 207 l 404 220 l 397 220 q 390 214 390 219 m 363 193 l 370 190 q 380 193 376 193 l 380 200 l 370 200 q 363 193 363 199 m 465 180 l 465 176 l 478 176 q 505 190 481 190 q 495 197 505 197 q 465 180 465 189 m 515 186 l 515 180 l 529 180 l 529 186 l 515 186 m 824 183 q 804 156 813 156 l 804 149 q 834 176 834 174 q 827 183 834 183 l 824 183 m 95 166 l 95 132 l 98 132 l 102 156 l 102 166 l 95 166 m 865 166 l 865 163 l 878 163 l 878 166 l 865 166 m 302 149 l 302 146 q 315 156 315 151 l 309 156 q 302 149 302 155 m 766 132 q 793 125 783 132 q 797 136 793 129 l 790 139 l 773 139 q 766 132 766 138 m 695 119 l 699 119 q 705 125 705 119 l 702 125 q 695 119 695 124 m 102 112 l 102 102 l 115 102 l 115 105 q 109 112 115 112 l 102 112 m 427 105 l 427 102 q 434 95 429 95 l 437 102 l 437 105 l 427 105 m 624 102 l 624 85 l 627 85 q 634 92 627 92 l 634 102 l 624 102 m 838 92 l 838 81 l 841 81 q 848 88 848 81 l 848 92 l 838 92 m 949 95 l 953 95 l 953 75 l 949 58 l 946 58 q 939 64 939 58 l 939 68 q 949 95 939 93 m 51 81 l 51 78 q 58 85 58 78 l 58 88 q 51 81 51 87 m 393 88 q 400 81 395 81 q 407 88 407 81 l 393 88 m 505 61 q 526 51 509 51 l 539 51 q 566 78 546 78 l 566 85 q 559 88 559 85 q 532 61 551 88 l 505 61 m 339 44 l 339 41 l 342 41 l 383 71 l 383 78 q 339 44 351 71 m 424 64 q 414 68 417 68 l 414 61 l 427 61 q 471 68 441 61 l 478 58 l 498 61 l 498 64 q 475 75 490 64 l 475 71 l 468 75 l 461 75 q 424 64 447 64 m 20 54 l 20 44 q 27 51 27 44 l 27 54 l 20 54 m 380 24 l 380 14 l 383 14 q 390 20 390 14 l 390 24 l 380 24 z "},"F":{"ha":882,"x_min":0,"x_max":902,"o":"m 10 1133 l 136 1133 q 142 1126 142 1131 l 142 1122 q 132 1085 132 1108 l 136 1085 q 156 1129 142 1085 l 173 1133 l 203 1133 q 210 1126 210 1131 q 271 1133 244 1133 l 295 1133 q 322 1129 309 1133 q 349 1133 335 1133 l 366 1133 q 383 1129 378 1133 l 404 1133 l 420 1133 q 465 1129 448 1133 q 512 1133 486 1133 l 566 1133 l 566 1122 q 515 1061 530 1122 q 488 1048 488 1057 l 488 1044 q 492 1031 488 1037 q 454 980 477 980 q 441 977 447 980 q 363 1014 387 1014 l 363 1017 q 366 1021 363 1021 q 356 1034 361 1034 q 326 1021 340 1034 l 302 1024 l 298 1024 q 258 1014 290 1024 l 251 1014 l 241 1021 l 214 1021 q 159 1017 194 1021 q 146 1021 153 1021 q 129 1014 135 1014 l 129 1024 l 146 1027 l 146 1031 q 132 1058 146 1043 l 132 1082 l 129 1082 q 119 1061 119 1078 q 132 1041 119 1058 q 81 1007 124 1007 q 47 990 74 990 l 41 990 q 3 1021 33 1005 q 0 1034 0 1027 l 0 1122 q 10 1133 0 1127 m 644 1133 q 699 1126 667 1133 q 712 1129 705 1129 q 760 1099 723 1129 q 777 1095 765 1095 l 790 1095 q 756 1105 790 1102 q 743 1129 743 1121 l 749 1133 l 892 1133 q 902 1122 897 1133 l 902 1099 q 878 1082 900 1090 q 875 1092 875 1088 l 871 1092 l 861 1085 l 834 1105 l 824 1105 q 817 1099 817 1104 q 858 1075 844 1099 q 854 1061 854 1069 l 858 1061 l 899 1078 l 902 1072 l 902 1041 q 899 1014 902 1027 q 902 987 902 1001 l 902 960 q 861 929 902 935 l 861 926 l 871 919 l 875 919 l 895 936 l 902 926 l 902 895 q 895 878 902 878 l 899 871 l 899 868 l 882 865 l 831 865 q 766 868 804 865 q 756 865 760 865 q 739 878 755 871 l 743 885 l 743 888 q 668 929 730 888 q 624 912 627 916 l 617 916 q 587 905 611 916 l 553 909 q 536 902 542 902 q 478 919 499 919 l 468 919 l 468 946 q 532 966 468 958 q 556 943 532 962 l 556 946 q 526 980 547 966 q 556 1051 534 1051 q 583 1095 566 1051 q 644 1133 633 1133 m 773 1102 q 780 1095 774 1095 l 783 1095 q 790 1102 790 1095 l 773 1102 m 400 1068 q 407 1061 401 1061 l 410 1061 l 410 1075 l 407 1075 q 400 1068 400 1074 m 800 1051 l 790 1021 l 793 987 q 780 980 785 980 l 780 973 l 783 973 l 800 983 l 797 1007 q 807 1051 797 1018 l 800 1051 m 346 1014 q 427 977 391 977 l 427 970 q 417 960 427 965 l 424 946 q 387 865 406 865 l 373 865 l 373 848 q 342 807 373 807 l 342 800 q 359 793 359 800 l 359 770 q 349 763 359 763 l 349 756 l 353 756 l 370 760 l 370 715 l 353 692 q 404 654 353 671 q 407 617 407 625 l 376 580 l 346 580 q 278 526 278 557 l 264 519 q 224 529 233 529 q 203 495 203 529 l 200 495 l 200 505 l 193 505 q 142 458 193 474 q 112 441 142 445 q 64 451 75 451 q 34 444 52 444 q 0 458 0 451 l 0 559 q 3 610 0 595 q 0 668 0 636 l 0 807 q 24 821 5 821 l 44 821 l 44 827 l 41 827 l 7 824 l 0 834 l 0 854 q 41 912 0 912 q 61 932 41 914 l 61 946 l 54 956 l 54 963 q 136 997 82 997 q 146 1000 136 1000 l 163 997 l 163 994 q 132 970 163 989 l 132 956 q 186 1000 140 958 l 220 1000 q 254 990 251 990 q 288 1004 267 990 q 322 997 295 1004 q 346 1014 322 1002 m 7 997 l 10 997 q 51 949 51 956 q 3 916 34 916 l 0 922 l 0 990 q 7 997 1 997 m 777 970 l 777 956 q 783 949 778 949 l 783 953 l 780 970 l 777 970 m 278 966 l 275 960 l 285 960 q 278 966 285 966 m 400 963 l 400 949 l 404 949 q 410 956 410 949 q 404 963 410 963 l 400 963 m 780 939 l 780 936 l 783 919 q 770 905 778 919 l 780 905 q 793 929 793 911 l 780 939 m 85 909 q 98 882 98 895 q 85 871 85 877 l 85 868 l 92 868 q 95 871 95 868 q 105 868 102 868 l 105 851 q 109 848 105 848 q 58 824 109 824 l 58 821 l 71 817 q 146 854 98 817 l 139 854 l 122 844 l 119 844 q 98 902 113 844 l 98 905 q 115 936 115 928 l 112 936 q 85 909 98 930 m 258 912 l 258 902 l 268 902 l 268 912 l 258 912 m 448 916 q 515 888 457 916 l 539 892 q 559 885 545 892 q 648 909 583 895 q 699 868 699 876 l 692 865 l 434 865 l 427 868 q 448 916 442 916 m 739 895 l 739 892 l 760 892 l 760 899 l 756 899 l 739 895 m 264 868 l 264 861 l 275 861 l 275 868 l 264 868 m 153 851 q 200 848 172 851 l 200 854 l 176 858 l 159 858 q 153 851 153 857 m 214 844 l 214 848 q 203 844 207 844 l 207 838 l 224 841 q 251 824 233 841 l 258 824 q 227 851 235 851 l 214 844 m 268 814 q 281 800 271 803 l 285 807 q 268 814 285 814 m 315 810 q 322 804 317 804 l 329 804 q 322 810 329 810 l 315 810 m 288 712 q 295 705 290 705 l 298 712 l 288 712 m 261 692 l 261 671 l 264 671 q 271 678 271 671 l 268 678 l 271 685 q 264 692 271 692 l 261 692 m 41 678 l 47 675 q 54 682 54 675 l 54 688 l 51 688 q 41 678 46 688 m 448 665 l 576 665 q 614 661 591 665 q 641 665 617 665 l 651 665 q 654 661 654 665 l 661 665 l 780 665 q 793 624 786 665 l 793 431 l 790 424 l 773 427 q 743 414 745 414 q 699 417 741 414 q 624 397 699 404 l 515 397 q 488 444 494 397 q 481 461 481 455 l 485 461 q 475 488 475 478 l 478 512 q 458 553 470 512 q 434 580 438 580 q 441 607 441 606 q 437 634 441 610 q 448 665 440 665 m 648 627 q 651 617 651 621 q 668 644 656 617 l 665 644 q 648 627 661 644 m 590 627 l 600 627 l 600 634 l 597 634 q 590 627 590 633 m 743 627 l 743 617 l 746 617 q 753 624 753 617 l 753 627 l 743 627 m 519 590 l 526 587 q 576 610 573 602 l 573 610 q 519 590 519 600 m 617 597 q 624 590 618 590 q 631 607 631 601 l 627 607 q 617 597 623 607 m 590 593 l 590 590 l 593 590 q 604 600 598 590 l 597 600 q 590 593 590 599 m 458 580 l 458 576 q 512 593 512 583 l 502 593 q 458 580 458 587 m 705 587 l 705 576 l 712 576 l 712 580 q 705 587 712 587 m 149 570 l 159 570 l 159 576 l 156 576 q 149 570 149 575 m 556 563 l 556 559 l 566 559 q 580 566 574 566 l 580 573 l 566 573 q 556 563 562 573 m 397 566 l 400 566 q 437 502 437 529 q 451 441 441 502 q 461 414 461 428 l 461 400 l 444 397 l 427 400 q 383 397 405 397 l 373 397 l 373 295 q 363 288 373 288 l 363 285 l 373 271 l 373 258 q 370 210 373 239 q 373 200 373 203 q 366 173 366 182 l 373 170 q 370 156 373 162 q 373 92 373 119 l 373 81 q 366 58 373 58 q 373 7 373 25 l 363 0 l 159 0 l 139 3 l 132 0 q 115 7 121 7 q 105 0 105 3 q 88 20 100 0 q 68 54 78 20 l 58 61 q 17 37 33 53 l 14 37 q 0 64 5 37 l 0 88 q 3 102 0 102 l 0 125 l 0 298 q 3 342 0 320 q 0 380 0 355 l 0 424 q 14 434 0 433 q 34 427 24 427 q 61 434 37 427 q 105 424 71 434 q 153 431 141 431 q 159 410 159 423 l 166 410 q 163 424 166 418 q 166 437 166 430 q 146 444 146 437 q 153 451 147 451 q 173 448 155 451 q 224 502 180 448 q 237 509 237 502 q 271 498 255 498 l 281 498 q 359 563 314 548 l 380 559 l 387 559 l 397 566 m 237 437 q 244 431 239 431 l 248 431 l 248 444 l 244 444 q 237 437 237 443 m 529 417 q 536 410 530 410 l 539 410 q 549 420 544 410 l 546 420 l 529 417 m 766 414 q 777 404 771 414 q 770 397 777 397 l 726 397 l 726 404 q 766 414 756 414 m 705 407 l 709 400 l 709 397 l 699 397 q 692 404 692 397 q 705 407 694 404 m 180 387 l 183 363 l 190 363 l 186 387 l 180 387 m 312 356 l 326 356 q 332 370 326 361 l 332 373 q 312 356 312 373 m 170 305 q 176 298 176 304 q 173 288 173 292 l 183 288 q 193 305 183 294 l 193 322 l 197 322 l 227 319 l 227 322 q 193 349 193 340 l 173 309 q 170 305 170 309 m 248 329 l 248 315 q 258 305 248 311 l 264 305 q 275 315 269 305 q 261 329 275 321 l 248 329 m 302 305 l 302 295 l 309 295 q 315 302 315 295 l 315 309 l 312 309 q 302 305 305 305 m 159 302 q 156 292 159 298 l 163 292 q 166 302 163 295 l 159 302 m 125 275 l 125 271 l 132 271 q 139 278 139 271 l 139 281 l 132 281 q 125 275 125 280 m 248 227 l 248 220 l 261 220 l 261 224 l 258 231 q 248 227 251 227 m 292 224 l 292 220 q 298 214 293 214 l 305 214 q 309 224 305 217 l 292 224 m 322 224 l 322 220 q 346 200 322 216 l 359 200 q 363 210 359 203 q 322 224 353 210 m 342 173 l 342 159 q 356 170 356 165 l 349 173 l 342 173 m 312 153 l 312 142 q 319 149 319 142 l 319 153 l 312 153 m 180 109 l 180 85 q 186 92 186 85 l 186 115 q 180 109 180 114 m 180 75 q 142 34 172 34 l 142 27 l 146 27 q 180 54 180 43 q 186 71 180 60 l 180 75 m 61 51 l 71 37 l 68 20 q 85 10 79 10 l 85 7 q 78 0 85 0 l 64 0 q 37 3 50 0 q 10 0 24 0 q 0 10 5 0 l 0 24 q 10 34 0 28 q 14 31 14 34 q 61 51 47 51 m 278 20 l 275 14 l 281 10 l 285 10 l 285 14 q 278 20 285 20 z "},"G":{"ha":1153,"x_min":0,"x_max":1149,"o":"m 532 1156 l 532 1153 l 539 1156 l 610 1156 q 648 1153 625 1156 q 651 1156 651 1153 q 787 1119 787 1137 q 800 1109 800 1114 l 800 1105 q 790 1102 790 1105 q 780 1105 783 1105 q 732 1034 739 1105 q 712 1000 730 1034 q 715 997 712 997 q 709 953 711 960 q 712 939 712 947 q 688 912 692 912 l 678 912 q 573 970 606 939 l 570 970 q 668 895 593 926 q 671 888 668 888 q 661 868 667 868 q 587 882 640 878 q 390 705 440 882 q 370 559 376 654 q 373 546 373 553 l 373 522 q 363 512 373 517 l 322 512 q 302 583 312 512 q 285 607 290 583 q 288 621 288 613 l 288 627 l 231 732 q 244 766 244 756 q 186 807 211 776 l 183 807 l 186 783 l 180 780 l 176 780 q 156 787 167 780 l 142 780 q 102 804 134 780 l 95 804 q 92 800 95 800 q 85 810 92 810 q 41 777 57 784 q 37 780 41 780 q 176 1004 54 868 q 461 1146 299 1117 l 465 1139 q 458 1133 458 1138 l 465 1129 l 468 1129 l 475 1133 q 481 1116 481 1124 l 488 1116 q 529 1143 529 1129 q 515 1149 515 1143 l 532 1156 m 848 1095 q 1105 865 1023 1030 q 1149 719 1147 768 l 1143 715 l 1058 715 l 1044 732 q 1031 719 1039 732 q 1021 722 1024 722 q 1000 715 1010 715 l 936 715 q 905 726 930 715 l 892 722 q 834 753 861 753 q 709 834 833 759 l 709 838 q 749 902 709 858 q 780 1021 749 962 q 787 1048 787 1042 q 783 1058 783 1055 q 848 1095 848 1058 m 309 966 l 292 966 q 275 980 275 978 l 268 977 l 244 977 q 231 973 237 977 l 224 977 l 207 973 q 186 980 196 980 l 186 973 q 207 956 207 973 q 193 943 203 943 q 197 922 193 940 q 170 885 183 885 l 170 875 q 190 858 190 875 l 190 854 q 159 793 159 835 l 159 790 q 237 848 189 828 q 309 885 274 878 q 363 963 309 963 q 454 1007 434 1007 q 481 997 471 997 q 522 1004 498 997 l 539 1000 l 546 1004 q 570 994 563 994 l 600 997 q 661 956 600 988 l 661 960 q 600 1010 610 1010 q 566 1024 575 1010 l 549 1021 l 532 1021 q 529 1024 529 1021 l 488 1010 l 475 1010 l 475 1017 q 492 1027 475 1023 l 488 1051 l 488 1058 q 498 1088 488 1064 q 495 1099 495 1095 q 458 1027 489 1098 q 356 980 429 1027 l 309 966 m 549 1065 l 549 1061 l 553 1061 q 563 1072 557 1061 l 563 1075 l 559 1075 q 549 1065 555 1075 m 404 1068 l 404 1065 l 410 1065 q 420 1082 418 1065 l 417 1082 q 404 1068 412 1082 m 448 1082 l 448 1078 l 461 1078 l 461 1082 l 448 1082 m 353 1068 l 353 1065 l 370 1065 l 370 1072 l 353 1068 m 607 1048 l 607 1044 l 624 1041 l 624 1051 l 607 1048 m 305 1048 l 305 1044 l 322 1044 l 322 1051 q 315 1058 322 1058 q 305 1048 311 1058 m 363 1044 q 366 1041 366 1044 q 380 1055 376 1044 l 373 1055 q 363 1044 368 1055 m 627 1024 l 627 1021 l 634 1021 q 641 1027 641 1021 l 641 1031 l 634 1031 q 627 1024 627 1029 m 241 1014 l 258 1010 l 261 1010 q 275 1024 267 1010 q 271 1027 271 1024 q 241 1014 241 1019 m 285 1014 l 285 1004 l 288 1004 q 295 1010 295 1004 l 288 1014 l 285 1014 m 207 997 q 210 987 210 990 l 214 987 l 214 997 l 207 997 m 214 966 q 234 963 231 963 q 254 966 252 966 l 275 963 l 275 966 q 309 946 309 951 l 309 936 q 231 868 309 888 q 200 851 231 859 q 193 888 197 856 q 214 943 202 900 q 220 949 220 943 l 214 960 l 214 966 m 539 943 l 539 936 l 549 936 l 549 943 l 539 943 m 115 838 l 136 838 q 142 844 142 838 l 136 848 q 115 838 115 844 m 1044 800 l 1051 797 l 1055 797 l 1055 807 l 1051 807 q 1044 800 1044 806 m 278 790 l 278 783 l 302 790 l 302 793 q 295 800 302 800 l 288 800 q 278 790 283 800 m 770 783 l 773 783 q 844 739 814 768 q 878 722 871 739 q 871 715 878 715 l 814 715 q 777 770 793 715 q 770 783 770 770 m 115 780 q 139 760 127 760 q 203 766 196 766 q 227 753 227 758 q 217 719 217 722 l 217 715 q 278 583 273 641 q 302 512 292 583 l 302 509 l 295 505 l 275 505 q 231 471 248 505 l 231 461 q 248 451 237 461 l 248 454 l 244 478 l 281 495 l 288 495 q 359 488 317 495 q 370 492 366 492 l 376 481 l 376 468 q 373 417 376 451 l 376 417 l 373 410 q 376 397 373 403 q 336 376 367 376 q 329 383 336 383 l 288 376 l 288 370 l 292 370 q 329 373 299 370 q 349 363 345 363 l 387 383 l 383 400 l 390 400 q 404 346 404 360 q 393 342 397 342 l 393 336 l 400 336 l 410 342 l 417 332 l 417 329 l 414 322 q 478 268 420 322 q 587 234 528 241 l 607 237 l 637 237 l 644 241 l 648 234 l 648 227 q 617 193 625 227 q 627 166 627 179 q 576 146 623 166 q 543 153 562 146 q 492 136 540 153 l 448 142 q 427 132 427 138 q 444 119 434 132 l 448 119 q 458 136 450 136 l 465 136 l 465 129 l 471 132 l 481 132 l 492 125 l 498 125 q 593 146 533 138 q 631 156 593 153 q 654 81 644 106 q 644 68 650 68 q 688 -3 644 63 l 692 -24 q 600 -37 631 -37 q 597 -27 597 -31 l 583 -27 q 576 -41 583 -41 l 553 -41 q 383 -14 391 -31 l 387 -7 l 383 -7 l 370 -14 q 180 102 208 43 q 176 98 176 102 q 27 346 64 191 q 14 400 22 346 q 31 404 19 404 l 10 417 l 10 434 q 34 448 28 434 q 27 454 34 454 l 24 454 l 7 451 q 3 454 7 454 q 0 536 3 457 q 41 749 9 749 q 109 780 69 780 l 115 780 m 668 614 l 983 614 q 1010 593 997 614 q 1021 614 1015 614 l 1102 614 q 1122 543 1109 614 l 1102 488 q 1146 407 1146 458 l 1146 373 q 1136 363 1146 368 q 1126 366 1129 366 l 1122 359 q 1129 353 1129 358 l 1129 342 q 1116 278 1122 336 q 1055 261 1093 264 q 1031 264 1041 264 q 1000 207 1016 229 q 990 186 1000 186 q 973 200 975 193 l 973 210 q 980 217 975 217 l 977 224 q 1014 258 1014 252 l 1007 261 q 997 254 997 258 q 987 258 990 258 q 960 244 960 252 l 960 241 l 973 227 q 916 217 973 217 q 895 271 916 229 l 895 275 q 939 261 936 261 l 943 261 q 905 295 943 268 q 827 332 905 332 q 807 326 817 326 l 804 326 q 793 346 793 329 q 797 366 793 349 q 777 383 777 366 q 753 424 777 395 q 810 451 759 437 q 926 488 846 469 q 946 485 943 485 l 949 492 l 949 495 l 946 495 q 746 431 849 487 q 651 522 699 498 q 648 529 651 529 q 668 614 648 582 m 1129 614 l 1136 614 q 1146 604 1141 614 q 1139 583 1146 597 q 1146 536 1146 557 l 1146 475 q 1139 468 1146 468 q 1122 502 1122 491 q 1136 556 1136 536 l 1119 607 l 1129 614 m 661 597 l 665 590 l 665 576 q 658 570 665 570 l 654 570 l 654 590 q 661 597 656 597 m 51 593 l 51 590 q 58 583 52 583 q 64 590 64 583 l 64 593 l 51 593 m 1058 559 q 1061 532 1061 541 q 1048 498 1048 509 l 1055 498 q 1078 536 1069 536 l 1078 543 q 1058 559 1073 543 m 1017 498 l 1034 492 l 1034 498 q 1031 509 1031 505 q 1017 498 1017 504 m 641 509 q 665 485 641 504 l 665 478 l 682 481 q 715 427 694 469 q 763 387 735 406 l 760 380 l 763 373 q 749 366 755 366 l 732 376 l 719 366 l 692 366 q 671 373 682 366 q 651 366 661 366 l 644 366 q 634 404 637 366 q 637 407 634 407 l 634 431 l 634 502 q 641 509 635 509 m 1038 485 l 1038 475 l 1044 475 l 1044 478 q 1038 485 1044 485 m 326 481 l 326 478 q 356 444 326 463 l 363 444 q 326 481 343 458 m 1082 465 l 1085 465 q 1095 475 1090 465 l 1095 478 q 1082 465 1090 478 m 51 417 l 51 410 l 64 410 l 64 417 l 51 417 m 159 393 l 159 387 q 170 380 170 387 l 170 373 q 159 366 159 373 q 180 353 170 366 l 180 356 l 176 373 l 183 376 l 190 376 l 203 366 l 210 366 l 210 370 q 159 393 186 393 m 122 366 l 125 366 l 146 370 l 146 376 l 142 376 q 122 366 122 373 m 1078 370 l 1078 363 l 1082 363 q 1095 366 1084 363 q 1109 363 1101 363 l 1109 370 l 1078 370 m 220 366 q 241 349 220 361 l 248 349 q 261 353 255 349 q 275 349 267 349 q 278 356 275 356 q 275 366 275 363 q 248 359 248 364 q 220 366 235 366 m 332 342 q 309 309 332 326 q 329 298 312 298 q 332 302 329 302 l 336 295 q 326 292 329 292 l 326 281 q 336 275 326 275 q 356 281 347 281 q 390 268 356 275 q 400 271 397 271 l 400 275 q 380 285 397 285 l 370 285 q 346 302 370 302 l 346 295 q 336 298 339 298 l 336 302 l 342 302 l 342 305 q 329 315 329 305 q 339 342 339 338 l 332 342 m 943 339 l 943 332 l 946 332 q 953 339 953 332 l 943 339 m 373 322 l 373 315 q 383 326 378 315 q 373 322 376 322 m 783 326 q 797 298 788 311 q 851 309 836 303 q 899 285 881 309 l 899 281 l 888 268 l 888 261 l 909 227 l 905 220 l 909 200 q 858 132 864 132 q 831 122 831 129 l 861 122 q 899 170 861 128 q 922 207 899 187 q 932 203 929 203 l 939 207 q 973 180 961 207 q 987 173 987 179 l 994 176 l 997 176 q 1010 159 1000 176 q 983 47 1007 117 q 929 24 964 35 l 929 20 q 983 37 968 20 l 997 37 q 1082 -10 1082 10 l 1075 -14 l 1014 -14 q 983 -10 1002 -14 q 963 -14 979 -14 l 963 -10 l 956 -14 l 912 -14 l 905 -10 q 916 14 909 3 l 916 17 l 912 17 q 902 14 905 14 q 892 88 899 18 l 885 88 q 763 3 806 16 q 705 -17 763 -5 q 671 41 694 25 q 661 64 668 54 l 661 68 q 682 102 670 102 q 749 115 711 115 q 739 125 749 120 l 671 112 l 668 112 q 637 207 637 163 q 675 248 654 208 q 783 326 720 256 m 390 312 q 387 302 390 309 l 393 298 q 400 305 400 298 l 400 312 l 390 312 m 254 258 l 254 254 l 261 254 q 285 285 285 271 l 278 285 q 254 258 274 285 m 1139 278 l 1143 278 l 1146 261 l 1146 20 q 1139 14 1146 14 q 1129 17 1133 17 q 1146 -7 1146 -3 l 1136 -14 l 1119 -14 q 1065 27 1108 -14 l 1004 51 l 1004 61 l 1031 153 q 1014 193 1014 185 l 1014 200 q 1058 248 1050 248 l 1099 248 l 1112 237 l 1112 241 q 1109 251 1109 248 q 1139 278 1139 266 m 465 203 l 465 200 l 471 200 q 478 207 478 200 l 471 210 q 465 203 465 209 m 180 207 l 176 190 l 176 170 q 186 207 184 170 l 180 207 m 393 203 l 393 193 l 397 193 q 400 203 397 197 l 393 203 m 434 183 l 434 180 l 444 180 q 451 186 451 180 l 451 190 l 441 190 q 434 183 434 189 m 543 173 l 543 170 q 566 180 554 170 l 570 180 q 593 170 581 180 l 604 170 q 566 186 604 177 q 543 173 543 182 m 390 173 l 390 166 l 397 166 l 397 180 q 390 173 390 178 m 170 159 l 166 142 l 166 125 q 173 132 173 125 l 173 159 l 170 159 m 932 156 q 939 149 934 149 l 943 149 l 943 156 l 932 156 m 373 139 l 373 136 q 387 146 387 141 l 380 146 q 373 139 373 144 m 760 115 l 760 109 l 766 109 q 787 125 787 121 l 780 125 q 760 115 764 115 m 695 85 l 695 78 q 705 88 700 78 l 705 92 l 702 92 q 695 85 695 90 m 902 75 l 909 71 l 912 78 l 912 81 l 909 81 q 902 75 902 80 m 465 78 q 471 71 466 71 q 478 78 478 71 l 465 78 m 627 78 q 597 47 602 47 q 546 64 561 54 l 546 61 l 539 64 l 532 64 q 505 54 524 59 q 492 58 499 58 l 485 58 q 492 51 486 51 l 509 51 q 543 58 515 51 q 553 47 543 53 l 559 51 q 610 41 595 41 q 637 68 620 68 l 637 75 q 627 78 634 75 m 451 75 q 424 54 451 62 q 410 34 424 47 l 410 31 l 417 31 q 431 51 431 36 l 448 51 q 458 71 458 54 l 451 75 m 1078 47 l 1078 41 l 1092 41 l 1092 44 l 1078 47 m 1105 31 l 1105 27 q 1116 20 1105 20 l 1119 20 l 1119 24 q 1105 31 1114 24 m 960 14 l 960 0 l 966 0 l 966 14 l 960 14 m 600 -3 l 600 -7 l 604 -7 q 614 -3 610 -3 l 614 3 l 607 3 q 600 -3 600 2 z "},"H":{"ha":1085,"x_min":0,"x_max":1109,"o":"m 10 1133 l 125 1133 q 146 1126 135 1133 q 166 1133 157 1133 l 166 1129 l 173 1133 l 244 1133 q 251 1126 251 1131 l 248 1095 q 264 1065 248 1076 l 264 1055 q 241 1041 246 1055 l 241 1038 q 261 1044 252 1044 q 295 966 295 1006 q 370 916 312 941 l 373 909 l 373 834 q 363 810 373 818 q 373 770 373 793 q 329 712 373 722 l 309 712 l 285 715 q 258 688 285 709 q 248 610 258 672 l 237 610 l 217 607 q 186 624 204 611 l 183 624 q 122 604 128 604 q 98 607 109 607 q 10 583 39 583 l 7 583 q 0 590 0 583 l 0 851 l 3 892 l 0 892 q 7 902 3 902 q 0 926 0 916 q 20 953 0 934 l 17 953 l 7 946 q 0 953 0 946 l 0 1004 q 27 1017 0 1014 l 68 1014 q 88 1024 71 1024 l 102 1024 l 102 1027 q 92 1038 102 1032 q 105 1055 96 1053 q 132 1038 114 1038 q 180 1055 180 1040 l 180 1061 q 125 1048 171 1055 l 98 1061 l 95 1061 q 54 1024 95 1039 q 24 1034 32 1034 q 3 1024 20 1024 l 0 1031 l 0 1044 q 3 1085 0 1067 q 0 1126 0 1103 l 10 1133 m 275 1133 l 339 1133 q 353 1129 347 1133 q 363 1133 359 1133 q 373 1109 373 1120 l 373 1044 q 370 1010 373 1028 q 373 980 373 998 l 373 943 q 363 936 373 936 q 305 977 328 946 q 268 1055 305 1019 l 271 1061 l 271 1085 l 268 1085 l 261 1082 q 254 1119 258 1086 q 275 1133 258 1133 m 729 1133 q 736 1129 736 1133 l 777 1133 l 804 1133 l 827 1126 q 858 1133 850 1133 l 871 1133 q 960 1092 943 1133 l 963 1072 l 966 1072 l 966 1078 q 943 1129 966 1089 l 943 1133 l 1085 1133 q 1095 1122 1090 1133 l 1095 1017 q 1082 1007 1095 1007 q 1072 1010 1075 1010 l 1072 1004 l 1095 990 l 1095 987 q 1088 980 1095 980 l 1078 987 q 1072 980 1078 980 l 1051 983 l 1038 977 q 1027 980 1031 980 l 1027 973 q 1044 970 1039 973 q 1058 973 1050 973 q 1078 966 1078 972 l 1085 970 l 1088 970 q 1095 963 1095 968 q 1088 929 1095 929 q 1095 892 1095 916 l 1095 685 q 1092 648 1095 671 q 1095 621 1095 644 l 1095 600 q 1068 587 1095 592 q 1055 604 1055 590 l 1051 604 q 1007 580 1026 580 l 1014 570 l 1014 559 l 1017 519 l 1027 519 q 1021 546 1021 531 l 1021 566 q 1058 587 1021 573 q 1068 576 1058 582 l 1092 580 l 1095 573 l 1095 475 q 1085 465 1095 470 l 1078 465 q 1072 471 1072 465 q 1075 481 1075 478 q 1041 515 1048 515 l 1031 515 l 1031 512 q 1068 471 1057 512 l 1061 468 l 1038 471 l 1024 468 l 1017 471 q 949 420 981 471 q 912 404 912 410 l 916 404 q 892 363 911 363 q 817 302 835 302 q 763 285 777 285 q 753 295 763 290 q 760 336 760 319 q 753 370 753 363 q 797 417 758 417 q 838 431 827 421 l 848 424 q 888 431 878 431 l 888 434 q 858 451 888 440 q 763 420 858 438 q 732 475 755 463 l 732 481 l 715 481 q 671 546 708 481 q 634 576 661 546 l 634 600 q 675 631 661 604 q 729 675 708 641 l 736 671 l 756 671 q 726 685 756 675 l 726 688 q 777 756 728 705 l 777 760 q 770 790 770 782 l 770 797 q 821 814 789 797 q 854 807 829 814 q 899 824 863 807 q 936 821 922 821 l 953 821 l 977 824 q 949 844 949 838 l 949 848 l 946 848 l 946 844 q 949 831 949 838 q 932 824 939 824 l 929 831 q 932 841 932 838 l 926 841 l 926 831 l 892 834 l 888 834 q 851 821 871 821 l 817 821 q 766 804 789 804 q 749 865 759 817 q 743 885 743 865 l 753 892 q 722 949 722 942 l 722 1007 q 739 1058 722 1019 l 739 1075 l 756 1072 l 760 1078 l 760 1082 l 743 1078 q 722 1105 722 1081 l 722 1122 l 729 1133 m 139 1116 q 142 1105 142 1109 l 149 1105 l 149 1116 l 139 1116 m 1027 1105 q 1034 1099 1029 1099 l 1038 1099 l 1038 1105 l 1027 1105 m 777 1092 l 770 1082 l 773 1082 q 787 1088 781 1088 l 787 1092 l 777 1092 m 966 1061 l 966 1051 q 980 1044 972 1051 l 980 1051 q 970 1061 980 1056 l 966 1061 m 770 1048 l 770 1041 l 780 1041 l 780 1048 l 770 1048 m 217 1041 l 217 1031 l 220 1031 q 231 1041 225 1031 l 217 1041 m 139 1027 l 136 1021 l 149 1010 l 156 1010 l 156 1014 q 139 1027 156 1019 m 210 1021 q 203 1014 210 1014 l 200 1014 l 183 1017 l 180 1010 q 254 949 201 1010 l 264 943 l 268 943 q 214 1021 214 998 l 210 1021 m 800 1000 q 797 990 800 997 l 804 987 l 807 987 q 814 994 814 987 q 807 1000 814 1000 l 800 1000 m 1000 960 l 1000 949 l 1004 949 q 1017 970 1004 954 l 1017 973 l 1014 973 q 1000 960 1005 960 m 780 963 q 787 956 781 956 l 790 956 q 797 963 797 956 l 797 966 l 780 963 m 932 949 l 932 946 l 943 946 l 943 956 l 939 956 q 932 949 932 955 m 278 939 l 278 936 q 292 929 283 936 l 292 932 q 281 939 292 939 l 278 939 m 783 919 q 756 892 783 892 l 756 885 q 763 882 763 885 l 797 912 l 800 912 l 865 895 q 905 905 865 905 l 905 909 q 899 912 899 909 l 851 902 q 783 919 851 915 m 963 909 l 960 909 q 956 912 956 909 q 936 882 945 912 l 939 882 q 973 902 939 902 l 973 919 l 970 919 q 963 909 963 919 m 722 905 l 726 905 q 732 899 732 904 l 729 882 q 722 888 722 882 l 722 905 m 916 888 q 922 882 917 882 l 932 882 l 932 888 l 916 888 m 729 851 q 760 763 753 798 q 732 732 760 757 q 715 702 732 724 q 661 637 715 661 q 631 617 650 617 q 600 658 620 617 l 583 658 q 546 651 559 658 q 498 675 498 660 l 498 678 l 509 692 q 488 729 509 696 q 498 753 492 753 l 502 753 q 529 749 526 753 q 566 753 552 753 l 624 753 q 651 749 638 753 q 678 753 664 753 l 722 753 l 722 800 q 726 838 722 814 q 722 848 722 844 l 729 851 m 227 827 l 227 810 l 234 810 l 234 827 l 227 827 m 1004 814 l 1004 810 l 1007 810 q 1021 821 1021 816 l 1010 821 q 1004 814 1004 819 m 821 780 q 804 787 810 787 q 827 773 804 781 q 865 793 865 783 l 858 797 l 854 797 q 821 780 833 780 m 1000 793 l 997 777 l 1004 777 q 1007 790 1004 784 l 1000 793 m 946 777 l 946 773 l 960 773 l 960 780 l 956 780 q 946 777 949 777 m 997 763 q 994 753 997 760 l 997 753 q 1004 760 1004 753 l 1004 763 l 997 763 m 919 753 l 919 749 l 929 749 l 929 760 l 926 760 q 919 753 919 758 m 410 753 l 414 753 q 420 746 420 751 l 417 739 q 420 736 420 739 l 468 749 q 481 746 474 746 l 478 722 q 505 695 486 722 q 502 685 502 688 q 458 699 461 699 l 454 699 q 492 665 454 691 q 529 631 502 631 l 549 631 q 553 634 553 631 l 559 631 l 597 631 q 621 590 605 609 l 617 566 q 644 536 624 565 l 644 532 q 475 475 568 493 q 461 471 475 471 q 451 475 454 475 l 448 468 l 448 465 q 614 509 495 465 q 654 526 640 526 q 746 437 691 465 l 746 410 q 736 359 746 392 q 743 312 743 323 l 732 275 q 766 217 748 237 l 766 210 q 732 159 752 199 l 722 159 l 722 437 l 478 437 q 465 441 471 437 q 451 437 458 437 l 373 437 l 373 383 q 366 376 373 376 l 363 376 q 353 404 363 386 q 366 441 353 410 l 366 444 l 363 444 q 339 407 363 439 q 373 349 373 366 l 373 339 q 346 315 373 321 l 339 319 l 332 319 q 302 312 324 319 q 281 346 290 312 l 285 353 l 285 356 q 275 424 275 409 q 295 475 295 469 q 251 522 281 475 q 241 529 251 529 l 244 536 q 234 587 237 547 q 268 597 250 597 l 268 607 q 312 695 273 695 l 336 699 l 359 695 q 390 746 366 695 q 410 753 401 753 m 105 722 l 105 719 l 109 719 q 122 729 122 724 l 115 732 q 105 722 111 732 m 387 705 l 387 699 l 390 699 q 397 709 397 699 l 404 709 l 404 702 l 410 702 q 441 715 441 708 q 420 732 441 721 q 387 705 397 723 m 970 719 l 977 715 l 977 726 q 970 719 970 724 m 865 705 l 865 699 l 875 699 l 875 705 l 865 705 m 922 705 q 932 692 928 692 l 939 692 q 946 699 946 692 q 929 705 929 699 l 922 705 m 92 685 l 92 682 l 102 682 l 102 692 l 98 692 q 92 685 92 690 m 997 685 q 1010 671 997 682 l 1017 675 l 1027 675 l 1027 665 l 1017 665 l 1017 658 l 1034 661 l 1051 658 l 1051 665 q 1061 661 1058 661 l 1061 658 l 1055 658 l 1055 654 q 1068 634 1068 654 q 1085 654 1074 634 q 1061 661 1085 661 l 1072 675 l 1072 678 q 1065 685 1072 685 l 1041 678 q 1007 692 1041 685 l 1004 692 q 997 685 997 690 m 899 685 q 909 675 899 680 l 912 675 q 919 682 919 675 l 912 685 l 899 685 m 994 644 l 997 644 q 1007 661 1004 644 l 1004 661 q 994 644 996 661 m 939 658 l 939 654 q 960 634 939 634 l 980 634 l 980 641 l 977 641 l 960 637 q 943 658 948 658 l 939 658 m 987 624 l 987 614 l 990 614 q 1024 637 998 614 l 1021 644 q 997 624 1008 644 l 987 624 m 1055 621 q 1061 614 1056 614 l 1065 621 l 1065 627 l 1061 627 q 1055 621 1055 626 m 905 624 l 899 614 l 902 614 l 909 624 l 905 624 m 699 604 l 699 600 l 715 597 l 715 607 l 699 604 m 190 587 q 231 570 231 577 l 227 549 q 244 495 232 549 q 275 465 245 486 l 288 444 l 271 390 l 292 336 q 275 292 292 292 q 220 254 254 292 q 227 234 227 241 l 234 234 q 288 278 254 278 q 322 275 318 275 q 383 288 339 280 l 387 281 l 387 224 q 376 207 387 207 l 376 197 q 387 180 387 197 l 387 136 l 376 122 q 387 92 387 109 l 387 7 q 383 3 387 3 l 387 -3 l 387 -10 q 380 -17 387 -17 q 373 -3 373 -17 q 349 -20 363 -20 l 346 -20 q 339 -14 339 -20 q 349 -7 339 -7 l 349 -3 l 339 -3 q 319 -17 330 -3 l 312 -17 q 295 -3 297 -3 l 295 -20 l 220 -20 q 180 -17 197 -20 q 139 -20 162 -20 l 109 -20 q 81 0 95 -20 q 71 -20 77 -20 l 24 -20 q 14 -10 19 -20 l 14 112 q 68 136 14 136 q 109 159 90 154 l 115 156 q 142 163 119 156 q 186 146 144 152 q 214 149 205 149 q 248 105 242 149 q 244 95 244 98 q 248 81 244 87 q 244 51 244 63 l 244 44 q 285 3 244 26 l 295 3 q 319 17 295 10 l 319 20 q 312 27 312 20 q 302 17 302 27 q 254 47 254 24 l 264 81 l 264 95 q 258 119 264 119 q 264 163 264 155 q 254 203 254 180 l 258 203 q 241 227 251 224 l 237 227 l 237 200 q 248 159 237 190 l 241 156 l 234 156 l 224 163 q 176 159 205 163 q 149 180 155 163 l 142 183 q 51 153 86 169 q 17 146 23 149 l 14 153 l 14 441 q 27 502 14 456 q 61 549 27 549 q 163 570 134 570 l 190 587 m 288 597 l 288 590 l 315 590 l 315 597 l 288 597 m 661 590 l 658 583 l 668 583 q 661 590 668 590 m 743 580 q 749 573 744 573 l 753 573 l 753 580 l 743 580 m 871 566 q 878 559 873 559 l 878 573 q 871 566 871 572 m 3 566 l 7 566 q 14 559 14 565 q 3 532 14 534 l 0 532 l 0 549 l 3 566 m 838 509 l 838 502 l 841 502 q 868 543 868 534 l 865 543 q 838 509 861 543 m 309 498 q 298 488 309 488 l 298 481 q 312 495 312 485 l 312 498 l 309 498 m 10 478 q 17 471 12 471 l 20 471 l 20 478 l 10 478 m 359 471 l 359 468 q 370 454 365 454 q 376 461 376 454 q 366 471 366 461 l 359 471 m 1058 434 l 1088 434 q 1099 424 1093 434 l 1099 397 q 1109 339 1109 353 l 1109 186 q 1105 139 1109 168 q 1109 119 1109 134 l 1099 85 l 1105 75 q 1095 37 1105 60 l 1099 31 l 1095 10 q 1109 3 1109 10 l 1109 -10 q 1099 -20 1109 -15 q 1092 -17 1092 -20 l 1051 -20 l 746 -20 q 736 -10 741 -20 l 736 20 q 746 27 736 27 l 810 3 l 810 14 q 739 58 739 52 q 787 153 739 100 q 810 180 787 170 l 810 186 q 780 237 780 214 l 865 271 q 953 370 936 338 q 1021 427 960 370 q 1058 434 1034 434 m 214 366 l 203 373 l 200 373 q 207 359 203 359 q 186 342 201 342 l 186 322 l 190 322 q 231 349 231 342 q 261 380 244 349 l 251 380 q 227 356 248 380 l 224 356 l 224 359 l 234 376 l 234 383 l 231 383 q 214 366 229 383 m 132 356 l 139 353 l 142 359 l 142 363 l 139 363 q 132 356 132 361 m 180 302 q 163 288 180 297 l 170 285 q 180 288 176 288 q 186 281 181 281 l 190 281 q 197 288 197 281 l 180 302 m 102 271 l 105 254 l 112 254 l 112 271 l 102 271 z "},"I":{"ha":407,"x_min":14,"x_max":393,"o":"m 24 1133 l 136 1133 q 139 1129 139 1133 l 146 1133 l 231 1133 q 264 1129 247 1133 q 295 1133 277 1133 l 315 1133 q 359 1075 344 1133 q 383 1038 369 1075 l 380 1024 q 383 1014 383 1017 q 380 1000 380 1008 q 387 994 387 999 l 387 983 q 373 960 377 960 q 359 963 367 963 l 356 956 q 387 946 387 952 l 387 892 q 380 878 380 884 q 387 858 387 867 l 387 746 q 380 722 387 722 l 383 709 q 380 658 380 666 q 383 637 380 655 q 380 624 380 631 q 387 617 387 623 l 387 526 q 373 481 387 494 l 373 478 q 376 475 373 475 q 373 465 373 468 q 346 471 370 465 l 342 471 l 342 468 q 383 437 383 444 l 376 437 q 387 373 387 385 l 387 356 q 363 302 387 335 l 332 281 l 326 281 l 305 292 q 264 258 278 292 q 200 227 222 227 l 186 231 q 170 224 176 224 q 119 349 141 224 q 105 380 114 351 l 109 387 q 85 414 109 414 q 51 441 79 414 l 47 441 q 17 434 39 441 l 14 441 q 17 448 14 448 l 14 471 l 14 495 q 17 509 14 509 l 14 532 l 14 627 q 47 665 14 646 q 20 675 45 665 l 24 682 q 14 705 14 694 q 37 726 14 715 l 37 736 q 14 749 22 736 l 14 800 q 17 804 14 804 l 14 810 l 14 854 q 20 875 14 864 q 14 895 14 886 q 17 916 14 911 q 14 953 14 939 l 14 980 q 20 1000 14 989 q 14 1021 14 1011 l 14 1027 q 17 1061 14 1044 q 14 1092 14 1074 q 17 1095 17 1092 q 78 1082 23 1095 l 78 1085 q 17 1109 78 1091 l 14 1126 l 24 1133 m 349 1133 l 376 1133 q 387 1122 381 1133 l 387 1075 q 380 1068 387 1068 q 353 1116 370 1068 q 342 1122 342 1116 l 342 1126 q 349 1133 344 1133 m 136 1085 l 132 1068 q 142 1072 136 1068 l 159 1068 l 159 1075 q 136 1085 146 1075 m 112 990 l 112 987 l 119 987 l 119 997 q 129 1021 119 1008 l 129 1027 q 112 990 121 1027 m 359 997 l 359 994 l 363 994 q 370 1000 370 994 l 370 1004 l 366 1004 q 359 997 359 1002 m 302 1000 l 302 990 l 312 990 l 312 994 q 305 1000 312 1000 l 302 1000 m 315 977 l 309 980 l 295 980 l 281 970 l 275 970 l 261 980 l 261 977 q 268 970 262 970 l 251 949 l 251 946 l 254 946 q 312 973 304 973 q 332 970 330 970 q 346 983 336 983 l 346 990 l 315 977 m 105 966 l 102 960 l 102 953 q 112 963 106 953 l 105 966 m 281 932 l 285 932 q 298 936 291 936 l 298 929 l 315 929 q 319 939 315 932 l 298 939 q 319 956 298 949 l 319 963 l 315 963 q 281 932 281 942 m 122 953 q 119 943 122 949 q 142 932 132 939 l 146 932 l 146 936 q 129 953 146 941 l 122 953 m 193 899 l 193 895 l 207 895 q 275 922 220 895 l 275 932 q 203 905 232 905 q 193 899 193 905 m 353 916 q 366 888 358 888 l 370 888 l 370 895 q 353 916 357 916 m 112 905 l 112 902 q 119 895 113 895 l 122 895 l 122 909 q 112 905 115 905 m 170 902 l 170 888 l 176 888 q 186 899 181 888 l 180 902 l 170 902 m 163 861 l 163 858 q 166 854 166 858 q 159 848 159 853 q 176 766 170 818 q 190 746 190 760 l 193 746 q 200 753 200 746 q 180 783 180 768 l 180 790 l 190 804 l 180 804 l 180 817 l 183 824 q 180 827 180 824 l 183 827 l 180 834 l 193 851 l 193 854 l 190 854 l 173 851 q 163 861 173 856 m 58 844 l 58 841 l 88 841 l 88 851 l 71 851 q 58 844 63 844 m 146 827 l 142 821 l 142 814 q 153 824 147 814 l 146 827 m 75 793 l 75 787 l 85 787 l 85 793 l 75 793 m 132 783 l 142 783 l 142 790 l 139 790 q 132 783 132 789 m 75 756 l 75 746 l 92 746 q 98 753 98 746 l 95 760 q 75 756 90 756 m 193 743 q 163 712 193 728 q 166 709 166 712 q 115 654 146 708 l 71 648 q 61 665 61 659 l 58 665 q 51 658 51 663 q 54 654 54 658 q 51 651 51 654 q 75 641 63 641 l 81 641 l 122 644 l 132 627 l 146 627 q 166 634 153 634 l 166 648 l 153 648 l 153 641 l 142 641 q 129 658 138 641 q 203 732 130 667 l 203 739 q 193 743 200 739 m 149 726 l 149 722 l 159 722 l 159 732 l 156 732 q 149 726 149 731 m 81 699 l 81 692 l 92 692 l 92 699 l 81 699 m 54 685 l 61 682 l 68 682 l 68 692 l 61 692 q 54 685 54 690 m 186 637 l 186 634 l 197 634 l 197 644 l 193 644 q 186 637 186 643 m 214 621 l 214 617 l 227 617 l 227 621 q 220 627 227 627 q 214 621 214 626 m 186 621 l 186 614 q 197 604 186 609 l 200 610 q 186 621 200 616 m 207 583 l 207 576 q 210 580 210 576 q 275 563 245 563 l 278 570 q 271 576 278 576 l 268 576 q 254 570 260 570 q 224 590 240 576 l 214 590 q 207 583 207 589 m 47 573 l 47 570 q 61 580 61 575 l 61 583 l 58 583 q 47 573 53 583 m 309 570 l 309 566 q 315 559 310 559 q 322 566 322 559 l 322 570 l 309 570 m 119 543 l 119 536 l 122 515 l 115 502 l 119 502 q 129 549 126 502 l 125 549 q 119 543 119 548 m 200 502 l 210 502 l 210 509 l 207 509 q 200 502 200 507 m 251 485 l 254 478 q 268 488 268 484 l 268 495 l 261 495 q 251 485 256 495 m 112 488 q 109 478 112 485 l 112 478 l 115 485 l 115 488 l 112 488 m 295 475 q 319 458 300 458 l 322 465 q 312 485 322 482 l 305 485 q 295 475 302 485 m 237 424 l 237 414 q 254 420 248 420 l 254 431 l 244 431 q 237 424 237 429 m 37 404 q 92 370 61 382 q 112 288 92 351 l 112 261 q 129 217 121 252 l 156 186 q 149 149 149 173 l 149 132 q 153 129 149 129 l 149 122 l 149 115 q 197 85 149 111 l 197 81 q 170 17 170 56 q 163 10 163 16 l 163 7 l 166 7 l 176 14 l 183 14 q 200 3 183 3 q 207 10 207 3 q 197 27 207 27 q 224 85 197 31 q 173 115 224 88 q 170 129 170 121 l 170 149 q 224 190 186 190 q 292 224 253 190 q 312 251 292 244 q 353 241 341 241 q 373 264 373 246 l 373 275 q 390 278 385 275 l 393 271 l 393 231 q 390 197 393 197 q 393 149 393 168 l 393 -10 q 387 -17 393 -17 l 353 -17 l 342 -10 q 332 -20 342 -15 q 264 0 315 0 l 264 -7 q 285 -14 271 -7 q 298 -10 291 -10 q 309 -14 305 -14 q 302 -20 309 -20 l 292 -20 q 288 -17 288 -20 l 281 -20 l 258 -20 q 251 -7 251 -20 l 244 -7 l 244 -17 l 237 -17 q 227 14 229 -17 l 220 14 q 210 3 216 14 q 217 -14 217 -7 q 190 -20 205 -20 l 31 -20 q 20 -10 26 -20 l 20 75 q 24 92 20 86 l 20 112 l 20 146 q 71 176 20 168 q 109 183 85 176 l 115 180 l 115 193 l 24 173 q 20 183 20 180 q 24 200 20 195 q 20 231 20 218 l 20 234 q 24 264 20 252 q 20 298 20 282 l 20 339 q 47 349 22 349 l 47 356 l 20 356 l 20 390 q 37 404 20 395 m 322 356 l 322 346 l 326 346 q 332 353 332 346 l 332 356 l 322 356 m 309 129 q 298 112 309 123 l 298 105 q 305 98 300 98 l 309 98 l 309 109 q 315 129 309 118 l 309 129 z "},"J":{"ha":949,"x_min":20,"x_max":916,"o":"m 553 1163 q 566 1160 566 1163 l 590 1163 l 688 1163 q 722 1160 705 1163 q 753 1163 735 1163 l 807 1163 q 810 1160 810 1163 l 817 1163 l 838 1163 l 844 1160 q 838 1126 841 1134 l 844 1126 q 868 1163 844 1163 l 878 1163 q 885 1149 885 1163 l 888 1149 q 895 1163 888 1163 l 905 1163 q 916 1153 910 1163 l 916 1122 l 912 1105 l 916 1105 l 912 1099 l 912 1088 q 916 1085 912 1085 q 875 1058 916 1080 l 871 1051 l 878 1048 q 912 1061 897 1061 l 916 1055 l 916 936 l 909 936 q 878 1027 878 985 q 871 1021 871 1026 l 871 1004 q 868 973 871 991 l 868 970 l 871 970 l 871 977 l 882 977 q 912 905 896 952 q 888 878 912 889 q 885 868 885 871 l 882 868 l 878 882 l 875 882 q 865 871 870 882 l 865 865 l 875 865 l 882 868 l 882 854 q 865 838 882 850 q 909 766 891 773 l 912 743 q 905 712 910 712 q 831 692 884 699 l 831 688 q 841 685 834 688 q 902 702 890 692 q 916 682 916 699 l 916 604 q 895 549 916 574 q 854 495 895 508 q 810 465 822 465 q 780 509 800 475 l 770 509 l 770 505 q 760 509 763 509 q 722 502 753 509 q 678 526 693 502 l 685 536 q 637 546 646 546 q 671 515 637 540 q 705 481 682 481 l 732 481 q 736 485 736 481 l 749 478 q 777 485 762 485 q 800 420 800 441 q 827 383 800 416 q 648 322 745 342 l 631 326 l 627 319 l 627 315 q 797 359 679 315 q 827 380 806 359 q 882 315 833 380 l 899 305 q 783 98 864 168 q 736 64 774 89 l 729 64 q 682 88 717 78 l 668 105 l 671 125 l 671 129 l 665 129 q 651 112 665 112 q 631 119 640 119 q 587 105 595 105 l 580 105 l 580 95 l 597 95 q 637 105 629 105 l 641 105 q 688 71 651 105 q 722 64 708 71 l 722 61 q 526 3 722 32 l 505 3 q 502 0 502 3 l 478 7 l 451 0 q 397 27 427 0 l 397 20 q 407 14 402 20 q 404 3 404 7 q 329 20 330 16 q 326 17 326 20 q 98 153 173 55 q 31 332 35 258 q 64 383 64 354 q 125 404 90 404 l 142 404 q 190 417 151 413 l 193 410 q 156 322 193 348 l 153 322 l 136 326 q 102 278 122 299 l 98 271 q 102 251 102 267 l 109 251 l 105 268 q 193 366 193 335 q 231 420 193 420 q 356 448 294 437 q 441 278 356 288 l 441 261 q 458 200 441 256 l 458 193 q 420 156 458 156 q 390 122 390 129 l 393 105 l 397 105 q 451 149 429 147 q 488 146 481 146 q 559 159 553 159 l 563 159 q 573 132 563 155 l 583 132 q 573 163 583 138 q 583 183 583 166 q 566 217 583 201 l 563 210 l 563 203 l 573 190 l 573 180 l 566 170 l 553 173 q 519 166 528 166 q 509 173 509 170 l 492 163 l 488 163 q 465 193 465 163 l 468 210 q 454 271 454 258 q 532 329 496 281 l 539 326 l 539 329 l 536 342 q 543 393 543 374 l 543 529 q 576 600 555 576 l 576 617 l 593 621 q 604 604 601 621 l 600 587 l 604 587 q 661 593 606 593 l 665 587 q 661 573 661 581 q 685 539 685 549 l 688 539 l 688 549 q 668 604 668 573 l 699 654 l 699 661 q 678 648 685 648 l 678 637 l 682 631 q 651 604 659 604 q 607 631 607 604 l 583 634 q 580 631 583 631 q 566 651 568 651 q 593 763 570 687 q 637 780 617 780 l 637 787 l 617 783 q 607 787 610 787 q 590 770 607 782 q 543 804 543 777 l 543 858 q 546 861 543 861 l 543 868 l 543 949 q 546 977 543 964 q 543 1004 543 989 l 543 1038 l 593 1027 l 593 1044 l 583 1044 q 580 1041 580 1044 q 543 1055 543 1050 l 543 1095 q 549 1126 543 1104 q 543 1133 543 1126 l 543 1153 q 553 1163 543 1158 m 607 1149 l 604 1133 l 604 1129 l 610 1133 q 614 1129 610 1129 l 610 1122 l 610 1119 l 624 1119 l 624 1143 q 617 1149 624 1149 l 607 1149 m 899 1116 l 899 1105 l 909 1105 l 909 1109 q 902 1116 909 1116 l 899 1116 m 810 1112 q 817 1095 811 1095 q 807 1082 812 1082 l 787 1085 q 760 1075 787 1077 l 766 1065 l 766 1061 l 763 1055 l 770 1055 q 814 1078 783 1055 q 861 1058 854 1063 l 865 1058 l 865 1068 q 827 1085 865 1076 l 827 1088 q 838 1112 827 1100 l 827 1112 l 827 1105 l 824 1105 l 814 1112 l 810 1112 m 702 1105 l 702 1102 q 709 1095 703 1095 l 712 1095 l 712 1099 q 705 1105 712 1105 l 702 1105 m 814 963 q 797 953 814 953 l 797 946 q 804 939 804 946 q 821 960 821 947 l 814 963 m 627 936 l 624 912 q 631 919 631 912 l 631 936 l 627 936 m 797 936 l 797 929 q 807 932 804 932 l 807 936 l 797 936 m 705 922 l 715 922 l 715 929 l 712 929 q 705 922 705 928 m 627 905 l 627 888 l 631 888 l 634 902 l 627 905 m 729 905 l 729 899 l 746 899 l 746 902 l 729 905 m 787 905 q 777 888 787 899 l 777 885 q 790 902 783 886 l 790 905 l 787 905 m 743 885 l 739 871 l 743 871 q 760 882 760 874 l 753 885 l 743 885 m 912 882 l 916 875 l 916 787 q 909 780 916 780 l 878 834 q 912 882 878 855 m 617 861 l 627 861 l 627 868 l 624 868 q 617 861 617 867 m 699 844 l 702 844 l 722 861 l 719 861 q 699 844 701 854 m 760 854 l 763 848 q 777 858 777 853 l 777 861 l 766 861 q 760 854 760 860 m 651 793 l 651 790 l 665 790 q 699 834 690 825 l 699 841 q 665 800 676 827 q 651 793 656 793 m 549 766 q 573 753 573 758 q 546 668 553 668 l 543 675 l 543 760 q 549 766 544 766 m 665 732 l 665 729 l 675 729 l 675 739 l 671 739 q 665 732 665 738 m 871 729 l 871 719 l 882 719 l 882 732 q 871 729 875 729 m 715 692 l 715 682 l 739 682 q 746 688 746 682 q 715 692 734 688 m 793 688 l 793 682 l 797 682 q 804 688 804 682 l 793 688 m 549 651 q 566 610 566 620 l 546 593 l 543 600 l 543 644 q 549 651 544 651 m 563 553 l 570 549 l 583 556 q 590 549 585 549 q 621 566 621 561 q 600 580 614 580 q 563 553 585 574 m 75 543 l 248 543 q 254 536 254 541 l 254 532 l 248 532 l 248 529 l 258 529 q 278 543 258 543 l 366 543 q 376 532 371 543 l 376 509 q 322 475 376 475 q 302 478 319 475 q 170 448 260 456 q 139 441 170 444 q 129 444 132 444 q 102 434 110 434 q 71 488 102 453 q 61 539 61 510 q 75 543 67 543 m 905 519 l 909 519 q 916 512 916 517 l 916 448 q 909 441 916 441 l 916 427 q 902 329 912 368 l 892 329 q 878 349 892 334 q 817 424 878 373 l 814 441 q 848 468 814 447 q 888 495 848 481 q 905 519 905 513 m 610 475 l 610 468 l 614 468 q 621 475 621 468 l 610 475 m 24 465 l 27 465 q 58 417 27 453 q 61 397 61 399 q 34 353 44 397 l 24 353 q 20 420 20 399 l 20 431 l 24 465 m 885 454 l 885 448 l 895 448 l 895 454 l 885 454 m 841 437 l 841 434 l 848 434 l 848 444 q 841 437 841 443 m 543 319 l 543 315 l 546 298 q 509 258 531 258 l 509 254 q 539 227 539 252 l 546 227 l 546 234 q 536 258 536 246 l 536 268 l 559 312 q 543 319 553 312 m 109 234 q 95 193 95 201 l 98 193 q 115 231 105 193 l 109 234 m 380 231 l 380 224 l 387 214 l 387 203 q 366 180 366 185 q 370 176 370 180 l 387 180 l 397 180 q 437 220 397 184 l 437 227 l 427 227 q 404 203 408 203 l 404 210 l 414 227 l 414 231 l 410 231 q 400 217 402 231 l 390 217 q 380 231 390 231 m 312 207 l 319 203 l 322 210 l 322 214 l 319 214 q 312 207 312 212 m 359 153 q 346 142 359 142 l 346 136 l 363 139 q 373 129 363 129 l 376 136 q 366 153 366 146 l 359 153 m 285 122 l 285 119 l 288 102 q 295 109 295 102 l 292 115 q 295 119 295 115 l 288 122 l 285 122 m 407 95 l 407 61 q 414 54 408 54 q 424 71 421 54 q 410 95 419 95 l 407 95 m 546 78 l 546 64 l 553 64 q 563 75 557 64 l 563 78 l 546 78 z "},"K":{"ha":1153,"x_min":-14,"x_max":1187,"o":"m 14 1133 q 41 1129 38 1129 q 51 1133 47 1133 q 64 1119 51 1127 l 71 1119 q 75 1129 71 1122 q 85 1126 81 1126 q 115 1133 107 1133 l 261 1133 l 281 1129 q 298 1133 287 1133 l 302 1133 q 339 1129 316 1133 l 346 1133 q 373 1122 373 1129 l 373 1034 q 370 1031 373 1031 l 373 1024 l 373 1014 q 329 983 373 991 l 329 977 l 332 977 l 349 987 l 366 987 q 373 980 373 985 l 373 773 l 376 773 l 481 885 q 546 960 481 892 q 553 953 553 958 l 536 929 l 536 912 l 553 888 l 553 875 q 526 838 526 854 q 536 756 536 779 q 492 729 522 754 q 431 709 441 721 l 424 712 l 410 712 q 359 702 378 702 q 295 743 325 726 l 292 743 q 278 739 284 743 q 264 743 272 743 l 258 743 q 254 739 254 743 q 214 746 248 742 l 197 743 q 176 753 176 748 q 183 783 176 768 q 176 804 176 794 q 186 854 186 834 l 186 871 q 203 905 203 895 l 197 905 q 176 871 197 885 l 180 848 l 170 814 l 173 790 q 105 736 173 736 q 51 712 70 712 q 14 739 33 712 q 0 760 0 743 l 0 804 q 3 834 0 821 q 0 868 0 852 l 0 946 q 58 980 0 980 q 75 987 58 986 l 92 983 q 75 997 92 987 l 44 983 q 34 987 37 987 l 17 977 l 7 977 q 0 983 0 977 l 0 1004 q 37 1065 0 1034 l 37 1068 q 20 1072 26 1068 q 3 1041 20 1055 l 0 1048 l 0 1122 q 14 1133 0 1131 m 702 1133 l 709 1129 l 719 1129 l 726 1133 q 736 1099 733 1124 l 739 1099 q 773 1133 739 1133 l 777 1133 q 780 1129 780 1133 l 787 1133 l 821 1133 q 831 1129 831 1133 l 848 1133 l 895 1133 q 929 1129 911 1133 q 960 1133 942 1133 l 980 1133 q 983 1129 983 1133 l 990 1133 l 1014 1133 l 1038 1126 q 1044 1133 1039 1133 l 1055 1133 q 1102 1129 1074 1133 q 1116 1133 1108 1133 l 1119 1126 l 1119 1119 q 1072 1068 1075 1068 l 1061 1075 l 1055 1075 l 1055 1072 q 1061 1055 1061 1061 q 831 821 1056 1053 q 810 797 810 821 q 722 699 722 718 q 804 576 726 698 l 804 573 q 760 553 790 553 l 746 556 q 726 549 735 549 q 685 627 704 573 l 688 644 q 665 736 668 685 q 614 766 640 736 l 610 766 q 570 756 600 766 q 546 838 555 756 q 573 871 546 843 l 573 888 q 553 922 557 905 q 597 983 569 970 q 607 990 607 983 q 587 997 593 997 l 587 1004 q 658 1075 642 1075 q 702 1133 658 1095 m 688 1112 l 688 1105 l 692 1105 q 705 1116 705 1111 l 702 1116 q 688 1112 696 1112 m 1038 1116 l 1034 1109 l 1034 1102 q 1058 1085 1034 1099 l 1061 1085 l 1061 1092 q 1038 1116 1061 1097 m 841 1102 l 841 1099 q 851 1095 844 1099 l 854 1102 l 841 1102 m 739 1095 l 739 1092 q 756 1072 751 1072 q 763 1078 763 1072 l 739 1095 m 37 1082 l 44 1082 q 51 1088 51 1082 l 44 1088 q 37 1082 37 1087 m 943 1044 l 949 1041 q 990 1085 949 1063 l 990 1088 l 987 1088 q 943 1044 943 1074 m 753 1065 q 695 1010 753 1058 q 637 973 695 979 q 617 987 634 973 q 604 970 614 970 l 604 963 l 614 963 l 614 973 q 641 966 626 966 l 654 966 q 682 973 658 966 q 695 953 682 968 l 702 953 q 709 960 709 953 q 692 977 700 977 q 760 1048 692 1007 l 760 1058 q 753 1065 760 1065 m 261 1031 l 261 1027 q 278 1010 261 1023 l 281 1010 l 281 1014 q 268 1038 268 1029 q 261 1031 261 1036 m 197 1024 q 203 1017 198 1017 l 210 1017 q 203 1024 210 1024 l 197 1024 m 641 1024 l 641 1017 l 658 1017 l 658 1024 l 641 1024 m 936 994 q 939 980 939 987 l 946 980 l 946 983 q 943 987 946 987 q 949 1014 949 999 l 949 1024 q 936 994 945 1024 m 621 1021 l 617 1014 l 617 1007 l 631 1007 l 631 1010 q 621 1021 631 1015 m 281 1007 q 285 990 285 1002 q 292 997 292 990 l 292 1007 l 281 1007 m 576 994 l 580 994 l 580 983 q 570 973 580 979 l 566 973 l 566 983 q 576 994 566 988 m 129 966 l 132 966 l 163 970 l 163 980 l 159 980 q 129 966 129 970 m 712 966 l 712 960 l 729 960 l 729 966 q 722 973 729 973 l 719 973 q 712 966 712 972 m 285 970 l 285 963 l 288 956 q 275 943 283 956 l 275 939 l 278 939 q 302 966 282 939 l 285 970 m 746 966 l 746 963 q 753 956 747 956 l 760 966 q 756 970 756 966 q 746 966 749 966 m 773 953 l 773 949 q 780 943 774 943 l 790 943 q 793 953 790 946 q 790 956 790 953 q 773 953 785 953 m 746 946 l 746 932 q 756 929 749 932 q 766 932 763 932 l 766 939 q 749 946 758 939 l 746 946 m 251 943 l 251 936 l 264 936 l 264 943 l 251 943 m 607 899 l 607 895 l 614 895 q 624 905 618 895 l 624 916 l 621 916 q 607 899 616 916 m 770 916 q 766 905 770 912 q 814 888 778 905 q 824 892 821 892 q 834 888 831 888 l 838 895 l 838 902 l 831 902 l 821 895 l 810 895 l 783 916 l 770 916 m 868 888 l 875 885 q 882 892 882 885 l 882 895 l 875 895 q 868 888 868 894 m 685 878 l 682 871 l 682 861 q 692 875 687 861 l 685 878 m 682 851 q 661 790 682 830 l 661 787 l 665 787 q 688 841 688 831 l 688 844 q 682 851 688 851 m 471 824 l 471 817 l 481 817 l 481 824 l 471 824 m 566 746 l 597 746 q 648 715 617 726 q 668 627 648 693 l 668 617 q 665 614 668 614 q 678 576 678 593 l 678 559 q 709 529 696 559 q 702 509 709 523 q 705 478 705 490 q 702 458 702 460 l 753 431 q 726 366 726 406 q 712 353 712 356 l 712 349 l 719 349 l 732 359 q 746 322 746 346 q 692 224 746 315 q 682 197 692 209 l 685 173 q 648 153 685 161 q 610 207 635 153 l 617 210 q 671 197 629 203 q 593 227 629 227 q 461 444 505 384 l 454 444 l 366 356 q 373 336 373 345 l 373 305 l 370 305 l 353 322 q 285 319 302 319 q 268 346 271 330 l 264 346 l 261 339 l 237 342 l 214 342 q 210 339 210 342 q 180 376 180 347 q 186 417 186 400 l 186 424 q 92 546 172 465 q 88 559 88 552 q 119 617 119 590 l 119 621 l 115 621 l 112 604 l 105 604 q 92 658 95 604 l 88 658 q 95 688 95 673 l 88 702 q 125 726 88 722 l 136 726 l 142 722 q 176 743 142 729 q 200 732 193 732 q 207 736 207 732 l 231 732 l 295 732 q 373 685 353 692 q 404 702 373 691 q 441 699 433 699 q 509 722 462 711 q 566 746 528 746 m -7 722 l 24 699 q 51 702 48 702 q 68 692 68 698 l 68 685 q 61 648 68 681 q 78 580 65 648 q 54 543 71 578 l 51 543 l 51 536 q 102 492 67 536 q 156 407 122 492 q 149 376 156 402 q 153 339 153 353 q 64 251 103 253 q 27 234 60 244 l 24 227 l 27 203 l 24 183 l 31 183 q 34 203 31 186 l 31 217 q 58 237 37 237 l 58 234 l 75 244 l 78 244 l 78 241 q 44 217 62 217 l 44 210 l 47 210 q 92 251 92 223 l 119 268 l 122 268 q 132 248 129 268 q 125 231 125 237 l 132 227 q 139 248 139 238 l 139 254 l 132 264 l 132 268 q 176 336 132 294 q 193 322 191 322 l 197 322 q 207 326 207 322 q 271 295 241 326 l 292 295 q 295 298 295 295 l 302 295 l 336 298 q 359 261 359 267 l 356 237 q 359 227 359 231 q 353 207 353 216 q 359 200 359 205 l 359 24 q 339 7 359 20 q 356 0 356 7 q 349 -7 356 -7 l 237 -7 q 217 3 220 -7 l 217 10 q 254 24 217 16 q 258 27 254 27 q 261 17 261 20 l 264 17 l 275 24 q 302 3 297 3 l 319 3 q 326 10 326 3 q 275 34 292 10 l 275 41 q 285 47 285 41 l 281 47 l 234 27 q 224 31 227 31 l 200 17 q 214 3 203 3 q 203 -7 214 -1 l 136 -7 l 119 -3 l 119 3 l 125 3 l 125 7 q 115 24 115 18 l 112 24 q 105 17 105 22 l 115 3 l 115 -3 l 98 -7 l 68 -7 q 61 0 61 -7 q 105 34 99 18 q 98 64 105 39 l 102 85 l 95 85 q 92 51 92 55 l 98 47 q 51 7 98 22 l 34 10 l 14 7 l -3 10 l 7 -3 l 0 -7 l -3 -7 l -14 0 q -10 10 -14 3 l -14 51 q -10 71 -14 66 q -14 109 -14 94 l -14 193 q 10 220 -14 210 q 14 234 14 227 l 7 234 l -7 220 l -10 220 l -10 227 q -7 231 -10 231 q -14 254 -14 244 l -10 254 l -14 261 l -14 448 q -10 495 -14 467 q -14 505 -14 502 q -10 509 -14 509 l -14 526 q -10 539 -14 539 l -14 563 l -14 715 q -7 722 -12 722 m 583 702 l 583 692 q 600 699 594 699 l 600 702 l 583 702 m 312 600 l 312 597 q 319 590 313 590 l 322 590 l 322 600 l 312 600 m 142 559 l 142 556 l 156 553 l 159 559 l 142 559 m 214 559 l 214 556 q 234 546 218 556 l 234 549 q 217 559 234 557 l 214 559 m 24 556 l 24 549 l 27 549 q 41 553 29 549 q 54 549 47 549 q 47 556 54 556 l 24 556 m 553 546 l 553 543 l 556 543 l 573 546 l 573 556 l 563 556 q 553 546 558 556 m 821 549 q 997 271 997 285 l 987 264 l 963 264 l 929 268 l 929 261 l 946 258 l 966 258 q 1007 264 983 258 q 1034 207 1031 222 q 1017 180 1017 198 l 1044 200 q 1075 149 1075 169 l 1075 146 q 997 119 1034 119 q 966 115 997 115 l 966 119 q 1000 149 966 123 q 1007 163 1000 155 l 1004 163 q 943 115 999 163 l 902 115 q 871 125 889 125 l 868 125 l 841 112 q 804 115 818 115 q 780 102 798 102 q 702 139 743 139 l 702 149 q 712 156 707 149 l 709 173 q 777 309 709 222 l 790 309 l 790 312 q 770 346 770 312 q 780 356 774 346 l 780 359 l 763 356 q 756 387 760 363 q 777 420 756 390 l 777 431 q 729 458 773 439 q 722 481 729 465 q 770 536 738 536 l 793 536 q 821 549 812 549 m 607 526 l 607 529 q 553 512 576 515 l 553 505 q 675 536 644 522 l 675 539 l 671 539 l 607 526 m 275 532 l 275 515 l 281 515 l 281 526 q 275 532 281 532 m 526 515 l 526 512 l 529 512 q 539 515 536 515 l 539 526 l 536 526 q 526 515 531 526 m 502 515 l 502 512 l 505 512 q 512 519 512 512 l 512 522 l 509 522 q 502 515 502 521 m 621 495 l 627 492 l 631 498 l 631 502 l 627 502 q 621 495 621 500 m 309 498 l 309 495 l 329 485 l 332 485 l 332 488 q 312 498 328 488 l 309 498 m 465 478 l 465 471 l 468 471 q 481 498 477 471 l 478 498 q 465 478 473 498 m 376 495 l 376 485 l 380 485 q 390 488 387 488 q 383 495 390 495 l 376 495 m 244 481 l 244 468 l 258 468 l 258 475 q 251 481 258 481 l 244 481 m 349 475 l 349 454 q 356 461 356 454 l 356 468 q 349 475 356 475 m 868 454 q 861 441 868 449 l 861 424 l 868 424 q 875 454 868 439 l 868 454 m 342 424 l 342 420 l 349 420 l 349 431 q 342 424 342 429 m 831 410 l 831 404 l 841 404 q 834 410 841 410 l 831 410 m 309 387 l 312 387 q 329 404 317 387 l 322 404 q 309 387 317 404 m 349 393 l 356 390 l 359 397 l 359 400 l 356 400 q 349 393 349 399 m 214 315 l 214 312 q 220 305 215 305 l 220 315 l 214 315 m 797 312 q 804 305 798 305 l 814 305 l 814 309 l 797 312 m 848 312 l 848 309 q 858 298 848 304 l 861 298 l 861 302 q 851 312 861 307 l 848 312 m 875 288 l 875 285 q 888 278 880 285 l 888 281 q 878 288 888 288 l 875 288 m 224 285 l 224 281 q 231 254 231 271 q 237 261 237 254 q 231 285 231 271 l 224 285 m 895 271 q 905 264 895 264 q 919 275 919 270 q 895 271 915 271 m 210 231 q 214 214 214 225 q 234 237 220 214 l 234 244 l 210 231 m 112 227 l 112 224 l 129 220 l 129 227 l 112 227 m 336 193 l 336 186 l 346 186 q 363 210 346 198 l 363 214 l 356 214 q 336 193 351 214 m 865 214 l 865 203 l 868 203 q 875 210 875 203 l 868 214 l 865 214 m 136 200 l 132 186 l 136 186 q 142 193 142 186 l 142 200 l 136 200 m 231 176 q 237 170 232 170 q 288 190 288 183 l 278 197 l 275 197 q 231 176 255 176 m 119 163 l 129 163 l 146 166 l 146 173 q 136 183 136 173 q 119 163 131 183 m 163 183 l 146 146 l 149 146 q 220 170 159 170 q 227 176 227 170 q 203 183 214 176 l 200 176 q 163 183 195 176 m 346 170 l 346 159 q 353 153 347 153 l 353 163 q 346 170 353 170 m 92 163 l 88 146 l 88 142 q 105 98 98 98 l 105 102 q 95 159 95 142 q 98 163 98 159 l 92 163 m 719 163 l 719 159 q 726 153 720 153 l 729 153 l 729 163 l 719 163 m 332 132 l 332 119 l 336 119 q 349 136 336 134 l 349 139 l 339 139 q 332 132 332 138 m 695 119 q 760 78 703 104 q 770 81 766 81 q 763 75 770 75 q 777 58 770 59 l 810 75 q 831 68 824 68 q 875 81 861 81 l 878 81 l 899 71 l 966 78 q 987 71 980 71 q 997 81 987 76 l 1000 75 q 983 64 1000 64 l 983 58 q 997 31 997 43 q 970 -20 985 -20 l 746 -20 q 688 58 724 -20 q 658 112 658 94 q 695 119 665 115 m 1095 119 l 1102 119 q 1133 88 1116 96 l 1187 -3 l 1180 -7 l 1072 -7 q 1034 -3 1057 -7 q 1014 -7 1029 -7 l 1007 3 q 1024 37 1007 16 l 1024 51 q 1010 61 1024 60 l 1010 68 q 1061 102 1025 102 q 1095 119 1069 119 m 336 109 l 322 61 q 342 98 330 61 q 339 109 339 105 l 336 109 m 719 54 l 719 41 l 729 41 l 729 47 q 722 54 729 54 l 719 54 m 186 37 l 183 31 l 210 31 l 210 34 l 186 37 m 149 27 l 149 20 q 159 24 156 24 l 159 27 l 149 27 m 54 10 q 61 3 61 9 l 61 0 l 47 0 l 47 3 q 54 10 49 10 z "},"L":{"ha":882,"x_min":0,"x_max":882,"o":"m 27 1133 l 119 1133 q 156 1129 133 1133 q 170 1133 162 1133 l 203 1109 l 203 1116 l 193 1129 l 193 1133 l 241 1133 q 353 1051 262 1084 q 322 953 332 971 q 342 905 342 919 q 295 858 305 858 l 244 858 q 217 831 244 854 q 200 753 210 753 l 183 753 q 142 770 163 753 q 85 749 89 749 l 61 753 q 3 736 23 736 l 0 743 l 0 787 q 7 804 1 804 q 0 824 0 814 l 0 1088 q 7 1119 0 1097 l 7 1129 l 27 1133 m 271 1133 q 278 1129 278 1133 l 302 1133 l 363 1133 q 373 1122 368 1133 q 370 1119 373 1119 l 373 1095 l 373 1082 q 366 1065 373 1065 q 268 1122 268 1095 q 264 1126 264 1122 q 271 1133 266 1133 m 227 1088 q 244 1078 227 1082 l 244 1085 l 227 1088 m 363 1034 l 366 1034 q 373 1027 373 1033 l 373 1004 q 370 956 373 985 q 373 943 373 950 q 353 929 370 929 q 346 943 353 935 l 346 963 l 363 1034 m 186 973 l 186 960 q 193 966 193 960 l 193 973 l 186 973 m 186 943 q 183 932 186 939 l 190 932 l 190 943 l 186 943 m 370 916 l 373 909 l 373 888 q 342 848 373 875 l 342 844 l 349 844 q 356 854 356 844 l 366 854 q 373 838 366 846 l 373 627 q 359 617 373 617 l 359 614 q 373 597 373 614 l 373 410 q 356 400 373 400 l 356 397 q 373 380 373 383 l 373 268 l 448 268 q 475 264 471 268 q 512 268 498 268 l 648 268 q 668 258 668 266 q 624 183 668 241 q 593 71 624 115 q 587 47 593 61 q 590 34 590 41 q 526 3 526 28 l 519 0 l 380 0 q 363 37 363 11 q 390 20 369 37 l 410 20 l 410 27 q 353 78 376 27 q 339 81 347 81 q 322 75 333 81 q 237 119 237 75 q 241 149 241 137 l 241 176 l 251 176 l 268 180 l 268 183 q 261 190 268 190 l 254 190 l 241 180 l 203 200 l 200 207 q 210 248 200 216 l 210 258 q 203 285 210 273 l 210 326 q 200 363 203 336 l 203 370 q 186 393 195 391 l 180 393 q 193 326 183 352 q 186 319 186 324 q 163 329 170 329 q 109 326 128 326 q 98 346 98 334 l 88 346 q 3 319 27 337 l 0 326 l 0 573 q 3 610 0 587 q 0 637 0 614 l 0 641 q 3 644 0 644 l 0 651 l 0 705 q 81 732 0 718 q 139 753 125 736 l 142 753 q 176 736 176 739 l 173 719 q 214 641 188 641 q 234 604 214 639 q 217 549 217 564 l 231 529 l 227 522 l 227 519 l 237 498 q 197 451 237 451 l 166 420 q 173 400 173 407 l 180 400 q 224 444 180 420 q 231 448 231 444 q 268 441 244 441 l 332 454 l 339 454 q 349 427 346 454 l 359 427 l 359 437 l 353 448 q 363 485 363 484 q 349 515 349 503 l 342 515 l 342 505 q 353 478 342 499 q 342 465 348 465 l 332 465 q 295 461 318 465 q 285 465 288 465 q 264 458 274 458 q 241 488 248 458 q 244 512 244 502 q 231 556 235 556 q 275 641 248 618 l 275 644 l 271 644 q 251 621 267 644 q 197 695 197 663 q 193 732 197 709 l 214 743 l 231 743 q 224 753 227 753 q 241 824 233 774 q 298 844 260 844 q 326 841 311 841 q 366 916 356 916 l 370 916 m 64 868 l 64 865 l 71 865 q 81 875 76 865 l 75 878 q 64 868 70 878 m 51 831 l 51 827 l 61 827 l 61 838 l 58 838 q 51 831 51 836 m 268 743 l 264 736 l 275 736 q 268 743 275 743 m 315 580 l 315 576 l 326 546 q 336 556 330 546 l 336 559 q 319 580 322 559 l 315 580 m 322 543 q 298 505 322 538 q 326 468 322 468 l 329 468 q 312 498 316 498 q 326 539 312 503 l 326 543 l 322 543 m 156 526 l 156 522 q 163 502 163 511 l 163 498 q 146 481 146 485 l 146 468 l 149 468 q 214 522 214 496 l 210 522 l 183 498 l 180 505 q 193 522 184 505 l 186 526 l 173 515 l 159 526 l 156 526 m 92 502 l 98 498 l 102 505 l 102 509 l 98 509 q 92 502 92 507 m 122 431 l 153 427 l 153 431 l 142 444 q 122 431 122 436 m 61 417 l 61 414 q 68 407 62 407 l 71 407 l 71 417 l 61 417 m 322 322 l 322 319 q 329 312 323 312 q 339 322 334 312 l 339 326 l 322 322 m 88 329 q 153 312 88 312 l 170 312 q 193 271 185 312 q 190 261 190 264 q 193 248 190 254 q 190 217 190 229 l 190 214 q 220 176 190 186 q 224 136 220 159 l 220 112 q 231 85 220 100 q 193 68 213 81 l 190 68 l 193 75 l 193 81 l 186 81 q 170 68 170 73 l 170 64 q 176 58 171 58 q 166 37 166 42 l 159 37 q 153 47 153 37 l 156 64 l 153 64 q 146 58 146 63 l 146 37 q 119 0 146 0 l 10 0 q 0 10 5 0 l 0 220 q 3 224 0 224 l 0 231 l 0 288 q 81 326 28 326 q 88 329 81 329 m 709 220 l 871 220 q 882 210 876 220 l 882 197 q 878 149 882 178 q 882 136 882 143 q 878 132 882 132 l 882 115 l 882 109 q 878 78 882 91 q 882 44 882 60 l 882 37 q 878 20 882 26 l 882 0 l 882 -37 q 871 -47 882 -42 l 865 -47 q 841 -44 845 -47 q 810 -47 823 -47 l 743 -47 q 739 -44 739 -47 l 732 -47 l 688 -47 q 671 -44 677 -47 l 651 -47 l 580 -47 l 580 -44 q 617 3 617 -28 q 641 68 617 18 q 644 115 641 94 l 641 122 q 668 153 641 130 l 675 153 q 746 125 694 139 q 770 105 754 111 l 770 112 q 685 170 766 134 l 685 173 q 709 220 685 220 m 688 115 l 688 109 q 743 51 688 102 l 743 44 l 773 44 q 793 34 786 34 q 814 37 811 37 l 831 34 q 848 41 842 41 l 848 37 q 861 58 861 41 q 810 54 827 54 q 780 64 786 64 q 763 58 763 64 l 695 102 q 688 115 695 115 m 736 17 l 736 14 l 743 14 q 749 20 749 14 l 749 24 l 743 24 q 736 17 736 22 m 332 20 l 336 20 q 359 3 353 20 l 359 0 l 346 0 q 326 10 333 10 l 326 14 q 332 20 327 20 m 234 64 q 285 58 266 58 l 292 58 l 315 61 q 356 3 356 17 l 349 0 l 275 0 q 248 3 260 0 q 220 0 235 0 l 217 0 q 173 3 195 0 q 149 0 159 0 l 142 10 q 156 24 146 24 q 166 20 163 20 q 227 64 174 64 l 234 64 m 814 -24 l 814 -31 l 817 -31 q 827 -27 824 -27 l 827 -17 l 821 -17 q 814 -24 814 -18 m 777 -20 l 777 -31 l 783 -31 l 783 -20 l 777 -20 z "},"M":{"ha":1289,"x_min":-14,"x_max":1295,"o":"m 10 1133 l 37 1133 q 58 1116 58 1133 l 68 1116 l 64 1122 l 64 1133 l 78 1133 q 81 1122 78 1129 q 71 1119 75 1119 l 71 1116 l 75 1109 q 27 1082 47 1087 q 0 1109 0 1090 l 0 1122 q 10 1133 0 1127 m 85 1133 q 98 1129 92 1133 q 142 1133 127 1133 q 170 1129 151 1133 l 190 1133 q 197 1129 197 1133 l 231 1133 l 309 1133 l 322 1122 q 342 1133 326 1133 l 427 1133 q 451 1068 437 1133 l 451 1065 q 431 1048 441 1048 l 431 1041 l 434 1041 l 451 1055 q 458 1048 458 1053 l 458 1038 q 424 1014 458 1035 l 393 1014 q 387 1007 387 1013 q 356 1017 362 1017 l 353 1017 l 353 1014 q 366 997 366 1014 l 373 997 q 437 1010 381 1004 q 458 1024 437 1013 l 461 1024 q 566 661 469 1024 q 580 604 580 632 l 570 590 l 570 587 q 573 583 570 583 q 570 573 570 576 q 543 580 567 573 l 539 580 l 539 576 q 573 559 539 570 l 570 543 l 570 539 l 576 539 l 576 549 q 590 580 576 575 q 621 468 610 519 l 610 468 q 600 485 608 485 q 597 461 600 475 q 621 458 607 461 l 621 448 l 614 448 l 593 451 q 553 407 584 451 l 529 390 l 522 390 l 502 400 q 461 366 473 400 l 417 339 l 414 339 q 322 644 400 362 q 326 658 326 650 l 326 661 q 302 695 319 661 l 302 692 q 309 597 309 608 q 295 573 309 593 l 302 573 l 302 580 l 305 580 q 315 526 315 580 l 315 509 q 312 495 315 501 q 319 468 319 483 l 319 454 l 315 454 q 302 488 309 454 l 305 495 q 281 522 305 522 q 248 549 275 522 l 244 549 q 207 539 233 549 q 180 621 193 539 q 210 668 210 656 q 186 702 210 671 q 224 760 205 754 q 241 766 224 766 l 241 777 q 220 793 220 777 l 220 797 l 203 797 l 186 800 l 186 814 l 193 824 q 183 841 186 824 l 186 858 q 173 868 173 863 l 173 878 q 197 885 181 878 l 197 888 l 183 888 l 159 885 l 163 892 l 163 895 q 129 943 129 936 q 153 977 129 947 l 146 977 q 125 970 136 977 q 102 1010 109 970 l 95 1010 l 95 1007 q 119 929 95 996 l 119 919 q 115 916 115 919 q 166 851 144 916 q 173 844 173 850 l 173 807 l 149 800 l 142 800 q 129 875 129 872 q 132 885 132 882 l 125 885 q 112 871 125 871 q 132 834 112 857 l 132 817 q 109 790 132 800 l 109 787 l 159 793 q 186 736 186 793 q 170 702 170 713 l 170 695 l 190 671 q 163 637 190 650 l 159 617 q 170 539 170 581 q 125 512 161 539 q 68 492 68 500 l 51 495 q 7 485 41 495 l -3 485 q -14 505 -14 488 l -14 760 q 7 773 -7 773 l 20 770 q 31 773 27 773 l 31 777 l -7 777 q -14 783 -14 777 l -14 787 q -7 810 -12 810 q -14 831 -14 821 l -14 875 q -10 888 -14 882 q -14 902 -14 895 q -10 905 -14 905 l -14 922 l -14 1075 q -7 1082 -12 1082 q 20 1072 10 1072 q 75 1092 68 1092 l 81 1092 l 78 1068 q 98 1027 93 1027 l 102 1034 q 85 1088 102 1038 q 95 1092 92 1092 l 95 1095 q 75 1119 83 1095 l 75 1129 q 85 1133 78 1129 m 854 1133 l 980 1133 q 987 1122 980 1122 l 990 1122 q 1007 1133 990 1133 l 1031 1133 q 1034 1129 1034 1133 l 1041 1133 l 1085 1133 q 1109 1129 1105 1133 q 1139 1133 1127 1133 l 1200 1133 q 1207 1126 1207 1131 l 1207 1122 q 1183 1095 1199 1122 q 1136 1082 1166 1095 l 1116 1085 q 1085 1068 1103 1081 l 1068 1068 q 1041 1041 1061 1041 l 1014 1041 l 1017 1024 q 1010 1004 1010 1013 q 1017 997 1012 997 q 1078 1051 1017 1028 q 1163 1075 1110 1075 q 1170 1085 1163 1085 l 1183 1082 q 1258 1112 1202 1099 q 1255 1122 1255 1119 l 1251 1122 q 1204 1105 1251 1105 l 1204 1112 q 1231 1133 1208 1123 q 1255 1126 1244 1126 l 1258 1133 l 1265 1129 l 1289 1133 q 1295 1126 1290 1126 q 1292 1119 1295 1119 l 1295 1078 l 1295 1068 q 1292 1034 1295 1052 q 1295 1004 1295 1021 l 1295 997 q 1289 973 1295 973 q 1295 953 1295 962 l 1295 899 l 1292 875 l 1289 875 q 1282 885 1289 885 q 1272 858 1275 885 l 1251 858 q 1292 804 1251 817 q 1295 790 1295 798 l 1295 783 l 1292 766 l 1295 766 l 1292 760 q 1295 729 1295 741 q 1292 726 1295 726 l 1295 719 l 1295 712 q 1289 688 1295 688 q 1295 668 1295 677 l 1295 444 q 1258 427 1295 437 q 1207 397 1244 397 q 1177 353 1207 382 l 1177 342 l 1183 339 q 1292 420 1251 420 q 1295 407 1295 414 l 1295 173 q 1258 146 1292 146 l 1258 132 l 1292 142 l 1295 136 l 1295 10 q 1285 0 1295 5 l 1068 0 q 1061 7 1061 0 q 1099 47 1061 47 q 1109 44 1105 44 q 1146 54 1132 44 q 1173 51 1171 51 q 1234 75 1213 58 q 1258 81 1258 75 l 1258 92 l 1227 95 q 1194 75 1227 83 q 1183 78 1187 78 q 1163 71 1173 71 q 1153 75 1160 71 q 1136 58 1136 71 l 1133 58 q 1099 71 1099 67 q 1092 102 1092 94 l 1092 149 l 1082 166 q 1095 197 1095 191 l 1092 197 l 1068 170 q 1024 200 1039 180 l 1024 203 q 1072 298 1024 224 l 1085 298 q 1075 339 1078 313 q 1112 414 1087 393 q 1143 465 1143 431 q 1204 481 1174 481 l 1217 481 q 1255 495 1240 495 l 1255 509 l 1241 509 l 1194 498 l 1187 502 q 1160 492 1164 492 q 1126 549 1160 511 q 1088 641 1109 641 q 1085 651 1088 644 q 1126 760 1126 701 q 1129 787 1126 768 q 1116 797 1116 793 q 1105 790 1105 793 l 1099 793 l 1092 793 q 1044 777 1071 777 q 1010 780 1027 780 l 1010 787 l 1034 817 l 1031 817 q 960 763 994 775 q 946 753 960 753 l 946 746 q 980 712 966 746 q 916 665 980 676 q 905 644 911 665 l 899 644 l 899 637 q 936 665 917 637 l 943 661 l 953 661 l 960 665 q 963 661 960 661 q 919 543 936 543 l 895 543 l 895 536 l 916 536 l 922 539 l 926 532 q 858 302 865 302 q 814 359 814 348 q 804 417 806 359 q 834 519 804 475 l 827 519 q 804 468 804 492 l 787 465 l 770 465 q 743 471 746 471 l 719 465 l 712 465 q 661 478 700 465 q 770 854 763 839 l 773 854 q 821 834 773 846 q 858 851 836 844 l 875 848 l 888 848 q 949 858 912 854 q 977 851 962 851 q 990 882 989 867 l 1007 882 q 1031 851 1031 882 l 1038 848 l 1038 851 l 1031 875 q 1034 885 1034 882 q 1004 909 1004 885 q 990 922 996 909 q 1010 953 994 939 l 1010 960 q 990 953 1000 953 l 973 956 q 970 949 973 949 q 983 899 977 939 l 966 865 l 943 868 q 888 858 920 868 l 888 861 l 882 858 q 854 861 857 861 q 807 841 850 861 q 773 865 807 846 l 773 868 q 821 1027 810 1010 l 827 1027 q 858 983 846 988 l 861 983 l 861 990 l 868 990 q 953 956 935 972 l 960 956 q 966 963 966 956 q 946 987 946 981 q 953 1010 946 994 l 946 1014 q 939 1000 946 1000 l 936 1000 l 926 1007 l 926 1004 l 932 994 l 932 983 l 916 983 q 844 1007 890 999 l 844 1010 q 848 1021 848 1017 q 824 1048 848 1026 q 854 1133 842 1133 m 142 1112 l 142 1105 l 153 1105 l 153 1116 q 142 1112 146 1112 m 322 1105 l 322 1099 q 329 1105 329 1099 l 329 1112 q 322 1105 322 1111 m 1126 1105 q 1133 1099 1127 1099 l 1136 1099 l 1136 1105 l 1126 1105 m 115 1095 l 115 1092 q 136 1075 123 1075 l 136 1082 q 122 1095 136 1087 l 115 1095 m 315 1075 l 298 1051 l 302 1051 q 322 1072 312 1051 l 315 1075 m 1004 1058 l 1004 1055 l 1007 1055 q 1027 1061 1015 1061 l 1027 1068 q 1004 1058 1004 1065 m 336 1065 l 329 1051 l 336 1048 l 342 1051 q 353 1041 342 1046 l 353 1044 q 336 1065 340 1065 m 983 1055 l 983 1048 l 997 1048 l 997 1055 l 983 1055 m 919 1044 l 912 1024 l 919 1021 l 922 1041 l 922 1044 l 919 1044 m 407 1027 l 410 1027 q 424 1034 418 1034 l 424 1041 l 420 1041 q 407 1027 415 1041 m 1092 1024 l 1092 1021 q 1112 990 1092 999 l 1112 994 l 1092 1024 m 322 1007 l 322 1004 l 332 1004 q 336 1014 332 1007 l 329 1014 q 322 1007 322 1013 m 166 983 l 166 980 l 180 980 q 186 987 180 987 l 186 994 q 166 983 166 991 m 214 983 q 217 970 217 977 q 227 980 222 970 l 227 987 l 220 987 l 214 983 m 254 983 l 254 980 l 268 980 l 268 983 l 254 983 m 1126 983 l 1126 977 q 1139 963 1126 971 l 1143 963 l 1143 966 q 1129 983 1134 983 l 1126 983 m 366 973 q 373 966 368 966 l 376 966 l 376 973 l 366 973 m 1072 960 l 1082 953 l 1085 953 q 1092 960 1092 953 l 1092 963 q 1085 970 1092 970 l 1082 970 q 1072 960 1077 970 m 190 966 l 190 960 l 197 960 q 203 966 203 960 l 190 966 m 275 960 l 275 949 l 298 949 l 298 963 q 275 960 285 960 m 370 960 l 370 953 q 383 878 383 916 l 390 878 l 387 885 q 400 909 387 909 l 400 912 q 390 916 390 912 q 393 936 390 918 q 390 946 390 943 q 404 960 395 946 l 404 963 l 400 963 q 387 960 393 963 l 380 963 q 370 960 373 960 m 1143 960 l 1143 953 l 1149 943 q 1146 929 1146 937 l 1204 895 q 1255 943 1204 905 l 1255 946 l 1251 946 q 1200 919 1206 919 q 1149 956 1149 930 l 1143 960 m 349 929 l 349 926 l 356 926 q 363 932 363 926 l 363 936 l 356 936 q 349 929 349 935 m 1095 922 l 1105 922 q 1119 929 1114 929 l 1119 936 q 1095 922 1101 936 m 1078 929 q 1061 905 1078 916 l 1044 905 l 1044 895 q 1092 926 1063 895 l 1085 929 l 1078 929 m 895 909 l 902 905 l 905 912 l 905 916 l 902 916 q 895 909 895 914 m 281 902 l 281 895 l 292 895 l 292 902 l 281 902 m 339 895 l 339 892 l 349 892 l 349 899 q 339 895 342 895 m 34 895 l 31 871 l 34 871 q 41 878 41 871 l 41 895 l 34 895 m 865 892 l 865 885 l 868 885 q 875 892 875 885 l 865 892 m 492 888 l 492 878 l 495 878 q 502 885 502 878 l 495 888 l 492 888 m 1204 888 q 1160 838 1204 879 q 1146 841 1152 838 q 1116 824 1116 830 l 1116 817 q 1122 810 1117 810 q 1153 831 1122 823 q 1163 827 1160 827 l 1180 838 l 1207 838 q 1241 851 1241 842 l 1238 851 q 1194 844 1207 844 q 1187 851 1187 844 q 1211 878 1187 858 l 1211 888 l 1204 888 m 1048 882 l 1048 875 q 1058 858 1058 864 q 1048 834 1058 849 l 1055 834 l 1068 841 q 1051 882 1064 882 l 1048 882 m 471 875 l 471 865 q 478 871 478 865 l 478 875 l 471 875 m 397 871 l 397 861 l 400 854 q 410 858 407 858 l 410 861 q 397 871 410 867 m 275 861 l 275 851 q 309 858 300 854 q 305 868 305 865 q 275 861 299 865 m 214 841 l 214 824 l 227 824 q 248 841 248 836 q 234 851 234 843 l 231 851 q 214 841 220 841 m 373 824 l 376 817 l 376 814 l 370 817 l 342 793 q 346 783 346 787 q 414 844 413 835 l 414 848 l 404 848 q 373 824 387 828 m 61 800 l 61 797 l 71 797 q 125 831 103 808 l 129 831 l 129 838 l 88 810 q 61 800 63 810 m 1068 821 l 1068 817 q 1082 797 1076 797 l 1088 797 q 1068 821 1072 821 m 1282 821 l 1292 821 l 1292 817 q 1285 810 1292 810 l 1282 817 l 1282 821 m 288 807 l 288 800 l 302 800 l 302 807 l 288 807 m 268 800 l 268 790 l 278 790 l 278 800 l 268 800 m 905 793 l 905 790 q 912 783 907 783 l 916 783 l 916 793 l 905 793 m 214 787 l 224 787 l 227 770 l 227 766 q 217 756 227 762 q 207 783 207 758 l 214 787 m 1095 787 l 1105 787 q 1116 777 1110 787 q 1078 668 1116 692 q 1068 654 1074 654 q 1044 675 1047 674 l 1027 675 q 1007 654 1027 667 q 994 658 1001 658 l 994 651 q 1004 641 994 646 l 1007 641 q 1038 661 1030 661 q 1095 590 1095 613 q 1136 495 1095 536 l 1136 478 q 1109 427 1118 465 q 1068 383 1083 414 l 1072 366 q 1055 332 1068 366 l 1048 332 l 1048 329 q 1065 319 1065 328 l 1065 312 q 1014 227 1050 297 l 1014 200 q 1007 197 1007 200 l 1000 200 l 997 200 l 990 197 q 1027 176 990 185 q 1072 146 1072 155 q 1082 122 1072 127 q 1078 112 1082 119 q 1085 64 1078 104 q 1065 51 1082 51 q 1055 54 1058 54 q 1041 3 1055 31 q 1027 7 1029 7 q 1007 0 1017 0 l 970 0 q 960 10 965 0 l 963 31 q 960 44 960 37 q 966 51 966 44 l 973 47 l 983 47 q 987 58 983 51 l 983 58 l 966 54 q 960 75 960 65 l 960 200 q 966 207 961 207 l 970 207 q 990 200 979 207 l 990 207 l 960 231 l 960 295 q 966 509 960 414 l 963 515 q 983 675 977 667 l 987 675 l 997 668 l 1000 668 l 1000 688 l 1017 685 q 983 736 1002 698 q 977 743 977 736 l 977 746 q 1078 777 996 766 q 1095 787 1078 779 m 285 756 q 271 773 271 760 l 268 773 q 261 766 261 772 l 261 763 q 278 749 261 758 l 295 749 l 329 753 q 342 736 342 741 l 356 736 q 376 743 363 743 l 376 756 l 366 756 l 356 749 l 353 749 q 336 770 348 749 l 342 770 l 342 780 q 285 756 324 756 m 397 746 l 397 743 l 407 743 l 410 756 l 407 756 q 397 746 402 756 m 153 749 q 159 743 154 743 l 166 743 q 173 749 173 743 l 166 753 q 153 749 160 749 m 1153 743 l 1153 739 q 1160 732 1154 732 q 1166 739 1166 732 l 1166 749 l 1160 749 q 1153 743 1153 748 m 420 736 l 420 732 q 427 726 422 726 l 434 726 q 444 736 439 726 q 437 739 437 736 q 420 736 432 736 m 848 729 l 848 726 l 871 719 l 875 719 q 858 736 875 724 l 854 736 q 848 729 848 734 m 397 722 q 407 712 397 718 l 414 712 l 414 715 q 407 722 414 722 l 397 722 m 882 712 q 905 692 882 706 l 916 692 q 888 712 916 697 l 882 712 m 258 685 l 258 678 l 261 678 q 271 688 266 678 l 271 699 q 258 685 266 699 m 417 699 l 414 685 l 417 685 q 420 688 420 685 q 465 671 456 671 q 468 675 468 671 l 475 671 l 481 671 q 488 678 488 671 q 481 685 488 685 l 478 685 q 465 678 470 678 q 434 699 450 684 l 417 699 m 1265 682 l 1272 682 q 1278 688 1278 682 l 1272 688 q 1265 682 1265 687 m 922 685 q 929 678 924 678 l 936 678 q 929 685 936 685 l 922 685 m 519 678 l 519 675 q 526 668 520 668 q 532 675 532 668 l 529 682 q 519 678 522 678 m 410 610 l 417 607 l 420 614 l 420 617 l 417 617 q 410 610 410 616 m 465 604 l 461 590 l 475 590 q 478 600 475 593 l 471 604 l 465 604 m 505 583 l 505 580 q 522 566 507 573 q 532 573 532 570 q 522 593 529 593 l 515 593 q 505 583 511 593 m 451 543 q 444 526 451 536 l 451 522 l 465 536 q 458 543 465 543 l 451 543 m 241 532 q 295 498 264 509 q 315 424 295 467 l 315 390 q 336 336 324 375 l 336 332 q 332 329 336 329 l 336 322 l 336 264 q 332 217 336 246 q 336 200 336 212 q 332 197 336 197 l 336 173 l 336 10 q 326 0 336 5 l 292 0 q 214 10 270 7 q 180 0 196 0 l 132 0 q 34 78 92 0 q 0 119 12 78 l 0 156 q 10 180 0 168 l 10 183 q 0 190 0 183 l 0 220 q 7 254 0 227 q 0 275 0 265 l 0 471 l 3 471 q 17 468 11 471 q 58 485 47 485 q 81 478 68 485 q 112 495 94 482 l 119 495 q 122 492 122 495 q 210 529 197 529 l 237 529 q 241 532 241 529 m 590 529 l 590 522 q 593 512 593 515 l 597 512 l 597 522 q 590 529 597 529 m 977 515 l 977 512 l 980 512 q 987 519 987 512 l 987 526 q 977 515 982 526 m 231 485 l 231 475 q 251 485 251 478 q 241 488 244 488 q 231 485 234 485 m 532 465 l 532 451 l 539 451 l 539 465 l 532 465 m 661 431 l 665 431 q 709 420 703 420 q 746 427 738 427 q 793 410 793 418 l 793 356 q 797 353 793 353 l 793 346 l 793 342 q 844 268 793 312 q 851 234 851 247 l 841 217 l 841 200 q 831 193 836 200 l 834 186 q 814 153 834 173 l 814 125 q 817 122 814 122 q 780 51 806 51 l 770 51 l 770 47 q 793 41 793 47 q 770 -27 793 12 l 763 -24 l 753 -24 l 746 -27 q 739 -20 746 -20 q 719 -27 728 -27 l 702 -27 q 682 -17 684 -27 l 682 -14 l 692 0 l 688 0 l 682 -3 q 671 34 674 4 q 719 47 684 47 l 719 51 l 702 54 l 631 20 l 617 20 q 570 31 570 20 q 543 27 557 27 q 553 20 543 20 q 563 27 563 24 q 597 14 587 14 l 621 14 q 661 24 629 14 l 665 24 l 675 -24 l 668 -27 l 532 -27 q 512 -7 528 -27 l 512 3 l 515 10 q 495 54 507 10 l 505 54 q 536 34 521 41 l 536 37 q 481 109 481 73 q 431 288 465 156 q 505 349 491 309 l 512 353 q 556 342 548 342 q 576 366 576 348 l 573 366 q 597 387 573 370 q 641 417 597 400 l 651 417 q 661 431 656 431 m 203 383 l 203 376 l 214 376 l 214 383 l 203 383 m 71 342 l 68 336 l 68 332 l 71 332 q 78 339 78 332 l 71 342 m 200 332 l 200 326 l 210 326 q 220 336 215 326 q 217 339 217 336 q 200 332 206 332 m 617 322 l 624 319 l 634 332 l 627 332 q 617 322 623 332 m 64 315 l 71 312 l 75 312 l 75 322 l 71 322 q 64 315 64 321 m 254 309 l 254 312 q 203 292 203 296 l 203 288 q 322 319 308 308 l 322 322 l 254 309 m 1183 312 q 1170 275 1183 295 l 1177 271 q 1194 309 1194 298 l 1194 312 l 1183 312 m 146 292 l 149 292 l 163 298 q 159 309 159 305 q 146 292 153 307 m 173 298 l 173 292 l 180 292 q 190 302 184 292 l 190 309 l 183 309 q 173 298 178 309 m 1102 281 l 1102 278 q 1112 258 1112 265 l 1116 258 q 1143 275 1127 275 l 1146 281 l 1102 281 m 24 271 l 31 268 l 34 275 l 34 278 l 31 278 q 24 271 24 277 m 122 275 q 109 254 122 268 l 115 254 q 125 264 120 254 l 125 275 l 122 275 m 180 271 l 180 264 l 183 264 q 190 271 190 264 l 180 271 m 566 241 l 566 237 l 573 237 l 573 248 q 566 241 566 246 m 519 241 q 509 214 509 224 l 509 207 l 515 207 q 526 237 515 213 l 519 241 m 1112 234 q 1102 210 1102 214 q 1116 231 1107 210 l 1116 234 l 1112 234 m 478 193 l 475 186 l 488 186 l 488 190 q 478 193 485 190 m 1014 132 l 1014 129 q 1021 122 1015 122 l 1021 132 l 1014 132 m 1014 109 l 1014 105 l 1021 105 l 1021 115 q 1014 109 1014 114 m 732 112 l 732 102 l 736 102 q 743 109 743 102 l 743 112 l 732 112 m 736 78 l 736 71 l 756 71 q 763 78 763 71 l 736 78 m 994 78 l 994 71 l 1017 71 q 1010 78 1017 78 l 994 78 m -7 64 q 24 41 20 50 l 24 34 q 7 27 7 34 l 7 24 l 14 24 l 27 34 q 61 0 44 0 l 61 -3 l 54 -7 q 24 0 33 0 l 14 0 l -10 -3 l -14 3 l -14 58 q -7 64 -12 64 m 1034 64 l 1034 61 q 1048 58 1042 61 l 1048 61 l 1041 64 l 1034 64 z "},"N":{"ha":1085,"x_min":0,"x_max":1099,"o":"m 10 1133 l 14 1126 l 14 1122 l 10 1116 l 17 1112 q 44 1133 38 1133 l 54 1133 q 92 1129 68 1133 q 125 1133 109 1133 l 142 1122 q 159 1133 142 1133 l 217 1133 q 224 1126 224 1131 q 197 1078 224 1124 l 203 1078 q 234 1126 224 1089 l 258 1133 l 332 1133 q 407 1038 356 1133 q 444 977 444 990 q 376 932 412 932 q 366 963 370 940 q 376 987 376 980 l 363 1024 l 356 1024 l 356 1021 l 359 1004 q 353 997 353 1002 q 366 987 359 997 q 359 960 359 975 l 359 956 l 366 946 l 366 936 l 363 912 q 420 939 385 931 q 448 966 448 954 l 458 966 q 587 766 484 920 q 553 719 553 745 l 522 712 q 495 780 504 725 q 441 844 450 806 q 356 909 368 844 l 342 899 l 339 899 l 339 919 q 332 926 339 926 l 329 926 l 329 909 q 241 868 326 901 q 207 844 231 856 q 197 848 200 848 l 197 868 q 200 899 197 880 q 197 909 197 905 l 190 909 l 190 902 q 193 885 190 890 q 186 858 193 879 q 197 804 186 846 q 183 793 197 793 l 197 780 l 197 749 q 156 729 172 729 q 163 722 157 722 q 193 732 185 732 q 200 726 200 731 l 197 726 l 200 719 l 200 702 q 220 685 210 702 l 264 709 l 264 715 l 261 715 l 254 712 l 244 729 q 220 715 220 727 l 217 715 q 210 722 210 715 q 214 726 210 726 l 210 749 l 210 770 q 207 773 210 773 q 214 787 210 787 l 200 827 q 254 858 200 838 q 332 888 262 869 q 359 854 338 888 l 407 821 l 417 821 l 417 831 l 427 831 q 437 821 432 831 l 437 817 q 434 814 437 814 q 478 766 436 799 q 519 692 478 715 l 532 678 l 532 675 l 522 675 q 475 641 475 675 q 448 566 475 629 q 427 488 448 488 q 346 604 349 604 l 342 604 q 336 590 342 590 l 315 590 q 295 604 302 604 q 278 597 284 597 l 261 600 q 217 587 243 600 q 207 590 210 590 l 207 593 q 224 604 207 601 l 224 631 q 220 634 224 634 q 231 665 231 656 l 231 675 l 220 675 q 207 644 220 665 l 210 637 q 146 593 190 593 q 41 543 92 557 q 14 559 20 543 l 0 559 l 0 570 q 7 607 0 574 q 0 614 0 607 l 0 641 q 3 668 0 665 q 0 705 0 691 l 0 800 l 3 807 l 10 804 l 14 804 q 20 810 20 804 l 20 814 l 10 814 l 3 810 q 0 814 3 814 l 3 821 q 0 848 3 823 q 3 851 0 851 l 0 875 l 0 946 q 3 983 0 960 q 0 997 0 989 q 47 1014 39 1014 q 51 1004 51 1007 l 61 1004 q 64 1010 61 1010 q 58 1027 58 1021 q 105 1058 76 1049 q 173 1038 115 1058 l 190 1041 q 234 1031 209 1031 l 234 1034 q 258 1027 251 1027 l 258 1031 q 210 1048 258 1046 q 200 1068 200 1053 l 193 1068 q 183 1055 193 1055 l 166 1055 l 149 1085 l 149 1078 q 153 1068 153 1072 l 98 1068 q 64 1055 92 1068 q 58 1061 64 1061 l 54 1061 q 10 1021 46 1043 q 0 1085 0 1031 l 3 1105 q 0 1122 0 1111 q 10 1133 0 1127 m 790 1146 l 834 1146 q 844 1143 844 1146 l 861 1146 l 990 1146 q 1000 1122 1000 1146 l 1007 1122 l 1007 1143 q 1021 1146 1013 1146 l 1088 1146 q 1099 1136 1093 1146 l 1099 1119 q 1095 1092 1099 1095 q 1099 1055 1099 1069 l 1099 987 q 1088 977 1099 982 q 997 994 1020 994 l 990 990 q 926 1041 974 991 q 902 1048 902 1043 q 834 1021 842 1021 l 824 1021 q 793 1068 802 1021 q 770 1116 770 1099 q 790 1146 785 1146 m 739 1092 l 743 1092 q 777 1004 777 1022 q 760 994 766 994 l 760 987 l 770 987 l 770 983 q 743 932 749 932 q 736 939 736 932 l 736 1075 l 739 1092 m 899 1055 l 899 1051 q 919 1068 919 1064 l 919 1072 q 899 1055 899 1060 m 254 1051 l 254 1048 q 349 997 275 1029 l 349 1000 q 268 1048 303 1038 q 264 1051 268 1051 l 254 1051 m 68 1021 l 68 1010 q 75 1017 75 1010 l 75 1021 l 68 1021 m 88 1007 l 88 1000 l 95 1000 q 102 1007 102 1000 l 102 1014 l 95 1014 q 88 1007 88 1013 m 166 1014 l 166 983 q 173 990 173 983 l 173 1014 l 166 1014 m 895 1014 q 956 970 905 1014 q 990 956 981 963 l 1021 956 q 1061 936 1061 943 q 1044 878 1051 926 l 1044 865 q 1068 939 1055 876 l 1085 943 q 1092 936 1092 941 l 1092 905 q 1088 902 1092 902 l 1092 895 l 1092 790 l 1085 780 q 1031 844 1043 809 q 1034 854 1031 848 q 1031 878 1031 868 q 997 777 1012 848 q 919 729 969 729 l 919 719 l 929 719 q 953 729 941 729 l 956 722 l 953 702 q 1024 824 1024 771 q 1021 827 1021 824 l 1027 827 q 1055 790 1033 827 q 1092 726 1088 790 l 1092 393 q 997 356 1059 356 q 912 373 997 369 q 895 414 899 385 l 899 420 q 895 431 899 424 q 899 468 899 454 l 899 475 q 868 509 899 493 q 865 546 868 523 q 868 576 868 564 q 865 600 865 578 q 892 614 877 600 l 899 614 l 895 607 l 895 604 l 899 604 q 919 614 916 604 l 916 631 q 932 648 919 648 l 936 641 l 932 617 l 936 617 q 946 634 943 617 l 943 658 q 946 661 946 658 l 943 661 l 936 658 q 922 661 930 661 q 851 617 922 617 q 800 627 829 624 q 770 624 787 624 l 739 665 q 736 814 736 754 l 736 871 q 773 936 736 889 q 793 990 781 990 q 827 987 823 987 q 895 1014 892 1014 m 14 983 l 14 980 l 20 980 q 27 987 27 980 l 27 990 l 20 990 q 14 983 14 989 m 170 980 l 170 966 l 176 966 l 176 970 q 173 980 173 977 l 170 980 m 132 973 l 132 963 q 146 956 138 963 l 149 956 l 146 973 l 132 973 m 312 929 l 312 926 l 315 926 q 326 936 320 926 l 326 953 q 312 929 321 953 m 170 939 l 170 936 q 180 916 180 920 l 190 916 l 190 919 q 180 939 180 932 l 170 939 m 936 807 l 936 800 l 946 800 q 939 807 946 807 l 936 807 m 122 804 q 88 763 122 797 l 81 763 q 75 773 75 763 l 64 773 l 64 770 l 68 756 q 64 746 64 749 l 81 746 l 119 766 q 115 780 115 772 l 122 783 q 129 770 125 770 q 153 783 153 778 l 153 787 l 136 783 q 129 804 129 791 l 122 804 m 953 804 l 953 800 q 960 793 954 793 l 966 793 l 966 797 q 960 804 966 804 l 953 804 m 44 783 l 44 777 l 54 777 q 47 783 54 783 l 44 783 m 817 770 l 817 756 l 824 756 q 831 763 831 756 l 831 770 l 817 770 m 342 763 l 342 756 l 353 756 l 353 763 l 342 763 m 119 736 l 119 732 l 136 729 l 136 736 l 119 736 m 604 739 q 743 532 736 534 l 746 532 l 746 593 q 770 610 746 598 q 848 573 848 602 q 851 566 848 566 l 848 543 l 848 505 l 838 505 l 821 502 l 821 495 l 838 492 q 848 502 838 496 l 885 481 l 888 475 q 878 434 888 467 l 878 424 q 885 397 878 409 l 878 356 q 888 319 885 346 l 885 312 q 899 292 893 292 l 905 292 l 905 322 q 895 356 905 330 q 902 363 902 356 l 990 349 q 997 336 990 336 l 1000 336 q 1082 363 1067 346 l 1085 363 q 1092 356 1092 361 l 1092 119 q 1088 75 1092 97 q 1092 37 1092 62 l 1092 10 q 1082 0 1092 5 l 912 0 l 885 37 q 854 78 873 37 q 871 132 871 117 l 851 180 q 892 234 851 228 q 919 258 919 255 l 919 264 l 916 281 l 909 281 q 858 237 909 258 l 817 241 l 753 227 q 739 254 742 227 l 729 254 l 729 244 l 736 234 l 726 193 q 739 166 739 189 l 743 166 q 749 173 749 166 l 736 203 q 793 220 736 220 q 804 217 800 217 q 824 224 814 224 l 834 224 q 848 193 840 224 l 844 176 q 858 125 853 125 q 838 61 838 76 q 875 24 844 61 q 888 7 882 24 l 878 0 l 810 0 q 797 3 803 0 q 783 0 791 0 l 760 0 q 688 88 739 0 q 526 336 526 332 q 515 359 515 340 l 539 346 l 543 346 l 543 349 l 492 383 q 441 468 441 463 q 471 570 463 468 q 502 634 490 591 l 498 641 l 498 648 q 559 678 559 652 q 604 739 566 739 m 88 715 l 88 709 q 95 702 90 702 l 102 702 l 98 719 q 102 722 102 719 l 95 722 q 88 715 88 721 m 68 715 l 64 709 q 78 712 71 712 l 78 715 l 68 715 m 526 709 q 546 699 546 705 l 546 692 l 536 692 q 526 702 531 692 l 526 709 m 909 678 l 919 678 q 926 692 919 684 l 926 705 q 909 678 909 699 m 953 695 l 949 678 q 956 688 956 678 l 956 695 l 953 695 m 261 654 l 268 654 q 275 661 275 654 l 275 665 l 271 665 q 261 654 267 665 m 176 661 q 183 654 178 654 l 190 654 q 183 661 190 661 l 176 661 m 146 658 q 136 644 146 653 l 136 637 l 139 637 q 153 651 144 637 l 153 658 l 146 658 m 315 641 q 322 634 317 634 l 329 634 q 336 641 336 634 l 315 641 m 41 627 l 41 624 l 58 624 l 58 627 q 51 634 58 634 l 47 634 q 41 627 41 633 m 98 624 l 98 621 l 105 621 q 112 627 112 621 l 112 634 l 109 634 q 98 624 104 634 m 743 627 l 756 627 q 763 621 763 626 q 756 614 763 614 l 746 614 l 743 627 m 336 617 q 342 610 337 610 q 353 614 349 614 l 353 621 l 336 617 m 92 587 l 98 583 l 102 590 l 102 593 l 98 593 q 92 587 92 592 m 47 583 l 47 576 l 61 576 l 61 583 l 47 583 m 186 587 l 214 573 q 281 580 248 580 q 305 570 298 570 q 326 576 326 572 q 349 512 349 576 l 342 512 q 319 529 322 529 l 319 522 q 353 458 353 486 q 356 366 353 429 q 336 332 356 354 l 336 329 q 356 292 356 307 l 356 288 q 305 258 356 266 q 248 217 291 258 q 193 153 227 204 q 122 88 190 153 q 58 81 90 81 q 41 142 43 81 q 20 173 20 167 q 24 193 20 176 q 0 261 0 227 l 0 431 q 41 465 0 456 l 47 478 q 44 481 47 481 q 71 529 44 529 q 115 549 71 533 q 186 587 115 560 m 14 546 q 44 526 18 536 l 41 492 l 41 485 q 3 465 17 465 l 0 471 l 0 526 q 14 546 0 543 m 668 451 l 665 444 l 665 441 l 668 441 q 675 448 675 441 l 668 451 m 10 363 q 14 359 14 363 q 34 373 34 366 q 24 376 27 376 q 10 363 13 373 m 546 342 l 546 339 q 580 329 546 332 q 631 298 586 311 q 644 278 644 288 q 637 258 637 267 l 637 254 l 641 254 q 648 261 648 254 l 648 264 l 644 271 l 651 275 q 682 268 660 275 q 732 285 700 278 l 732 288 l 726 292 l 705 292 q 682 281 693 281 q 631 312 652 281 q 559 342 609 312 l 546 342 m 749 315 l 749 309 l 766 312 l 766 315 q 760 322 766 322 l 756 322 q 749 315 749 321 m 939 258 l 936 251 l 936 248 q 946 241 946 248 q 966 251 966 245 q 939 258 949 251 m 349 231 l 356 220 l 356 112 q 295 92 356 105 q 288 88 295 88 q 278 95 288 95 q 241 85 267 89 q 271 64 241 80 l 275 64 q 353 88 279 88 q 356 75 356 82 l 356 -10 q 346 -20 356 -15 l 278 -20 l 278 -10 q 292 7 278 -8 l 292 14 l 288 14 q 248 -20 267 -20 l 122 -20 q 112 -7 114 -20 l 105 -7 q 98 -20 105 -20 l 10 -20 q 0 -10 5 -20 l 0 37 q 20 54 6 50 q 64 27 54 54 q 92 3 74 3 l 95 3 l 95 7 q 64 41 64 18 l 64 47 q 71 51 71 47 l 78 47 l 125 47 q 183 98 142 47 q 217 105 204 105 l 217 112 q 241 159 217 149 q 319 217 293 217 l 349 231 m 929 207 l 912 207 l 875 166 l 871 159 l 878 159 q 902 183 886 159 l 905 183 l 905 173 l 895 159 q 899 156 899 159 l 916 170 q 932 156 930 156 l 932 159 q 926 186 926 172 q 943 200 943 195 l 943 214 l 939 214 l 929 207 m 7 193 q 24 156 7 156 l 24 139 q 34 85 32 131 q 31 81 31 85 l 24 85 l 20 85 l 3 81 l 0 98 l 0 186 q 7 193 1 193 m 990 183 l 987 176 l 987 173 l 990 173 q 997 180 997 173 l 990 183 m 760 166 q 777 139 771 139 q 763 95 773 117 l 763 92 l 766 92 l 790 132 l 763 166 l 760 166 m 760 88 q 753 81 760 81 q 763 68 763 73 l 770 68 l 770 71 q 763 88 763 80 l 760 88 m 814 41 l 821 37 q 834 51 824 51 l 834 58 q 814 41 820 53 z "},"O":{"ha":1221,"x_min":0,"x_max":1207,"o":"m 580 1153 q 821 1112 718 1153 l 821 1102 l 827 1102 l 827 1109 q 885 1068 875 1109 q 882 1055 882 1062 q 905 1075 894 1055 l 909 1075 q 939 1058 933 1058 l 939 1048 q 892 1024 939 1039 q 899 1017 893 1017 q 943 1048 943 1029 q 987 1021 958 1048 l 983 997 l 983 994 q 1007 943 1000 968 q 953 858 977 881 q 916 848 926 848 l 909 848 q 888 854 899 848 q 865 851 878 854 q 804 854 833 854 l 797 854 q 790 868 790 854 l 787 868 l 773 854 q 715 848 715 853 l 675 875 q 631 878 633 878 q 580 875 597 875 q 543 916 574 875 q 526 936 533 916 q 498 926 498 928 q 475 943 477 932 l 475 949 q 556 1010 517 991 q 576 1038 566 1033 l 580 1038 q 621 1017 612 1027 q 668 997 648 997 l 702 1010 q 804 990 718 1004 l 810 966 l 810 929 l 807 909 q 810 895 810 903 l 817 895 q 814 916 817 898 l 817 922 l 814 929 q 817 966 817 952 l 817 980 l 814 987 q 885 1024 881 1014 l 878 1027 q 810 994 857 1010 q 807 997 810 997 q 804 994 807 994 q 800 1007 800 1000 l 780 1007 q 705 1021 753 1007 q 661 1007 667 1007 q 624 1031 637 1007 q 576 1048 576 1043 l 576 1051 q 580 1088 576 1065 l 580 1092 l 576 1092 q 539 1010 568 1039 q 492 980 523 998 l 485 980 q 451 1065 478 980 l 454 1082 l 454 1116 q 509 1146 454 1146 l 566 1146 q 570 1116 570 1128 l 570 1112 l 576 1112 l 576 1116 q 573 1149 576 1120 l 580 1153 m 448 1136 l 451 1129 q 441 1105 448 1105 l 431 1122 l 431 1133 l 448 1136 m 414 1126 q 441 1048 441 1095 q 448 1007 448 1013 q 444 1004 444 1007 q 461 970 458 1004 q 393 922 461 947 q 322 966 322 932 l 322 987 q 329 1010 323 1010 l 326 1027 l 326 1031 q 356 1078 326 1042 q 376 1119 376 1104 q 414 1126 400 1126 m 770 1116 l 770 1109 l 780 1109 l 780 1116 l 770 1116 m 356 1109 l 356 1105 q 315 1041 346 1081 q 312 1017 312 1027 l 315 1004 l 309 987 l 319 980 q 312 963 312 969 q 339 926 317 947 q 319 902 334 910 l 315 902 l 315 912 l 305 912 q 264 865 305 884 q 251 851 264 851 l 234 854 q 193 824 214 854 q 170 875 189 829 q 153 888 154 882 q 183 905 176 888 l 190 902 q 203 905 192 902 q 217 902 210 902 l 220 909 l 214 912 l 203 912 l 203 916 q 183 909 197 916 q 163 919 180 919 q 129 882 151 882 q 109 861 129 861 l 98 861 l 81 865 q 166 987 81 911 q 173 1000 166 992 q 200 990 184 1000 l 210 990 l 210 994 l 203 1004 l 203 1010 q 248 1021 203 1021 l 248 1027 q 227 1038 244 1038 l 227 1041 q 356 1109 292 1093 m 275 1044 l 275 1034 l 281 1034 l 281 1044 l 275 1044 m 268 1021 l 268 1010 q 275 1017 275 1010 l 275 1021 l 268 1021 m 244 1007 l 244 1000 l 248 1000 q 254 1007 254 1000 l 254 1014 l 251 1014 q 244 1007 244 1013 m 1021 977 l 1024 977 q 1170 760 1129 877 l 1187 688 l 1187 685 l 1177 671 l 1183 668 l 1190 671 l 1194 665 l 1194 654 l 1190 648 q 1204 604 1200 648 l 1200 583 q 1207 563 1207 572 q 1194 397 1207 465 l 1173 397 q 1156 376 1156 389 l 1160 376 l 1183 383 l 1190 383 q 1085 142 1178 283 q 1055 122 1071 129 q 1058 112 1058 115 l 1055 112 q 963 125 1040 112 q 1010 109 963 120 l 1010 71 q 956 41 989 41 l 960 34 q 763 -47 887 -26 l 763 -44 q 770 -17 763 -29 q 749 54 760 33 q 777 95 761 64 l 783 95 l 783 102 q 729 146 763 102 q 678 214 705 165 q 800 332 768 256 q 838 417 825 415 l 844 417 l 844 407 l 854 414 q 882 383 854 405 l 882 376 q 878 366 878 370 l 875 366 l 851 370 q 892 356 851 361 q 916 376 892 363 l 909 376 l 892 373 q 868 414 892 389 q 882 424 868 422 l 882 444 l 878 451 q 932 495 886 472 l 932 498 l 922 498 q 882 478 906 483 q 851 417 882 448 q 827 431 851 429 q 834 532 834 471 l 834 559 q 838 563 834 563 q 827 621 834 571 q 834 627 834 621 l 834 631 q 824 648 824 642 q 838 668 824 651 l 834 668 q 827 661 827 667 q 797 729 819 661 q 743 804 783 758 l 743 807 q 817 814 815 812 q 831 810 823 810 q 844 814 838 810 q 878 804 864 804 q 909 810 901 810 q 926 746 926 776 l 926 739 l 922 719 q 963 624 963 651 q 943 604 958 624 q 953 590 948 604 q 939 563 948 575 q 943 549 939 555 q 939 536 939 543 l 939 532 q 943 529 939 529 l 939 522 l 939 515 q 949 505 939 511 l 943 492 l 949 495 q 963 488 963 492 q 990 495 984 495 q 1000 488 1000 492 l 1007 492 l 1017 492 l 1061 461 l 1065 468 l 1055 475 q 1061 492 1061 486 l 1058 492 l 1041 488 q 966 529 987 505 l 960 526 q 949 536 960 530 q 983 621 963 621 l 983 627 q 966 665 966 627 q 936 715 962 665 l 939 729 l 936 746 l 939 770 l 936 787 q 1010 827 936 806 l 1010 831 l 997 834 l 997 841 q 1017 851 1000 851 l 1034 841 l 1038 841 q 1044 848 1044 841 l 1044 854 q 1017 861 1034 854 l 1007 861 q 1021 885 1012 885 l 1024 885 l 1024 875 l 1021 868 l 1027 868 l 1034 871 l 1041 868 l 1058 871 l 1055 895 q 1065 905 1059 895 l 1058 909 q 1048 905 1051 905 l 1038 922 l 1038 929 l 1048 929 l 1061 919 l 1065 919 l 1065 922 q 1031 949 1031 945 q 1021 977 1021 970 m 556 994 l 556 980 l 563 980 l 563 987 q 556 994 563 994 m 217 977 l 217 973 l 227 973 l 231 980 l 227 980 q 217 977 220 977 m 539 949 q 549 966 547 949 q 539 949 542 966 m 214 956 l 214 953 l 224 953 l 224 963 l 220 963 q 214 956 214 962 m 119 929 l 115 912 l 115 909 q 125 929 125 912 l 119 929 m 458 932 l 485 909 q 505 916 496 916 q 553 878 536 905 l 553 875 q 431 797 471 852 q 400 743 404 743 l 397 743 l 397 746 q 434 848 416 806 q 407 885 434 852 l 410 892 q 404 899 410 899 q 393 885 404 894 q 420 854 393 879 l 420 848 l 397 821 l 397 797 q 329 732 397 755 q 302 719 317 732 l 298 719 q 251 763 269 734 q 210 810 241 763 l 210 821 q 275 848 235 848 q 322 875 275 865 q 359 919 348 911 q 407 902 389 916 q 451 932 451 925 l 458 932 m 1024 929 l 1031 929 l 1031 919 q 1017 912 1025 919 l 1014 919 q 1024 929 1014 924 m 132 899 l 132 895 l 136 895 q 142 902 142 895 l 142 905 l 139 905 q 132 899 132 904 m 281 895 q 288 888 283 888 l 295 899 l 288 902 q 281 895 281 901 m 98 882 l 112 882 q 119 888 119 882 l 112 892 l 109 892 q 98 882 104 892 m 237 885 l 237 882 l 241 882 q 251 892 245 882 l 244 892 q 237 885 237 890 m 146 882 l 149 882 q 166 865 149 875 q 159 858 166 858 l 136 858 q 129 865 129 858 l 146 882 m 224 861 l 234 861 l 234 868 l 231 868 q 224 861 224 867 m 61 848 q 125 838 123 842 q 156 844 132 841 q 186 804 160 844 q 285 709 207 770 q 227 665 267 682 q 186 614 213 614 q 149 536 177 536 q 136 532 136 536 q 68 573 119 546 q 54 570 62 570 l 58 587 l 47 593 q 14 580 21 580 l 3 580 q 0 590 3 583 q 61 848 0 700 m 387 743 q 397 732 391 743 l 397 729 q 376 634 382 705 q 366 621 373 634 q 373 614 373 619 q 370 597 373 602 q 376 468 373 567 l 373 468 l 339 485 l 258 461 l 237 465 l 231 465 l 210 461 q 153 475 179 475 q 210 448 159 464 l 224 448 q 227 451 227 448 l 258 441 q 315 458 258 453 q 339 468 315 463 q 387 427 387 437 q 461 278 397 360 q 529 248 461 271 q 593 237 542 237 l 641 241 q 719 146 657 197 q 736 122 719 140 l 736 109 q 702 51 722 109 l 709 47 l 712 68 l 719 68 q 732 14 729 68 l 736 14 q 729 -24 729 0 l 729 -27 q 593 -41 622 -41 q 451 -14 494 -41 q 434 -24 451 -18 q 190 95 287 11 l 156 129 q 268 159 156 134 l 268 166 q 156 136 156 146 l 149 136 q 119 186 119 160 l 119 190 l 122 214 q 75 241 75 237 l 75 248 q 98 309 98 262 l 115 315 q 109 322 115 322 l 105 322 l 92 312 q 78 349 78 326 q 129 441 78 358 q 142 475 129 456 l 139 498 q 200 526 139 512 l 231 498 l 231 502 q 200 539 219 526 q 237 610 200 602 l 258 651 l 322 702 q 366 726 322 717 q 387 743 366 743 m 1010 637 l 1014 637 q 1031 651 1029 644 l 1031 654 l 1027 654 q 1010 637 1023 654 m 821 651 l 821 644 q 841 641 823 644 l 844 641 l 844 644 q 831 651 839 644 l 821 651 m 970 651 l 970 648 q 977 641 971 641 l 983 641 q 990 648 990 641 l 990 651 l 970 651 m 861 644 l 861 641 q 868 634 863 634 l 882 634 l 882 637 q 868 644 876 637 l 861 644 m 98 634 l 95 627 l 95 621 l 105 621 l 105 627 q 98 634 105 634 m 44 570 l 54 570 l 51 563 q 98 536 84 536 q 102 539 102 536 q 122 532 115 532 l 122 522 q 112 512 112 522 q 119 502 115 502 q 47 363 102 428 q 54 336 54 342 q 51 319 51 330 q 68 285 66 319 l 61 281 l 54 281 q 34 359 34 326 l 44 359 l 44 363 q 17 414 17 363 q 24 420 24 414 q 7 451 10 420 q 14 461 10 461 q 0 546 0 479 q 44 570 0 555 m 95 519 l 95 509 l 102 509 l 102 519 l 95 519 m 926 509 q 905 458 926 473 l 909 458 q 926 465 920 465 l 926 478 q 932 505 926 481 l 932 509 l 926 509 m 34 478 l 31 471 l 31 468 l 41 468 l 41 471 q 34 478 41 478 m 844 373 q 838 339 840 368 l 861 326 l 861 329 l 844 346 l 844 356 l 851 366 q 844 373 851 373 m 888 363 l 888 356 q 919 326 888 352 l 919 332 q 892 363 899 361 l 888 363 m 919 322 l 919 319 q 936 295 919 302 l 939 295 q 943 305 939 298 l 922 322 l 919 322 m 349 309 l 346 302 l 346 295 q 356 305 351 295 l 349 309 m 922 278 l 922 275 l 932 275 l 932 285 l 929 285 q 922 278 922 283 m 475 251 l 475 241 q 481 248 481 241 l 481 251 l 475 251 m 997 237 l 997 227 l 1004 227 l 1004 237 l 997 237 m 468 210 l 468 203 q 475 197 469 197 l 475 217 q 468 210 468 216 m 1004 207 l 1000 200 l 1007 197 l 1010 203 l 1004 207 m 566 203 l 566 197 q 573 190 568 190 q 580 197 580 190 l 580 203 l 566 203 m 346 190 l 346 176 l 349 176 q 359 197 349 184 l 359 200 l 356 200 q 346 190 351 200 m 939 193 l 939 186 q 953 193 947 193 l 953 197 l 949 197 q 939 193 943 193 m 488 193 l 488 183 l 522 170 q 492 193 522 174 l 488 193 m 899 190 l 895 183 q 905 173 895 178 l 905 183 q 899 190 905 190 m 434 183 q 441 176 435 176 l 448 176 l 448 186 l 444 186 q 434 183 437 183 m 312 156 l 312 149 l 315 149 q 326 163 321 149 l 319 163 q 312 156 312 161 m 902 163 q 929 139 902 139 l 932 146 q 905 163 920 146 l 902 163 m 285 153 l 285 146 l 292 146 q 298 159 292 151 l 292 159 q 285 153 285 158 m 153 149 l 153 146 q 163 156 157 146 l 159 156 q 153 149 153 155 m 543 153 l 543 146 q 549 139 544 139 l 549 153 l 543 153 m 397 139 q 400 129 400 132 l 404 129 l 404 142 l 397 139 m 251 119 q 254 115 254 119 q 271 129 270 122 l 261 129 q 251 119 256 129 m 1017 132 l 1024 132 l 1024 129 q 1004 109 1024 124 l 1000 109 l 1000 129 l 1017 132 m 590 122 l 590 119 l 604 115 q 593 122 604 122 l 590 122 m 661 119 l 661 112 l 682 112 l 682 115 l 665 119 l 661 119 m 899 115 l 895 102 q 905 115 901 102 l 899 115 m 851 112 l 851 105 l 865 105 l 865 109 q 851 112 853 112 m 502 81 l 502 71 l 515 71 q 512 81 512 78 l 502 81 z "},"P":{"ha":1017,"x_min":0,"x_max":1027,"o":"m 14 1133 l 217 1133 q 234 1088 222 1133 l 237 1088 q 214 1041 214 1053 l 207 1044 l 197 1044 l 197 1041 q 203 1034 198 1034 l 207 1034 q 210 1038 210 1034 q 251 997 222 1038 q 312 905 275 997 q 305 878 312 895 q 309 841 309 855 l 309 834 q 210 746 250 746 q 180 729 180 733 l 180 719 l 190 719 q 207 736 192 736 q 217 732 214 732 q 227 743 217 737 l 234 743 l 234 739 l 203 712 l 207 712 q 254 756 235 712 q 278 766 267 766 q 288 756 283 766 l 288 753 l 281 729 l 288 726 q 295 746 295 736 q 288 777 295 751 q 332 834 300 805 q 349 821 348 827 l 366 824 l 370 824 l 373 807 q 366 773 373 798 q 373 743 373 761 q 356 726 368 726 l 356 705 l 366 712 q 373 705 373 711 l 373 682 q 363 671 373 677 l 349 675 q 339 668 339 671 q 302 682 313 671 q 295 661 302 669 l 298 654 q 366 665 323 661 l 373 654 l 373 651 q 366 624 366 627 l 373 621 l 420 621 l 461 617 l 461 621 q 478 597 478 616 q 465 553 465 565 q 485 590 473 553 q 481 617 481 609 l 488 621 l 522 621 q 668 692 631 621 l 705 702 l 739 699 q 756 705 750 705 q 824 685 785 692 q 827 671 827 679 q 780 644 825 644 q 770 637 780 637 q 739 661 765 637 l 739 658 q 770 627 745 644 q 732 556 759 556 q 715 519 725 556 q 668 485 705 505 q 624 444 633 444 q 593 424 602 444 l 580 420 q 573 427 580 427 l 570 427 q 539 353 553 353 q 526 356 526 353 l 492 353 l 424 353 q 417 359 417 353 q 427 387 427 376 l 427 390 q 420 397 427 397 q 383 353 420 361 l 373 353 l 373 329 q 329 305 373 320 q 298 319 311 305 l 285 319 q 278 302 285 311 q 329 285 278 292 q 370 298 348 285 l 373 292 l 373 142 q 366 136 373 136 l 363 136 q 298 166 326 166 q 264 156 296 166 q 156 183 172 168 l 156 220 q 159 234 156 228 l 156 241 l 159 261 q 156 271 156 268 l 149 268 l 153 254 q 149 193 149 199 l 153 180 l 153 166 q 166 153 166 166 q 200 159 200 156 q 254 146 246 151 l 261 146 q 305 159 293 153 q 356 129 316 159 q 373 109 373 129 l 373 98 q 370 75 373 79 q 373 44 373 56 l 373 10 q 363 0 373 5 l 309 3 q 288 0 306 3 q 285 3 285 0 l 244 0 l 170 0 l 149 3 q 132 0 144 0 l 95 0 l 71 7 q 7 0 61 7 l 0 10 l 0 24 q 3 41 0 35 l 0 61 l 0 92 q 20 115 0 106 q 0 122 0 115 l 0 153 q 3 180 0 176 q 0 217 0 203 l 0 281 q 58 319 7 319 q 88 309 76 309 q 102 315 102 311 l 136 312 l 170 312 q 180 302 174 312 l 173 292 l 176 292 l 197 312 l 200 312 q 258 315 218 312 q 268 305 258 311 l 271 305 l 271 322 q 268 326 271 326 q 271 329 268 329 q 258 366 265 366 l 254 366 l 254 363 l 261 353 l 261 339 q 210 326 261 334 q 197 329 203 326 q 159 326 174 326 l 146 326 q 109 332 142 326 l 98 332 l 88 326 l 85 326 q 61 397 61 350 q 64 424 64 421 q 24 509 24 488 q 47 529 33 529 q 34 546 36 546 q 47 573 39 561 l 47 576 q 44 590 47 584 q 47 604 47 596 q 37 614 37 604 q 47 621 47 614 l 47 627 l 41 627 l 41 641 l 51 641 q 44 648 51 648 l 37 644 l 20 648 l 3 644 l 0 651 l 0 888 q 3 926 0 903 l 0 932 l 3 946 q 0 1007 0 978 q 17 1014 0 1014 q 0 1038 0 1024 l 0 1092 q 7 1099 1 1099 q 34 1095 26 1095 l 34 1102 l 27 1102 q 0 1109 12 1102 q 14 1133 6 1133 m 248 1133 l 495 1133 l 515 1129 q 532 1133 521 1133 l 556 1133 q 559 1129 559 1133 l 566 1133 q 570 1129 570 1133 q 580 1133 576 1133 q 682 1116 672 1133 q 695 1119 684 1116 q 824 1065 824 1099 q 851 1027 842 1031 l 848 994 l 848 970 q 844 956 848 962 q 895 922 844 949 q 868 858 868 897 q 854 844 863 858 l 865 844 l 875 851 q 888 814 888 848 q 834 715 888 807 q 821 692 834 692 l 756 719 l 732 715 q 712 722 719 722 q 685 712 695 712 l 678 712 q 671 719 671 712 l 671 773 q 509 865 646 865 l 461 865 q 444 871 444 865 q 417 865 432 865 l 373 865 l 373 844 q 363 834 373 840 l 349 834 q 322 868 322 845 q 329 912 329 884 q 258 1010 322 952 q 231 1051 231 1036 q 264 1116 264 1090 l 258 1116 q 248 1095 258 1095 q 237 1126 237 1108 l 248 1133 m 454 1075 l 454 1068 q 461 1061 456 1061 l 465 1061 l 465 1068 q 458 1075 465 1075 l 454 1075 m 88 1061 l 88 1055 l 112 1055 l 119 1051 l 119 1058 l 102 1061 l 88 1061 m 854 1041 l 861 1041 q 882 1031 877 1031 l 882 1027 q 875 1021 882 1021 q 854 1041 865 1021 m 349 1034 l 349 1031 q 373 1021 358 1031 l 376 1021 q 353 1034 371 1034 l 349 1034 m 180 1048 l 180 1044 l 193 1044 l 193 1048 l 180 1048 m 407 1027 l 407 1021 l 417 1021 l 417 1027 l 407 1027 m 695 1017 l 709 1017 q 715 1024 715 1017 l 715 1027 l 705 1027 q 695 1017 701 1027 m 756 997 l 749 1000 q 699 980 699 985 l 699 977 l 810 1004 l 817 1014 l 814 1014 l 756 997 m 559 1010 l 559 1004 l 570 1004 l 570 1010 l 559 1010 m 417 1007 l 417 990 l 424 990 l 424 1007 l 417 1007 m 31 1024 l 27 1017 l 27 1014 l 34 1017 l 44 1017 q 61 1004 59 1004 l 64 1004 l 64 1010 q 31 1024 64 1021 m 895 1007 l 909 1007 q 1021 821 980 960 l 1021 814 l 1017 807 q 1027 766 1024 797 l 1021 763 l 1017 763 l 994 783 l 987 783 l 987 777 q 1027 736 1027 762 l 1027 712 q 1014 702 1027 702 l 1014 695 q 1027 688 1027 695 q 994 590 1017 590 l 980 583 q 949 590 964 590 q 926 576 944 576 l 919 576 l 875 610 l 868 607 l 865 607 q 844 617 847 607 q 858 627 844 626 l 858 631 l 851 641 l 851 644 q 909 770 856 695 q 912 780 912 777 l 936 780 l 960 777 l 960 783 l 956 783 q 916 793 916 783 l 912 810 l 922 831 l 916 831 q 905 827 909 827 q 899 861 902 833 l 919 892 l 919 905 q 868 943 868 929 q 865 953 868 953 q 895 1007 865 975 m 671 990 l 671 983 l 675 983 l 685 990 q 682 1000 682 997 q 671 990 677 1000 m 648 997 l 644 983 l 648 983 q 654 990 654 983 l 654 997 l 648 997 m 437 980 l 437 973 q 471 956 445 973 l 475 956 l 475 960 l 437 980 m 61 994 l 61 987 q 68 980 62 980 l 68 987 q 61 994 68 994 m 515 960 l 529 960 l 529 970 l 526 970 q 515 960 521 970 m 614 963 q 607 949 614 958 l 607 943 q 621 953 621 948 l 621 963 l 614 963 m 383 946 q 390 939 385 939 l 400 939 l 400 949 q 393 956 400 956 q 383 946 389 956 m 492 946 l 492 943 q 495 932 495 936 q 492 929 492 932 l 495 929 l 498 936 l 498 946 l 492 946 m 485 895 l 485 892 l 492 892 l 492 902 q 485 895 485 901 m 973 882 l 973 875 l 987 875 q 980 882 987 882 l 973 882 m 454 861 l 458 861 q 468 871 463 861 l 468 878 q 454 861 461 877 m 492 871 l 492 865 l 498 865 q 509 875 503 865 l 502 875 q 492 871 495 871 m 34 888 l 34 882 l 37 882 q 44 888 44 882 l 34 888 m 31 871 l 24 861 l 24 858 q 44 844 31 858 l 47 844 l 47 854 q 31 871 47 859 m 614 844 l 614 838 l 621 838 l 621 851 q 614 844 614 850 m 102 848 l 102 844 q 122 810 122 820 l 122 804 l 115 804 l 115 797 q 122 790 117 790 l 125 790 l 125 800 l 129 824 q 105 848 105 835 l 102 848 m 47 838 l 47 834 q 85 790 81 790 l 88 790 q 51 838 81 807 l 47 838 m 92 780 q 85 766 92 774 q 109 736 100 766 q 119 726 113 736 l 105 709 l 109 685 q 61 648 96 662 l 58 641 l 58 637 l 64 637 l 109 668 q 136 719 120 719 q 139 715 136 715 q 142 732 142 720 q 132 729 136 729 l 105 756 l 109 773 q 139 766 114 773 l 139 773 q 122 780 122 773 q 109 777 111 777 l 92 780 m 997 722 l 997 719 l 1007 719 l 1007 729 l 1004 729 q 997 722 997 728 m 156 732 q 149 715 156 726 l 156 712 l 166 712 l 170 729 l 170 732 l 156 732 m 271 715 q 278 682 278 694 l 285 682 l 285 685 q 278 715 285 690 l 271 715 m 41 695 l 41 682 l 47 682 q 61 705 47 694 l 61 709 l 54 709 q 41 695 49 709 m 1004 685 l 1004 682 q 1010 675 1005 675 l 1017 675 l 1017 682 l 1014 688 q 1004 685 1007 685 m 186 705 q 180 685 180 694 l 180 682 l 186 682 q 193 702 186 691 l 186 705 m 271 671 l 264 658 l 271 654 l 278 654 q 288 665 283 654 q 271 671 277 671 m 34 661 l 34 658 l 41 658 l 41 668 q 34 661 34 667 m 231 637 q 251 573 237 606 l 248 559 l 254 546 q 217 509 254 526 l 214 509 q 163 505 197 509 q 156 512 163 512 l 149 512 q 170 495 149 507 l 197 502 l 217 498 q 261 532 257 518 l 261 536 l 254 559 q 258 587 258 578 q 237 648 244 587 l 251 665 l 251 668 l 248 668 q 231 637 237 668 m 861 631 l 861 627 q 871 624 865 627 l 875 631 l 875 637 l 868 637 q 861 631 861 636 m 281 641 l 281 634 l 288 634 q 298 644 293 634 l 298 648 q 281 641 288 641 m 838 610 q 899 573 845 597 l 899 570 l 905 573 l 912 573 l 912 570 l 909 563 q 912 553 912 556 q 949 566 936 553 l 973 563 l 997 566 q 888 420 977 489 q 766 363 813 372 q 726 397 766 368 q 682 431 721 412 l 682 437 q 743 485 694 452 q 780 532 753 532 q 817 610 791 610 l 838 610 m 7 624 l 10 624 l 14 610 l 31 610 q 37 607 31 607 q 7 519 26 519 l 3 519 l 0 526 q 3 553 0 549 q 0 590 0 576 l 0 617 q 7 624 1 624 m 383 492 l 383 495 q 359 481 359 489 l 359 475 q 370 458 370 464 l 376 458 l 373 475 q 414 492 373 481 q 417 481 417 485 l 420 481 l 431 488 q 471 468 454 468 l 475 475 q 434 498 448 475 l 441 512 l 434 512 q 383 492 385 492 m 861 526 l 861 512 l 865 512 q 871 519 871 512 q 865 526 871 526 l 861 526 m 51 519 l 64 519 q 58 526 64 526 q 51 519 51 524 m 81 519 l 81 515 q 95 509 87 515 l 109 509 l 109 512 q 95 519 103 512 l 81 519 m 322 509 l 349 509 q 342 515 349 515 l 329 515 q 322 509 322 514 m 122 512 l 122 509 q 129 502 123 502 l 139 502 q 129 512 139 507 l 122 512 m 261 502 l 261 498 q 271 485 271 498 l 275 485 q 288 492 283 492 l 288 498 q 268 509 277 498 q 261 502 261 507 m 481 471 l 492 471 q 498 478 498 471 l 488 478 q 481 471 481 477 m 505 478 l 505 475 q 583 427 530 475 l 583 444 q 532 478 569 444 l 505 478 m 7 495 l 10 495 q 20 461 17 495 q 51 404 31 452 q 47 393 51 400 l 51 376 l 47 353 q 54 336 54 342 q 3 309 30 309 l 0 315 l 0 488 q 7 495 1 495 m 271 475 l 271 454 l 278 454 l 278 468 q 271 475 278 475 m 275 448 l 271 441 l 278 437 l 281 444 l 275 448 m 197 437 l 197 431 l 210 431 l 210 441 l 207 441 q 197 437 200 437 m 665 427 l 668 427 q 739 363 674 427 q 593 336 739 342 l 583 336 l 576 332 l 570 342 l 570 346 q 631 414 570 382 q 644 410 637 410 l 665 427 m 281 417 l 281 404 q 288 410 288 404 l 288 417 l 281 417 m 407 387 q 410 373 410 380 l 414 373 l 414 387 l 407 387 m 261 390 q 264 366 264 376 q 271 373 271 366 q 268 376 271 376 q 275 400 275 390 l 261 390 m 88 132 l 68 136 q 27 109 35 125 l 27 105 q 78 129 58 124 q 85 122 79 122 q 146 153 96 136 l 146 156 l 136 156 q 88 132 113 151 m 61 75 l 61 54 q 71 44 61 50 q 85 71 85 58 l 81 85 q 88 92 88 85 l 88 95 l 85 95 q 64 75 66 95 l 61 75 m 186 37 l 186 34 l 197 34 l 197 44 l 193 44 q 186 37 186 43 m 105 17 l 105 14 l 112 14 q 119 20 119 14 l 119 24 l 112 24 q 105 17 105 22 z "},"Q":{"ha":1221,"x_min":-7,"x_max":1207,"o":"m 580 1153 q 634 1092 587 1153 q 678 1061 675 1072 l 678 1038 q 668 987 678 1019 q 675 939 675 951 l 665 902 q 678 871 678 878 l 671 868 q 624 875 646 875 l 600 875 q 492 838 544 875 l 485 838 q 431 868 467 857 q 420 878 431 871 q 424 912 420 882 l 420 912 q 414 905 414 911 q 417 892 417 899 q 373 895 415 892 q 332 882 354 882 l 332 871 l 356 871 q 387 882 369 882 l 404 882 q 441 848 433 848 l 454 851 q 478 824 478 844 q 393 549 393 741 l 397 509 l 390 505 q 332 556 332 522 l 319 566 q 295 556 307 566 q 214 587 214 562 q 210 600 214 600 l 214 624 l 214 658 q 237 668 237 658 q 231 675 231 668 q 220 665 220 675 q 173 695 184 665 l 183 729 l 183 743 q 176 766 183 766 q 183 810 183 802 q 173 851 173 828 l 176 851 q 159 875 170 872 l 156 875 l 156 848 q 166 807 156 838 l 159 804 l 153 804 q 139 810 144 810 q 92 807 134 810 q 75 817 75 811 l 75 824 q 129 919 83 863 q 197 1000 129 937 q 210 983 203 999 q 193 939 210 939 q 139 902 173 939 q 146 882 146 888 l 153 882 q 207 926 172 926 q 241 922 237 922 q 305 939 277 930 q 326 912 313 939 l 332 912 q 326 939 332 916 q 336 973 336 957 q 322 1000 322 978 l 315 1000 q 312 994 315 994 q 326 966 316 977 l 322 949 l 312 949 q 275 943 288 949 q 261 946 269 946 q 234 939 256 946 q 214 973 222 939 l 217 980 l 217 983 q 210 1007 217 1007 q 285 1068 216 1025 l 292 1068 l 292 1065 l 271 1034 q 295 997 295 1008 l 302 997 l 285 1031 q 359 1099 298 1099 q 383 1112 361 1112 l 397 1112 q 529 1146 397 1130 q 397 1099 529 1128 q 383 1102 391 1102 l 380 1095 l 380 1092 l 383 1092 q 566 1146 439 1092 q 580 1153 566 1149 m 624 1153 l 627 1153 q 777 1129 718 1153 l 783 1133 q 909 1082 885 1105 q 848 1034 891 1050 q 824 990 848 995 q 749 929 767 929 q 695 912 709 912 q 685 922 695 917 q 692 963 692 946 q 685 990 692 966 q 746 1048 685 1048 q 770 1058 758 1048 l 780 1051 q 821 1058 810 1058 l 821 1061 q 790 1078 821 1067 q 695 1048 790 1065 q 665 1102 687 1090 l 665 1109 l 654 1109 l 648 1105 q 624 1153 624 1128 m 932 1072 q 1041 983 976 1057 l 1038 966 q 1088 875 1043 966 q 1099 865 1093 875 q 1085 827 1085 844 q 1143 787 1118 818 l 1146 787 l 1146 790 q 1139 814 1139 812 l 1146 817 l 1153 817 q 1163 807 1158 817 l 1163 800 q 1149 777 1163 791 q 1031 705 1135 758 q 1014 685 1019 699 q 1017 682 1014 682 l 1014 658 l 1014 644 q 949 621 981 627 q 868 580 949 601 q 834 600 834 595 q 705 858 834 769 q 699 885 699 870 q 790 926 785 918 q 875 1021 850 980 q 932 1072 886 1021 m 1058 970 q 1149 824 1147 868 l 1149 821 l 1126 821 l 1099 834 q 1112 868 1112 861 l 1112 875 q 1058 970 1097 875 m 295 848 l 302 844 l 305 844 q 315 854 310 844 l 309 858 q 295 848 295 853 m 1027 793 q 1034 787 1029 787 l 1038 787 q 1051 800 1043 787 l 1051 804 l 1048 804 q 1027 793 1027 800 m 41 804 q 78 793 52 797 q 105 797 97 797 q 139 749 135 797 q 136 739 136 743 q 139 729 136 736 q 136 699 136 711 l 136 692 q 166 654 136 676 q 170 617 166 647 q 166 590 166 599 q 170 566 170 588 q 139 549 157 562 l 136 549 q 132 563 136 563 q 115 549 117 556 q 122 539 119 539 q 112 519 112 524 l 105 519 q 98 526 98 519 l 102 549 l 98 549 q 88 526 92 549 l 92 519 l 88 502 l 88 498 l 92 498 l 92 505 l 115 505 q 180 549 115 543 q 244 539 210 539 q 258 543 246 539 q 309 471 309 498 q 302 465 302 470 q 339 414 302 443 q 346 380 346 398 l 342 366 l 349 366 q 363 397 355 397 l 376 397 l 376 390 q 305 285 343 306 q 258 214 261 234 q 241 173 254 173 l 237 173 q 217 180 228 173 q 142 149 167 165 q 27 342 89 170 l 27 346 q 81 427 37 415 q 115 441 115 435 l 115 444 l 105 444 q 88 434 88 437 q 78 437 81 437 l 81 461 q 17 380 32 412 q -3 536 -3 465 l -3 549 q -7 566 -3 561 q 37 804 -7 677 l 41 804 m 1166 749 l 1170 749 q 1204 614 1180 749 l 1204 610 q 1190 607 1198 607 l 1190 600 q 1207 593 1207 600 q 1204 549 1207 572 l 1207 532 l 1204 526 l 1207 505 q 1204 502 1207 502 l 1207 495 q 1177 373 1197 373 l 1170 370 l 1156 370 l 1156 387 l 1133 383 q 1126 404 1126 394 q 1133 410 1133 404 l 1133 417 l 1122 417 q 1116 400 1122 400 l 1119 359 l 1122 359 q 1129 373 1129 359 l 1136 373 l 1136 366 l 1133 359 q 1149 356 1138 356 q 1116 312 1149 338 q 1126 302 1120 312 q 1170 336 1145 302 q 1177 329 1177 334 q 1139 248 1154 248 l 1139 237 l 1136 220 l 1126 220 q 1122 227 1126 227 q 1129 251 1129 241 l 1122 254 q 1129 275 1129 265 l 1129 281 l 1122 281 q 1112 271 1118 281 l 1119 261 l 1119 254 l 1109 254 l 1109 248 l 1116 237 q 1109 207 1109 216 q 1119 197 1114 207 l 1119 193 l 1112 193 l 1105 197 q 1088 183 1099 183 l 1088 176 l 1102 176 q 1078 136 1102 161 q 1116 95 1079 123 q 1146 58 1116 90 l 1143 51 q 1200 3 1162 51 l 1200 0 q 1048 -156 1057 -156 q 970 -81 1039 -156 l 970 -78 q 977 -71 971 -71 q 936 -7 947 -37 q 922 17 926 -7 l 919 17 l 919 7 q 953 -64 953 -56 q 888 -10 906 -10 q 821 -31 848 -31 q 865 61 821 -16 l 861 61 q 800 -37 828 36 q 709 -58 750 -58 q 688 -51 699 -58 q 668 -64 685 -64 l 566 -64 l 549 -61 l 549 -58 l 553 -51 l 536 -47 l 532 -47 l 532 -51 l 536 -58 q 526 -61 529 -61 q 505 -54 519 -61 q 502 -58 502 -54 q 468 -41 468 -52 l 444 -44 l 434 -44 l 434 -37 q 444 -31 444 -37 l 444 -27 l 441 -27 q 417 -37 429 -37 l 410 -37 l 380 -17 l 373 -14 l 363 -20 q 356 -10 356 -20 l 339 -10 q 315 64 322 -5 q 285 132 285 104 q 302 149 290 132 q 295 156 295 149 q 349 244 314 214 l 383 278 q 414 359 397 298 l 420 363 q 617 210 471 210 q 665 224 665 214 l 665 227 l 546 349 q 559 363 546 355 q 621 295 621 323 q 631 288 631 292 l 648 292 l 654 292 q 702 234 702 268 l 702 227 l 705 227 l 719 237 l 722 237 l 722 217 q 729 210 724 210 l 732 210 l 732 227 q 824 271 745 242 q 851 292 824 275 l 865 292 l 865 271 q 861 241 865 259 q 888 200 873 207 l 888 207 q 871 248 871 231 l 871 251 q 875 285 871 267 q 865 332 871 323 q 885 349 865 338 q 865 359 865 349 l 865 380 q 895 410 865 394 l 902 407 l 905 407 q 899 414 905 414 q 871 400 886 414 q 861 427 861 402 q 868 434 868 427 l 868 437 l 861 437 l 854 434 q 834 451 849 451 l 834 458 l 865 526 l 943 559 q 1021 593 961 580 l 1038 593 q 1051 580 1043 593 q 1122 587 1093 587 q 1143 580 1133 580 l 1143 587 q 1122 607 1122 587 q 1136 621 1122 612 l 1133 627 l 1133 634 q 1160 685 1133 654 l 1156 685 q 1146 682 1149 682 q 1136 709 1136 701 q 1166 749 1166 720 m 1017 739 l 1017 729 l 1024 729 l 1024 746 q 1017 739 1017 745 m 1133 736 l 1129 722 l 1136 709 q 1109 637 1122 659 l 1112 621 q 1092 624 1109 621 l 1075 621 l 1055 624 l 1055 621 q 1017 641 1017 638 q 1055 699 1017 699 q 1133 736 1114 736 m 1055 570 l 1055 559 l 1061 559 l 1072 566 l 1088 566 l 1088 570 q 1075 580 1088 575 q 1055 570 1055 576 m 838 576 l 851 576 l 851 563 l 838 563 l 838 576 m 980 566 l 980 563 q 987 570 987 563 l 987 573 q 980 566 980 572 m 298 549 l 319 549 q 332 536 324 549 q 326 529 332 529 l 319 529 q 298 546 298 542 l 298 549 m 949 536 l 949 532 l 956 532 q 963 539 963 532 l 963 546 l 960 546 q 949 536 955 546 m 1007 543 l 1007 529 l 1010 529 q 1021 539 1015 529 l 1021 546 l 1017 546 q 1007 543 1010 543 m 702 539 q 804 434 756 490 l 814 427 l 824 427 q 841 444 824 439 l 841 448 l 844 448 q 851 441 851 446 l 851 404 q 854 390 851 396 q 851 376 851 384 l 851 370 l 861 332 q 804 298 811 313 q 726 278 739 278 q 705 309 720 278 q 648 346 656 346 q 637 332 643 332 q 624 342 624 338 q 631 349 631 342 q 580 407 620 367 l 580 414 q 702 539 682 523 m 909 512 l 909 509 l 912 509 q 926 519 926 514 l 926 526 l 922 526 q 909 512 917 526 m 336 519 l 342 519 q 393 498 353 507 q 407 427 400 486 q 387 420 396 420 l 346 465 q 336 519 346 479 m 112 495 q 105 475 105 477 l 105 471 l 109 471 q 115 492 109 477 l 115 495 l 112 495 m 142 485 q 136 471 142 479 l 136 461 l 139 461 q 153 478 144 461 l 153 485 l 142 485 m 963 444 q 953 417 958 425 l 960 417 l 977 427 q 963 444 972 443 m 1177 437 l 1187 437 l 1187 444 l 1183 444 q 1177 437 1177 443 m 922 414 l 922 407 l 926 407 q 932 414 932 407 l 922 414 m 943 380 l 946 373 l 946 363 l 936 363 q 932 373 936 373 q 912 366 922 366 l 912 356 l 919 356 q 922 363 919 363 l 939 353 l 946 353 l 977 383 l 987 383 l 987 373 l 997 373 l 997 376 l 990 387 q 997 393 997 387 q 990 400 997 400 q 943 380 945 380 m 709 390 l 709 380 l 719 380 l 719 390 l 709 390 m 231 400 l 231 397 q 241 393 234 397 l 244 400 l 244 407 l 237 407 q 231 400 231 406 m 1082 366 q 1088 359 1083 359 q 1095 366 1095 359 l 1095 373 l 1088 373 q 1082 366 1082 372 m 1004 366 l 1004 363 q 1014 359 1007 363 l 1017 366 l 1017 370 l 1014 370 q 1004 366 1007 366 m 1153 366 l 1166 366 l 1166 356 l 1160 356 q 1153 363 1153 356 l 1153 366 m 95 370 q 105 359 95 365 l 109 359 q 115 366 115 359 l 98 370 l 95 370 m 1088 336 l 1095 332 l 1099 339 l 1099 342 l 1095 342 q 1088 336 1088 341 m 1041 332 l 1055 332 l 1055 339 l 1048 339 q 1041 332 1041 338 m 678 214 l 685 210 l 688 210 q 702 231 693 210 l 695 231 q 678 214 690 231 m 512 17 l 512 10 l 515 10 q 573 54 530 33 q 604 102 573 80 q 651 197 617 197 q 668 207 651 204 l 668 210 l 651 210 q 597 112 597 186 q 553 51 578 97 q 512 17 528 51 m 732 193 l 739 190 l 743 197 l 743 207 q 732 193 738 207 m 692 200 l 692 193 l 695 176 q 685 153 687 176 q 705 119 702 119 l 705 146 l 699 156 l 699 159 l 702 193 l 692 200 m 912 190 l 912 186 l 916 166 q 929 173 924 173 l 929 183 q 912 190 923 183 m 1065 183 l 1061 176 q 1078 163 1065 163 l 1082 170 l 1082 180 l 1065 183 m 885 180 l 885 173 q 888 163 888 166 l 892 163 l 892 173 q 885 180 892 180 m 892 159 l 888 142 l 888 132 l 895 132 l 895 159 l 892 159 m 712 146 l 712 139 q 800 95 764 106 l 804 95 l 804 98 q 770 122 776 122 q 712 146 720 146 m 1048 146 q 1034 132 1048 140 l 1014 132 l 1004 139 l 1000 132 l 1000 112 q 953 88 973 88 q 804 115 905 105 l 804 112 q 814 98 809 98 l 848 98 q 861 92 856 92 l 858 75 l 865 71 q 888 92 873 92 l 909 88 l 905 64 l 912 61 l 912 68 q 909 78 909 75 l 916 75 l 960 75 q 994 88 970 75 l 1010 88 q 1044 119 1010 100 l 1058 119 q 1068 109 1063 119 q 1082 119 1082 114 l 1082 122 l 1072 122 q 1068 119 1068 122 q 1058 122 1061 122 l 1058 142 q 1048 146 1055 142 m 960 136 l 960 129 l 977 132 l 977 142 l 966 142 q 960 136 960 141 m 241 159 q 275 109 269 159 q 298 64 298 81 l 298 61 q 285 44 290 44 q 176 132 241 64 l 176 136 q 241 159 198 147 m 346 146 l 353 142 q 363 153 357 142 q 359 156 359 153 q 346 146 346 151 m 912 44 l 912 37 q 916 27 916 31 l 919 27 l 919 37 q 912 44 919 44 m 1075 37 l 1075 27 l 1082 27 q 1078 37 1078 34 l 1075 37 m 1031 27 l 1034 20 l 1034 0 q 1004 -24 1014 -24 l 1004 -31 q 1007 -34 1004 -34 q 987 -61 1007 -38 l 994 -61 q 1051 34 1051 -7 l 1048 34 l 1031 27 m 465 34 l 414 41 q 393 27 393 33 l 393 24 q 420 34 408 24 q 441 27 431 27 q 444 31 444 27 l 451 27 l 461 27 q 485 37 473 27 l 505 37 l 505 44 q 465 34 465 43 m 1149 24 q 1156 17 1151 17 l 1163 17 l 1163 24 l 1149 24 m 305 37 l 315 37 l 315 31 l 312 31 q 305 37 305 31 m 1102 10 l 1102 3 q 1112 0 1105 3 l 1116 7 l 1116 10 l 1102 10 m 943 0 l 953 0 l 953 7 l 949 7 q 943 0 943 5 m 1092 -10 l 1092 -14 q 1105 -34 1101 -34 l 1112 -34 l 1109 -10 l 1109 -3 l 1099 -3 q 1092 -10 1092 -5 m 475 -17 q 478 -27 478 -24 q 522 -17 488 -21 l 522 -10 l 515 -10 l 495 -7 l 475 -17 m 665 -37 l 678 -37 l 678 -31 l 671 -31 q 665 -37 665 -32 m 1021 -102 l 1017 -109 l 1024 -112 l 1027 -105 l 1021 -102 z "},"R":{"ha":1153,"x_min":27,"x_max":1146,"o":"m 536 1153 l 543 1153 q 570 1146 557 1153 q 590 1153 581 1153 l 705 1153 q 732 1143 730 1153 l 722 1129 l 726 1129 q 760 1149 752 1149 l 763 1143 l 763 1139 l 756 1139 l 756 1129 q 777 1122 769 1129 l 777 1126 l 766 1139 l 766 1146 l 770 1146 q 871 1129 818 1146 q 868 1119 868 1122 l 875 1119 l 885 1126 l 895 1126 q 902 1119 902 1124 q 854 1092 888 1107 l 848 1095 q 827 1092 843 1092 l 827 1082 q 926 1116 853 1082 q 1017 1068 952 1116 q 1014 1065 1014 1068 q 1058 1038 1042 1065 l 1058 1031 q 1048 1024 1058 1024 l 1051 1007 l 1058 1007 q 1055 1010 1058 1010 q 1065 1027 1059 1027 q 1099 973 1099 994 q 1095 963 1095 966 q 1119 902 1119 953 l 1119 899 q 1099 895 1116 899 l 1099 885 l 1119 885 q 1126 878 1126 884 l 1126 824 q 1116 800 1126 812 q 1126 793 1126 800 q 1034 604 1126 694 l 1027 600 q 1021 614 1021 600 l 1014 614 l 1014 610 l 1017 597 q 949 553 1010 583 q 956 536 956 545 l 980 539 q 1014 519 1014 524 l 1014 515 q 966 468 992 481 q 932 478 949 478 l 922 478 q 858 417 901 444 l 817 417 l 807 410 q 753 529 778 410 q 739 597 743 555 q 685 627 718 597 l 678 627 q 648 617 648 623 q 627 658 627 617 q 661 668 642 668 l 661 665 q 749 692 699 671 l 749 688 q 743 665 749 678 l 749 665 l 783 756 l 780 756 l 783 763 l 783 770 q 777 810 783 787 q 800 824 800 820 l 800 834 l 790 834 q 783 824 783 834 l 763 841 q 800 888 773 867 l 800 892 q 763 854 772 892 q 753 851 756 851 q 719 875 719 871 l 719 878 l 729 878 l 729 882 q 722 888 729 888 q 712 875 712 888 l 692 885 l 688 885 q 685 882 685 885 l 678 885 l 631 885 q 624 892 624 885 q 634 905 629 892 q 624 916 629 905 l 624 922 l 627 939 q 610 949 610 942 l 610 956 q 634 963 618 956 l 634 966 l 617 966 l 600 963 l 600 966 q 604 970 600 970 q 566 1017 593 989 l 566 1021 q 590 1055 566 1024 l 583 1055 q 556 1051 559 1051 q 532 1143 543 1061 q 529 1146 529 1143 q 536 1153 530 1153 m 834 1109 l 834 1105 q 848 1119 840 1105 l 844 1119 q 834 1109 840 1119 m 790 1099 q 807 1075 807 1081 l 810 1075 q 817 1082 817 1075 l 817 1085 q 790 1099 817 1094 m 397 1075 l 400 1075 q 417 1088 417 1084 q 410 1095 417 1095 q 397 1075 397 1088 m 749 1088 l 749 1085 l 753 1085 q 760 1092 760 1085 l 760 1095 l 756 1095 q 749 1088 749 1094 m 590 1061 l 590 1058 l 597 1058 q 607 1068 602 1058 l 607 1072 l 600 1072 q 590 1061 595 1072 m 641 1061 l 641 1058 q 648 1051 642 1051 l 654 1061 q 648 1068 654 1068 q 641 1061 641 1067 m 675 1065 l 675 1058 l 688 1058 q 682 1065 688 1065 l 675 1065 m 790 1051 q 810 953 804 1008 l 817 953 l 814 960 l 814 966 q 824 990 814 978 q 814 994 817 994 q 817 1014 814 996 q 814 1024 814 1021 q 827 1038 819 1024 l 827 1044 l 804 1041 q 797 1051 804 1051 l 790 1051 m 617 1041 l 617 1038 l 621 1038 q 634 1048 634 1043 l 624 1048 q 617 1041 617 1046 m 702 1038 l 699 1031 l 705 1027 l 722 1027 l 722 1038 l 702 1038 m 170 1000 l 170 994 q 203 1010 190 1007 l 203 1007 q 231 1024 231 1021 l 220 1024 q 170 1000 170 1004 m 780 1017 q 777 1007 780 1014 l 783 1004 l 790 1014 l 783 1017 l 780 1017 m 417 1010 l 410 1000 l 410 994 l 414 994 q 424 1004 418 994 q 417 1010 424 1010 m 109 966 l 109 960 l 129 960 q 136 966 136 960 l 136 970 q 122 977 122 970 q 109 966 109 972 m 709 980 l 709 973 l 719 973 l 719 980 l 709 980 m 461 977 l 458 970 l 458 966 q 465 960 459 960 l 468 966 l 468 970 q 461 977 468 977 m 563 966 q 553 953 563 953 q 570 912 553 943 l 573 912 l 573 922 l 570 953 q 573 963 573 960 l 566 966 l 563 966 m 919 966 l 919 960 l 929 960 q 922 966 929 966 l 919 966 m 349 960 l 349 956 q 356 949 351 949 l 359 956 l 353 960 l 349 960 m 1024 929 l 1024 919 l 1027 919 q 1061 943 1027 933 l 1061 949 l 1058 949 q 1024 929 1024 932 m 702 936 l 726 932 l 732 932 l 732 946 l 722 946 q 702 936 702 944 m 821 946 l 821 943 q 827 936 822 936 l 834 936 l 834 939 q 827 946 834 946 l 821 946 m 651 929 q 637 912 637 914 l 637 902 l 651 902 q 671 919 671 914 q 651 929 668 929 m 800 905 l 800 895 l 804 895 q 844 922 816 895 l 844 929 q 800 905 836 929 m 543 912 l 543 909 l 549 909 l 553 916 q 543 912 546 912 m 1021 916 q 1017 905 1021 912 l 1024 902 l 1024 916 l 1021 916 m 336 902 l 336 888 q 353 871 336 884 l 353 878 q 342 909 342 891 q 336 902 336 907 m 1014 865 l 1021 861 l 1024 868 l 1024 892 q 1014 865 1017 892 m 264 885 l 264 882 l 288 878 l 288 885 l 264 885 m 109 827 l 109 824 q 136 827 127 827 q 146 824 142 824 l 146 831 l 122 834 l 115 834 q 109 827 109 833 m 404 841 l 407 841 q 414 848 414 841 l 410 848 q 404 841 404 846 m 176 841 l 176 838 l 207 827 l 237 834 l 237 838 l 234 838 q 207 834 231 838 q 180 841 197 834 l 176 841 m 359 841 q 353 810 359 817 l 353 807 l 356 807 q 370 831 370 812 q 363 841 363 831 l 359 841 m 885 827 l 885 824 l 892 824 l 892 834 q 885 827 885 833 m 821 821 l 824 821 q 831 827 831 821 l 827 827 q 821 821 821 826 m 848 807 l 854 804 l 861 804 q 875 810 861 810 l 875 817 l 868 817 q 848 807 848 815 m 821 807 l 821 800 q 831 790 821 795 l 834 790 l 834 797 q 824 807 834 802 l 821 807 m 305 804 l 305 800 q 309 790 309 793 l 312 790 q 332 800 323 800 l 332 804 l 305 804 m 838 766 l 838 763 l 851 766 q 882 753 876 753 l 882 756 q 858 777 882 760 l 848 777 q 838 766 843 777 m 892 753 l 912 753 l 912 756 q 905 763 912 763 l 902 763 q 892 753 897 763 m 943 756 l 943 753 l 946 746 q 956 749 953 749 l 956 756 l 943 756 m 1065 699 l 1065 695 l 1072 695 q 1078 702 1078 695 l 1078 705 l 1072 705 q 1065 699 1065 704 m 834 692 l 834 688 l 844 688 l 844 699 l 841 699 q 834 692 834 697 m 1021 688 q 1010 671 1021 682 l 1010 654 l 1007 654 l 977 658 l 977 651 q 1010 627 1010 642 l 1031 668 q 1034 671 1034 668 q 1031 688 1031 677 l 1021 688 m 1041 682 l 1041 678 q 1051 688 1046 678 l 1048 688 q 1041 682 1041 687 m 888 675 l 888 668 l 895 668 q 902 675 902 668 l 902 682 l 895 682 q 888 675 888 680 m 929 661 q 943 648 929 656 l 956 648 l 956 661 q 946 671 956 666 l 939 671 q 929 661 935 671 m 878 621 q 871 607 878 615 l 871 604 l 888 607 l 888 621 l 878 621 m 654 556 l 658 556 l 675 559 q 668 566 675 566 l 665 566 q 654 556 660 566 m 383 465 l 383 461 q 393 451 383 456 l 397 451 l 397 465 l 383 465 m 217 424 l 217 417 l 227 417 q 220 424 227 424 l 217 424 m 281 424 l 281 420 q 309 407 290 420 l 326 407 q 285 424 326 411 l 281 424 m 92 400 l 88 393 q 105 390 100 393 l 105 397 l 92 400 m 339 417 l 339 410 l 349 410 l 349 417 l 339 417 m 1044 407 l 1044 400 l 1048 400 q 1055 407 1055 400 l 1044 407 m 349 390 l 349 376 l 356 376 l 356 383 q 349 390 356 390 m 366 370 q 393 353 366 364 l 393 359 l 366 370 m 315 336 q 322 329 317 329 l 326 329 q 332 336 332 329 q 326 342 332 342 l 322 342 q 315 336 315 341 m 420 339 l 420 319 l 431 319 l 431 332 q 424 339 431 339 l 420 339 m 943 319 l 943 309 l 946 309 q 949 319 946 312 l 943 319 m 932 298 l 932 285 l 943 285 l 943 305 l 939 305 q 932 298 932 304 m 417 288 l 417 281 q 424 288 424 281 l 424 295 q 417 288 417 294 m 902 271 l 902 264 l 916 264 q 909 271 916 271 l 902 271 m 373 244 l 373 234 l 376 234 q 380 244 376 237 l 373 244 m 404 241 l 404 234 l 410 234 q 417 241 417 234 l 417 244 l 414 244 q 404 241 407 241 m 373 224 q 370 217 373 217 l 373 200 l 373 190 l 366 190 l 366 180 q 383 190 375 190 l 383 207 l 380 224 l 373 224 m 248 214 l 248 200 l 254 200 q 261 207 261 200 q 254 214 261 214 l 248 214 m 865 207 l 871 203 l 875 210 l 875 214 l 871 214 q 865 207 865 212 m 838 210 l 841 203 l 841 200 l 838 200 l 827 207 l 821 207 l 821 200 l 834 200 q 831 197 834 197 q 834 180 834 191 l 841 180 q 854 200 841 200 l 854 210 l 838 210 m 848 173 l 848 163 q 888 115 869 121 l 888 119 q 851 173 858 173 l 848 173 m 207 166 q 159 109 207 161 l 159 105 l 163 105 q 190 115 180 115 q 200 98 196 115 l 197 81 l 197 78 l 200 78 q 207 105 207 100 q 200 112 200 105 l 200 119 q 214 163 200 127 l 207 166 m 298 156 l 309 156 l 309 163 l 305 163 q 298 156 298 161 m 329 146 l 329 142 q 359 156 355 156 l 359 159 q 329 146 329 155 m 292 132 l 292 125 l 295 125 q 309 136 309 131 l 309 139 l 298 139 q 292 132 292 138 m 793 139 l 793 132 l 804 132 l 804 139 l 793 139 m 258 129 l 258 119 q 271 129 271 124 q 268 132 268 129 q 258 129 261 129 m 275 125 q 281 119 276 119 l 285 119 l 285 125 l 275 125 m 787 102 l 787 98 q 821 71 808 98 l 824 71 l 821 47 l 827 47 q 838 64 827 54 q 821 85 827 64 l 817 85 l 817 92 q 831 98 817 98 l 831 102 q 824 109 831 109 l 817 109 l 787 102 m 868 98 l 875 98 q 882 105 882 98 l 875 105 q 868 98 868 104 m 92 78 l 92 75 q 95 58 92 63 l 92 37 l 92 34 q 102 51 99 34 l 98 64 q 115 85 103 79 l 119 85 q 122 81 122 85 l 139 92 l 146 92 l 146 88 q 112 64 125 64 l 112 58 q 159 102 159 70 l 146 102 q 92 78 92 85 m 841 102 l 841 95 l 854 95 q 861 102 861 95 l 841 102 m 956 95 l 953 88 q 1085 54 1062 54 q 1007 81 1085 62 q 956 95 1007 90 m 380 75 q 387 68 387 73 q 410 78 401 78 l 410 81 l 387 81 q 380 75 380 80 m 336 68 l 336 64 q 356 54 339 54 l 356 61 q 336 68 347 61 m 153 64 l 153 51 l 159 51 q 156 64 156 57 l 153 64 m 363 41 l 366 41 l 363 34 l 363 20 l 366 20 q 373 47 373 46 l 370 47 q 363 41 363 46 m 814 37 q 827 24 814 32 l 831 24 l 831 34 q 821 44 831 39 q 814 37 814 43 m 888 24 l 902 24 l 902 31 l 895 31 q 888 24 888 29 m 69 556 q 58 553 62 553 q 27 593 27 570 l 27 804 q 51 821 27 812 l 51 827 l 27 824 l 27 868 q 64 929 27 882 l 64 932 l 58 932 q 41 909 45 909 l 37 909 q 27 926 37 915 l 27 987 q 37 997 27 991 q 27 1024 27 1014 l 27 1122 q 37 1133 27 1127 l 102 1133 q 142 1129 125 1133 q 183 1133 160 1133 l 186 1133 q 237 1129 222 1133 q 295 1133 263 1133 l 363 1133 q 400 1129 377 1133 q 427 1133 404 1133 q 431 1129 431 1133 l 437 1133 q 475 1082 462 1133 l 471 1075 l 471 1068 q 495 997 471 1055 l 495 973 q 539 916 526 973 q 553 878 548 916 q 532 865 549 865 l 526 865 q 515 882 516 865 l 512 882 q 475 865 512 865 q 471 878 471 871 q 400 865 460 869 l 400 844 q 363 831 400 838 l 363 827 l 366 827 q 393 831 385 831 l 400 821 l 400 644 l 539 644 q 553 600 546 644 q 502 570 539 600 q 441 549 458 563 l 434 553 l 424 553 q 392 545 417 553 l 417 529 l 420 529 q 468 546 423 529 q 488 539 479 539 l 495 539 q 563 563 507 550 q 651 590 563 583 q 699 559 673 559 q 715 495 701 527 l 712 495 q 722 468 722 478 l 719 444 q 736 404 730 444 q 763 376 741 404 l 756 349 q 760 322 760 325 l 756 298 q 804 271 800 279 l 804 268 q 783 237 783 251 l 783 234 q 797 224 783 229 q 810 227 803 227 l 814 227 l 814 220 l 824 220 l 824 234 l 814 234 l 814 241 l 831 264 q 783 298 831 284 q 777 336 777 317 q 807 376 803 376 l 831 376 q 916 437 875 376 l 960 427 q 980 444 980 434 l 977 461 l 983 461 l 983 451 l 990 451 q 1014 488 1002 488 q 1102 326 1102 427 q 1078 295 1102 321 q 1109 261 1109 278 l 1109 115 q 1122 37 1109 77 l 1143 37 q 1146 27 1143 34 q 1143 17 1143 20 q 1146 7 1146 10 l 1136 0 q 1126 7 1126 3 q 1099 0 1114 0 l 1055 0 q 1048 10 1048 0 l 1041 10 q 1024 0 1041 0 q 977 3 1006 0 q 926 0 956 0 q 919 7 926 7 l 916 7 l 905 0 l 902 0 q 865 3 888 0 q 854 0 858 0 l 851 7 q 912 85 875 7 q 916 88 916 85 l 922 85 l 939 85 q 946 92 946 85 q 932 98 932 92 q 916 92 922 92 l 912 98 l 912 115 l 905 115 q 892 102 900 115 l 902 88 l 902 81 q 871 34 886 67 q 854 27 854 34 q 865 24 861 24 l 865 20 q 851 17 857 20 q 838 20 845 20 q 824 0 838 7 l 787 0 q 760 61 760 0 q 756 88 756 61 q 773 92 762 92 l 773 102 q 753 112 753 102 q 749 193 753 118 q 753 207 753 205 q 749 224 749 212 q 753 227 749 227 q 749 237 749 234 q 705 366 749 327 l 705 370 q 726 376 726 370 l 726 383 l 722 383 l 712 376 l 695 376 q 627 397 636 388 l 587 393 l 532 393 q 529 397 529 393 l 522 393 l 492 393 q 485 400 485 393 l 441 393 l 441 376 q 431 329 441 355 q 441 319 435 329 l 441 258 q 437 254 441 254 l 441 248 l 441 92 q 427 81 441 81 l 427 75 q 441 68 433 75 q 437 58 441 64 q 441 20 441 35 l 441 10 q 431 0 441 5 l 390 0 q 366 3 370 0 q 336 0 348 0 l 285 0 q 281 3 281 0 l 275 0 l 227 0 l 220 3 l 271 68 q 281 85 274 85 l 285 85 q 329 71 294 76 q 356 75 348 75 q 346 81 356 81 l 339 78 q 281 102 281 92 l 285 109 l 278 109 q 207 14 257 62 l 190 17 l 190 27 l 197 37 q 190 44 197 44 q 159 0 178 0 q 156 14 156 6 l 142 3 l 125 7 q 119 0 125 0 l 112 0 q 68 10 68 0 l 68 44 q 81 78 68 50 q 68 102 68 83 l 68 322 q 71 359 68 336 q 68 383 68 363 q 71 390 68 390 l 68 414 l 68 553 q 69 556 68 555 m 325 573 q 309 583 317 578 q 292 580 297 583 l 271 583 q 268 580 268 583 q 220 587 264 584 q 210 583 214 583 q 190 597 190 591 l 190 617 l 197 627 l 190 637 l 190 648 q 200 699 200 680 l 200 702 q 197 705 200 705 l 214 732 l 214 746 l 210 746 q 190 715 203 715 l 193 692 q 180 651 193 686 q 186 631 186 640 q 105 573 177 573 q 85 556 99 561 q 75 559 78 559 l 88 546 q 125 549 111 549 l 136 532 q 129 495 129 509 q 146 431 133 490 q 125 390 130 414 l 119 393 l 109 393 l 109 383 l 119 383 q 122 387 122 383 q 224 251 224 296 q 220 237 220 245 l 220 227 l 234 227 q 241 258 241 250 l 241 264 q 142 390 228 304 l 142 400 q 170 451 170 434 l 170 454 l 166 454 q 159 444 166 444 q 149 465 149 448 l 149 488 l 142 498 q 149 529 146 523 l 142 543 q 180 566 146 566 l 190 566 l 197 563 q 231 583 213 583 l 251 573 q 258 576 258 573 q 309 573 292 573 l 325 573 z "},"S":{"ha":1017,"x_min":-27,"x_max":1031,"o":"m 637 1139 l 651 1139 q 780 1099 700 1139 l 780 1095 l 773 1095 l 773 1088 l 804 1092 q 882 1031 854 1059 l 882 1027 q 814 956 840 997 q 797 949 803 949 l 790 953 q 777 949 784 949 q 756 963 773 949 l 753 963 l 753 949 l 777 943 l 787 943 q 810 949 810 943 l 838 929 l 841 929 q 848 936 848 929 l 848 939 q 827 960 839 939 q 899 1017 859 1008 q 977 878 977 917 l 953 871 q 922 892 939 878 l 909 892 q 905 882 909 888 q 966 865 950 865 l 980 868 q 997 797 997 832 l 990 793 q 966 797 980 793 q 922 793 944 793 l 919 793 q 916 797 916 793 l 909 793 q 905 797 905 793 l 899 793 l 831 793 l 821 800 q 827 824 827 817 l 821 827 q 804 793 821 802 l 793 793 q 780 797 780 793 l 756 793 l 699 793 q 685 814 685 800 q 712 858 712 847 l 712 865 q 692 899 692 887 q 746 960 712 960 l 746 963 q 722 983 722 975 l 722 990 l 709 990 q 688 1004 688 990 q 695 1021 695 1015 q 688 1027 688 1021 l 688 1044 l 692 1051 q 675 1068 683 1051 q 699 1082 699 1074 l 675 1082 l 668 1078 q 631 1133 668 1090 q 637 1139 632 1139 m 475 1112 l 475 1109 l 481 1109 q 488 1116 488 1109 l 488 1122 l 485 1122 q 475 1112 480 1122 m 522 1082 l 522 1068 l 529 1068 l 532 1085 l 532 1088 l 529 1088 q 522 1082 522 1087 m 176 1058 l 183 1058 q 190 1065 190 1058 l 190 1068 q 176 1058 176 1063 m 763 1048 q 766 1044 766 1048 l 773 1048 l 797 1048 l 797 1061 q 763 1048 763 1055 m 159 1048 q 139 1007 159 1039 l 142 1007 q 173 1041 148 1007 l 173 1044 q 159 1048 165 1044 m 702 1021 l 709 1017 l 719 1017 q 732 1031 724 1017 l 732 1034 q 726 1044 726 1034 l 719 1044 q 702 1021 702 1034 m 600 1017 l 600 1014 q 621 1031 614 1019 l 617 1031 q 600 1017 602 1024 m 400 1014 l 400 1004 q 427 973 425 973 l 427 980 q 407 1021 407 1004 q 400 1014 400 1019 m 553 1000 l 553 990 q 593 1007 593 998 l 590 1007 q 553 1000 588 1007 m 125 994 l 125 990 l 139 990 l 139 1004 l 136 1004 q 125 994 131 1004 m 780 1000 l 780 994 l 790 994 l 790 1000 l 780 1000 m 760 997 l 756 990 l 756 987 q 763 980 758 980 l 766 980 l 766 990 q 760 997 766 997 m 712 980 l 719 966 q 709 949 715 949 q 695 970 704 949 l 695 977 l 712 980 m 183 960 q 173 963 176 963 q 136 949 159 954 q 119 912 136 946 l 115 912 l 115 905 l 125 905 q 176 953 141 953 q 214 963 186 953 l 231 960 q 214 973 231 963 l 183 960 m 465 953 l 471 953 q 512 966 488 963 q 526 963 518 963 q 536 966 532 966 l 536 970 l 519 970 q 465 953 465 968 m 241 956 l 241 953 q 251 949 244 953 l 254 949 l 254 953 q 244 956 251 953 l 241 956 m 268 943 l 271 943 l 302 946 l 302 956 l 298 956 q 268 943 268 947 m 641 943 l 641 936 l 658 936 q 665 943 665 936 l 661 949 q 641 943 648 943 m 851 943 l 851 936 l 861 936 q 868 943 868 936 q 861 949 868 949 l 858 949 q 851 943 851 948 m 424 946 q 414 919 424 931 l 414 916 l 417 916 q 441 943 421 916 l 424 946 m 885 943 l 885 939 q 892 932 886 932 l 899 943 l 885 943 m 68 939 l 64 932 l 64 929 l 78 929 q 68 939 78 934 m 912 929 l 912 926 q 919 919 913 919 l 929 919 l 929 929 l 912 929 m 885 922 l 885 909 l 899 905 l 899 912 q 888 922 899 917 l 885 922 m 373 916 l 373 905 l 376 905 l 387 912 l 404 912 l 404 919 l 400 919 q 373 916 397 919 m 75 899 l 71 892 q 78 885 78 890 l 78 882 q 71 854 71 858 l 71 851 l 75 851 q 112 892 75 864 l 98 895 q 88 885 98 890 l 81 885 q 75 899 81 899 m 746 875 l 746 871 l 749 871 q 763 885 755 871 l 763 892 l 760 892 q 746 875 755 892 m 821 848 l 821 841 q 827 848 827 841 l 827 854 q 821 848 821 853 m 824 637 l 827 637 q 953 553 900 607 q 865 526 923 526 q 824 607 840 553 l 824 637 m 451 576 l 451 566 l 461 566 l 461 576 l 451 576 m 329 543 l 329 536 l 339 536 q 332 543 339 543 l 329 543 m 346 539 q 370 526 346 534 l 373 526 l 373 529 q 346 539 352 539 m 281 536 l 281 532 l 295 529 l 298 536 l 281 536 m 688 519 l 695 519 l 712 522 l 712 532 l 702 532 q 688 519 696 532 m 966 532 q 1024 417 990 532 l 1031 373 q 1027 363 1031 370 q 1031 339 1031 349 q 1010 268 1031 268 l 1010 261 l 1017 261 l 1017 254 q 916 85 1017 186 l 912 85 q 841 115 878 115 l 841 125 q 851 132 846 125 l 844 146 q 919 285 868 239 l 929 285 l 929 288 q 909 298 909 288 l 909 312 q 919 329 909 329 l 919 332 q 899 349 899 332 l 895 363 q 916 397 899 376 l 916 407 q 868 434 916 412 q 861 458 868 441 q 892 509 869 488 q 895 512 895 509 l 912 509 q 966 532 935 509 m 383 526 q 390 519 385 519 l 393 519 l 393 526 l 383 526 m 559 515 l 556 509 l 563 505 l 566 512 l 559 515 m 688 481 l 688 478 l 692 478 q 814 512 777 500 l 814 515 l 810 515 q 688 481 709 497 m 414 509 l 414 492 l 420 492 l 420 502 q 414 509 420 509 m 644 502 l 634 485 l 641 485 q 651 495 646 485 q 644 502 651 502 m 665 492 l 665 488 l 671 488 q 678 495 678 488 l 678 502 l 675 502 q 665 492 670 502 m 441 478 l 441 475 q 458 465 447 475 l 461 465 l 461 468 q 444 478 461 474 l 441 478 m 763 478 l 760 471 l 766 468 l 770 475 l 763 478 m 519 475 l 512 465 l 512 461 l 529 465 q 519 475 529 469 m 604 451 l 610 451 q 621 475 617 451 l 617 475 q 604 451 610 475 m 485 451 l 488 444 l 488 441 l 485 434 l 492 431 l 495 437 l 495 451 l 485 451 m 1007 431 l 997 410 q 1000 400 1000 404 l 1007 400 q 1014 431 1010 425 l 1007 431 m 332 342 l 349 342 q 359 332 354 342 l 359 319 q 349 315 349 319 q 322 336 322 326 l 332 342 m 44 322 l 44 315 q 81 275 56 296 l 81 278 q 44 322 71 302 m 102 322 l 102 319 q 119 302 119 304 l 119 292 l 112 281 l 112 278 l 122 278 l 122 309 q 102 322 122 314 m 936 288 q 943 281 937 281 l 949 281 q 943 288 949 288 l 936 288 m 983 288 l 983 285 q 1000 271 983 280 l 1004 271 l 1004 275 q 994 288 994 283 l 983 288 m 109 261 q 132 251 109 253 q 109 261 132 259 m 366 258 l 366 254 l 370 234 l 373 234 l 373 244 q 370 258 370 250 l 366 258 m 346 203 q 353 197 353 202 l 349 190 l 353 190 q 373 214 359 190 l 373 220 q 346 203 346 208 m 505 200 l 505 193 l 522 193 l 539 197 l 539 200 l 505 200 m 475 170 l 475 163 q 485 159 478 163 q 502 186 485 175 l 502 190 l 495 190 q 475 170 490 190 m 180 186 l 176 170 l 176 166 l 183 166 l 186 186 l 180 186 m 258 139 l 268 139 l 285 142 l 285 149 q 275 156 275 149 l 275 159 l 281 170 l 281 176 l 278 176 q 258 139 273 176 m 373 146 l 376 146 q 424 166 424 158 q 417 173 424 173 l 414 173 l 373 146 m 342 159 q 336 153 342 153 q 298 156 313 156 q 285 122 298 151 l 288 122 q 349 146 298 146 q 366 153 366 146 q 342 159 353 153 m 227 122 l 227 119 q 248 64 240 64 l 244 47 l 248 31 l 251 31 q 254 68 251 38 q 234 132 241 68 q 241 149 241 143 q 227 122 232 149 m 485 146 l 485 136 q 492 129 486 129 l 492 139 q 485 146 492 146 m 858 139 l 858 136 q 865 129 859 129 l 868 129 l 868 139 l 858 139 m 468 102 q 471 92 471 95 l 475 92 l 481 115 l 478 115 q 468 102 470 115 m 827 115 q 899 75 848 98 q 746 -7 847 24 l 743 0 q 766 31 747 31 q 780 41 780 36 l 780 47 q 777 61 780 55 q 807 112 796 112 q 827 115 827 112 m 461 41 l 461 37 l 465 37 q 478 71 478 65 l 478 78 q 461 41 469 78 m 298 14 l 295 7 q 298 14 329 7 m 520 678 l 522 678 l 546 671 q 621 695 570 689 q 695 668 695 680 l 702 671 q 773 631 773 661 q 780 604 780 606 l 780 593 q 777 590 780 590 q 790 553 790 570 l 790 539 q 821 509 801 539 q 814 488 821 503 q 817 451 817 465 l 814 434 l 865 407 q 838 342 838 382 q 821 332 830 332 q 827 326 822 326 l 831 326 l 844 336 q 858 302 858 320 q 804 200 858 291 q 793 173 804 185 l 797 149 q 736 122 797 136 l 705 149 l 705 146 q 736 112 715 124 q 705 41 736 50 q 678 -7 694 41 q 549 -37 625 -37 q 495 -3 541 -37 l 471 -3 q 465 -10 465 -5 l 498 -10 q 519 -37 519 -27 l 512 -41 l 502 -41 q 342 -17 342 -41 l 342 -7 q 387 7 342 0 l 387 0 l 390 0 q 397 10 397 0 q 427 -14 413 -7 l 444 -14 q 451 -7 451 -14 q 397 14 428 -7 l 410 31 l 404 31 l 359 10 q 349 14 353 14 q 332 7 338 7 q 329 -10 329 7 q 339 -14 336 -14 l 339 -17 q 332 -24 339 -24 q 268 -3 268 -12 l 271 3 l 268 3 l 248 0 q 227 14 227 9 q 231 17 227 17 q 227 27 227 24 l 224 27 q 214 14 224 14 q 58 132 142 40 q 85 180 82 149 q 105 203 100 203 l 105 197 l 129 197 q 139 217 139 200 l 132 217 l 115 200 q 112 217 112 205 l 105 214 l 98 214 l 75 241 l 75 248 q 78 258 78 254 q 61 261 73 261 q 47 251 61 251 l 47 248 q 75 224 70 248 l 85 210 l 85 207 l 75 193 l 78 193 l 75 186 l 78 170 q 47 142 64 142 q 24 176 24 174 l 24 186 l 31 186 l 31 193 l 24 190 l 20 190 q -24 319 0 190 q -27 336 -27 324 l -20 339 l 3 339 q 10 329 3 329 l 17 329 q 27 342 19 342 l 61 342 q 64 339 64 342 l 71 342 l 268 342 q 278 332 273 342 l 278 326 q 186 231 243 250 q 149 210 149 219 l 149 207 l 153 190 l 159 190 q 156 200 156 197 q 193 220 156 216 q 200 227 195 227 l 203 227 l 203 224 q 170 200 189 200 l 170 193 l 173 193 q 217 234 217 207 q 251 251 239 251 l 258 241 l 258 227 l 251 217 l 251 214 l 261 214 l 264 234 q 258 254 258 245 q 302 319 258 277 l 319 305 l 329 305 q 332 309 332 305 q 370 264 339 309 q 509 220 432 220 q 593 163 521 205 l 678 186 q 702 183 692 183 l 726 186 q 783 173 743 180 q 685 203 746 203 q 682 207 685 207 q 617 190 659 190 q 597 180 616 183 q 543 224 545 215 l 543 227 q 644 298 644 243 l 644 312 q 370 437 644 387 q 366 441 370 441 l 370 448 l 370 451 q 363 458 370 458 l 349 444 q 218 499 237 469 q 176 519 204 505 l 176 529 l 193 526 q 153 536 193 532 q 34 722 34 637 q 27 746 31 722 q 47 773 27 750 q 24 797 24 776 q 27 807 27 804 l 34 807 q 58 783 56 783 l 54 777 l 54 773 q 105 729 81 773 l 119 719 l 122 719 l 122 726 l 78 780 q 81 790 81 787 l 64 790 q 27 831 27 815 l 41 899 l 47 899 l 58 892 l 61 892 q 47 912 47 905 q 176 1068 80 1007 q 465 1153 319 1153 q 478 1149 472 1153 q 526 1153 507 1153 l 566 1153 q 593 1146 581 1153 q 607 1149 600 1149 q 624 1105 619 1149 q 665 1051 651 1105 q 678 1004 675 1051 l 665 994 l 648 994 q 641 1000 641 994 q 644 1010 641 1004 q 634 1078 634 1050 l 627 1078 q 617 1068 627 1068 q 621 1055 617 1061 l 621 1044 q 637 1024 625 1044 l 637 1000 l 610 980 q 665 990 647 983 q 688 960 688 974 l 688 932 l 692 926 q 675 905 688 926 l 675 885 l 692 865 l 692 861 q 668 831 692 844 q 658 793 665 793 l 654 793 q 621 854 648 795 q 526 888 566 888 l 468 888 q 383 827 383 888 q 610 705 383 751 q 573 688 610 702 l 573 685 l 549 688 l 543 688 q 520 678 534 683 m 205 519 q 200 526 203 522 l 200 519 l 205 519 m 227 581 l 227 583 l 227 583 q 227 581 227 582 m 203 684 q 208 691 205 688 q 186 688 200 689 q 139 722 180 688 q 129 719 132 719 l 129 715 l 176 682 q 203 684 180 682 m 225 701 q 234 702 229 702 l 248 702 l 254 699 q 285 719 254 703 q 312 709 302 709 q 319 712 319 709 l 400 705 q 410 709 407 709 q 481 665 466 665 q 507 675 498 672 q 448 709 500 678 q 424 719 435 719 l 417 715 q 404 719 411 719 q 390 715 396 719 q 353 722 383 719 l 332 719 q 315 726 321 726 l 315 746 q 319 763 315 758 l 315 783 q 326 824 326 816 l 326 848 q 339 875 339 862 l 339 878 l 336 878 q 315 848 336 864 l 319 824 q 309 793 319 820 l 312 753 q 298 726 308 753 q 225 701 250 713 z "},"T":{"ha":1017,"x_min":0,"x_max":1041,"o":"m 14 1133 q 27 1129 21 1133 q 58 1133 45 1133 l 64 1133 q 88 1129 84 1133 q 119 1133 106 1133 l 170 1133 q 220 1095 180 1133 l 220 1102 q 200 1129 200 1120 l 207 1133 l 258 1133 l 281 1082 q 366 1041 351 1041 l 366 1034 q 339 939 349 956 l 339 936 q 359 892 359 907 q 322 848 355 892 q 275 841 313 845 q 264 844 268 844 q 237 834 262 834 l 231 834 q 203 838 207 834 q 166 834 180 834 l 10 834 q 0 844 5 834 l 0 1078 l 17 1099 l 14 1099 q 10 1095 10 1099 q 0 1099 3 1099 l 0 1122 q 14 1133 0 1131 m 288 1133 l 481 1133 q 492 1122 486 1133 q 454 1075 484 1122 l 414 1065 q 404 1068 407 1068 q 383 1051 404 1063 q 285 1109 285 1081 q 278 1116 278 1109 l 278 1122 q 288 1133 278 1127 m 515 1133 q 566 1129 532 1133 l 566 1133 q 570 1129 570 1133 l 593 1133 l 661 1133 q 668 1126 668 1131 l 661 1116 q 705 1041 677 1072 q 712 1027 705 1036 q 702 1004 702 1010 l 705 1004 q 671 977 705 998 l 671 973 l 675 973 q 705 983 686 981 q 736 895 712 972 q 709 865 736 887 q 688 831 709 857 q 651 780 685 780 q 604 746 620 746 l 573 790 l 570 790 q 566 787 566 790 l 549 790 q 515 783 546 790 q 475 804 487 783 l 475 814 q 485 824 485 814 q 465 865 474 840 q 468 868 465 868 q 465 899 465 881 q 441 885 450 885 q 404 912 404 885 q 380 919 390 912 q 373 912 380 912 q 363 936 363 924 l 363 943 q 420 1061 379 1061 q 471 1092 471 1071 q 515 1133 502 1133 m 699 1133 l 766 1133 q 773 1116 773 1133 l 780 1116 q 797 1133 782 1116 l 909 1133 l 919 1126 q 939 1133 930 1133 l 953 1133 q 983 1129 970 1133 q 1017 1133 1001 1133 l 1031 1133 q 1041 1122 1036 1133 q 1010 1109 1041 1113 l 1004 1112 q 970 1082 996 1112 l 970 1075 q 994 1102 977 1075 l 1000 1105 q 1031 1102 1019 1102 q 1034 1105 1031 1105 l 1041 1095 l 1041 861 q 1031 834 1041 836 l 983 834 q 970 838 976 834 q 956 834 964 834 q 899 838 924 834 q 861 834 880 834 q 851 841 851 838 q 824 834 833 834 q 810 838 817 834 q 773 834 787 834 l 719 834 l 712 838 q 753 885 720 860 l 753 895 q 743 922 743 912 q 780 936 768 936 l 780 939 l 766 939 q 749 932 749 939 q 729 966 736 932 q 732 980 732 972 q 719 1017 719 998 q 726 1024 726 1017 l 726 1027 q 692 1078 722 1038 q 671 1122 671 1118 q 699 1133 688 1133 m 756 1095 l 756 1088 l 766 1088 q 773 1095 773 1088 l 766 1099 q 756 1095 760 1095 m 909 1085 l 909 1078 l 912 1078 q 919 1085 919 1078 l 909 1085 m 244 1075 l 244 1068 q 261 1065 256 1068 l 261 1072 l 244 1075 m 919 1031 l 919 1027 l 936 1031 l 949 1031 q 956 1055 949 1046 l 956 1058 l 919 1031 m 763 1051 q 736 1024 752 1024 l 732 1024 l 732 1021 q 739 1014 734 1014 l 749 1014 q 787 1041 756 1041 q 763 1051 787 1049 m 800 1041 q 838 1027 800 1030 q 858 1034 848 1034 l 885 1034 q 878 1041 885 1041 l 861 1041 q 834 1034 858 1041 l 831 1034 l 817 1044 l 800 1041 m 458 1014 l 458 1010 l 468 1010 l 468 1021 l 465 1021 q 458 1014 458 1019 m 899 1017 q 905 1010 900 1010 l 919 1010 l 919 1017 l 899 1017 m 665 1004 l 665 997 l 668 997 q 678 1014 675 997 l 675 1014 q 665 1004 670 1014 m 865 1004 l 865 994 q 871 1000 871 994 l 865 1004 m 634 977 l 621 977 l 621 970 l 634 966 l 668 973 l 668 977 q 654 980 661 977 l 634 977 m 512 977 l 512 963 l 539 963 l 539 970 l 522 966 q 512 977 522 971 m 587 966 l 587 963 l 590 963 q 604 977 595 963 l 600 977 q 587 966 587 972 m 824 953 l 817 956 q 800 946 800 952 q 827 939 806 946 q 882 956 837 939 q 932 949 911 949 l 946 953 l 946 956 q 939 963 946 963 l 932 960 q 926 966 932 966 q 916 956 926 962 l 912 956 q 905 963 905 956 l 888 960 q 868 966 878 966 q 824 953 849 953 m 203 960 l 203 946 q 210 953 210 946 l 210 960 l 203 960 m 471 905 l 505 953 l 505 956 q 471 905 471 928 m 977 943 l 977 939 l 980 939 q 1007 953 1001 953 l 1007 956 l 997 956 q 977 943 977 948 m 200 922 l 200 919 l 207 919 l 207 929 q 200 922 200 928 m 821 926 q 790 912 821 912 q 797 905 791 905 l 807 905 q 841 926 827 905 q 838 929 838 926 l 831 926 l 821 926 m 766 922 q 773 916 768 916 l 780 916 l 780 922 l 766 922 m 922 905 l 922 902 l 936 902 l 936 912 l 929 912 q 922 905 922 911 m 383 902 q 400 885 400 897 q 397 868 397 880 q 448 878 404 874 q 458 871 458 875 l 454 854 q 478 827 465 852 q 471 817 475 817 l 431 831 l 431 827 q 485 766 460 803 l 505 763 l 539 763 q 543 760 543 763 q 570 766 560 766 q 597 722 582 737 q 593 695 593 704 q 617 671 602 695 l 621 671 l 621 661 q 502 614 612 661 l 495 617 l 492 617 q 437 604 454 604 q 427 607 431 607 l 424 600 l 424 597 l 451 597 q 621 658 556 621 l 627 658 q 705 573 669 602 l 705 302 q 685 258 692 258 q 566 322 675 258 l 563 322 l 563 319 q 641 271 563 315 l 685 244 q 641 170 685 227 q 610 58 641 104 q 604 34 610 47 q 607 20 607 28 q 532 0 563 14 l 451 0 q 420 14 435 0 q 370 64 395 14 q 359 68 363 68 l 336 64 l 336 231 q 339 275 336 252 q 336 312 336 287 l 336 339 q 356 356 356 352 l 356 359 q 336 366 336 359 l 336 431 q 346 441 336 435 q 370 414 362 441 l 376 410 l 376 424 l 370 434 l 370 437 l 380 471 q 366 502 366 486 l 363 502 q 356 495 356 500 q 370 468 356 483 q 359 451 366 451 l 346 451 q 336 461 341 451 l 336 492 q 346 502 336 496 q 336 546 336 518 q 353 590 344 581 l 353 593 q 336 621 336 596 l 336 810 q 383 902 371 902 m 895 885 l 895 882 l 905 882 l 905 892 l 902 892 q 895 885 895 890 m 81 854 l 81 851 l 88 851 q 98 861 93 851 l 92 865 q 81 854 87 865 m 359 841 l 359 831 l 366 831 l 380 841 l 383 841 l 383 834 q 414 841 392 834 l 414 848 q 393 861 407 861 l 359 841 m 702 797 l 705 790 l 705 739 q 699 722 705 722 q 705 695 705 710 l 705 631 q 695 610 705 613 l 685 610 q 610 699 642 699 l 610 719 q 607 722 610 722 q 644 753 607 727 q 695 787 644 758 q 702 797 695 797 m 685 739 l 682 732 l 682 729 l 685 729 q 692 736 692 729 l 685 739 m 444 393 q 424 400 433 400 q 373 387 397 387 l 373 383 q 380 376 374 376 l 400 376 q 424 387 412 387 l 434 387 q 481 353 447 387 q 529 329 515 353 l 559 329 q 522 342 559 334 q 478 366 509 366 l 461 387 q 468 407 468 397 l 468 417 l 465 417 q 454 397 460 417 q 444 393 448 393 m 699 173 l 705 173 q 719 156 712 172 q 715 146 719 146 q 719 95 719 112 l 719 -3 q 709 -14 719 -8 l 644 -14 q 637 -7 637 -14 q 668 78 650 47 q 671 81 671 78 l 671 98 q 675 136 671 113 l 671 142 q 699 173 671 151 m 349 54 l 359 54 q 373 41 365 54 l 373 31 l 370 31 q 342 44 349 44 l 342 47 q 349 54 344 54 m 336 31 l 342 31 q 366 3 348 31 l 359 0 l 346 0 q 336 10 341 0 l 336 31 m 380 24 q 407 3 402 14 l 407 0 l 400 0 q 380 24 380 0 z "},"U":{"ha":1153,"x_min":7,"x_max":1143,"o":"m 17 1133 q 47 1129 35 1133 q 75 1133 66 1133 l 95 1129 q 129 1133 113 1133 l 132 1133 q 136 1129 136 1133 l 142 1133 l 149 1133 q 183 1126 183 1132 q 203 1133 194 1133 l 207 1133 q 220 1129 214 1133 q 234 1133 227 1133 l 244 1133 l 254 1126 q 285 1133 277 1133 l 288 1133 q 326 1126 312 1133 q 346 1133 336 1133 l 370 1133 q 380 1122 374 1133 l 380 1014 q 376 977 380 1000 q 380 960 380 971 l 373 956 q 380 936 380 945 q 376 912 380 926 q 380 878 380 895 l 380 861 q 376 858 380 858 l 380 851 l 380 804 q 359 766 380 794 q 288 665 359 686 l 281 668 l 278 668 q 248 631 251 631 l 244 631 l 244 654 q 237 661 244 661 l 234 661 l 234 651 q 159 610 234 625 q 102 580 128 580 l 102 587 q 105 637 102 604 l 95 644 l 95 621 q 92 587 95 604 q 102 536 92 580 q 85 526 102 526 l 85 522 q 102 512 102 522 l 102 485 q 61 465 102 473 l 61 458 l 71 458 q 102 468 77 458 l 105 461 l 105 448 l 98 437 l 98 434 q 122 417 122 434 q 170 444 168 434 l 170 448 q 153 461 153 448 q 125 448 125 461 q 115 458 121 448 q 119 461 115 461 l 115 478 l 115 502 q 112 505 115 505 l 115 512 l 115 529 q 105 559 115 535 q 149 583 105 573 q 241 621 149 601 q 258 593 248 621 q 319 553 309 553 q 329 566 324 566 q 353 522 336 566 q 380 492 380 511 l 376 492 l 380 485 l 380 475 l 376 454 q 380 444 380 448 q 373 427 373 433 q 383 387 380 427 q 353 302 376 349 q 326 217 353 217 q 322 214 326 214 q 251 241 293 231 q 224 264 226 264 q 220 261 224 261 q 309 200 231 230 q 312 193 309 193 q 268 112 302 138 q 241 71 256 71 l 241 61 q 268 20 267 35 q 264 17 264 20 q 61 200 136 66 l 31 285 q 92 319 31 298 q 125 309 109 309 l 139 309 q 156 315 156 309 l 214 305 l 237 309 q 298 268 240 296 l 298 261 l 302 261 l 302 264 l 251 319 l 251 322 l 231 322 q 207 336 212 322 q 132 329 145 329 q 122 319 132 323 q 112 322 115 322 l 112 326 q 129 342 112 328 l 129 356 q 125 370 129 363 l 136 390 l 136 407 l 125 407 q 109 383 125 383 l 115 370 q 61 329 96 329 l 51 329 q 24 315 51 315 q 17 353 24 320 l 20 359 q 10 410 10 387 l 10 448 l 14 465 q 7 475 7 465 q 24 498 16 498 l 20 505 l 20 515 l 31 515 l 31 502 q 58 512 45 512 l 58 515 q 51 522 58 522 l 47 522 q 44 515 47 515 l 31 526 l 34 532 l 34 539 q 14 519 18 519 l 7 519 l 7 627 q 10 665 7 642 q 7 692 7 668 l 7 695 q 10 699 7 699 l 7 705 l 10 726 q 7 729 10 729 l 10 736 q 7 783 7 765 q 14 790 8 790 q 163 763 55 773 l 163 766 q 153 780 158 780 l 142 780 q 129 777 135 780 q 105 800 105 777 l 98 800 q 78 787 98 787 q 58 817 63 787 l 54 817 q 51 800 54 800 q 7 814 7 802 l 7 861 q 41 875 7 872 q 7 953 7 945 l 7 973 q 58 1004 7 1000 q 71 1007 71 1004 q 92 997 92 1000 q 156 1017 121 1000 q 214 970 156 1010 q 136 865 138 903 q 102 814 130 865 l 112 814 q 166 905 125 819 q 234 977 222 954 l 241 980 q 288 966 281 974 l 292 966 q 326 973 298 966 l 326 983 q 309 977 309 983 q 288 987 288 981 q 278 983 285 987 q 237 994 237 986 q 241 1007 241 1000 l 234 1007 q 224 983 234 983 l 214 983 q 163 1021 163 1017 l 163 1031 l 166 1055 l 156 1055 l 156 1034 q 92 1007 156 1018 q 81 1014 81 1010 q 27 1007 39 1007 l 24 1014 l 27 1031 q 7 1048 7 1031 l 7 1072 q 10 1109 7 1086 q 7 1126 7 1114 l 17 1133 m 753 1160 l 783 1160 l 800 1156 l 800 1149 l 783 1122 l 783 1099 l 770 1099 q 756 1122 770 1117 l 753 1122 q 780 1051 762 1115 q 756 963 780 997 l 756 953 q 760 949 756 949 q 749 936 755 936 l 743 936 l 743 1061 q 746 1065 743 1065 l 743 1072 l 743 1082 l 746 1102 l 743 1109 q 753 1160 745 1160 m 970 1160 q 977 1146 977 1160 l 983 1146 q 1007 1160 996 1160 q 1065 1122 1020 1160 l 1068 1122 l 1072 1129 q 1041 1160 1041 1142 l 1133 1160 l 1143 1153 q 1139 1139 1143 1145 q 1143 1051 1143 1082 l 1143 1014 q 1136 1007 1143 1007 l 1112 1007 l 1112 1000 l 1122 1000 q 1143 980 1143 1000 l 1143 882 q 1139 878 1143 878 l 1143 871 q 1139 844 1139 847 q 1143 834 1143 838 l 1136 831 q 1126 858 1126 848 l 1126 865 l 1133 875 l 1133 878 q 1119 912 1121 878 l 1112 916 l 1112 912 q 1122 865 1112 903 l 1119 844 q 1129 834 1124 844 l 1129 817 q 1143 797 1143 817 l 1143 732 l 1139 715 q 1122 729 1122 727 l 1116 726 l 1112 726 q 1078 729 1096 726 q 1027 722 1049 722 l 973 739 q 970 736 970 739 l 963 739 l 949 739 q 888 773 908 739 l 848 797 q 773 766 793 766 l 770 773 l 770 905 q 797 932 770 920 q 804 953 797 942 l 797 956 q 824 1041 813 987 q 831 1051 827 1041 q 810 1082 814 1051 q 851 1160 835 1160 l 970 1160 m 261 1149 l 258 1133 l 261 1119 l 264 1119 q 271 1149 264 1143 l 261 1149 m 112 1136 l 132 1136 l 132 1143 l 119 1143 q 112 1136 112 1141 m 58 1136 l 58 1133 l 81 1133 l 78 1139 q 58 1136 73 1136 m 200 1139 l 193 1116 q 207 1139 197 1116 l 200 1139 m 92 1129 l 92 1126 q 105 1119 97 1126 q 109 1129 105 1122 l 92 1129 m 1014 1112 l 1017 1112 q 1027 1116 1024 1116 l 1027 1122 l 1024 1122 q 1014 1112 1019 1122 m 926 1112 q 919 1092 926 1106 l 919 1088 l 922 1088 l 929 1109 l 929 1112 l 926 1112 m 990 1068 l 987 1061 l 1004 1061 l 1004 1065 l 990 1068 m 827 1055 l 827 1048 l 844 1044 l 848 1044 q 838 1055 848 1049 l 827 1055 m 865 1051 l 861 1044 q 919 1038 917 1041 q 922 1041 919 1041 q 929 1034 924 1034 l 932 1034 q 943 1044 937 1034 q 919 1051 919 1044 l 895 1048 l 865 1051 m 1041 1044 q 1048 1038 1042 1038 l 1051 1038 l 1051 1051 l 1048 1051 q 1041 1044 1041 1050 m 1048 1010 q 1051 1007 1051 1010 q 1065 1017 1065 1013 l 1065 1024 l 1058 1024 q 1048 1010 1053 1024 m 373 1010 l 373 1007 l 390 1004 l 390 1010 l 373 1010 m 1024 983 l 1024 980 q 1031 960 1031 972 l 1041 960 q 1034 980 1034 970 q 1041 997 1041 991 l 1038 997 q 1024 983 1032 997 m 902 983 l 902 980 q 909 987 909 980 l 909 990 q 902 983 902 989 m 363 987 l 363 980 l 387 977 l 390 977 l 390 983 q 363 987 382 983 m 946 980 l 946 977 l 963 977 l 963 983 l 946 980 m 281 963 q 298 949 281 958 l 298 953 q 281 963 298 960 m 994 953 l 994 949 l 997 949 q 1007 953 1004 953 l 1007 963 l 1004 963 q 994 953 999 963 m 953 939 l 953 936 l 956 936 q 990 946 968 946 l 987 953 q 953 939 953 948 m 787 949 q 793 943 788 943 l 800 943 l 800 949 l 787 949 m 1014 949 q 1021 943 1015 943 l 1027 943 q 1021 949 1027 949 l 1014 949 m 305 943 l 305 939 q 312 932 307 932 l 315 932 q 322 939 322 932 l 322 943 l 305 943 m 807 939 q 814 932 808 932 l 827 932 l 827 936 q 807 939 810 939 m 1055 939 l 1055 929 q 1075 922 1067 929 l 1078 922 l 1078 926 q 1058 939 1078 930 l 1055 939 m 34 939 q 44 909 44 926 q 31 905 38 905 l 27 912 l 27 932 q 34 939 28 939 m 868 912 l 868 916 q 858 912 861 912 q 865 905 859 905 q 916 919 875 912 q 922 899 922 905 l 929 899 l 929 922 l 936 932 l 932 932 q 868 912 917 926 m 61 895 l 61 892 q 64 882 64 885 l 68 882 l 68 895 l 61 895 m 919 888 l 919 871 l 926 871 l 922 888 l 919 888 m 68 878 l 68 868 q 75 861 69 861 l 75 868 q 71 878 71 875 l 68 878 m 960 865 q 966 858 961 858 l 970 858 q 963 865 970 865 l 960 865 m 854 861 q 824 817 849 836 l 821 817 l 821 814 l 827 814 q 861 861 840 816 l 854 861 m 1068 861 l 1068 854 l 1082 854 l 1082 861 l 1068 861 m 770 841 l 770 838 q 777 844 777 838 l 777 848 q 770 841 770 846 m 183 814 l 183 810 q 278 760 183 790 q 183 814 234 795 m 393 797 q 400 790 400 795 l 400 559 l 393 559 q 356 607 362 607 q 281 668 296 607 q 363 709 311 688 q 393 793 383 728 l 393 797 m 281 783 q 285 773 281 780 l 281 756 q 292 746 284 756 q 285 712 288 740 l 295 705 l 295 712 l 292 729 q 302 749 302 732 q 288 783 288 775 l 281 783 m 92 773 l 92 746 l 95 746 l 98 763 l 98 773 l 92 773 m 817 777 q 882 729 829 777 q 922 715 899 729 l 943 719 q 983 702 948 713 q 987 692 987 695 q 970 631 975 692 l 970 624 q 990 695 978 624 q 1058 709 1002 709 q 1116 668 1116 709 q 1099 627 1109 641 l 1099 624 l 1109 631 l 1116 631 l 1116 498 l 1112 475 l 1105 475 q 1068 495 1080 495 l 1065 495 q 1109 465 1097 465 l 1109 454 q 1112 437 1109 443 q 1075 275 1099 323 q 990 136 1043 174 q 953 119 973 119 l 946 122 q 926 115 935 115 l 922 115 q 882 132 922 128 q 854 129 869 129 q 821 173 826 129 q 824 186 824 179 q 821 200 824 194 l 824 220 l 824 244 q 790 295 790 267 l 790 305 q 793 336 793 323 q 790 359 790 338 q 817 373 798 359 l 824 373 l 821 366 l 821 363 q 844 376 839 363 q 834 390 840 390 q 780 376 817 383 q 732 390 742 384 q 743 424 743 422 q 739 431 743 431 l 743 454 l 743 509 q 756 519 743 517 l 756 529 q 743 539 743 529 l 743 729 q 783 760 743 751 q 817 777 799 760 m 1092 770 l 1088 746 l 1088 743 q 1095 736 1090 736 q 1099 770 1095 769 l 1092 770 m 95 743 l 95 732 q 102 726 96 726 l 102 732 q 98 743 98 739 l 95 743 m 58 732 l 58 722 q 75 712 64 722 l 75 722 q 64 732 75 727 l 58 732 m 244 702 l 244 699 q 251 705 251 699 l 251 709 q 244 702 244 707 m 95 702 l 95 699 q 105 675 105 684 l 115 675 l 115 678 q 98 702 102 702 l 95 702 m 892 498 l 875 498 q 844 485 844 489 q 851 478 846 478 q 861 488 861 478 l 882 488 l 878 465 l 878 461 q 949 583 949 532 q 946 587 946 583 l 953 590 q 1000 543 979 543 q 1055 498 1023 498 l 1058 498 l 1058 505 q 1014 543 1014 517 q 956 604 978 553 q 960 614 956 607 q 956 637 956 627 q 926 546 938 610 q 892 498 913 523 m 1088 604 l 1088 600 l 1092 600 l 1095 614 q 1088 604 1088 614 m 1078 563 l 1078 559 l 1082 559 q 1092 570 1086 559 l 1085 570 q 1078 563 1078 568 m 861 566 l 861 559 q 885 553 877 559 q 892 559 892 553 q 861 566 886 563 m 1058 543 l 1058 539 q 1075 553 1075 548 l 1075 556 l 1072 556 q 1058 543 1066 556 m 268 526 l 268 515 l 278 515 l 278 526 l 268 526 m 41 498 l 37 492 q 41 488 41 492 q 61 492 46 492 l 61 495 l 41 498 m 149 475 l 153 475 q 159 468 159 473 l 149 468 l 149 475 m 834 448 l 834 437 l 844 437 q 851 451 844 443 l 851 465 l 848 465 q 834 448 843 465 m 878 454 l 875 437 q 882 448 882 437 l 882 454 l 878 454 m 186 417 l 186 414 l 193 414 q 200 420 200 414 l 200 427 l 197 427 q 186 417 192 427 m 61 407 l 61 400 l 68 400 q 78 410 73 400 l 78 420 q 61 407 61 412 m 105 420 q 112 414 106 414 l 115 414 l 115 420 l 105 420 m 844 420 q 841 400 841 403 l 841 397 l 844 397 q 858 407 844 407 l 861 400 l 858 376 l 861 376 q 871 390 867 376 q 868 420 868 408 l 844 420 m 258 373 q 268 370 264 370 q 278 373 275 373 l 278 383 q 258 373 258 380 m 732 363 q 777 326 777 359 l 773 302 l 773 264 q 814 231 814 243 l 804 197 l 804 183 q 810 159 805 159 q 804 115 804 124 q 814 81 814 96 q 810 71 810 75 q 821 51 821 56 l 831 51 l 831 85 q 821 112 831 99 q 824 122 824 119 l 834 122 l 844 115 l 861 115 q 892 119 873 115 q 922 95 909 115 q 953 105 928 95 l 953 102 q 831 37 915 63 q 678 3 727 3 l 661 14 l 654 14 q 648 0 654 0 l 600 0 q 553 3 574 0 q 519 0 535 0 q 309 51 309 14 q 288 78 309 58 l 288 92 q 346 170 296 92 q 444 119 357 170 q 454 115 451 115 l 454 122 q 356 176 441 127 q 342 183 351 176 q 390 258 351 210 l 390 268 q 417 356 390 336 q 573 275 454 275 q 726 363 684 275 l 732 363 m 939 285 l 946 281 l 946 292 q 939 285 939 290 m 746 261 q 756 251 746 256 l 760 251 q 766 258 766 251 l 766 264 l 763 264 l 746 261 m 461 112 q 512 88 461 90 q 471 105 512 96 q 465 112 471 112 l 461 112 m 515 81 l 515 78 q 556 58 515 68 l 566 44 l 563 14 l 566 14 q 573 34 573 14 l 614 31 q 658 44 627 41 l 658 47 q 651 54 658 54 l 644 54 q 607 41 636 54 q 549 75 585 41 q 515 81 533 75 m 671 71 l 671 68 l 675 68 l 692 71 l 692 75 q 685 81 692 81 l 682 81 q 671 71 677 81 z "},"V":{"ha":1153,"x_min":-20,"x_max":1153,"o":"m -14 1133 l -10 1133 q -7 1129 -7 1133 l 0 1133 l 92 1133 q 122 1105 109 1133 l 129 1105 l 122 1129 l 129 1133 l 193 1133 q 200 1126 200 1131 q 180 1078 200 1103 q 142 1095 142 1087 l 139 1095 l 125 1085 l 122 1085 q 75 1099 113 1092 l 71 1099 l 71 1095 q 190 1058 176 1065 q 207 1041 192 1041 q 217 1044 214 1044 l 217 1048 q 197 1082 217 1061 l 197 1092 q 214 1129 208 1092 l 231 1133 l 254 1133 q 285 1129 272 1133 q 319 1133 302 1133 l 346 1133 q 390 983 359 1133 l 387 983 l 370 994 l 370 990 q 383 970 370 985 l 383 953 q 342 919 383 922 q 278 946 315 919 q 251 970 251 946 l 264 960 l 268 960 l 268 966 l 214 1004 q 231 1014 231 1008 l 231 1017 q 217 1034 222 1034 l 200 1031 q 220 973 200 1001 l 220 970 q 197 953 210 953 l 166 990 q 183 1017 169 1017 l 183 1021 l 173 1021 q 119 977 159 977 q 115 980 119 980 l 119 987 q 112 994 119 994 l 105 994 l 105 977 q 88 943 105 962 q 98 919 88 931 q 64 882 98 900 q -7 1092 -7 1085 l -7 1102 l -3 1119 l -17 1119 q -20 1129 -20 1126 l -14 1133 m 783 1146 l 814 1146 q 838 1122 833 1146 l 841 1122 l 841 1143 q 854 1146 847 1146 l 902 1146 q 909 1139 909 1145 l 905 1133 l 916 1133 q 922 1146 916 1138 q 963 1105 963 1120 q 943 1068 956 1105 q 963 973 956 1046 q 949 936 949 949 l 946 936 l 929 946 l 922 943 q 909 946 916 946 q 899 939 899 943 q 865 973 890 939 q 824 983 838 983 l 817 973 l 817 970 q 838 973 820 970 q 888 929 866 973 q 919 936 911 936 q 953 871 939 936 q 960 865 960 870 q 922 814 960 838 q 912 817 916 817 q 902 814 905 814 l 902 810 l 922 810 l 926 793 l 926 790 q 922 753 926 776 q 946 695 939 728 q 871 607 898 607 q 844 604 859 604 q 817 614 830 614 q 804 607 804 611 l 770 610 l 736 610 q 726 621 731 610 l 732 631 l 729 631 q 658 607 720 607 q 644 610 644 607 l 634 624 l 634 631 l 671 760 l 675 760 q 739 746 739 749 l 753 729 l 746 688 l 749 682 l 746 661 q 749 651 749 654 l 756 651 q 753 665 756 659 q 756 719 756 699 l 756 722 l 753 746 q 817 777 799 760 l 821 777 q 834 773 828 777 q 892 807 849 773 l 899 807 l 899 810 l 882 814 q 838 780 878 796 l 814 783 q 746 753 814 771 q 739 770 739 762 q 705 763 705 766 q 675 773 675 769 q 736 973 715 943 l 763 990 q 790 956 783 956 l 797 960 q 810 956 803 956 l 814 956 l 814 960 q 780 973 814 964 q 753 1014 770 1014 q 760 1048 760 1031 l 749 1048 q 783 1146 772 1146 m 956 1146 l 970 1146 l 970 1139 q 960 1129 970 1135 l 949 1143 l 956 1146 m 1007 1146 l 1105 1146 q 1112 1139 1112 1145 l 1109 1122 q 1129 1146 1126 1146 l 1143 1146 q 1153 1136 1147 1146 l 1149 1136 l 1153 1129 l 1146 1116 l 1149 1102 l 997 661 l 990 661 l 990 665 q 994 692 990 667 l 987 692 l 980 688 q 966 709 980 692 l 977 715 l 994 702 l 997 702 l 997 712 q 953 763 965 712 q 997 780 955 774 l 997 787 l 956 787 q 953 814 956 789 q 977 827 970 827 q 987 824 983 824 q 980 831 987 831 l 990 868 l 973 905 q 994 970 975 939 q 973 1068 983 1036 q 997 1092 973 1092 l 997 1109 q 994 1122 997 1116 q 1007 1146 1000 1146 m 24 1105 q 44 1082 29 1090 l 44 1088 q 31 1099 44 1094 l 34 1105 l 34 1112 l 31 1112 q 24 1105 24 1111 m 47 1105 l 54 1105 q 61 1112 61 1105 l 54 1112 q 47 1105 47 1111 m 804 1061 l 804 1058 q 821 1075 808 1058 l 817 1075 q 804 1061 812 1075 m 64 1055 l 64 1041 q 75 1031 64 1036 l 85 1031 q 92 1038 92 1031 l 92 1041 q 68 1055 77 1041 l 64 1055 m 376 1048 l 376 1044 l 380 1027 l 383 1027 l 383 1041 q 376 1048 383 1048 m 797 1048 l 797 1024 q 804 1017 798 1017 l 807 1017 l 807 1041 q 800 1048 807 1048 l 797 1048 m 841 1041 l 841 1031 q 848 1024 842 1024 l 851 1031 l 848 1031 l 851 1038 l 851 1048 l 848 1048 q 841 1041 841 1046 m 166 1041 l 166 1031 l 173 1031 l 173 1041 l 166 1041 m 102 1027 l 102 1021 q 119 1010 102 1015 l 119 1014 q 105 1027 119 1019 l 102 1027 m 743 1027 l 749 1027 l 749 990 q 739 980 749 985 l 732 980 l 732 983 q 743 1027 732 987 m 146 1010 l 146 1004 l 153 1004 q 166 1010 161 1010 l 166 1017 l 163 1017 q 146 1010 152 1010 m 797 1007 q 800 997 800 1000 l 804 997 q 810 1004 810 997 l 804 1007 l 797 1007 m 85 990 l 85 987 q 92 994 92 987 l 92 997 q 85 990 85 996 m 420 963 l 424 946 q 417 939 424 939 l 414 939 l 414 949 l 417 956 q 414 960 414 956 l 420 963 m 81 939 l 95 919 l 98 926 l 98 943 q 92 949 98 949 q 81 939 87 949 m 424 936 q 471 763 434 936 q 420 736 439 736 q 390 824 400 787 l 393 831 l 393 858 q 400 909 393 877 q 387 865 391 909 l 376 865 q 353 912 353 905 q 397 919 360 915 l 397 916 q 424 936 401 916 m 787 888 l 787 885 l 804 888 l 804 895 l 793 895 q 787 888 787 894 m 709 868 l 709 865 l 715 865 q 722 871 722 865 l 715 875 q 709 868 709 873 m 760 868 l 760 858 l 766 858 l 766 861 q 760 868 766 868 m 821 838 l 824 821 q 821 817 821 821 l 838 817 q 844 834 838 826 l 844 854 q 838 861 844 861 l 834 861 q 821 838 821 856 m 214 800 l 214 797 q 220 790 215 790 l 220 800 l 214 800 m 183 763 l 183 756 q 190 763 190 756 l 190 770 q 183 763 183 768 m 471 753 l 478 753 l 481 729 l 481 722 q 444 685 481 696 l 437 685 q 410 702 421 685 q 437 726 410 709 q 471 753 437 737 m 153 712 l 159 709 l 163 715 l 163 719 l 159 719 q 153 712 153 718 m 481 709 l 488 709 l 502 654 q 468 685 468 682 l 468 688 q 481 709 481 702 m 966 685 l 966 678 q 956 668 966 673 l 953 675 l 953 682 l 966 685 m 943 665 q 926 648 943 648 q 943 665 926 665 m 220 651 l 220 644 l 224 644 q 234 654 229 644 l 227 658 q 220 651 220 656 m 949 654 q 963 644 963 650 l 953 637 l 949 637 q 943 644 943 637 l 943 651 q 949 654 949 651 m 973 654 q 977 644 977 648 q 892 414 902 424 q 854 502 892 437 l 858 515 l 854 529 l 858 553 q 854 573 858 555 q 939 614 854 590 l 939 617 l 929 617 q 926 614 926 617 q 916 617 919 617 l 916 624 q 936 634 919 634 q 956 627 947 627 q 970 654 964 627 l 973 654 m 634 539 l 634 532 l 641 532 l 641 546 q 634 539 634 545 m 634 519 l 634 515 l 641 515 l 641 526 q 634 519 634 524 m 492 512 l 492 498 l 498 498 l 498 502 q 495 512 495 509 l 492 512 m 617 495 l 617 488 l 624 488 l 624 502 q 617 495 617 500 m 695 471 l 702 468 q 712 478 707 468 q 709 481 709 478 q 695 471 695 477 m 322 458 l 322 451 q 383 410 370 410 q 400 407 395 410 q 427 417 427 410 l 424 417 q 387 414 394 414 q 339 448 376 414 l 326 458 l 322 458 m 627 454 l 627 451 q 634 444 629 444 l 634 454 l 627 454 m 719 420 q 688 424 707 420 q 644 393 663 410 l 644 387 q 651 366 644 377 q 648 336 648 348 l 654 332 l 658 363 l 651 376 q 736 417 651 413 l 753 410 l 753 417 q 739 434 739 417 q 719 420 736 434 m 529 431 l 529 427 l 536 417 q 492 397 536 406 q 488 407 488 404 l 485 407 l 475 400 q 441 417 455 417 l 471 390 l 465 376 q 468 373 468 376 q 522 397 515 397 l 522 393 l 529 397 q 532 393 532 397 q 546 404 546 399 l 546 417 q 536 431 536 417 l 529 431 m 624 417 l 624 414 q 637 400 629 414 q 644 407 644 400 l 644 410 q 634 420 634 410 q 624 417 627 417 m 770 407 l 770 404 q 777 397 771 397 l 783 397 l 783 404 l 770 407 m 597 404 l 597 397 l 600 397 q 607 404 607 397 l 597 404 m 553 400 q 559 393 554 393 l 573 393 l 573 397 l 556 400 l 553 400 m 434 363 q 420 329 420 335 q 424 319 424 322 l 427 319 q 437 359 437 351 l 437 363 l 434 363 m 658 329 q 668 271 668 283 q 658 258 663 271 l 661 258 q 675 292 675 261 q 665 329 668 302 l 658 329 m 427 312 q 410 288 427 300 l 410 285 l 417 285 q 434 302 422 285 q 431 312 431 309 l 427 312 m 614 281 l 624 281 l 624 288 l 621 288 q 614 281 614 287 m 410 275 l 410 264 q 417 258 412 258 l 417 268 q 410 275 417 275 m 604 271 q 532 258 604 260 l 526 261 q 478 244 503 251 l 478 241 q 485 234 479 234 l 488 234 q 522 254 501 245 q 559 244 549 251 q 566 254 559 250 q 604 241 593 251 l 607 241 l 604 248 l 604 251 l 610 261 l 610 264 q 604 271 610 271 m 621 258 l 631 251 q 641 264 636 251 l 634 268 l 631 268 q 621 258 626 268 m 844 271 l 844 268 l 810 170 l 807 170 q 787 197 807 176 q 800 207 787 205 l 800 214 l 797 237 q 844 271 814 266 m 417 241 q 400 224 417 227 l 400 217 q 424 231 418 217 l 424 241 l 417 241 m 715 220 l 715 217 l 719 217 q 726 224 726 217 l 726 241 q 715 220 715 237 m 621 237 l 624 220 l 627 220 l 627 237 l 621 237 m 529 186 l 529 183 q 549 200 543 188 l 549 217 q 529 186 529 205 m 658 214 l 658 203 q 668 214 663 203 l 658 214 m 366 210 l 366 203 l 380 203 q 387 210 387 203 l 366 210 m 661 190 l 661 170 l 671 170 q 726 193 726 184 l 726 200 q 719 207 726 207 l 715 207 l 712 186 l 688 186 l 678 180 l 671 180 l 671 183 l 702 210 l 692 210 l 661 190 m 526 170 l 526 166 q 532 159 527 159 l 532 176 q 526 170 526 175 m 780 119 l 790 119 l 790 125 l 787 125 q 780 119 780 124 m 434 27 l 434 24 l 437 24 q 451 41 444 25 l 448 41 q 434 27 442 41 m 400 34 l 400 27 q 414 31 406 31 l 414 37 l 410 37 q 400 34 404 34 m 519 31 l 526 27 l 529 34 l 529 37 l 526 37 q 519 31 519 36 m 261 742 q 251 709 251 726 l 254 695 l 248 675 q 254 668 254 673 l 251 654 q 278 617 261 635 l 278 614 q 261 593 267 593 l 254 593 q 248 607 254 607 l 241 590 q 244 580 244 583 q 197 536 197 554 l 200 536 q 264 566 238 559 q 298 607 275 589 q 342 593 314 607 q 400 624 349 593 q 420 600 406 608 q 448 604 445 604 q 502 549 471 604 q 512 536 507 536 q 478 475 511 521 l 478 465 q 485 458 479 458 q 515 515 485 469 l 522 515 q 573 342 562 349 q 634 539 621 520 q 637 529 634 529 q 634 526 637 526 q 648 485 640 485 l 651 485 l 651 492 l 644 502 l 644 515 q 695 529 644 520 l 712 526 q 756 529 741 529 q 800 519 760 529 q 824 529 817 529 q 844 458 844 498 q 841 431 844 455 q 882 339 882 371 q 848 322 860 322 q 807 332 819 322 l 797 332 q 848 315 797 321 l 865 319 q 871 309 868 309 q 858 278 867 290 q 861 268 858 268 q 834 214 861 214 q 797 186 834 208 q 773 136 797 160 l 763 142 l 746 142 q 736 125 739 142 l 746 119 q 756 132 751 132 l 763 132 l 760 125 l 760 122 l 777 125 q 797 102 777 119 q 800 88 800 96 q 793 81 793 87 l 777 85 l 770 85 l 770 81 q 783 75 775 81 l 800 75 q 777 34 794 34 l 780 17 q 743 -54 766 -54 l 600 -54 l 593 -51 q 600 -17 600 -26 q 597 17 600 -13 q 658 98 634 73 l 654 98 q 624 85 630 85 l 617 95 l 617 102 l 621 122 l 621 125 l 617 125 l 610 102 q 617 85 617 91 q 573 20 617 57 l 570 20 q 556 34 564 20 l 539 31 l 515 34 l 509 24 l 522 17 q 549 20 541 20 q 583 -14 583 14 q 566 -54 576 -54 l 522 -54 q 492 -51 510 -54 l 485 -54 q 475 -47 475 -51 q 451 -54 461 -54 q 424 -51 448 -54 l 400 -54 q 349 58 376 -54 q 329 115 339 71 l 332 115 l 400 51 q 407 41 400 41 l 417 41 q 451 44 433 41 q 492 17 492 44 l 498 17 q 505 24 505 17 q 481 58 505 43 l 448 58 l 414 54 q 376 95 414 66 l 376 102 l 390 105 l 390 115 l 387 115 l 373 105 q 353 125 359 125 l 356 132 l 356 136 q 281 254 307 136 q 241 376 241 365 q 305 420 269 404 q 326 434 312 434 q 332 427 327 427 l 336 427 q 373 543 353 492 q 346 573 368 543 l 349 580 q 342 587 349 587 q 332 576 342 576 q 359 543 334 568 l 359 539 q 336 509 350 525 l 336 485 q 288 431 336 449 q 275 420 288 420 l 258 424 q 241 407 258 419 l 237 407 q 186 529 224 407 q 190 539 190 536 q 180 559 180 543 q 190 576 180 576 l 190 580 l 170 580 q 139 675 139 663 q 153 685 153 680 q 142 695 148 685 l 142 705 q 186 715 186 705 l 186 722 l 170 726 q 136 712 136 726 l 136 709 l 129 709 q 119 736 119 711 l 119 739 q 132 746 132 739 l 105 763 q 92 804 99 794 l 92 814 q 125 831 101 814 q 119 838 125 838 q 186 922 119 922 q 214 888 208 888 l 224 888 q 248 899 236 899 q 275 868 258 899 q 307 854 282 868 q 332 912 319 878 l 336 912 q 380 838 336 903 q 387 763 380 798 q 383 760 383 763 q 400 726 397 760 q 326 682 400 699 q 261 726 261 688 l 261 742 z "},"W":{"ha":1289,"x_min":-136,"x_max":1431,"o":"m -129 1133 l -54 1133 q -47 1126 -47 1131 l -47 1116 q -75 1078 -75 1095 q -64 997 -64 1020 q -95 980 -81 994 q -119 1051 -100 980 l -115 1058 q -129 1112 -129 1083 q -122 1119 -122 1112 q -136 1122 -128 1122 l -136 1126 q -129 1133 -134 1133 m 92 1133 l 95 1119 l 98 1119 q 176 1133 98 1133 l 180 1133 q 227 1109 227 1133 q 268 892 248 980 l 264 885 l 264 878 l 271 868 l 271 858 q 227 827 239 858 q 125 790 190 790 q 85 865 104 818 l 88 882 q 61 977 70 933 q 10 1007 42 977 l 3 1007 q -31 997 -28 997 q -54 1078 -45 997 q -20 1133 -29 1108 l 92 1133 m 597 1119 q 624 1116 611 1119 q 651 1119 637 1119 l 678 1119 q 685 1112 685 1118 l 685 1109 q 661 1099 661 1105 l 661 1092 q 668 1085 663 1085 l 685 1109 l 702 1105 q 736 1119 713 1105 l 743 1116 l 773 1119 l 777 1112 q 760 1095 772 1112 l 753 1099 l 746 1099 l 746 1095 q 756 1085 746 1090 l 760 1085 q 793 1105 779 1105 q 841 861 800 1105 l 817 824 l 821 810 q 800 777 811 777 l 800 773 q 817 763 817 770 l 817 756 q 766 665 791 728 l 766 644 q 760 641 760 644 l 753 644 l 749 644 q 743 637 743 643 q 800 610 747 629 q 824 590 824 599 q 831 566 824 574 l 831 532 q 838 509 832 509 l 824 492 q 790 509 804 505 l 787 509 l 787 505 q 807 488 799 505 q 766 400 807 463 q 736 319 766 366 l 739 319 q 777 400 777 345 q 804 420 793 420 l 804 431 q 831 488 823 488 l 854 488 q 895 498 884 488 l 912 498 q 922 437 922 465 q 909 431 914 431 l 909 424 q 936 448 936 424 l 946 502 l 963 502 q 1068 529 963 519 q 1139 556 1075 546 q 1204 539 1139 539 l 1221 539 q 1244 495 1244 529 l 1241 488 q 1244 478 1241 485 q 1241 441 1241 455 l 1241 437 l 1244 417 q 1207 292 1215 296 q 1197 285 1197 292 l 1197 271 q 1183 227 1197 240 l 1183 217 l 1194 224 l 1194 220 q 1146 166 1173 181 q 1116 85 1128 144 q 1119 81 1119 85 l 1112 81 q 1085 119 1107 81 q 1044 159 1057 131 l 1014 170 l 1007 170 l 1007 166 q 1051 129 1051 151 q 1109 68 1082 119 l 1109 64 l 1105 47 l 1116 41 q 1139 122 1129 71 q 1180 170 1155 160 l 1180 166 q 1129 -14 1140 -14 l 1095 -14 q 1088 -7 1088 -14 q 1095 31 1088 -3 l 1095 44 q 1078 -10 1085 44 l 1061 -14 l 970 -14 q 949 -3 952 -14 l 949 3 q 973 58 949 9 l 973 61 l 970 61 q 932 3 940 3 q 902 14 914 14 q 878 0 878 3 q 817 24 827 24 q 797 17 806 17 l 790 17 q 756 75 760 17 l 756 85 q 760 115 756 97 q 753 136 753 129 l 749 136 l 749 129 q 743 136 743 129 l 743 139 l 753 139 l 753 153 q 699 359 731 153 q 675 495 675 448 l 692 492 q 719 495 705 495 l 719 502 l 715 502 q 699 495 699 501 q 658 546 663 495 q 641 631 658 566 q 597 556 597 583 l 563 529 l 563 532 l 583 600 l 580 621 q 604 654 599 637 l 610 654 l 610 658 q 593 668 602 658 l 590 668 q 583 661 583 667 l 583 658 q 587 654 583 654 q 566 624 587 650 q 536 519 566 530 q 563 512 563 519 q 492 431 528 431 q 468 400 468 415 l 468 397 l 475 387 l 475 373 q 451 353 451 368 l 434 353 q 376 342 401 342 l 366 342 l 366 346 q 404 390 404 376 q 339 342 353 351 q 312 339 325 342 q 271 353 286 353 l 268 353 l 241 339 q 203 342 218 342 q 180 329 198 329 l 170 329 l 173 336 q 125 363 140 363 q 122 359 122 363 q 102 366 109 366 l 102 376 q 112 383 107 376 l 109 400 q 176 536 109 449 l 190 536 l 190 539 q 170 559 170 539 q 180 580 170 580 l 180 583 l 176 583 q 166 580 170 580 q 156 614 159 588 q 176 648 156 617 l 176 658 q 122 709 122 684 q 149 760 125 728 q 156 763 156 760 l 173 760 q 251 817 251 779 l 264 824 q 295 715 281 824 l 336 502 q 329 495 329 500 l 329 492 q 349 431 339 484 l 353 431 q 383 485 359 485 q 407 495 397 488 l 410 495 q 420 475 420 492 l 420 458 q 431 454 424 458 l 444 471 q 420 495 420 471 q 465 519 420 515 q 471 512 466 512 l 475 512 l 475 515 q 454 526 471 526 q 387 492 429 522 l 376 492 l 366 498 l 444 892 q 498 899 460 892 q 549 875 549 890 q 543 838 546 868 l 546 817 q 543 807 543 810 q 597 739 545 784 q 607 709 597 728 l 590 682 l 590 678 l 600 678 q 614 699 600 692 q 627 671 619 671 l 634 671 l 634 675 l 604 753 q 556 817 559 798 l 559 834 q 553 861 553 846 l 553 865 q 587 963 563 942 l 583 963 q 559 936 581 963 l 559 916 l 536 909 l 522 909 q 495 916 519 909 l 471 909 l 454 909 q 448 916 448 909 q 492 1119 482 1101 l 597 1119 m 1373 1133 l 1373 1122 q 1309 1095 1373 1099 q 1299 1099 1302 1099 q 1261 1014 1261 1084 q 1251 994 1257 994 l 1234 994 q 1187 1010 1222 994 q 1136 990 1170 999 l 1126 990 q 1112 994 1118 990 q 1034 970 1094 983 l 1031 977 q 1065 1133 1055 1133 l 1373 1133 m 1424 1119 q 1431 1112 1426 1112 q 1407 1075 1428 1097 l 1407 1072 q 1417 1068 1417 1072 q 1343 770 1346 770 q 1319 688 1329 688 l 1312 688 q 1305 715 1312 699 q 1309 739 1309 729 q 1295 783 1299 783 q 1316 848 1316 835 q 1265 916 1265 888 q 1258 960 1261 921 l 1278 970 l 1295 970 q 1289 980 1292 980 q 1305 1051 1297 1001 q 1363 1072 1328 1072 q 1390 1068 1376 1068 q 1424 1119 1390 1095 m 1116 1109 l 1116 1105 l 1122 1105 q 1133 1116 1127 1105 l 1126 1119 q 1116 1109 1121 1119 m 81 1109 l 81 1102 q 88 1109 88 1102 l 88 1116 q 81 1109 81 1114 m 81 1092 q 61 1034 77 1053 l 61 1031 q 88 1088 75 1031 l 81 1092 m 1102 1072 l 1102 1068 l 1112 1068 l 1112 1078 l 1109 1078 q 1102 1072 1102 1077 m 214 1055 l 214 1051 l 217 1044 q 231 1058 227 1047 l 224 1061 l 220 1061 q 214 1055 214 1060 m 41 1007 l 41 1004 l 51 1004 l 54 1010 l 51 1010 q 41 1007 44 1007 m 203 1000 l 197 980 l 200 980 q 217 1000 217 988 l 203 1000 m 644 1000 l 644 994 l 661 994 l 678 997 l 678 1000 l 644 1000 m 1190 994 q 1227 980 1203 986 q 1224 960 1224 962 q 1265 882 1239 882 q 1285 844 1265 880 q 1268 790 1268 805 l 1282 770 l 1278 763 l 1278 760 l 1289 739 q 1248 692 1289 692 q 1217 661 1248 686 q 1224 641 1224 648 l 1231 641 q 1285 685 1251 685 l 1295 685 l 1305 678 q 1265 515 1302 672 l 1258 515 q 1255 526 1258 519 l 1261 566 q 1251 604 1255 576 l 1255 610 q 1234 634 1247 631 l 1234 600 q 1244 566 1234 593 q 1238 559 1238 565 q 1221 570 1221 566 l 1214 566 l 1170 566 q 1143 587 1154 566 l 1139 587 q 1044 556 1088 580 q 1000 549 1034 556 l 980 553 q 953 536 971 536 q 949 539 953 539 q 1027 929 1004 836 q 1099 963 1027 956 q 1180 983 1103 970 q 1190 994 1180 988 m -61 966 l -31 966 q 17 939 -5 939 q 41 848 17 932 l 41 838 q 37 834 41 834 q 51 797 51 814 l 51 780 q 78 760 63 780 l 81 760 l 81 756 q 75 729 81 741 q 78 699 78 711 q 75 678 75 681 l 125 651 q 98 587 98 626 q 81 576 91 576 q 88 570 83 570 l 92 570 l 105 580 q 119 543 119 566 q 64 444 119 534 q 54 417 64 429 l 58 393 q 24 373 58 383 q 10 420 10 398 l 17 424 q 37 417 28 417 l 44 417 q -7 481 -7 440 q -68 719 -64 717 q -64 729 -64 726 l -58 729 q 47 756 34 746 l 47 760 l 44 760 l -61 736 l -71 736 l -75 760 q -54 773 -54 766 l -54 777 l -64 777 l -75 770 q -119 932 -81 770 l -119 939 q -61 966 -119 959 m 729 973 l 729 970 l 736 970 q 739 980 736 973 l 736 980 q 729 973 729 979 m -17 943 l -17 932 q 0 939 -8 939 l 0 943 l -17 943 m 1319 885 q 1305 871 1316 871 l 1305 865 q 1326 882 1320 869 l 1319 885 m 1024 865 l 1024 858 l 1034 858 l 1034 865 l 1024 865 m 844 848 q 865 743 857 843 q 851 736 851 743 q 899 593 873 736 q 905 532 905 559 q 892 512 892 532 l 885 512 q 848 529 880 517 l 844 563 l 844 607 l 834 621 q 844 644 834 632 l 844 654 q 817 627 820 627 q 777 658 795 633 l 777 668 q 834 760 814 760 q 827 804 827 795 q 844 848 837 848 m 1207 766 q 1214 739 1214 742 q 1197 726 1207 726 l 1197 709 l 1200 709 l 1211 715 l 1227 715 q 1261 746 1227 724 q 1268 763 1261 752 l 1261 763 q 1244 743 1247 763 l 1234 743 l 1234 749 l 1241 760 l 1241 763 l 1231 763 q 1224 753 1231 753 l 1221 753 q 1211 766 1221 766 l 1207 766 m 1143 743 l 1149 739 l 1153 746 l 1153 749 l 1149 749 q 1143 743 1143 748 m 20 736 l 27 732 l 31 739 l 31 743 l 27 743 q 20 736 20 741 m 268 695 q 258 675 258 677 q 261 665 261 668 l 268 665 q 275 695 271 689 l 268 695 m 865 695 q 861 685 865 692 l 861 682 l 865 682 q 868 692 865 685 l 868 695 l 865 695 m 627 671 l 627 665 l 634 665 q 658 675 646 675 l 678 675 q 743 661 686 665 q 719 678 738 678 l 695 678 q 668 692 681 692 l 658 692 q 634 678 648 692 q 627 671 627 677 m 1173 671 q 1200 665 1190 671 l 1204 671 l 1197 682 q 1173 671 1173 678 m 1112 658 l 1112 654 q 1119 648 1114 648 l 1122 648 l 1122 658 l 1112 658 m 624 610 l 631 610 q 604 522 616 522 l 600 522 q 593 529 600 529 l 590 529 l 590 522 q 610 509 604 522 l 583 387 l 580 387 q 583 376 583 380 q 576 339 583 368 l 570 339 q 495 383 539 339 q 478 410 486 383 q 529 444 499 436 q 590 553 572 494 q 617 607 603 560 l 624 610 m 481 563 l 481 559 l 488 559 q 495 566 495 559 l 495 570 l 488 570 q 481 563 481 568 m 197 553 q 203 546 198 546 l 214 546 l 214 549 l 197 553 m 244 553 l 244 549 q 261 539 244 543 l 261 546 q 254 553 254 546 l 244 553 m 739 536 l 739 529 l 749 529 l 773 526 l 763 539 q 739 536 749 536 m 492 536 l 492 529 l 509 529 q 515 536 515 529 l 492 536 m 271 532 l 271 526 q 288 519 280 526 l 288 522 q 271 532 288 530 m 732 522 q 726 509 732 517 l 726 505 l 736 505 l 739 522 l 732 522 m 298 512 l 298 505 q 319 515 316 505 q 298 512 314 512 m 431 461 q 417 420 431 452 q 444 444 437 431 l 444 448 q 437 461 437 456 l 431 461 m 261 451 q 264 441 264 444 l 271 441 q 275 451 271 444 l 268 454 l 261 451 m 183 437 l 193 437 l 193 444 l 190 444 q 183 437 183 443 m 960 444 l 960 434 l 966 434 l 966 444 l 960 444 m 807 431 l 807 427 l 838 387 l 838 390 q 807 431 823 420 m 119 404 l 119 400 q 125 393 120 393 l 129 393 l 129 404 l 119 404 m 88 380 q 159 339 109 363 q 170 342 166 342 q 163 336 170 336 q 176 319 170 320 l 210 336 q 231 329 221 329 q 275 342 262 342 l 278 342 l 298 332 l 366 339 q 387 332 380 332 q 397 342 387 337 l 400 342 l 400 336 q 383 326 400 326 q 397 298 383 313 l 397 295 q 353 197 382 232 q 346 180 347 197 l 346 176 q 353 139 353 144 l 342 139 l 342 129 l 359 132 q 363 119 359 125 q 353 92 353 102 l 353 68 q 309 37 345 54 q 305 0 309 0 q 237 31 254 10 q 193 61 233 31 q 129 68 136 68 l 54 363 q 88 380 54 375 m 492 366 q 526 339 492 346 l 573 315 q 532 132 543 161 q 475 81 512 132 l 461 81 q 471 61 471 68 q 427 0 443 0 l 339 0 q 315 10 328 0 q 349 47 320 47 q 376 115 368 107 l 376 125 q 353 173 368 131 q 397 261 397 245 q 410 285 397 270 l 410 298 q 397 309 410 307 l 397 315 q 448 349 410 349 q 492 366 453 366 m 770 326 q 780 285 773 299 q 777 271 777 279 l 777 268 l 783 268 q 790 275 790 268 q 783 295 783 286 l 787 302 q 773 326 779 326 l 770 326 m 865 326 l 865 322 l 868 302 q 861 295 861 300 q 899 237 888 295 q 966 207 907 228 q 994 186 966 202 l 1000 186 l 1000 190 q 919 231 949 231 q 892 295 899 248 q 868 326 874 295 l 865 326 m 821 295 l 817 295 l 793 302 l 793 295 l 817 288 q 848 302 838 302 q 851 298 848 298 l 854 305 q 844 309 848 309 l 821 295 m 119 292 l 119 285 q 125 278 120 278 l 129 285 l 129 292 l 119 292 m 770 214 l 773 214 q 790 251 780 214 l 787 251 q 770 214 775 251 m 773 197 q 766 159 766 164 l 773 159 q 780 193 780 189 l 773 197 m 329 170 l 329 159 l 332 159 q 339 166 339 159 l 339 170 l 329 170 m 977 115 l 977 112 q 1007 142 981 112 l 1007 146 q 977 115 1003 146 m 254 132 l 254 125 l 264 125 q 271 132 271 125 l 271 142 l 268 142 q 254 132 260 132 m 312 102 l 312 98 l 319 98 l 336 102 l 336 112 l 332 112 q 312 102 312 109 m 522 109 l 529 109 l 529 105 q 502 0 515 0 l 468 0 q 461 7 461 0 q 468 14 463 14 l 465 20 l 465 24 q 488 75 481 39 q 522 109 490 75 m 193 92 l 190 78 l 207 78 l 207 92 l 193 92 m 414 88 q 444 71 414 81 l 448 78 q 417 88 428 78 l 414 88 m 322 71 l 319 64 l 326 61 l 329 68 l 322 71 m 136 47 q 142 41 142 46 l 142 37 l 136 37 l 136 47 m 159 47 q 210 17 194 47 q 237 3 237 12 l 231 0 l 227 0 l 217 7 q 197 0 206 0 l 186 0 q 142 10 142 0 l 142 17 q 156 47 151 17 l 159 47 m 824 20 q 851 3 843 15 l 851 0 l 780 0 q 773 7 773 0 q 824 20 773 12 m 895 7 l 916 7 q 905 0 916 0 q 895 3 899 3 l 895 7 z "},"X":{"ha":1153,"x_min":0,"x_max":1190,"o":"m 41 1153 l 88 1153 q 95 1146 95 1152 q 92 1133 95 1139 q 112 1061 99 1099 l 102 1055 l 98 1055 q 41 1153 41 1143 m 119 1153 l 356 1153 q 393 1149 370 1153 q 420 1153 397 1153 l 437 1153 q 505 1055 462 1153 q 556 960 543 999 q 549 953 549 958 l 553 953 q 563 956 559 956 q 614 875 585 909 l 705 1027 q 726 1007 722 1007 l 722 973 l 722 946 l 719 929 q 770 899 770 905 q 746 865 746 879 l 746 841 q 726 827 746 834 q 732 821 727 821 l 736 821 l 746 827 l 749 827 q 763 793 763 824 q 712 699 763 787 q 699 665 712 684 l 702 644 q 641 617 702 631 l 610 644 l 610 641 q 634 614 625 614 q 644 604 637 614 q 600 532 633 532 q 549 468 600 490 q 495 424 511 424 q 461 400 487 424 l 451 400 l 451 407 l 444 407 q 407 292 427 332 q 434 258 412 292 l 431 251 q 437 244 432 244 q 448 258 437 250 q 420 288 448 262 l 420 295 l 444 322 l 444 346 q 509 410 444 385 q 539 424 525 410 l 543 424 q 631 336 570 411 l 631 322 q 614 309 629 315 q 597 332 601 332 l 593 332 q 529 271 559 271 q 481 224 522 271 q 434 241 452 227 q 390 210 390 218 l 383 210 l 356 234 q 336 227 345 227 q 271 295 302 235 l 271 312 q 302 363 302 347 l 302 373 l 295 373 q 261 309 295 363 q 220 292 261 299 q 210 281 220 289 q 180 292 180 285 l 180 295 l 302 471 l 309 488 l 315 488 q 336 481 325 488 q 390 485 370 485 l 404 485 q 451 444 418 468 l 451 434 l 458 434 l 458 451 q 393 492 406 492 q 342 485 380 492 q 322 502 322 490 q 393 617 393 606 l 366 658 l 366 671 q 380 675 368 671 l 380 678 l 376 685 l 359 675 l 353 675 q 288 780 288 776 q 309 773 299 773 l 322 773 q 326 777 326 773 l 332 773 l 366 777 q 404 736 366 768 l 404 729 l 390 726 l 390 719 l 397 719 l 407 726 l 414 726 q 498 658 414 705 l 583 682 l 600 678 l 604 678 q 634 682 616 678 q 688 668 659 668 q 631 695 686 678 l 617 695 q 614 692 614 695 l 583 702 q 526 685 583 690 q 502 675 526 680 q 366 793 463 701 q 326 787 347 793 q 288 814 288 787 l 281 814 l 271 807 q 115 1034 258 817 q 139 1092 139 1086 l 132 1092 l 129 1075 l 122 1075 q 112 1099 114 1075 l 115 1112 q 105 1129 109 1129 q 119 1153 111 1153 m 787 1153 q 790 1149 790 1153 l 814 1153 l 868 1153 q 871 1149 871 1153 l 878 1153 l 885 1153 q 902 1139 902 1153 l 909 1139 q 919 1153 911 1153 l 963 1153 q 990 1146 987 1146 l 1004 1146 l 1004 1136 l 970 1136 q 912 1078 920 1078 l 905 1078 l 895 1085 l 865 1085 q 770 1024 826 1024 q 743 1021 762 1024 l 719 1055 q 787 1153 766 1153 m 1177 1149 l 1187 1149 q 1177 1136 1182 1136 q 1173 1139 1177 1139 q 1177 1149 1177 1146 m 1058 1146 q 1099 1136 1092 1136 q 1143 1143 1139 1143 q 1190 1126 1190 1134 l 1190 1122 q 983 821 1190 1110 q 939 756 939 762 l 916 763 l 916 756 q 929 746 929 756 q 902 719 923 728 q 838 614 895 692 l 851 590 q 824 573 842 573 q 770 607 786 607 q 766 604 766 607 q 746 610 753 610 l 746 621 q 756 624 749 621 q 753 651 753 643 q 810 770 763 701 q 817 790 817 781 l 814 807 q 817 824 817 812 q 800 858 802 824 l 824 895 q 770 932 823 907 q 766 949 770 949 l 770 956 l 770 973 q 793 1004 781 973 q 804 1007 804 1004 l 810 1004 l 817 1004 q 895 1061 895 1022 l 902 1065 l 912 1065 l 953 1058 q 973 1078 962 1058 l 970 1085 l 970 1092 q 997 1112 988 1092 q 1041 1139 1022 1122 q 1058 1146 1058 1139 m 329 1072 l 329 1068 q 336 1061 330 1061 q 342 1068 342 1061 l 342 1072 l 329 1072 m 159 1031 l 159 1027 l 176 1024 l 180 1024 l 180 1031 l 159 1031 m 237 1027 q 248 1021 237 1021 l 251 1021 l 251 1024 l 237 1027 m 261 1021 q 268 1014 262 1014 l 271 1014 l 271 1021 l 261 1021 m 987 1010 l 994 1007 l 1004 1021 l 997 1021 q 987 1010 992 1021 m 437 1014 l 437 1000 l 444 1004 q 441 1014 441 1010 l 437 1014 m 292 1007 l 292 990 l 298 990 l 298 1007 l 292 1007 m 515 980 l 522 980 q 529 987 529 980 l 529 994 l 526 994 q 515 980 521 994 m 319 973 l 349 949 l 353 949 l 353 960 q 319 973 350 960 m 393 960 l 400 956 l 404 963 l 404 966 l 400 966 q 393 960 393 965 m 481 946 l 488 946 q 495 953 495 946 l 495 966 q 481 946 490 966 m 261 946 l 261 939 l 275 939 l 275 946 q 268 953 275 953 q 261 946 261 951 m 936 929 l 936 926 l 943 926 l 943 936 q 936 929 936 935 m 885 926 q 878 909 885 918 l 878 895 l 885 895 q 892 926 888 920 l 885 926 m 1004 919 l 1004 916 l 1007 916 q 1014 922 1014 916 l 1014 926 l 1010 926 q 1004 919 1004 924 m 359 895 l 359 888 q 366 895 366 888 l 366 902 q 359 895 359 901 m 437 882 l 444 878 l 448 885 l 448 888 l 444 888 q 437 882 437 887 m 848 878 q 854 871 849 871 l 858 871 l 858 878 l 848 878 m 326 858 l 332 858 q 342 868 337 858 l 342 875 q 326 858 334 873 m 366 868 l 370 861 q 380 865 376 865 l 380 871 q 366 868 374 868 m 865 777 l 865 773 q 878 770 872 773 l 878 777 q 871 783 871 777 q 865 777 865 782 m 387 688 l 407 688 q 414 695 414 688 l 393 695 q 387 688 387 694 m 800 675 l 800 668 l 810 668 l 810 675 l 800 675 m 739 634 l 739 624 l 746 624 q 749 634 746 627 l 739 634 m 712 610 q 773 570 717 598 l 777 570 l 783 573 q 793 549 783 549 q 827 563 820 563 q 899 475 850 563 q 949 390 946 408 q 966 373 958 390 l 960 363 l 960 359 l 963 359 q 973 363 970 363 q 980 346 980 352 q 953 281 965 281 q 922 231 924 281 q 848 264 878 237 q 787 295 814 295 q 715 305 715 300 q 685 298 709 302 q 658 336 679 298 q 604 390 628 381 q 556 434 604 399 q 614 478 578 462 q 654 529 628 529 q 678 607 659 566 q 712 610 701 607 m 736 519 l 736 515 q 743 509 737 509 l 746 515 l 746 526 l 743 526 q 736 519 736 524 m 871 363 l 871 356 l 882 356 q 888 363 888 356 l 888 370 l 885 370 q 871 363 877 363 m 929 332 l 929 329 l 936 329 l 953 332 l 953 342 l 949 342 q 929 332 929 339 m 990 336 l 1058 231 l 1017 210 q 966 176 1008 210 l 963 176 q 932 241 936 241 q 973 285 932 267 q 990 336 978 336 m 770 329 l 766 322 l 773 319 l 777 326 l 770 329 m 810 315 l 810 309 l 824 309 l 824 315 q 817 322 824 322 q 810 315 810 321 m 651 319 q 688 254 656 286 q 658 237 669 254 q 624 295 650 237 l 651 319 m 939 302 l 936 295 q 943 288 937 288 q 946 298 943 292 l 939 302 m 685 285 l 709 285 q 695 261 709 267 q 678 271 684 271 l 678 278 q 685 285 680 285 m 254 281 q 295 227 262 281 q 315 207 310 227 q 342 217 342 215 q 370 197 355 217 q 285 132 333 157 q 264 105 275 110 l 261 105 q 220 125 229 116 q 173 146 193 146 l 139 132 q 81 149 81 144 q 159 268 155 257 q 224 264 213 264 q 254 281 250 281 m 726 281 l 743 281 l 760 278 l 756 254 l 766 248 q 777 278 770 278 q 831 244 810 278 l 834 244 l 831 237 l 831 234 l 838 234 l 838 241 l 848 241 q 885 217 885 223 l 902 220 l 922 220 q 926 210 922 217 l 916 193 l 919 186 l 926 190 l 929 190 q 943 173 934 190 l 943 156 q 902 125 943 137 l 858 102 l 851 105 l 838 105 l 838 102 q 844 95 839 95 q 929 132 873 95 q 943 139 943 132 q 956 136 949 136 l 956 129 q 926 109 926 114 l 929 109 q 960 122 951 122 q 983 78 983 84 l 980 54 q 983 51 983 54 q 1004 54 989 54 q 983 119 1004 77 q 970 159 979 149 q 1007 190 970 161 l 1010 190 q 1014 186 1014 190 q 1061 217 1050 198 q 1082 190 1075 217 q 1065 186 1076 186 l 1065 176 q 1082 163 1082 176 l 1095 173 l 1099 173 q 1166 58 1166 66 q 1163 54 1163 58 q 1190 27 1180 54 l 1183 24 l 1095 24 q 1058 27 1081 24 q 1048 24 1051 24 q 1044 37 1044 30 l 1027 37 l 1034 27 q 1024 24 1031 27 l 1024 27 l 1017 24 l 1004 24 l 980 27 l 980 24 q 970 27 973 27 q 977 51 977 49 l 970 54 l 963 54 q 939 24 963 24 l 895 24 q 861 31 888 24 q 854 24 861 24 l 787 24 q 780 31 780 24 l 780 41 q 807 75 806 65 l 800 75 q 770 54 800 64 q 705 156 750 54 l 705 159 l 709 166 q 668 217 688 166 q 661 224 661 217 l 661 227 l 678 224 q 712 261 688 261 q 726 281 720 281 m 722 258 q 729 251 724 251 l 732 251 q 739 258 739 251 l 739 261 l 722 258 m 699 241 l 699 237 l 702 237 q 709 244 709 237 l 709 248 l 705 248 q 699 241 699 246 m 515 241 l 526 241 l 526 231 l 519 207 l 512 207 q 502 217 507 207 q 515 241 515 237 m 715 214 l 722 214 l 726 231 l 726 234 q 715 214 715 231 m 448 220 q 509 197 509 213 l 509 190 q 424 41 427 51 l 417 41 q 400 58 414 41 l 404 71 q 393 136 404 94 q 397 139 397 136 q 380 173 384 139 q 448 220 380 195 m 719 207 l 719 193 l 732 193 q 722 207 728 207 l 719 207 m 790 200 q 777 159 785 193 l 783 156 q 797 197 794 156 l 790 200 m 298 197 q 292 176 298 187 l 295 176 l 305 197 l 298 197 m 278 156 l 285 153 l 285 163 q 278 156 278 161 m 349 129 l 356 129 q 390 44 364 129 l 387 27 l 387 -3 q 380 -10 387 -10 l 281 -10 l 268 0 l 254 -10 l 81 -10 q 71 3 77 -10 q 17 -10 53 -10 l 17 -7 l 10 -10 l 7 -10 q 0 -3 0 -10 q 78 102 71 102 q 139 88 80 102 q 180 102 152 96 q 217 78 204 102 q 268 58 261 68 q 261 17 264 54 l 268 17 q 349 129 268 90 m 1061 142 q 1068 112 1065 118 q 1092 122 1085 122 l 1092 132 q 1075 139 1092 139 l 1078 146 l 1078 153 l 1072 153 q 1061 142 1067 153 m 793 142 l 793 139 l 804 139 l 804 146 q 793 142 797 142 m 831 142 l 827 136 l 838 136 q 831 142 838 142 m 1021 139 l 1021 132 q 1027 125 1022 125 l 1038 125 l 1038 136 l 1021 139 m 787 92 l 793 88 q 800 95 800 88 l 800 98 l 793 98 q 787 92 787 97 m 1058 47 l 1058 44 q 1109 68 1067 44 l 1149 64 l 1149 71 q 1116 75 1145 71 q 1058 47 1068 61 m 851 61 l 844 41 l 848 41 q 865 51 865 45 l 865 61 l 851 61 m 400 37 l 404 31 l 404 27 l 393 27 l 393 31 q 400 37 395 37 z "},"Y":{"ha":1085,"x_min":-68,"x_max":1136,"o":"m -61 1129 l -34 1129 q -31 1126 -31 1129 l -24 1129 q -14 1126 -14 1129 l 20 1129 l 85 1129 q 119 1126 101 1129 q 149 1129 132 1129 l 183 1129 q 203 1102 203 1129 q 197 1075 203 1092 q 200 1044 200 1057 l 200 1041 q 132 953 195 1013 q 71 926 71 938 l 75 892 l 71 892 q 58 922 58 897 q 64 929 64 922 l 54 936 q 44 932 47 932 l 27 960 q 31 973 31 966 q 14 987 14 973 l 17 1004 l 10 1000 l 7 1000 q -68 1126 -31 1055 l -61 1129 m 207 1129 l 315 1129 q 342 1099 342 1129 l 329 1078 l 332 1078 l 346 1088 l 353 1088 l 400 990 l 397 990 q 359 1017 378 1017 q 322 1010 346 1010 l 319 1010 q 292 1038 292 1010 l 281 1038 l 278 1021 q 305 994 278 1017 l 370 1000 q 410 956 370 989 q 451 895 410 949 q 519 756 451 891 q 515 753 515 756 l 522 753 q 604 899 527 753 q 634 905 622 899 q 695 888 652 895 q 631 919 695 898 l 614 916 l 614 919 q 726 1129 711 1129 l 756 1129 q 773 1122 773 1128 q 749 1065 749 1101 q 732 1044 749 1059 l 743 1044 l 753 1051 q 766 1014 766 1048 q 722 932 766 1005 q 702 892 711 892 l 705 868 l 705 861 q 648 838 705 854 l 617 865 l 614 865 q 648 827 625 840 q 614 756 638 756 q 593 715 600 756 q 509 644 547 689 q 471 624 479 644 q 458 621 460 621 q 454 631 454 627 l 448 631 l 448 624 q 414 512 448 615 q 437 481 428 496 l 437 461 q 390 431 401 441 l 363 454 q 336 451 345 451 q 275 526 306 451 q 305 576 275 534 l 305 590 q 298 597 305 597 q 268 536 298 581 l 264 536 q 163 712 173 682 q 132 763 142 732 q 139 783 139 774 q 115 821 133 783 l 115 814 q 129 777 121 789 l 125 777 q 64 882 64 863 q 71 899 65 899 l 68 905 l 68 922 q 81 936 68 926 l 88 932 l 95 932 l 109 943 l 112 943 l 112 936 q 78 916 89 916 l 78 909 l 81 909 q 129 953 129 922 q 159 966 147 966 l 163 966 l 163 960 l 170 960 l 170 963 q 166 977 170 970 q 210 1034 166 987 q 231 1021 214 1034 q 241 1024 234 1021 q 271 1021 259 1021 l 275 1027 q 268 1034 275 1034 l 227 1034 q 203 1068 203 1042 q 210 1112 203 1082 l 207 1129 m 821 1129 l 888 1129 l 902 1116 q 912 1129 907 1129 l 1021 1129 q 1051 1126 1033 1129 q 1075 1129 1055 1129 l 1102 1129 l 1119 1119 q 1126 1126 1120 1126 l 1136 1126 l 1136 1122 q 1085 1041 1100 1058 q 1017 953 1059 974 l 1024 953 q 1034 956 1031 956 l 1034 953 q 946 807 954 807 l 936 807 q 902 817 924 817 q 871 804 878 804 q 841 810 850 810 q 817 797 836 797 l 814 797 l 766 831 l 760 827 l 756 827 l 739 831 l 739 841 q 746 848 741 848 l 743 861 q 804 997 745 907 l 804 1000 l 827 1000 l 851 997 l 851 1004 l 848 1004 l 807 1007 l 807 1044 q 790 1078 790 1044 l 821 1129 m 865 1102 l 865 1095 l 878 1095 l 878 1102 l 865 1102 m -7 1044 q 17 1024 1 1024 l -7 1044 m 882 1004 l 882 997 q 939 956 887 997 q 956 963 950 963 l 956 966 l 946 966 l 946 963 q 885 1004 928 968 l 882 1004 m 258 980 l 258 977 q 264 943 264 968 q 271 949 271 943 l 271 953 q 264 980 271 956 l 258 980 m 966 960 l 966 953 l 983 949 l 1004 949 q 1010 956 1010 949 q 966 960 989 956 m 176 929 l 183 929 l 186 946 l 186 949 q 176 929 176 946 m 407 943 l 407 939 l 414 939 q 420 946 420 939 l 420 949 l 414 949 q 407 943 407 948 m 892 949 l 892 939 l 899 939 l 899 949 l 892 949 m 248 905 q 268 936 268 918 q 248 905 253 936 m 400 909 l 404 909 l 434 912 l 434 919 q 400 909 400 916 m 129 909 l 136 905 l 139 912 l 139 916 l 136 916 q 129 909 129 914 m 902 909 l 895 899 l 902 895 l 909 895 l 909 902 q 902 909 909 909 m 373 878 l 380 878 q 393 899 380 897 l 393 902 l 390 902 q 373 878 373 897 m 170 892 l 170 882 l 176 882 l 176 892 l 170 892 m 275 868 q 241 878 250 871 l 237 878 q 231 868 237 873 q 200 882 200 871 l 193 882 l 193 878 q 197 868 197 871 q 190 861 190 867 l 190 854 q 264 865 228 861 q 275 861 271 861 q 322 878 317 878 q 319 888 319 885 l 312 888 q 275 868 292 870 m 163 871 l 163 854 l 166 854 l 183 858 l 183 865 q 170 871 178 865 l 163 871 m 380 871 l 380 861 q 387 854 381 854 l 387 865 q 380 871 387 871 m 756 858 l 756 851 q 763 844 758 844 l 766 844 l 766 858 l 756 858 m 383 848 q 366 821 383 840 l 370 797 l 356 753 l 363 753 l 376 790 l 373 821 q 390 844 390 827 l 383 848 m 749 831 q 810 793 758 819 l 810 790 l 817 793 l 824 793 l 824 790 l 821 783 q 824 773 824 777 l 831 773 q 861 787 846 773 l 885 783 l 888 783 q 932 793 920 793 q 953 787 943 787 l 953 777 q 810 546 830 566 l 807 546 l 810 539 l 810 536 q 797 519 802 519 q 753 529 778 519 l 756 536 l 756 539 l 749 539 q 719 519 749 519 q 682 573 705 548 q 637 617 682 587 q 593 654 637 627 q 654 705 607 674 q 695 753 667 753 q 719 827 695 795 q 749 831 737 831 m 275 726 l 271 726 q 268 729 268 726 q 251 715 252 722 l 251 705 q 261 702 254 705 q 312 726 261 718 l 309 719 l 315 719 q 319 726 315 726 q 353 702 350 702 q 390 709 390 705 q 448 678 433 709 q 471 658 471 673 l 475 658 l 475 678 q 420 712 467 678 l 407 712 q 359 709 389 712 q 322 729 353 709 q 332 739 322 739 l 332 749 q 275 726 281 726 m 753 743 l 753 732 l 763 732 l 763 743 l 753 743 m 214 722 q 217 719 217 722 q 241 722 221 722 q 234 729 241 729 l 220 729 q 214 722 214 728 m 183 715 l 190 715 q 200 719 197 719 l 200 722 l 190 722 q 183 715 183 721 m 563 648 q 651 543 648 573 q 583 512 627 524 q 532 485 575 498 q 502 448 508 448 l 492 448 q 454 475 454 450 l 458 475 l 471 471 q 437 512 452 498 l 437 515 l 461 543 l 461 566 q 509 621 475 621 q 522 634 509 634 q 536 631 528 631 q 563 648 554 648 m 302 621 l 302 607 q 309 600 303 600 l 309 621 l 302 621 m 665 539 q 688 488 668 539 q 709 478 697 488 l 719 478 q 736 502 736 487 l 766 502 l 766 495 q 746 481 760 481 l 749 465 q 719 387 719 439 l 702 383 q 699 387 702 387 l 699 380 q 722 366 717 380 l 722 356 q 719 346 722 346 l 722 329 l 722 275 q 719 271 722 271 l 722 264 l 722 261 q 665 224 722 239 l 678 210 l 675 193 l 678 180 q 610 132 656 132 q 583 166 590 165 q 549 153 574 166 q 526 186 541 153 q 478 207 512 186 l 522 295 q 546 332 546 318 l 546 370 l 543 390 l 546 397 q 519 437 534 429 q 539 461 524 453 l 543 461 q 549 448 543 448 q 556 468 556 458 l 556 478 q 607 512 571 478 q 665 539 653 512 m 695 505 l 729 505 l 729 502 q 715 485 720 485 l 712 485 q 695 498 695 494 l 695 505 m 607 475 l 607 471 l 610 471 q 621 481 615 471 l 614 481 q 607 475 607 480 m 570 478 l 566 465 l 573 465 q 580 471 580 465 l 580 478 l 570 478 m 675 461 l 668 465 q 654 461 662 461 l 654 451 l 675 454 l 692 444 q 705 468 705 450 l 705 475 l 702 475 q 675 461 690 475 m 719 468 l 719 461 l 729 461 l 729 468 l 719 468 m 637 458 l 637 454 l 651 454 l 651 465 l 644 465 q 637 458 637 463 m 468 441 q 539 407 515 441 q 505 292 539 314 q 478 234 487 277 q 471 214 471 234 l 461 214 q 417 281 461 224 l 420 288 q 400 380 420 334 l 400 404 q 468 441 420 429 m 346 437 l 359 437 q 387 420 378 437 l 387 417 q 359 390 359 397 l 349 390 l 349 404 q 339 427 349 415 l 339 431 q 346 437 340 437 m 692 410 l 692 407 l 699 407 l 699 417 q 692 410 692 416 m 634 404 l 641 400 l 644 407 l 644 410 l 641 410 q 634 404 634 409 m 376 387 q 407 298 400 332 q 404 271 404 280 l 407 248 q 400 227 400 237 l 400 217 l 404 217 q 410 261 410 248 l 414 261 q 444 210 444 223 l 444 207 l 427 207 l 407 203 q 397 207 400 207 l 370 180 l 373 180 q 387 183 379 183 q 356 125 387 140 q 349 153 349 138 l 349 156 q 356 173 350 173 q 349 193 349 184 q 353 200 349 200 l 349 217 l 349 359 q 376 387 351 387 m 654 373 l 651 366 q 658 359 658 365 q 654 349 654 353 l 644 349 q 610 342 621 342 l 610 339 q 621 329 610 334 q 671 349 665 329 q 682 359 676 349 l 682 363 q 654 373 682 370 m 607 356 l 607 353 l 614 353 l 614 363 q 607 356 607 361 m 668 309 q 675 302 669 302 l 688 302 l 688 309 q 682 315 688 315 l 675 315 q 668 309 668 314 m 719 214 l 722 207 l 722 176 l 719 159 q 709 180 709 159 l 702 180 l 702 173 l 699 149 l 702 149 l 712 156 l 719 156 l 722 142 q 719 115 722 134 q 722 81 722 98 q 705 68 719 68 l 705 61 q 722 51 722 60 l 722 10 l 715 -20 l 709 -20 q 705 -17 705 -20 q 695 -20 699 -20 q 654 -17 678 -20 q 593 -20 630 -20 l 590 -20 q 583 -14 583 -20 q 597 7 591 7 q 637 -7 629 0 l 644 -7 q 658 3 644 3 q 705 -10 658 -6 l 709 -10 l 709 -7 q 576 44 576 24 l 559 44 q 580 7 559 29 l 580 0 q 563 -20 568 -20 l 498 -20 q 458 -17 475 -20 q 417 -20 440 -20 l 359 -20 q 349 -10 355 -20 l 349 68 q 387 105 349 83 l 407 95 l 407 98 q 404 109 404 105 q 424 115 414 115 l 424 119 l 414 119 l 393 115 l 393 119 q 437 170 393 170 l 451 170 q 454 166 454 170 l 461 170 l 471 170 q 515 139 471 149 q 529 119 519 139 l 526 119 l 512 129 q 509 125 512 125 q 543 102 509 113 q 563 85 543 98 l 563 81 l 559 81 q 549 85 553 85 l 549 75 q 559 54 551 54 l 573 54 q 580 61 580 54 q 556 115 570 96 l 556 122 q 573 132 562 122 l 580 132 q 610 88 610 108 q 597 68 610 85 l 604 68 q 658 112 623 112 q 661 109 658 109 q 658 98 658 102 l 654 98 q 651 102 651 98 q 631 85 637 97 l 637 81 q 675 95 637 94 l 671 102 l 671 109 q 688 153 688 150 l 688 159 l 682 159 l 682 180 q 719 214 682 182 m 709 139 l 702 129 q 709 122 703 122 l 715 136 l 709 139 m 678 112 l 678 109 q 692 95 678 103 l 695 95 l 695 102 q 678 112 695 108 m 410 109 l 410 105 q 414 95 414 98 l 417 95 l 417 109 l 410 109 m 624 85 l 624 78 l 627 78 q 634 85 634 78 l 634 92 l 631 92 q 624 85 624 90 z "},"Z":{"ha":1017,"x_min":0,"x_max":1034,"o":"m 10 1133 l 105 1133 q 136 1119 115 1133 q 146 1133 138 1133 l 197 1133 q 224 1129 220 1133 q 261 1133 247 1133 l 465 1133 q 471 1126 471 1131 l 468 1109 q 505 1051 492 1067 q 451 963 451 982 q 322 1031 418 972 l 322 1027 q 448 953 324 1019 l 448 949 q 407 888 439 918 q 393 865 399 865 l 37 865 l 37 875 l 44 875 q 34 885 44 878 q 14 878 23 878 q 10 882 14 882 q 7 878 10 878 l 0 888 l 0 1058 l 3 1078 q 0 1095 0 1084 l 0 1122 q 10 1133 0 1127 m 522 1133 l 543 1133 l 543 1126 l 526 1122 l 522 1122 q 515 1129 515 1122 l 522 1133 m 627 1133 l 780 1133 q 824 1129 802 1133 q 861 1133 836 1133 l 882 1133 q 922 1072 891 1128 q 909 1038 909 1050 q 966 997 942 1028 l 970 997 l 970 1027 q 990 1017 990 1024 l 990 1007 q 888 932 985 983 q 848 912 885 925 q 827 851 836 851 q 773 831 813 838 q 699 790 773 812 q 665 800 681 800 q 631 793 656 800 q 607 797 617 797 l 607 793 q 583 804 590 804 l 553 800 q 515 831 553 805 l 515 834 q 532 868 532 854 l 536 868 q 580 834 567 844 l 583 834 q 512 895 555 880 q 481 916 502 895 q 529 1010 481 956 q 553 1038 529 1028 l 553 1044 q 522 1095 522 1074 q 627 1133 574 1119 m 912 1133 l 977 1133 q 997 1122 989 1133 q 994 1119 997 1119 l 997 1078 l 997 1051 q 960 1031 997 1031 l 953 1031 q 926 1041 934 1041 l 926 1044 l 936 1078 l 936 1082 q 905 1126 926 1090 q 912 1133 907 1133 m 241 1119 l 241 1102 q 200 1105 235 1102 q 156 1092 178 1092 l 156 1082 l 180 1082 q 210 1092 193 1092 l 227 1092 q 271 1058 258 1058 q 281 1061 275 1058 q 322 1034 311 1034 l 322 1038 l 329 1034 l 339 1034 l 339 1038 q 332 1044 339 1044 l 329 1044 q 326 1041 326 1044 q 281 1068 319 1041 q 244 1092 253 1068 q 248 1119 244 1095 l 241 1119 m 119 1065 l 119 1055 l 136 1055 l 136 1065 l 119 1065 m 854 1004 q 861 997 856 997 q 875 1007 875 1002 l 875 1014 q 854 1004 854 1012 m 119 987 l 119 977 l 122 977 q 129 983 129 977 l 122 987 l 119 987 m 990 977 q 997 970 997 975 l 997 878 q 953 824 997 858 l 946 848 l 963 858 l 956 871 q 983 912 968 912 l 983 922 q 963 939 963 922 l 963 949 q 990 977 981 949 m 956 946 l 956 943 q 960 912 956 930 l 936 851 q 932 848 932 851 q 939 841 934 841 q 936 831 936 834 l 919 834 l 895 831 q 878 834 890 834 l 878 831 q 841 851 876 831 q 912 926 841 907 q 956 946 938 946 m 465 892 l 475 892 q 526 871 503 875 l 526 865 l 444 865 l 444 871 q 465 892 444 875 m 844 831 l 861 831 q 878 817 878 819 q 922 824 886 820 q 932 821 929 821 q 946 824 939 824 l 949 817 q 848 705 949 814 q 807 661 827 676 l 800 661 q 793 675 800 675 l 790 675 q 783 668 783 673 q 797 651 787 651 l 797 648 q 736 593 752 598 q 699 543 736 570 q 692 576 692 558 q 709 580 697 580 l 709 587 q 688 597 688 587 l 688 614 q 715 644 688 633 l 732 644 l 732 651 l 726 651 q 699 637 701 647 q 685 658 685 641 q 688 675 688 663 q 678 671 682 671 l 668 688 q 624 661 624 677 q 641 648 636 661 q 665 661 665 648 q 675 658 671 658 l 675 641 q 678 593 675 623 q 675 583 675 587 q 685 543 685 555 q 553 488 589 488 l 549 488 q 481 553 529 524 l 475 553 l 461 543 l 448 553 q 451 563 451 559 q 404 614 449 577 l 404 617 q 407 621 404 621 q 373 678 407 661 l 373 682 q 502 824 398 703 l 549 787 q 587 773 578 787 l 604 777 l 610 777 q 624 773 618 777 l 665 787 l 671 787 l 678 783 q 661 770 677 774 l 665 746 l 665 743 l 654 709 q 661 702 656 702 q 682 749 677 722 q 739 780 699 780 q 773 800 739 787 q 844 831 781 817 m 878 773 q 882 770 882 773 q 909 783 909 779 q 895 790 901 790 q 878 773 886 790 m 532 756 l 532 753 l 539 753 q 549 763 544 753 l 539 763 q 532 756 532 762 m 773 743 l 780 743 q 790 753 785 743 q 787 756 787 753 q 773 743 776 753 m 831 753 l 831 746 q 838 739 832 739 q 848 749 842 739 q 841 756 848 756 q 831 753 834 753 m 549 743 l 549 732 l 566 736 l 566 739 l 549 743 m 746 715 l 746 709 l 749 709 q 763 722 755 709 l 763 729 l 760 729 q 746 715 754 729 m 800 726 l 800 719 q 814 722 806 722 l 814 726 l 800 726 m 621 705 l 627 702 q 637 712 632 702 l 637 715 l 631 715 q 621 705 626 715 m 705 712 l 705 709 l 719 709 l 719 712 l 705 712 m 543 702 l 543 695 l 553 695 l 553 702 l 543 702 m 373 627 l 376 627 q 404 563 394 627 q 465 495 442 538 l 471 492 l 492 495 q 543 434 543 468 l 546 434 l 556 441 l 559 441 l 559 424 q 566 417 561 417 l 570 417 q 627 458 570 448 l 692 495 l 699 495 l 699 492 q 559 339 566 342 q 546 342 553 342 l 553 332 q 546 326 553 326 l 543 326 l 543 342 l 536 353 l 536 373 q 543 380 537 380 q 529 397 536 395 l 529 370 l 526 370 l 526 342 q 539 312 539 324 q 471 231 471 249 l 543 231 q 559 227 554 231 l 580 231 l 661 231 q 668 224 668 229 q 637 166 656 211 q 587 115 598 137 q 573 112 581 112 l 573 109 l 576 102 q 563 95 563 99 q 502 109 547 95 q 485 98 491 98 l 485 95 q 519 88 513 95 l 556 88 q 566 78 561 88 l 563 71 l 570 68 l 576 92 l 583 92 q 641 58 592 92 l 644 58 l 641 24 l 641 20 l 648 20 l 648 37 q 709 68 648 54 l 722 61 q 760 64 745 64 l 763 64 l 763 71 l 760 71 q 692 75 742 71 q 648 58 659 58 q 593 102 648 64 l 593 105 q 661 186 661 173 q 688 231 661 200 l 736 231 q 760 220 747 231 q 777 231 760 231 l 831 231 q 844 227 838 231 q 858 231 850 231 q 875 210 871 231 q 841 173 865 173 q 844 163 844 166 q 831 142 844 159 l 831 139 l 834 139 q 892 227 881 181 l 899 231 q 916 224 909 224 q 936 231 926 231 l 970 231 q 983 227 977 231 q 997 231 989 231 l 1024 231 q 1034 186 1034 231 l 1034 149 q 1031 119 1034 137 q 1034 102 1034 113 l 1031 102 l 1034 95 l 1034 64 q 1031 61 1034 61 l 1034 54 l 1034 47 q 1031 44 1034 44 l 1034 37 l 1034 27 q 980 10 1025 10 l 966 10 q 963 7 963 10 l 949 14 q 895 -34 949 -8 q 892 -31 892 -34 l 868 -34 l 841 -34 q 834 -27 834 -34 l 841 -14 q 831 -10 834 -10 l 831 14 l 827 20 l 831 20 q 807 44 830 31 l 797 44 l 797 34 q 827 -24 827 34 l 827 -27 q 824 -31 824 -27 l 817 -27 l 783 -31 l 783 -27 l 777 -31 l 743 -31 q 719 -20 730 -20 q 699 -34 715 -34 l 637 -34 l 627 -27 q 607 -34 616 -34 l 583 -34 q 566 -27 566 -34 q 546 -34 555 -34 l 431 -34 q 400 -27 422 -34 q 373 -34 388 -34 l 319 -34 q 285 -31 302 -34 q 254 -34 272 -34 q 248 -31 248 -34 l 224 -34 l 78 -34 q 75 -31 75 -34 l 68 -34 l 44 -34 l 37 -31 l 44 3 l 54 3 q 68 -20 61 -20 l 71 -20 q 44 54 61 -10 q 75 166 44 87 q 125 197 98 174 q 176 170 132 197 q 254 153 183 170 q 281 170 263 170 l 281 173 l 275 173 q 248 163 258 163 l 244 163 q 241 166 241 163 l 234 163 l 231 163 q 241 170 231 170 l 241 176 l 227 176 l 214 166 l 207 170 q 220 180 207 180 q 210 190 220 184 l 197 180 q 190 186 190 180 l 193 193 l 183 193 q 180 190 180 193 q 149 275 165 190 q 125 322 140 275 l 125 336 l 139 353 q 132 359 132 353 q 373 627 133 371 m 760 637 l 760 631 l 763 631 q 770 637 770 631 l 760 637 m 546 614 l 546 604 l 556 604 l 556 614 l 546 614 m 617 570 l 617 559 l 621 559 q 627 566 627 559 l 627 570 l 617 570 m 593 536 l 600 532 l 600 543 q 593 536 593 541 m 495 444 l 495 441 l 519 441 l 519 458 q 495 444 499 444 m 332 248 q 326 254 332 254 l 315 254 l 339 237 q 383 275 351 265 q 410 319 390 275 q 441 393 433 319 q 492 441 446 415 l 492 444 q 427 380 427 427 q 387 302 427 344 q 356 275 387 281 q 332 248 336 248 m 576 434 l 576 417 l 580 417 l 580 434 l 576 434 m 173 363 l 173 353 l 176 353 q 186 363 181 353 l 186 366 l 183 366 q 173 363 176 363 m 85 359 l 92 359 l 92 349 q 122 281 92 330 l 122 271 q 85 231 111 231 l 44 203 l 37 183 q 41 173 41 176 q 14 88 31 170 l 3 88 l 0 105 l 0 183 l 7 193 q 0 220 0 205 l 0 254 q 85 359 0 275 m 990 248 l 990 241 l 1004 241 l 1004 248 l 990 248 m 217 234 l 220 234 q 241 241 230 234 l 264 237 l 271 241 l 285 234 q 312 248 305 248 l 312 251 l 281 244 l 241 251 q 217 234 219 242 m 136 251 l 139 244 l 139 237 l 129 237 l 129 244 q 136 251 130 251 m 939 234 l 939 227 l 953 227 l 953 234 l 939 234 m 763 231 l 763 224 q 804 125 804 156 q 770 102 804 111 l 770 95 q 783 75 780 95 q 787 71 787 75 q 797 75 793 75 q 790 92 797 92 q 814 136 814 117 q 807 142 807 136 q 814 159 808 159 l 766 231 l 763 231 m 780 224 l 793 224 l 793 231 l 787 231 q 780 224 780 229 m 932 214 q 943 190 936 190 l 946 190 l 953 193 q 943 220 949 220 l 939 220 q 932 214 932 219 m 298 214 q 302 203 302 207 l 309 203 q 342 217 342 213 q 326 224 326 217 q 298 214 311 224 m 281 217 l 281 210 l 292 210 q 285 217 292 217 l 281 217 m 492 200 l 492 193 l 502 193 l 502 200 l 492 200 m 271 183 q 292 176 282 176 l 302 176 l 302 180 q 285 197 296 197 q 271 183 274 193 m 356 190 l 356 183 l 380 183 l 380 190 l 373 186 l 356 190 m 529 176 l 529 170 l 543 166 q 529 176 543 172 m 427 159 l 424 153 l 448 149 q 427 159 448 156 m 963 153 q 953 136 963 144 l 960 132 l 977 132 q 983 139 983 132 q 966 146 966 139 l 970 153 l 963 153 m 227 142 l 224 125 q 231 132 231 125 l 231 142 l 227 142 m 417 129 l 417 125 l 441 122 l 441 129 l 417 129 m 800 85 l 807 81 l 814 81 l 817 95 l 810 95 q 800 85 806 95 m 380 98 l 380 95 q 387 78 380 78 q 383 75 387 75 q 390 27 387 33 q 387 14 387 21 l 387 10 l 397 10 l 400 24 q 393 88 393 64 l 393 92 q 387 98 393 98 l 380 98 m 580 92 q 587 85 581 85 l 590 85 l 590 92 l 580 92 m 14 85 q 27 58 22 85 q 7 3 14 5 q 0 10 0 3 l 0 71 q 14 85 0 77 m 949 68 l 949 54 l 966 54 l 966 61 q 953 68 961 61 l 949 68 m 895 31 l 902 27 q 939 41 913 37 l 939 44 q 929 61 929 55 l 926 61 q 905 44 915 44 l 895 31 m 841 51 q 848 44 842 44 l 858 44 l 858 54 l 841 51 m 254 58 q 244 34 254 34 l 244 27 q 261 54 261 33 l 261 58 l 254 58 m 1031 34 l 1034 17 l 1034 3 q 1024 -7 1034 -1 l 997 -7 q 963 0 990 -7 q 932 -7 941 -7 l 929 0 q 997 31 960 31 l 1031 34 m 556 20 l 556 17 q 559 7 559 10 l 563 7 l 563 20 l 556 20 z "},"a":{"ha":1048,"x_min":-68,"x_max":1129,"o":"m 342 1129 l 458 1129 l 481 1122 q 512 1129 504 1129 l 532 1129 q 536 1126 536 1129 l 543 1129 l 546 1129 l 559 1112 l 583 1119 q 610 1099 608 1106 l 610 1065 q 614 1061 610 1061 q 597 1038 614 1058 l 597 1024 q 614 994 597 1016 q 587 960 614 975 l 587 949 q 600 865 587 927 q 549 834 587 865 q 526 827 541 834 l 519 831 q 485 817 495 817 l 468 821 q 431 807 468 816 q 363 844 427 807 q 349 848 357 848 l 302 848 q 271 854 294 848 q 258 848 258 852 q 241 861 242 854 q 312 1048 298 1035 l 309 1055 q 342 1129 323 1099 m 621 1129 l 624 1129 q 651 1126 633 1129 q 675 1129 665 1129 q 685 1112 679 1112 q 688 1126 688 1118 l 709 1126 q 726 1085 722 1126 q 722 1082 722 1085 l 715 1085 l 695 1082 l 678 1095 l 671 1095 q 699 1072 671 1077 q 729 1075 717 1075 q 760 997 760 1013 q 743 980 755 997 l 743 953 q 719 895 743 933 l 726 895 q 749 977 749 935 q 766 983 754 983 q 871 682 858 736 l 871 678 q 783 658 834 658 q 743 773 743 717 q 726 817 729 796 q 729 831 729 823 q 692 854 729 839 q 671 875 692 859 q 641 865 656 875 l 637 865 q 610 932 610 865 q 607 953 607 938 q 634 980 611 953 l 634 987 q 614 1031 634 991 l 614 1034 q 654 1092 628 1071 q 668 1088 661 1088 l 668 1099 q 644 1119 644 1099 l 627 1119 q 621 1126 621 1119 l 621 1129 m 627 1112 q 641 1102 641 1107 l 641 1092 q 631 1082 641 1087 l 624 1082 q 614 1099 624 1092 q 627 1112 616 1109 m 431 1102 l 431 1099 l 448 1095 l 454 1095 l 454 1102 l 431 1102 m 380 1085 l 380 1082 l 387 1082 q 427 1095 400 1092 l 427 1099 l 414 1099 q 380 1085 408 1099 m 563 1075 l 563 1068 l 583 1068 l 583 1078 l 580 1078 l 563 1075 m 349 1075 q 336 1051 349 1065 l 342 1048 l 356 1072 l 349 1075 m 665 1004 l 675 1004 q 685 1014 680 1004 l 685 1021 l 682 1021 q 665 1004 677 1021 m 610 834 l 624 831 q 654 834 642 834 q 699 804 661 815 q 722 715 699 785 l 719 692 q 739 648 726 692 l 763 621 l 756 593 l 760 570 q 756 543 756 551 l 807 519 q 783 478 783 494 q 763 444 783 444 q 770 437 764 437 l 773 437 l 783 444 l 787 444 q 800 410 796 444 q 753 326 800 400 q 736 288 744 288 l 729 288 q 661 312 671 312 q 648 309 654 312 q 621 315 630 315 l 556 295 l 543 292 q 458 359 503 306 q 465 366 459 366 l 631 366 q 587 526 631 379 q 576 563 576 557 q 580 566 580 563 q 522 749 568 576 l 515 753 q 468 610 511 753 l 471 610 q 417 441 432 462 q 420 431 420 434 q 407 407 416 407 l 393 407 q 366 404 379 407 q 322 431 322 406 l 319 431 l 309 424 q 336 390 309 411 l 363 390 l 404 393 q 407 383 407 387 l 404 366 l 417 366 q 441 353 435 366 l 441 346 l 427 342 l 427 332 l 431 332 l 444 342 l 448 342 q 529 278 448 320 q 536 275 529 275 l 607 295 l 617 295 q 648 292 629 295 q 668 298 661 298 q 736 281 709 281 l 736 264 q 739 261 736 261 q 682 231 739 252 q 648 261 675 231 l 648 254 q 678 227 659 227 q 651 153 678 163 q 624 129 640 153 l 519 129 l 509 136 q 488 129 498 129 l 380 129 l 370 136 l 353 132 l 349 139 q 295 119 336 139 l 295 122 q 268 112 268 119 l 268 105 q 281 88 281 93 l 285 88 l 285 109 q 326 115 313 115 q 302 51 313 51 l 302 34 q 281 -20 293 -20 l 203 -20 q 180 -14 180 -20 q 159 -20 169 -20 l 31 -20 q 0 -17 18 -20 q -17 -20 -5 -20 q -27 -17 -24 -17 l -27 -7 l -24 17 q -44 61 -44 34 q -20 125 -28 125 q 10 115 -5 125 l 17 115 l 17 122 q -17 129 -4 129 l -17 136 q 44 309 -17 155 l 61 305 l 68 305 q 81 322 73 305 q 75 329 81 329 l 68 329 q 61 315 68 315 l 54 315 l 61 326 l 61 329 q 51 336 51 329 q 146 600 122 526 l 149 600 q 224 498 197 576 q 217 461 217 480 l 220 431 q 159 353 180 374 q 119 339 159 348 q 92 322 92 326 l 92 312 q 98 305 93 305 l 105 329 l 119 329 q 146 336 122 329 q 122 315 136 315 l 122 309 l 129 309 q 159 346 159 321 q 193 363 185 363 q 200 336 200 345 q 193 329 193 334 l 193 322 l 197 322 q 207 353 205 322 q 200 359 200 353 l 200 363 q 244 431 200 389 q 295 414 253 417 q 305 417 302 417 l 305 427 q 295 431 302 427 q 268 427 277 427 q 234 471 234 427 q 241 502 241 494 q 156 621 241 534 l 156 624 q 231 824 216 801 l 234 824 q 251 817 251 824 q 264 821 253 817 q 353 817 321 817 q 427 773 413 773 q 461 790 427 779 q 492 783 484 783 q 515 800 515 795 l 532 797 q 610 834 603 834 m 644 804 l 644 800 l 661 804 l 661 810 l 651 810 q 644 804 644 809 m 370 709 q 373 699 373 702 l 383 699 l 383 709 l 370 709 m 203 668 l 203 665 l 220 661 l 224 661 l 224 668 l 217 668 q 214 665 214 668 l 207 668 l 203 668 m 271 668 q 295 654 271 663 l 305 654 l 305 658 l 271 668 m 614 651 l 624 651 q 631 658 631 651 l 631 661 l 624 661 q 614 651 619 661 m 882 654 q 919 553 890 654 l 916 546 q 970 417 936 520 q 980 387 980 389 q 953 380 973 380 q 987 370 953 373 q 1031 244 1014 298 q 990 220 1006 220 q 926 234 975 220 q 905 220 926 229 l 865 224 q 841 210 859 210 l 838 210 q 793 244 799 243 q 780 241 786 244 q 760 248 766 248 l 760 251 l 773 264 l 766 275 q 834 414 777 342 l 831 437 l 831 461 q 817 495 817 461 q 838 529 821 508 l 838 539 q 787 576 787 563 q 783 607 783 589 q 810 641 789 607 q 882 654 850 641 m 614 617 l 614 614 l 617 614 q 732 648 732 634 l 729 648 q 614 617 667 633 m 336 637 l 336 624 l 342 624 l 342 631 q 336 637 342 637 m 726 627 l 726 624 q 732 631 732 624 l 732 634 q 726 627 726 633 m 587 624 l 587 621 l 593 621 q 600 627 600 621 l 600 631 l 593 631 q 587 624 587 629 m 356 614 q 390 590 360 604 l 393 590 l 393 593 q 359 614 389 593 l 356 614 m 685 610 l 682 604 l 688 600 l 692 607 l 685 610 m 434 597 l 434 593 l 444 593 q 451 600 451 593 l 451 604 l 441 604 q 434 597 434 602 m 309 590 l 302 580 q 309 573 303 573 l 312 573 q 319 580 319 573 l 319 587 q 309 590 315 587 m 407 583 l 410 566 l 417 566 l 417 583 l 407 583 m 404 532 l 404 529 l 410 529 l 410 539 q 404 532 404 538 m 888 519 l 885 512 l 892 509 l 905 509 q 888 519 905 515 m 366 492 l 370 492 q 390 512 380 492 l 387 512 q 366 492 382 512 m 410 505 l 410 498 l 414 498 q 420 505 420 498 l 410 505 m 841 420 l 841 417 l 858 414 l 865 414 q 858 420 865 420 l 841 420 m 905 417 l 905 410 q 946 387 911 410 l 946 390 q 912 417 946 393 l 905 417 m 285 390 l 285 387 q 288 376 288 380 l 292 376 l 292 390 l 285 390 m 861 366 l 858 359 l 868 359 q 861 366 868 366 m 292 363 l 271 322 l 281 322 q 295 346 281 329 l 295 363 l 292 363 m 905 339 l 905 336 l 912 336 q 919 342 919 336 l 919 346 l 912 346 q 905 339 905 345 m 159 336 l 159 326 l 163 326 q 173 329 170 329 q 166 336 173 336 l 159 336 m 929 336 l 929 329 l 939 329 l 939 336 l 929 336 m 434 326 l 454 326 q 461 332 461 326 l 441 332 q 434 326 434 331 m 922 315 q 929 309 924 309 l 932 309 l 932 322 l 929 322 q 922 315 922 321 m 397 298 l 407 292 q 424 312 407 312 l 424 319 l 420 319 q 397 298 400 311 m 98 309 l 98 302 l 105 302 q 109 315 105 309 l 105 315 q 98 309 98 314 m 170 312 l 170 305 l 180 305 q 173 312 180 312 l 170 312 m 841 305 l 848 302 q 854 309 854 302 l 854 312 l 848 312 q 841 305 841 311 m 197 309 l 193 292 q 203 302 198 292 l 203 309 l 197 309 m 295 281 q 268 288 274 288 q 258 281 258 285 q 220 295 231 288 l 217 295 l 220 288 l 220 285 l 214 275 l 214 271 l 217 264 l 234 275 q 312 278 296 278 q 346 292 312 284 l 346 295 q 339 302 346 302 l 336 302 q 295 281 323 290 m 186 285 l 186 271 l 197 271 q 203 278 203 271 l 193 285 l 186 285 m 407 275 l 407 264 q 414 258 408 258 l 414 268 q 407 275 414 275 m 783 271 l 783 261 l 790 261 l 790 271 l 783 271 m 153 268 l 149 254 q 163 207 156 207 l 166 207 l 166 210 q 153 258 155 258 l 156 264 l 156 268 l 153 268 m 197 248 l 207 248 l 207 254 l 203 254 q 197 248 197 253 m 390 237 q 393 217 393 220 q 383 170 393 201 q 400 207 400 184 q 397 234 397 231 q 414 248 414 243 l 414 251 q 390 237 395 251 m 773 197 q 827 159 773 188 l 834 159 l 841 163 l 841 156 q 838 153 841 153 q 848 139 843 139 q 882 153 855 139 l 905 149 q 943 163 926 153 q 980 153 966 153 l 994 153 q 997 156 997 153 q 1000 153 1000 156 l 1041 156 l 1051 156 q 1072 92 1072 121 q 1075 95 1075 92 q 1129 -44 1088 95 l 1122 -47 q 1082 -44 1099 -47 q 1041 -47 1064 -47 q 1027 -7 1036 -21 l 1068 64 l 1072 88 l 1065 88 q 1048 44 1060 88 q 1021 0 1021 12 l 1021 -7 q 1024 -41 1024 -26 l 1000 -47 l 956 -47 l 943 -37 q 919 -47 930 -47 l 899 -47 q 865 -44 882 -47 q 834 -47 852 -47 l 821 -47 q 817 -44 817 -47 l 810 -47 l 770 -47 q 719 102 760 -47 l 695 102 q 688 109 688 102 l 688 112 q 715 136 715 112 l 712 142 q 749 197 728 197 l 773 197 m 1034 234 l 1038 227 l 1031 224 l 1027 224 l 1027 227 q 1034 234 1029 234 m 170 203 l 166 170 l 166 166 l 173 156 l 173 153 q 132 122 168 142 l 119 122 q 88 119 106 122 q 68 125 77 125 q 88 109 68 121 q 115 115 92 109 l 132 112 q 180 146 165 126 q 173 176 176 153 q 176 200 176 190 l 170 203 m 241 142 l 241 136 l 268 136 q 261 142 268 142 l 241 142 m 41 139 l 41 136 q 47 129 42 129 l 61 129 q 51 139 61 134 l 41 139 m 217 132 l 227 132 l 227 139 l 224 139 q 217 132 217 138 m 180 129 l 180 125 q 190 119 190 125 l 186 102 l 193 98 q 197 119 193 119 q 190 136 190 130 l 186 136 q 180 129 180 134 m 71 88 l 71 85 q 85 98 77 85 l 85 102 q 71 88 79 102 m 112 58 q 115 54 115 58 q 129 64 129 60 l 122 68 q 112 58 117 68 m -44 58 l -34 37 l -34 3 l -51 0 l -61 0 q -68 7 -68 0 q -44 58 -52 51 m 197 37 l 197 34 l 200 34 q 207 41 207 34 l 207 44 l 203 44 q 197 37 197 43 m 987 34 l 987 24 l 990 24 q 997 31 997 24 l 997 34 l 987 34 m 180 17 q 186 10 181 10 l 190 17 l 190 24 l 186 24 q 180 17 180 22 z "},"b":{"ha":814,"x_min":-14,"x_max":1061,"o":"m -3 1146 l 115 1146 l 122 1143 q 102 1075 109 1083 q 122 1027 122 1040 q 71 977 82 977 l 54 980 l 37 977 q 27 987 27 977 l 20 987 l 24 980 q -7 939 -7 954 l -14 939 l -14 1136 q -3 1146 -14 1141 m 197 1133 q 234 1129 222 1133 q 278 1133 256 1133 l 319 1133 q 346 1129 333 1133 q 373 1133 359 1133 l 434 1133 l 448 1119 q 461 1133 448 1124 l 471 1133 q 481 1122 476 1133 q 410 1095 450 1095 q 397 1099 404 1099 l 397 1095 q 410 1085 397 1092 q 475 1105 440 1085 q 512 1014 487 1105 l 481 980 q 465 949 481 973 q 414 892 465 909 q 383 868 414 877 q 349 912 370 872 l 346 912 l 339 909 l 326 912 q 288 905 302 905 q 248 922 273 905 l 248 926 q 261 943 248 928 q 237 1004 241 974 q 278 1072 265 1055 l 275 1072 q 244 1048 255 1048 q 251 1038 248 1038 q 227 1007 244 1021 l 207 1007 q 180 1017 182 1007 q 183 1021 180 1021 q 159 1038 178 1038 l 146 1038 l 136 1055 q 166 1133 146 1133 l 197 1133 m 502 1133 q 512 1129 505 1133 q 539 1133 515 1129 q 637 1129 614 1129 q 644 1122 639 1122 q 648 1126 648 1122 l 665 1122 q 675 1126 668 1122 q 692 1116 692 1122 l 699 1119 l 702 1119 q 932 1027 812 1119 q 1000 858 1000 951 q 994 841 1000 852 l 1000 827 q 943 695 977 695 q 878 617 943 668 q 848 705 848 637 l 851 705 q 895 712 895 707 l 916 739 l 916 746 q 905 763 905 757 l 899 763 l 899 760 l 902 736 q 861 715 888 722 q 821 722 842 715 q 817 719 817 722 l 793 722 l 780 722 q 712 685 729 722 q 665 665 701 665 q 641 614 665 614 q 580 553 641 607 l 573 556 l 522 536 q 505 549 507 543 q 512 597 512 575 q 502 617 505 597 q 532 665 507 665 q 593 678 587 678 l 597 671 q 624 682 614 682 l 641 682 l 641 685 q 631 695 641 690 l 614 695 l 614 699 q 651 763 651 730 l 651 814 q 634 841 635 835 q 661 875 638 841 l 661 882 l 631 844 l 624 844 q 553 868 605 858 l 519 865 l 458 865 q 420 878 420 865 q 475 922 475 903 l 488 922 l 505 926 l 505 929 q 478 939 478 929 q 526 1000 484 972 q 529 1014 529 1006 q 519 1034 529 1022 l 519 1041 q 570 1065 519 1046 q 607 1061 577 1065 q 648 1075 616 1061 q 695 1072 677 1072 l 709 1072 l 726 1075 l 726 1082 l 705 1082 q 699 1099 705 1099 l 699 1082 q 688 1078 692 1078 q 685 1092 685 1084 l 678 1092 q 671 1082 678 1086 l 654 1085 l 648 1085 q 624 1075 636 1085 l 590 1075 q 529 1055 575 1075 l 522 1055 q 505 1088 514 1055 q 509 1099 509 1095 q 495 1129 495 1126 l 502 1133 m 285 1105 l 285 1078 q 322 1085 309 1085 l 322 1092 l 298 1088 q 288 1105 288 1099 l 285 1105 m 773 1072 l 783 1072 l 783 1078 l 780 1078 q 773 1072 773 1077 m 197 1061 q 203 1055 198 1055 q 214 1058 210 1058 l 214 1061 l 197 1061 m 543 1044 l 543 1038 q 580 1017 563 1038 l 604 1038 l 587 1038 q 573 1031 578 1031 q 543 1044 549 1044 m 699 1031 l 699 1024 l 712 1024 l 712 1031 l 699 1031 m 159 1024 q 176 1007 176 1019 q 170 987 170 996 l 173 987 q 231 1000 180 994 q 234 990 234 994 l 231 973 q 254 949 239 972 l 254 946 q 244 939 254 939 q 207 953 240 939 l 207 946 q 248 899 248 917 q 292 882 264 882 q 305 885 294 882 q 315 882 312 882 q 346 885 334 885 q 373 841 366 846 q 370 831 373 838 q 373 780 373 797 q 302 746 373 770 q 203 722 279 736 l 203 719 l 227 719 q 363 760 314 739 l 366 760 q 373 753 373 758 l 373 682 l 488 682 q 498 671 493 682 l 498 654 q 488 607 488 610 l 488 590 l 495 580 l 485 519 l 512 475 l 505 471 l 373 471 l 373 437 q 363 431 373 431 q 326 458 359 431 l 295 461 q 329 448 295 452 q 370 420 332 437 l 373 404 l 373 349 q 370 322 373 335 q 373 295 373 309 l 373 264 l 407 264 q 414 258 414 263 l 414 248 q 387 176 414 233 q 380 146 380 155 q 383 142 383 146 q 322 105 322 137 q 268 44 322 64 l 264 44 q 234 51 249 51 q 203 44 212 44 q 163 95 203 51 q 153 139 163 130 l 153 142 l 166 142 l 183 129 l 203 129 l 203 132 q 146 186 168 132 l 139 190 q 109 180 131 190 q 34 210 34 190 q 31 227 34 222 q 34 258 34 245 l 34 285 l 51 285 q 58 292 58 285 q 47 298 58 298 q 37 292 37 295 q 0 319 0 292 q 3 346 0 342 q 0 383 0 369 l 0 387 q 3 427 0 417 q 0 478 0 457 l 0 536 q 20 553 0 540 l 37 549 l 64 549 q 132 563 125 563 q 146 536 142 536 l 153 536 l 153 543 l 142 556 q 156 597 156 579 q 142 621 142 602 l 136 621 l 132 604 q 146 590 138 604 l 142 573 q 88 570 123 573 q 78 573 81 573 q 58 566 67 566 l 47 566 q 34 593 41 566 l 37 600 l 37 607 q 24 668 31 652 q 44 729 44 713 q 3 777 27 729 q 0 807 0 789 l 0 838 q 24 851 0 845 l 17 865 q 34 936 26 883 q 71 949 65 949 l 95 949 q 109 946 102 949 q 149 1014 118 946 q 159 1024 149 1024 m 675 1014 l 671 1007 l 671 1004 l 675 1004 q 682 1010 682 1004 l 675 1014 m 136 963 l 136 953 l 149 953 l 149 960 l 156 960 q 159 953 156 953 l 190 963 l 190 966 q 173 983 190 971 l 136 963 m 617 956 l 617 949 l 627 949 l 627 956 l 617 956 m 865 932 l 865 929 l 868 929 q 892 956 886 941 l 885 956 q 865 932 879 956 m 746 943 l 746 939 q 763 926 746 935 l 780 926 l 780 922 l 746 905 l 746 899 l 756 899 q 777 916 756 906 q 821 895 821 907 q 807 875 821 892 l 807 868 l 810 868 q 844 909 827 899 q 817 912 842 909 q 814 909 817 909 l 814 912 l 821 922 l 821 936 q 793 932 796 932 q 749 943 777 943 l 746 943 m 654 936 l 654 929 q 665 926 658 929 l 668 932 q 654 936 661 932 m 688 909 q 712 885 688 885 l 729 885 l 729 892 l 712 892 q 695 909 710 892 l 688 909 m 756 892 q 739 875 756 875 l 739 865 l 749 865 q 766 888 755 865 l 766 892 l 756 892 m 183 878 l 183 871 l 200 871 l 200 878 l 183 878 m 871 861 l 871 848 l 875 848 q 905 851 887 848 q 960 824 934 844 l 977 824 q 980 844 977 840 q 973 861 973 844 l 966 861 l 970 844 l 970 841 q 960 834 970 834 q 902 861 913 861 l 871 861 m 763 827 l 766 821 l 763 800 q 770 773 770 777 l 777 773 l 770 821 q 810 838 798 838 q 821 827 810 833 q 858 834 844 834 q 875 827 864 834 l 878 834 l 878 841 q 875 838 875 841 l 841 841 l 824 841 q 821 838 821 841 q 804 851 805 842 q 763 827 780 842 m 41 848 l 41 841 l 47 841 q 54 848 54 841 l 41 848 m 58 848 q 64 841 59 841 l 68 841 l 68 848 l 58 848 m 871 804 l 868 797 l 875 793 l 878 793 l 878 797 q 871 804 878 804 m 783 766 l 783 763 q 821 726 805 763 l 824 726 l 824 736 q 793 766 802 766 l 783 766 m 58 749 q 47 732 58 743 l 51 732 q 64 746 56 732 l 64 749 l 58 749 m 7 746 q 27 715 24 716 q 10 658 10 670 l 20 644 l 20 634 q 17 631 20 631 q 27 604 27 614 l 27 593 q 3 563 27 563 l 0 570 l 0 604 q 7 624 0 613 q 0 675 0 656 l 0 739 q 7 746 1 746 m 112 722 l 112 719 l 115 702 q 95 658 95 663 q 119 621 113 621 l 122 621 q 105 658 105 654 q 129 712 105 669 l 112 722 m 899 709 l 899 702 q 932 695 924 695 l 932 702 l 926 702 q 899 709 911 702 m 821 709 q 841 644 839 709 q 861 614 858 630 q 858 600 858 608 l 858 593 q 912 498 891 526 l 916 498 l 916 492 l 905 458 l 905 454 q 960 410 948 433 l 966 407 l 966 414 l 960 437 l 966 441 q 987 431 987 439 l 987 424 q 909 363 975 395 q 838 322 872 336 l 834 315 l 834 288 q 766 241 834 260 q 688 203 742 215 q 661 214 686 214 l 644 214 q 627 207 627 213 q 576 220 589 212 q 556 214 570 220 q 492 258 492 251 l 492 261 l 498 264 l 532 264 l 566 261 q 627 275 566 268 q 692 349 692 302 l 692 387 q 593 468 692 450 q 519 505 519 468 l 519 509 q 597 539 523 516 q 685 637 675 608 q 756 699 694 637 q 821 709 766 705 m 519 682 l 522 682 l 522 675 l 512 675 q 519 682 513 682 m 878 590 l 882 590 q 1010 475 968 559 l 1021 454 q 1017 451 1017 454 l 1010 454 q 949 444 982 448 q 919 454 928 454 l 919 458 q 929 481 919 469 l 929 495 q 878 587 897 543 l 878 590 m 234 515 l 193 519 l 190 519 q 149 505 179 509 l 149 498 l 170 495 q 200 509 197 509 q 258 475 222 509 q 292 468 274 475 l 292 471 q 248 492 292 479 q 237 512 237 507 q 244 532 244 523 l 244 536 l 241 536 q 234 515 234 536 m 112 471 l 119 468 l 125 468 q 132 475 132 468 q 125 481 132 481 q 112 471 112 477 m 1031 410 q 1061 329 1061 401 l 1058 329 l 1061 322 l 1061 298 q 899 31 1061 123 q 838 10 852 10 l 838 17 l 831 17 l 743 -17 l 736 -14 q 709 -20 724 -20 l 705 -14 l 705 14 q 736 34 705 17 l 743 31 l 746 37 l 736 37 q 705 27 730 37 l 702 34 l 702 37 l 705 61 q 682 78 690 61 l 641 58 q 637 54 637 58 l 637 47 q 658 34 658 47 q 685 44 677 39 l 688 44 l 688 24 q 692 20 688 20 l 688 14 l 688 -20 q 614 -27 660 -27 l 607 -27 q 576 -24 589 -27 q 543 -27 559 -27 l 465 -27 q 414 41 422 -27 q 366 85 414 47 q 431 136 431 85 q 454 200 431 144 l 454 227 q 465 237 454 232 l 492 237 q 556 173 556 185 l 576 173 q 604 159 591 173 q 685 176 672 165 q 695 173 692 173 l 695 170 q 678 159 695 159 l 678 132 q 682 129 678 129 q 671 98 671 106 l 671 92 l 682 92 q 699 112 682 112 q 692 125 692 120 q 756 170 711 170 q 838 210 817 210 q 865 220 854 220 q 892 203 883 220 q 902 210 902 207 q 912 207 905 210 l 946 210 q 960 186 952 186 l 960 197 l 953 207 l 960 210 l 963 210 l 970 207 l 970 210 q 963 237 963 222 q 980 288 971 237 l 997 305 l 997 309 q 977 336 977 309 q 1014 407 1004 336 l 1031 410 m 848 417 l 854 414 l 861 414 q 868 420 868 414 l 868 427 q 848 417 848 425 m 1000 366 l 1024 366 q 1031 373 1031 366 q 1027 376 1027 373 q 1000 366 1000 373 m 946 359 q 956 332 951 332 q 936 271 936 281 q 926 264 926 271 l 926 261 l 932 251 l 932 248 l 905 248 q 892 244 898 248 q 838 271 838 254 q 895 336 838 320 q 946 359 936 359 m 7 288 q 17 248 13 282 q 14 214 14 230 q 17 190 17 199 l 3 186 l 0 193 l 0 281 q 7 288 1 288 m 936 210 l 936 200 l 943 200 l 943 203 q 936 210 943 210 m 854 207 l 854 197 q 861 203 861 197 l 861 207 l 854 207 m 875 190 l 875 186 l 878 186 q 895 193 889 193 q 905 190 902 190 l 905 197 q 899 203 905 203 q 875 190 880 203 m 529 176 l 529 166 l 532 166 q 546 176 546 172 l 539 180 q 529 176 532 176 m 125 176 l 136 176 q 149 153 149 171 l 146 153 q 119 170 119 164 q 125 176 120 176 m 27 173 q 85 163 64 163 q 112 166 104 166 q 153 105 153 113 q 146 88 153 88 q 186 34 146 79 q 190 20 190 28 l 190 7 q 183 0 190 0 l 10 0 q 0 10 5 0 l 0 61 q 3 92 0 79 q 0 125 0 109 l 0 159 q 27 173 0 170 m 770 163 l 770 156 l 773 156 q 783 159 780 159 l 783 170 l 777 170 q 770 163 770 168 m 824 163 q 827 153 827 156 l 831 153 q 841 163 836 153 l 841 166 l 831 166 l 824 163 m 546 156 l 546 149 l 566 149 l 566 153 l 546 156 m 729 139 l 729 132 q 746 146 746 141 l 746 149 l 739 149 q 729 139 734 149 m 604 125 l 610 125 q 617 132 617 125 l 617 136 l 614 136 q 604 125 609 136 m 692 136 l 692 129 l 702 129 q 695 136 702 136 l 692 136 m 339 98 l 349 98 l 353 81 q 332 92 332 85 q 339 98 334 98 m 404 95 l 404 85 l 410 85 l 410 95 l 404 95 m 777 85 q 780 68 780 79 l 790 68 l 793 85 l 787 88 l 783 88 l 777 85 m 807 78 l 807 75 l 814 75 l 817 81 q 807 78 810 78 m 356 81 q 383 10 383 56 l 390 10 l 390 0 l 237 0 q 231 7 231 0 l 231 10 q 248 20 231 18 l 278 17 q 329 71 329 38 q 356 81 340 71 m 746 58 l 746 54 l 766 54 l 766 58 l 746 58 m 431 41 l 431 31 l 434 31 q 441 37 441 31 l 434 41 l 431 41 m 526 34 l 526 31 q 532 24 527 24 q 539 31 539 24 l 539 34 l 526 34 m 51 31 l 51 20 l 64 20 l 64 31 l 51 31 m 203 20 l 224 20 l 224 17 q 203 0 218 0 l 200 7 q 203 20 203 13 z "},"c":{"ha":1153,"x_min":-20,"x_max":1139,"o":"m 549 1156 l 570 1153 l 593 1156 l 610 1153 q 637 1156 623 1156 q 648 1126 646 1145 l 641 1112 l 644 1112 q 654 1143 650 1112 q 651 1146 651 1143 l 661 1153 q 899 1085 760 1146 l 899 1075 q 871 1082 895 1075 l 868 1082 l 868 1078 l 905 1055 q 909 1072 909 1060 q 1031 970 943 1072 l 1031 966 l 1027 966 q 983 977 1020 966 q 949 966 981 977 q 929 990 942 966 l 929 963 l 949 960 l 949 949 l 943 949 l 922 953 q 878 902 913 953 q 858 892 870 902 l 851 892 l 841 899 l 810 899 q 726 838 769 838 q 654 905 654 863 q 631 990 650 942 l 634 997 q 610 1024 634 1024 q 576 1051 604 1024 l 573 1051 q 536 1041 562 1051 q 512 1129 519 1041 q 549 1156 539 1156 m 512 1153 q 488 1126 488 1138 q 505 1044 495 1081 q 448 1010 481 1034 q 397 994 419 1010 q 366 997 378 997 l 366 990 l 359 990 q 336 983 336 989 q 254 1027 259 1027 q 244 1024 251 1027 l 224 1027 l 217 1024 q 203 1027 211 1027 l 203 1031 q 488 1153 342 1139 l 512 1153 m 726 1119 l 726 1109 l 729 1109 q 736 1116 736 1109 l 736 1119 l 726 1119 m 777 1095 l 780 1088 q 793 1099 793 1094 q 787 1105 793 1105 q 777 1095 782 1105 m 637 1099 q 634 1088 637 1095 l 637 1088 l 641 1095 l 641 1099 l 637 1099 m 821 1085 l 821 1082 q 844 1068 826 1068 l 848 1075 q 838 1095 848 1093 l 831 1095 q 821 1085 826 1095 m 902 1048 l 902 1044 q 909 1010 909 1019 l 916 1010 q 905 1048 916 1019 l 902 1048 m 766 1041 l 763 1027 l 766 1027 q 780 1031 768 1027 l 780 1041 l 766 1041 m 556 1034 q 610 1000 580 1013 q 631 919 610 982 l 631 892 l 637 882 l 634 875 l 627 878 q 580 882 601 878 q 536 875 543 878 q 526 885 536 880 l 522 885 l 522 871 l 505 871 q 397 729 414 806 q 383 695 391 705 l 387 688 q 370 559 381 669 l 366 559 l 315 607 q 261 604 281 604 l 251 604 q 234 617 249 604 l 237 624 q 231 631 237 631 q 220 621 228 631 l 153 634 q 146 661 146 646 l 146 665 l 153 705 q 58 827 142 743 l 58 841 q 149 977 104 935 q 197 1017 175 1017 l 214 1017 q 251 1014 228 1017 q 264 1017 257 1017 q 332 970 264 1012 q 363 987 359 983 l 376 987 q 397 980 386 987 q 437 997 428 997 l 437 994 q 498 1024 448 994 q 526 1031 502 1024 l 553 1031 q 556 1034 556 1031 m 546 987 l 546 977 l 549 977 l 566 980 l 566 987 l 546 987 m 848 966 l 848 956 l 851 956 q 858 963 858 956 l 858 966 l 848 966 m 983 960 q 1027 949 1013 949 q 1038 953 1034 953 q 1119 787 1077 928 q 1133 699 1133 729 l 1126 695 l 1055 695 q 1038 702 1038 695 q 1010 695 1025 695 l 790 695 q 760 783 783 695 q 743 817 743 799 q 817 868 801 834 q 831 882 818 882 q 871 871 860 871 q 892 885 892 880 l 892 899 l 888 905 q 919 929 909 905 l 980 960 l 983 960 m 275 885 l 275 882 q 281 875 276 875 l 288 875 l 288 885 l 275 885 m 105 848 l 105 841 l 129 841 l 129 844 q 105 848 119 844 m 180 844 l 180 841 q 197 834 194 834 l 200 834 l 200 838 q 183 844 194 838 l 180 844 m 383 834 l 383 831 l 390 831 l 390 841 q 383 834 383 840 m 383 824 l 383 814 l 390 814 l 390 824 l 383 824 m 31 814 q 81 766 52 787 l 115 695 q 109 661 109 680 l 112 631 q -14 529 51 529 q -20 553 -20 546 q -7 682 -17 646 l -10 682 q 31 814 13 794 m 268 787 q 298 766 287 766 l 298 773 q 268 787 270 787 m 339 773 l 339 770 l 346 770 q 353 777 353 770 l 353 780 l 346 780 q 339 773 339 779 m 207 760 l 207 753 l 220 753 l 220 760 q 214 766 220 766 q 207 760 207 765 m 312 763 l 312 760 l 315 743 q 322 749 322 743 l 322 756 q 315 763 322 763 l 312 763 m 834 739 q 824 722 834 733 l 824 712 q 831 705 825 705 l 841 739 l 834 739 m 949 732 l 949 729 l 953 729 q 960 736 960 729 l 960 739 l 956 739 q 949 732 949 738 m 1041 722 l 1041 719 q 1048 712 1042 712 l 1051 719 l 1051 722 l 1041 722 m 275 671 l 278 671 q 292 685 283 671 l 292 688 l 288 688 q 275 671 281 687 m 315 682 l 315 678 l 326 678 l 326 685 q 315 682 319 682 m 248 648 l 248 637 q 254 644 254 637 l 254 648 l 248 648 m 149 627 l 156 627 q 173 614 171 614 l 183 614 q 186 617 186 614 l 193 614 l 214 614 l 220 617 q 251 587 224 600 l 268 590 l 281 587 q 315 590 299 590 q 353 549 315 578 l 339 536 l 339 532 l 346 532 q 353 543 353 532 q 390 390 371 543 q 478 268 411 316 q 458 237 458 245 l 444 237 q 414 214 425 237 l 397 214 l 397 224 l 390 224 l 393 207 q 370 142 387 207 q 356 102 365 142 q 380 75 369 94 l 380 47 q 336 24 358 47 l 332 24 q 302 47 309 47 q 281 41 291 41 q 217 119 251 41 q 248 176 248 163 l 248 186 l 241 186 q 210 125 241 175 q 190 112 210 112 l 180 112 q 54 298 77 209 q 81 332 81 309 l 81 339 q 75 346 81 346 l 71 346 q 75 336 75 339 q 44 309 75 309 q 7 468 7 437 q 31 526 11 526 q 51 536 39 526 l 54 536 l 54 522 q 37 509 37 522 l 41 509 q 71 543 71 517 q 102 559 90 559 l 112 546 q 105 519 105 522 q 119 543 113 519 q 112 570 112 555 q 149 627 112 581 m 190 570 l 190 566 q 193 553 193 560 l 197 553 l 197 559 q 193 570 193 566 l 190 570 m 197 549 q 173 512 197 530 q 180 502 180 512 l 183 502 q 200 522 189 502 l 200 549 l 197 549 m 24 509 l 24 502 l 27 502 q 34 509 34 502 l 24 509 m 81 509 l 81 505 l 95 505 l 95 509 l 81 509 m 332 509 l 332 502 l 346 502 l 363 505 l 363 509 l 332 509 m 302 471 l 309 471 q 312 427 309 469 q 295 414 295 418 l 298 393 q 288 356 296 363 l 288 349 l 295 349 q 305 373 295 358 q 302 410 305 387 q 319 424 303 419 l 312 481 q 329 495 329 490 l 329 498 q 302 471 302 498 m 203 461 l 200 461 q 170 465 188 461 q 159 461 163 461 q 125 465 142 465 q 112 454 125 454 q 92 461 101 461 l 85 448 q 92 444 92 448 q 119 451 104 451 q 109 427 119 439 q 125 451 120 427 q 251 468 197 451 l 251 475 q 244 481 251 481 l 241 481 q 203 461 218 461 m 58 444 l 58 441 l 61 441 q 71 451 61 451 l 71 458 l 68 458 q 58 444 63 458 m 790 437 q 804 434 798 437 q 875 437 848 437 l 888 437 l 909 434 l 916 437 q 929 434 922 434 l 932 434 l 939 437 l 943 431 q 878 397 918 397 q 834 410 847 410 q 804 397 808 397 q 780 404 780 397 q 790 437 780 423 m 983 437 l 1034 437 l 1034 434 q 977 404 1029 415 q 939 400 954 400 l 932 400 l 932 407 q 983 437 958 437 m 1061 437 l 1133 437 q 1139 431 1139 436 l 1139 420 q 1129 383 1139 383 q 1058 427 1109 383 l 1055 427 l 1055 431 q 1061 437 1056 437 m 58 417 l 58 414 q 75 363 58 401 l 78 363 l 81 376 q 61 417 71 376 l 58 417 m 1051 410 q 1065 390 1059 410 q 1129 359 1129 373 q 1027 146 1105 247 q 990 125 1010 125 l 994 119 l 994 115 q 895 37 943 61 q 882 54 892 37 q 916 92 886 92 q 943 156 930 156 l 943 166 q 929 176 943 175 l 929 197 q 919 220 922 207 q 956 281 926 242 q 973 326 961 313 l 973 346 l 960 359 q 1014 393 975 393 q 1051 410 1021 410 m 841 387 l 865 376 l 929 383 q 963 332 949 383 q 909 227 938 260 q 919 183 909 221 q 909 180 912 180 l 909 176 q 929 166 929 176 q 912 102 920 145 q 871 78 871 83 l 871 47 q 793 78 831 47 q 760 105 786 78 q 685 115 715 109 l 685 112 q 665 119 665 115 q 627 112 646 112 q 590 166 614 140 q 536 220 590 177 q 502 248 536 225 q 509 254 503 254 q 583 244 551 244 l 607 244 q 773 376 725 244 l 777 376 q 797 373 794 373 q 841 387 827 387 m 963 387 l 966 380 q 960 373 966 373 l 953 373 l 953 383 q 963 387 956 383 m 186 315 q 156 322 163 319 q 146 319 149 319 l 146 315 q 186 295 180 315 l 193 292 q 227 312 193 312 q 241 315 227 315 l 241 309 l 248 309 l 248 312 l 244 319 q 261 336 252 319 l 261 339 l 258 339 q 186 315 214 319 m 254 322 l 254 319 q 295 295 264 295 l 298 295 q 305 302 305 295 q 254 322 268 302 m 88 315 l 85 309 l 85 305 l 92 305 l 92 278 l 98 278 q 102 302 102 293 l 88 315 m 119 315 l 119 309 l 122 309 q 129 315 129 309 l 119 315 m 319 298 q 373 278 362 298 l 404 254 l 407 261 l 407 264 q 359 302 378 280 q 329 305 341 305 l 326 305 q 319 298 319 304 m 95 275 l 92 261 l 98 261 l 98 275 l 95 275 m 210 251 l 210 241 l 217 237 l 217 241 q 214 251 214 248 l 210 251 m 485 237 l 488 237 q 549 183 513 229 q 580 136 561 183 q 512 105 564 116 q 458 75 512 96 q 427 37 458 62 q 387 58 399 37 l 387 64 l 393 64 l 404 58 l 404 61 q 366 109 395 73 q 397 180 389 120 q 451 224 405 199 q 485 237 474 224 m 231 214 l 231 193 l 237 193 l 237 214 l 231 214 m 888 207 l 895 203 l 902 203 l 902 214 l 895 214 q 888 207 888 212 m 573 58 l 570 51 l 570 47 q 597 44 572 47 l 600 51 l 600 54 l 590 54 l 573 58 m 563 -3 l 570 -7 l 573 0 l 573 3 l 570 3 q 563 -3 563 2 m 665 17 l 665 7 l 675 7 l 675 17 l 665 17 m 817 170 l 827 170 q 834 176 834 170 l 834 183 l 831 183 q 817 170 825 183 m 448 24 l 448 20 q 465 3 448 16 l 468 3 l 468 7 q 448 24 460 24 m 670 46 l 668 47 q 667 43 668 45 l 670 46 m 648 61 l 648 51 l 651 51 q 658 58 658 51 l 658 61 l 648 61 m 633 51 q 634 61 634 55 q 624 68 634 68 q 608 52 616 68 q 621 37 612 44 q 627 41 625 39 l 627 44 q 633 51 629 50 m 498 68 q 495 58 498 64 l 502 54 q 509 61 509 54 l 509 68 l 498 68 m 671 68 l 682 68 q 688 75 688 68 l 678 75 q 671 68 671 73 m 753 125 l 753 119 l 770 122 l 770 129 q 763 136 770 136 q 753 125 758 136 m 878 146 l 878 142 l 885 142 l 902 146 l 902 156 l 899 156 q 878 146 878 154 m 633 51 l 658 51 l 658 47 l 654 31 l 667 43 q 661 34 665 39 l 661 27 l 671 27 l 675 44 l 670 46 l 671 47 l 699 47 q 709 17 705 47 l 715 17 l 715 37 q 722 44 717 44 q 756 37 756 42 q 780 10 756 33 q 777 0 777 3 l 787 0 l 787 7 q 834 -17 812 2 q 858 -10 848 -10 q 871 -20 871 -15 l 871 -24 q 743 -64 768 -64 q 739 -61 743 -61 q 746 -37 746 -47 l 739 -34 q 726 -68 732 -34 q 682 -78 682 -75 l 675 -75 l 654 -75 l 654 -64 l 631 -78 l 624 -75 q 607 -81 613 -81 l 590 -78 q 559 -81 572 -81 q 556 -78 559 -78 l 556 -81 l 549 -78 l 536 -78 q 475 -64 475 -74 q 478 -54 478 -58 l 468 -47 q 458 -68 468 -65 q 353 -41 405 -58 l 353 -37 q 397 -14 375 -14 q 444 -20 422 -20 l 448 -20 q 465 3 448 -12 l 471 3 l 471 -3 l 478 -3 q 485 3 485 -3 l 485 24 q 539 58 500 24 l 546 58 q 556 54 553 54 l 553 47 l 553 41 l 563 41 l 563 47 l 559 54 q 593 85 574 54 l 600 85 q 608 52 600 66 q 607 51 608 52 q 617 37 612 37 l 621 37 q 644 24 630 29 l 648 24 l 648 27 q 627 41 637 27 l 627 41 q 633 51 631 45 z "},"d":{"ha":1085,"x_min":-14,"x_max":1102,"o":"m -3 1133 l 34 1133 q 92 1092 54 1133 q 166 1061 92 1061 q 193 1068 178 1068 q 217 1004 217 1025 q 244 966 226 989 q 92 912 160 925 q 64 905 92 905 l 47 909 l 44 902 l 44 899 l 54 899 q 207 943 180 922 q 244 963 226 943 q 302 895 250 962 q 346 861 338 882 l 342 844 l 346 827 q 336 793 336 810 l 336 770 l 342 760 l 332 712 q 359 644 332 701 q 309 559 359 641 q 203 614 298 559 l 200 614 l 200 607 q 292 556 212 607 q 309 546 309 555 q 261 475 300 511 l 264 461 q 234 363 264 412 q 227 336 234 348 q 231 322 231 330 q 166 292 166 317 l 170 275 q 115 227 149 227 l 75 231 q 54 224 68 231 q 10 281 10 269 q 0 319 10 304 l 0 326 q 41 309 33 309 l 41 312 l 47 309 l 51 309 l 51 312 q -14 390 7 312 l -14 502 l -10 526 l -14 526 q -10 529 -14 529 l -14 570 l -14 641 q -7 661 -14 650 q -14 682 -14 672 l -14 709 q 0 715 -14 715 q -10 739 0 732 q 0 766 0 756 q -14 817 -14 806 q -10 831 -14 825 q -14 868 -14 854 l -14 882 q -7 902 -14 891 q -14 922 -14 913 l -14 1122 q -3 1133 -14 1127 m 88 1133 l 95 1133 q 119 1122 106 1133 q 136 1133 119 1133 l 315 1133 q 326 1122 320 1133 q 275 1072 326 1096 q 241 1048 257 1048 q 210 1092 230 1059 l 200 1092 l 200 1088 q 190 1092 193 1092 q 149 1085 186 1092 q 109 1109 122 1085 l 115 1119 q 112 1122 112 1119 l 105 1119 q 88 1129 88 1123 l 88 1133 m 363 1133 l 400 1133 q 427 1126 415 1133 q 465 1133 441 1133 l 481 1133 q 512 1126 490 1133 q 519 1133 513 1133 l 543 1133 l 556 1122 q 580 1129 563 1122 l 587 1126 l 593 1129 q 637 1105 610 1129 q 651 1109 644 1109 l 651 1099 q 641 1092 641 1099 l 644 1092 l 661 1095 q 692 1075 692 1084 q 685 1055 685 1064 l 685 1051 l 688 1051 q 709 1085 688 1057 q 692 1095 709 1091 l 699 1112 q 729 1099 718 1109 q 743 1102 731 1099 q 899 1031 846 1074 q 875 1024 890 1024 l 875 1017 q 912 1024 879 1017 q 956 977 956 992 q 994 939 978 977 q 1068 807 1033 912 q 1065 797 1065 800 q 1102 610 1089 797 q 1099 573 1102 603 q 1102 559 1102 567 l 1095 556 l 1085 563 l 1078 563 l 1078 556 q 1102 526 1093 541 q 1004 207 1102 378 l 990 193 l 987 193 q 973 210 987 210 q 966 200 970 200 q 909 186 944 200 l 895 193 q 875 173 887 173 l 875 186 q 882 207 875 196 l 875 210 l 858 200 l 854 200 q 848 207 848 200 q 851 220 851 213 l 827 217 q 821 237 821 224 q 827 248 824 237 l 821 251 q 807 217 814 251 q 814 197 814 206 q 807 190 807 195 l 814 190 q 821 200 821 190 l 824 200 q 841 186 824 186 q 810 146 841 170 q 824 132 810 140 q 851 153 824 138 q 916 173 851 168 q 922 163 922 173 l 939 163 l 956 159 l 956 156 q 932 132 956 151 l 929 132 l 929 149 l 922 149 l 922 136 q 821 61 922 104 l 817 61 l 817 64 l 821 78 q 817 88 817 85 l 804 88 l 804 85 q 810 64 804 75 q 732 27 800 44 q 627 7 642 7 q 610 17 610 7 l 604 17 l 607 10 q 570 0 577 6 l 556 0 q 543 3 543 0 l 519 0 l 461 0 q 424 3 447 0 q 404 0 419 0 q 393 3 397 3 q 387 44 393 20 l 410 71 q 420 44 417 71 l 424 44 q 461 78 424 78 q 549 125 502 95 q 566 136 566 125 q 559 173 559 167 q 570 176 566 176 q 556 220 556 191 q 597 241 585 241 l 597 244 l 580 244 l 570 237 l 556 237 q 553 251 556 251 l 556 258 l 556 268 l 546 268 l 617 302 q 665 326 659 326 l 661 332 q 705 390 693 380 l 705 397 q 702 400 705 400 q 726 427 709 427 q 739 414 739 424 l 753 414 q 756 417 756 414 l 763 414 q 800 420 767 414 l 804 420 l 824 417 l 827 417 l 827 420 q 814 434 814 420 q 827 454 814 437 l 824 468 q 848 512 836 498 l 848 515 q 831 536 831 515 l 831 539 q 865 604 865 564 l 865 607 q 777 539 842 572 q 732 515 743 515 l 729 522 l 729 576 q 743 604 729 589 l 743 607 q 729 617 729 607 l 729 641 q 648 824 729 749 q 604 844 609 844 q 702 888 604 888 q 719 817 710 873 q 736 793 730 817 l 732 773 q 790 671 769 700 l 790 665 l 777 641 l 777 637 q 821 610 777 633 q 834 593 827 595 l 838 593 l 834 617 l 841 621 l 844 621 q 861 614 861 620 l 878 617 l 882 617 q 919 597 889 617 q 936 587 927 597 q 1004 631 978 631 q 1024 621 1007 621 l 1044 624 l 1065 617 l 1068 624 l 1068 631 q 1048 637 1062 631 l 1027 634 l 1024 634 q 987 641 1019 634 l 973 641 q 905 614 958 614 q 885 634 892 633 q 824 627 851 627 q 793 644 793 631 q 807 671 805 671 q 743 810 743 764 q 722 844 737 810 l 726 851 q 719 885 726 858 q 722 888 722 885 q 732 885 726 888 q 787 919 787 892 q 790 929 790 919 l 790 932 q 773 943 784 932 l 773 939 l 777 916 q 732 899 748 899 l 719 899 l 685 902 l 685 899 l 678 902 l 627 902 q 576 854 610 902 q 481 882 550 854 q 424 865 481 869 l 390 865 q 359 902 373 902 q 356 916 356 902 l 339 912 l 336 912 q 322 932 336 917 q 261 1007 322 954 l 258 1024 q 295 1055 258 1029 q 332 1078 295 1067 q 370 1105 347 1105 l 370 1109 q 353 1119 353 1109 l 353 1122 q 363 1133 353 1127 m 366 1109 q 373 1102 368 1102 l 380 1102 q 373 1109 380 1109 l 366 1109 m 607 1085 l 607 1082 l 610 1082 q 621 1092 615 1082 l 614 1092 q 607 1085 607 1090 m 549 1088 q 559 1068 551 1068 l 570 1068 q 556 1088 562 1088 l 549 1088 m 583 1075 l 580 1068 l 590 1068 q 583 1075 590 1075 m 617 1072 q 600 1055 617 1055 l 600 1051 q 607 1044 602 1044 q 627 1068 611 1044 l 627 1072 l 617 1072 m 519 1065 l 515 1051 l 522 1051 q 532 1061 522 1061 l 532 1065 l 519 1065 m 41 1058 l 41 1051 l 44 1051 q 51 1058 51 1051 l 41 1058 m 732 1041 l 732 1034 l 736 1027 q 763 1034 763 1029 l 804 1017 l 807 1017 l 807 1024 q 763 1044 800 1024 q 732 1041 745 1041 m 315 1038 l 315 1031 l 322 1031 q 329 1038 329 1031 q 326 1041 326 1038 q 315 1038 319 1038 m 492 1024 l 492 1014 l 495 1014 q 505 1038 505 1034 q 492 1024 500 1038 m 831 1034 q 814 1014 831 1014 q 824 1004 814 1009 l 838 1004 q 844 1024 838 1017 q 831 1034 844 1029 m 621 1014 l 627 960 l 634 960 l 634 994 l 631 1000 l 668 1021 q 678 1010 668 1016 l 685 1010 q 712 1017 688 1010 q 722 1014 719 1014 l 722 1017 l 719 1024 l 695 1021 l 668 1021 q 661 1031 668 1031 q 621 1014 633 1014 m 271 1021 l 271 1017 l 278 1017 l 278 1027 q 271 1021 271 1026 m 726 1017 q 736 1007 726 1013 l 739 1007 l 739 1017 l 726 1017 m 729 983 l 729 980 q 736 973 730 973 l 739 980 l 732 983 l 729 983 m 451 943 l 451 932 l 454 932 q 485 980 454 937 l 478 980 q 451 943 474 980 m 648 946 l 648 943 q 682 912 660 943 l 682 916 q 651 946 682 935 l 648 946 m 773 882 l 773 878 l 787 878 l 787 882 l 773 882 m 946 810 l 943 804 l 943 800 l 960 800 l 960 807 l 946 810 m 370 807 l 373 807 l 373 783 l 370 783 q 363 790 363 783 l 363 800 q 370 807 364 807 m 366 736 l 373 736 l 373 732 q 366 726 373 726 l 366 736 m 95 712 q 81 695 95 695 q 61 702 71 702 q 17 688 28 688 l 10 688 l 10 678 l 37 678 q 68 688 50 688 q 119 654 81 688 q 173 631 142 654 q 203 617 191 631 l 207 617 q 156 644 207 634 q 115 668 156 663 l 98 688 l 102 709 l 102 712 l 95 712 m 1051 614 l 1051 604 q 1061 593 1051 599 l 1065 600 l 1065 604 q 1055 614 1065 608 l 1051 614 m 370 580 l 373 573 l 373 498 q 366 492 373 492 l 363 492 l 336 509 q 370 580 336 556 m 861 546 l 871 546 l 888 549 l 888 556 q 861 546 861 554 m 807 543 q 814 502 810 539 q 797 451 800 484 q 787 444 787 451 l 787 441 l 793 431 l 790 424 l 773 427 l 729 427 q 705 444 705 441 q 715 492 705 454 q 712 495 712 492 l 807 543 m 319 488 l 329 488 q 373 461 373 468 l 373 434 q 366 427 373 427 l 356 427 l 349 444 l 342 444 l 342 434 q 373 397 373 415 l 373 264 l 441 264 l 475 268 q 478 264 475 264 l 475 258 l 475 254 l 481 254 l 488 258 q 495 241 495 247 q 526 254 513 242 l 529 254 l 529 251 q 539 142 529 178 l 539 136 l 478 105 q 414 85 478 100 q 410 81 414 81 q 383 115 403 81 q 346 142 377 115 q 326 149 335 149 q 315 139 326 144 l 312 139 q 302 149 307 139 l 309 149 q 268 200 309 172 q 248 254 253 254 q 207 285 225 285 l 207 295 l 217 295 q 271 346 271 295 q 295 400 271 359 q 292 404 295 404 l 298 451 q 295 465 295 457 q 319 488 298 465 m 712 383 q 719 376 713 376 l 722 383 l 722 390 l 719 390 q 712 383 712 389 m 732 370 l 736 370 q 766 373 754 373 l 766 376 q 756 383 766 383 q 732 370 732 378 m 895 383 l 895 380 q 902 373 897 373 l 905 380 l 899 383 l 895 383 m 685 346 l 685 336 l 692 336 q 699 342 699 336 l 699 349 l 695 349 q 685 346 688 346 m 0 346 l 10 346 l 10 336 l 3 336 q 0 346 3 339 m 949 302 l 956 302 q 966 305 963 305 l 966 315 l 960 315 q 949 302 955 315 m 902 305 q 892 275 902 297 l 916 268 l 922 278 l 922 281 l 912 281 l 912 275 l 909 275 l 905 292 l 909 305 l 902 305 m 0 298 l 3 298 q 14 281 8 298 q 7 261 7 271 q 51 197 51 218 l 51 173 l 71 203 l 78 203 q 85 197 85 202 q 34 109 52 129 l 7 85 q 0 92 0 85 l 0 254 q 3 268 0 262 q 0 281 0 274 l 0 298 m 197 261 q 224 214 197 248 q 248 156 224 169 q 292 102 267 156 l 309 102 q 312 105 312 102 q 370 47 370 81 q 298 7 355 22 q 261 -20 277 -20 l 231 -20 q 227 -17 227 -20 l 220 -20 l -3 -20 q -14 -10 -8 -20 l -14 0 q 51 88 -14 41 q 85 176 77 165 q 176 231 176 183 q 197 234 182 234 l 197 237 l 180 251 l 180 258 l 197 261 m 682 271 q 665 258 682 258 l 665 254 l 668 254 q 688 271 682 254 l 682 271 m 637 268 l 637 264 l 644 251 l 637 251 l 637 244 q 654 251 648 251 l 654 261 q 648 268 654 268 l 637 268 m 939 258 q 926 237 939 251 l 926 234 l 943 234 l 949 258 l 939 258 m 871 244 l 871 241 q 882 231 871 236 l 885 231 q 892 237 892 231 l 892 241 l 875 244 l 871 244 m 604 241 l 604 234 l 624 234 q 617 241 624 241 l 604 241 m 624 203 q 627 190 627 197 l 621 186 l 617 186 q 610 200 617 200 q 590 190 599 190 l 590 183 q 604 186 597 183 q 614 170 614 186 l 617 170 l 654 210 l 658 210 l 671 197 q 675 224 671 205 l 668 224 q 624 203 624 212 m 563 220 l 563 214 l 566 214 q 576 217 573 217 l 576 220 l 563 220 m 387 210 q 393 203 388 203 q 400 210 400 203 l 400 217 l 393 217 q 387 210 387 216 m 766 200 l 766 190 l 773 190 l 773 200 l 766 200 m 838 190 l 848 190 l 848 180 l 844 180 q 838 186 838 180 l 838 190 m 963 180 l 963 176 q 953 166 963 172 l 946 166 q 939 173 939 166 l 939 176 l 963 180 m 726 166 l 726 156 q 732 163 732 156 l 732 166 l 726 166 m 770 149 q 766 139 770 146 l 777 139 l 777 149 l 770 149 m 434 142 q 437 132 437 136 l 444 132 l 444 146 l 441 146 l 434 142 m 546 122 l 543 68 l 563 31 l 566 31 q 573 37 573 31 q 549 92 549 58 q 553 119 553 111 l 546 122 m 783 105 l 783 95 l 790 95 l 790 102 l 793 102 q 800 92 800 102 q 810 112 810 95 q 807 115 807 112 q 783 105 792 105 m 414 17 l 417 17 q 431 41 421 17 l 431 44 l 427 44 q 414 17 418 44 m 366 37 q 376 7 370 14 q 356 0 366 0 l 305 0 l 305 10 q 366 37 348 37 z "},"e":{"ha":949,"x_min":-7,"x_max":953,"o":"m 3 1133 q 20 1119 3 1122 l 24 1112 q 20 1099 20 1106 q 41 1129 24 1099 q 88 1133 60 1129 l 109 1129 q 170 1133 140 1133 l 186 1133 q 224 1129 201 1133 l 231 1133 q 234 1129 234 1133 l 275 1133 l 393 1133 q 404 1116 399 1133 q 451 1133 420 1127 l 590 1133 l 610 1129 q 627 1133 616 1133 q 668 1129 633 1133 l 675 1133 q 722 1116 683 1133 l 722 1109 q 712 1105 712 1109 q 702 1109 705 1109 q 654 1041 654 1109 q 631 953 631 1015 q 634 939 634 947 q 614 916 614 926 l 600 916 q 519 953 520 948 q 488 973 502 973 q 563 912 524 926 q 593 892 585 902 q 580 865 585 865 l 366 865 l 366 709 l 526 709 l 526 705 q 468 682 526 699 q 373 576 401 620 q 309 522 367 576 q 271 515 295 515 l 251 515 q 231 553 231 515 q 210 593 228 593 l 207 610 l 210 627 q 153 729 177 697 l 153 739 q 163 770 163 752 l 163 773 q 102 817 134 773 l 102 824 q 183 875 107 831 q 234 905 234 901 l 234 943 q 302 980 238 962 q 376 1017 312 1000 q 404 1007 393 1007 l 410 1007 q 444 1014 417 1007 l 461 1010 l 468 1014 q 492 1004 485 1004 l 522 1007 q 583 960 522 1003 l 583 953 l 590 953 q 522 1024 590 971 q 492 1034 492 1024 l 458 1031 q 448 1034 454 1031 q 427 1027 434 1027 l 427 1031 q 400 1021 410 1021 l 397 1021 l 397 1027 q 410 1038 397 1036 l 410 1065 q 407 1068 410 1068 l 417 1088 l 417 1102 l 407 1102 q 393 1082 407 1082 l 397 1075 q 332 1024 397 1038 l 295 1004 q 231 977 292 993 l 220 977 q 200 990 203 977 l 149 983 q 139 987 142 987 q 129 983 132 983 q 109 990 115 990 l 109 983 q 125 973 125 983 l 125 970 q 115 953 125 953 l 115 946 q 119 943 115 943 q 92 888 114 911 l 92 885 l 95 885 q 105 888 102 888 q 112 861 112 876 q 75 787 86 861 l 61 783 q 17 807 26 807 q 7 804 10 804 l 14 814 l 10 814 l -7 810 l -7 1021 l -3 1041 q -7 1058 -7 1046 l -7 1088 q -3 1092 -7 1092 l -7 1099 l -7 1122 q 3 1133 -7 1127 m 753 1133 q 760 1126 760 1131 l 753 1122 q 746 1129 746 1122 l 753 1133 m 790 1133 l 922 1133 q 939 1078 932 1133 q 912 1092 916 1092 l 895 1092 l 895 1088 q 946 1027 935 1088 l 946 875 q 936 865 946 870 l 885 865 q 882 868 882 865 l 875 865 l 654 865 l 637 868 l 637 871 q 678 929 650 896 l 678 936 q 709 1041 678 996 q 715 1068 709 1056 q 712 1082 712 1074 q 773 1102 773 1088 l 773 1129 l 790 1133 m 454 1088 l 454 1085 l 461 1085 q 468 1092 468 1085 l 468 1099 l 465 1099 q 454 1088 460 1099 m 339 1092 l 329 1072 l 336 1072 q 349 1092 349 1078 l 339 1092 m 285 1082 l 285 1075 l 295 1075 l 295 1082 l 285 1082 m 512 1072 l 512 1068 l 529 1068 l 529 1075 l 512 1072 m 234 1058 l 234 1055 l 244 1055 l 251 1058 q 248 1068 248 1065 l 244 1068 q 234 1058 239 1068 m 292 1055 q 295 1051 295 1055 q 305 1055 302 1055 l 305 1065 l 302 1065 q 292 1055 297 1065 m 529 1051 l 529 1044 l 546 1048 l 546 1051 l 536 1051 q 532 1048 536 1048 q 529 1051 532 1051 m 180 1031 l 166 1031 l 166 1024 l 183 1021 l 190 1021 q 203 1034 195 1021 q 200 1038 200 1034 q 180 1031 189 1031 m 31 1027 l 31 1017 l 44 1017 q 34 1027 44 1022 l 31 1027 m 214 1024 l 214 1014 l 217 1014 q 224 1021 224 1014 l 217 1024 l 214 1024 m 146 977 l 153 973 q 183 977 165 973 q 197 973 189 973 l 203 977 q 237 953 237 962 q 183 888 237 901 q 129 861 136 861 l 119 895 q 139 949 132 918 q 149 960 144 949 l 142 970 l 146 977 m 44 848 l 64 848 q 71 854 71 848 l 71 858 l 64 858 q 44 848 44 856 m 102 814 q 115 783 111 814 l 98 783 q 88 793 94 783 l 88 797 q 102 814 97 814 m 214 810 l 207 800 l 207 793 l 231 800 l 231 807 l 214 810 m 44 790 q 64 770 53 772 q 129 777 109 777 q 156 766 148 766 q 142 726 142 729 q 210 590 184 684 q 231 519 219 590 l 224 515 l 203 515 l 180 512 q 173 519 180 519 l 170 519 l 176 509 l 176 505 q 159 475 159 488 q 173 461 159 469 l 176 461 l 173 485 q 210 505 180 494 l 251 505 q 288 454 251 466 l 292 454 l 292 458 q 258 495 258 471 l 258 502 l 261 502 q 278 498 273 502 q 356 526 342 498 q 407 563 359 545 q 441 617 407 597 q 498 668 492 668 q 553 685 509 668 l 559 685 q 570 675 564 685 q 563 624 563 643 q 573 614 568 624 q 522 553 573 553 q 488 536 488 548 l 495 536 q 563 549 517 543 q 590 498 568 498 q 597 488 590 488 q 610 492 603 492 q 637 444 635 456 l 631 441 l 481 441 q 468 448 473 448 q 448 441 457 441 l 373 441 l 373 346 q 363 336 373 341 q 373 309 373 319 l 373 305 l 370 285 q 383 261 374 261 q 420 264 406 264 l 427 264 l 448 261 l 454 264 q 458 261 458 264 l 475 264 l 583 264 q 553 224 583 242 l 546 210 q 556 180 546 206 l 505 156 l 461 163 q 458 159 461 159 l 458 163 q 424 146 428 146 l 380 153 q 346 146 351 146 l 346 139 l 349 139 l 366 142 q 373 119 373 125 l 376 119 l 376 129 q 373 139 373 136 q 393 146 384 146 q 397 139 393 139 l 404 142 q 424 136 414 136 l 427 136 q 522 156 460 149 q 559 166 522 163 q 570 132 566 154 q 566 122 566 125 q 580 85 580 102 l 580 81 q 570 78 576 81 l 617 7 l 617 3 l 600 0 l 576 3 l 559 0 q 539 10 539 0 q 488 0 507 0 l 481 0 q 444 3 456 0 q 400 0 422 0 l 326 0 l 315 7 q 288 0 312 7 l 275 0 q 248 3 251 0 q 210 0 224 0 l 149 0 q 119 3 132 0 q 85 0 101 0 l 10 0 q 0 10 5 0 l 0 644 q 3 682 0 659 q 0 709 0 685 l 0 770 q 7 787 1 787 q 44 790 37 790 m 597 722 l 831 722 l 848 688 l 848 532 q 793 502 848 502 q 675 458 785 502 q 590 539 621 539 q 583 559 583 550 l 583 580 q 593 627 593 624 l 593 637 q 587 658 593 647 q 597 712 587 661 l 597 722 m 437 539 l 437 529 q 468 522 460 526 l 485 536 q 475 549 478 549 q 437 539 456 539 m 824 492 l 834 492 q 841 485 841 490 l 841 451 q 831 441 841 446 l 709 441 q 702 448 702 441 q 800 485 767 477 q 824 492 816 485 m 485 478 q 475 454 485 471 l 478 454 q 488 475 484 454 l 488 478 l 485 478 m 295 451 q 302 414 302 437 l 302 404 q 264 383 302 397 q 251 393 264 392 q 217 387 230 387 l 217 380 l 220 380 q 264 383 222 380 q 275 370 270 370 q 315 390 275 378 q 305 451 312 426 l 295 451 m 88 404 l 88 400 q 98 393 88 393 l 98 383 q 88 376 88 383 q 102 366 102 376 l 105 366 q 112 387 105 387 l 119 387 l 132 376 l 142 376 q 88 404 114 404 m 197 393 l 197 383 q 207 387 203 387 l 207 390 q 197 393 203 390 m 47 376 l 51 376 l 75 380 l 75 387 l 68 387 q 47 376 47 385 m 146 376 q 176 359 146 366 q 190 363 178 359 q 203 359 196 359 l 203 370 l 200 376 q 176 370 176 374 q 149 376 164 376 l 146 376 m 302 329 l 319 329 q 336 346 319 346 l 336 356 q 302 329 319 356 m 261 353 q 241 315 261 349 q 261 309 248 309 q 251 298 261 304 q 254 285 254 292 l 258 285 q 278 292 267 285 q 319 278 291 284 l 329 278 l 329 281 q 295 298 329 292 l 295 305 q 309 312 309 305 l 305 312 l 292 309 q 258 322 258 317 q 264 349 258 326 l 264 353 l 261 353 m 342 336 l 342 329 l 356 329 l 356 336 l 342 336 m 315 312 l 322 309 q 329 326 329 319 l 326 326 q 315 312 321 326 m 210 302 l 224 302 q 217 309 224 309 q 210 302 210 307 m 183 268 l 183 264 l 186 264 q 210 288 191 264 l 210 292 l 203 292 q 183 268 197 292 m 624 264 l 807 264 q 838 210 838 264 q 824 197 832 210 l 824 190 q 851 217 847 217 q 861 214 858 214 l 868 217 q 895 190 892 217 q 916 183 905 190 q 929 186 922 186 q 939 170 929 177 q 888 44 918 44 q 858 34 860 34 l 858 31 l 861 31 l 882 34 l 888 34 l 895 31 q 912 47 895 35 l 919 47 q 946 27 946 47 l 946 10 q 936 0 946 5 q 909 3 933 0 q 895 0 903 0 q 888 7 895 7 q 868 0 878 0 l 838 0 l 838 14 l 848 31 l 841 31 q 787 0 828 0 l 766 0 q 763 3 763 0 l 756 0 l 648 0 q 614 41 625 0 q 590 78 590 50 q 621 115 598 115 q 678 125 621 123 l 678 132 q 665 136 667 136 q 590 122 608 122 l 563 207 q 590 234 563 212 q 624 264 590 260 m 841 264 l 885 264 q 905 241 901 241 l 909 241 q 949 261 916 241 l 953 254 q 926 197 953 243 q 905 217 916 197 l 912 231 l 905 234 q 851 224 905 224 l 848 231 l 851 248 q 838 254 843 254 q 841 264 841 261 m 102 200 l 105 180 l 109 180 l 112 203 q 109 207 109 203 q 115 214 115 207 l 115 220 q 102 200 109 220 m 390 214 q 397 207 391 207 q 404 214 404 207 l 404 220 l 397 220 q 390 214 390 219 m 363 193 l 370 190 q 380 193 376 193 l 380 200 l 370 200 q 363 193 363 199 m 465 180 l 465 176 l 478 176 q 505 190 481 190 q 495 197 505 197 q 465 180 465 189 m 515 186 l 515 180 l 529 180 l 529 186 l 515 186 m 824 183 q 804 156 813 156 l 804 149 q 834 176 834 174 q 827 183 834 183 l 824 183 m 95 166 l 95 132 l 98 132 l 102 156 l 102 166 l 95 166 m 865 166 l 865 163 l 878 163 l 878 166 l 865 166 m 302 149 l 302 146 q 315 156 315 151 l 309 156 q 302 149 302 155 m 766 132 q 793 125 783 132 q 797 136 793 129 l 790 139 l 773 139 q 766 132 766 138 m 695 119 l 699 119 q 705 125 705 119 l 702 125 q 695 119 695 124 m 102 112 l 102 102 l 115 102 l 115 105 q 109 112 115 112 l 102 112 m 427 105 l 427 102 q 434 95 429 95 l 437 102 l 437 105 l 427 105 m 624 102 l 624 85 l 627 85 q 634 92 627 92 l 634 102 l 624 102 m 838 92 l 838 81 l 841 81 q 848 88 848 81 l 848 92 l 838 92 m 949 95 l 953 95 l 953 75 l 949 58 l 946 58 q 939 64 939 58 l 939 68 q 949 95 939 93 m 51 81 l 51 78 q 58 85 58 78 l 58 88 q 51 81 51 87 m 393 88 q 400 81 395 81 q 407 88 407 81 l 393 88 m 505 61 q 526 51 509 51 l 539 51 q 566 78 546 78 l 566 85 q 559 88 559 85 q 532 61 551 88 l 505 61 m 339 44 l 339 41 l 342 41 l 383 71 l 383 78 q 339 44 351 71 m 424 64 q 414 68 417 68 l 414 61 l 427 61 q 471 68 441 61 l 478 58 l 498 61 l 498 64 q 475 75 490 64 l 475 71 l 468 75 l 461 75 q 424 64 447 64 m 20 54 l 20 44 q 27 51 27 44 l 27 54 l 20 54 m 380 24 l 380 14 l 383 14 q 390 20 390 14 l 390 24 l 380 24 z "},"f":{"ha":882,"x_min":0,"x_max":902,"o":"m 10 1133 l 136 1133 q 142 1126 142 1131 l 142 1122 q 132 1085 132 1108 l 136 1085 q 156 1129 142 1085 l 173 1133 l 203 1133 q 210 1126 210 1131 q 271 1133 244 1133 l 295 1133 q 322 1129 309 1133 q 349 1133 335 1133 l 366 1133 q 383 1129 378 1133 l 404 1133 l 420 1133 q 465 1129 448 1133 q 512 1133 486 1133 l 566 1133 l 566 1122 q 515 1061 530 1122 q 488 1048 488 1057 l 488 1044 q 492 1031 488 1037 q 454 980 477 980 q 441 977 447 980 q 363 1014 387 1014 l 363 1017 q 366 1021 363 1021 q 356 1034 361 1034 q 326 1021 340 1034 l 302 1024 l 298 1024 q 258 1014 290 1024 l 251 1014 l 241 1021 l 214 1021 q 159 1017 194 1021 q 146 1021 153 1021 q 129 1014 135 1014 l 129 1024 l 146 1027 l 146 1031 q 132 1058 146 1043 l 132 1082 l 129 1082 q 119 1061 119 1078 q 132 1041 119 1058 q 81 1007 124 1007 q 47 990 74 990 l 41 990 q 3 1021 33 1005 q 0 1034 0 1027 l 0 1122 q 10 1133 0 1127 m 644 1133 q 699 1126 667 1133 q 712 1129 705 1129 q 760 1099 723 1129 q 777 1095 765 1095 l 790 1095 q 756 1105 790 1102 q 743 1129 743 1121 l 749 1133 l 892 1133 q 902 1122 897 1133 l 902 1099 q 878 1082 900 1090 q 875 1092 875 1088 l 871 1092 l 861 1085 l 834 1105 l 824 1105 q 817 1099 817 1104 q 858 1075 844 1099 q 854 1061 854 1069 l 858 1061 l 899 1078 l 902 1072 l 902 1041 q 899 1014 902 1027 q 902 987 902 1001 l 902 960 q 861 929 902 935 l 861 926 l 871 919 l 875 919 l 895 936 l 902 926 l 902 895 q 895 878 902 878 l 899 871 l 899 868 l 882 865 l 831 865 q 766 868 804 865 q 756 865 760 865 q 739 878 755 871 l 743 885 l 743 888 q 668 929 730 888 q 624 912 627 916 l 617 916 q 587 905 611 916 l 553 909 q 536 902 542 902 q 478 919 499 919 l 468 919 l 468 946 q 532 966 468 958 q 556 943 532 962 l 556 946 q 526 980 547 966 q 556 1051 534 1051 q 583 1095 566 1051 q 644 1133 633 1133 m 773 1102 q 780 1095 774 1095 l 783 1095 q 790 1102 790 1095 l 773 1102 m 400 1068 q 407 1061 401 1061 l 410 1061 l 410 1075 l 407 1075 q 400 1068 400 1074 m 800 1051 l 790 1021 l 793 987 q 780 980 785 980 l 780 973 l 783 973 l 800 983 l 797 1007 q 807 1051 797 1018 l 800 1051 m 346 1014 q 427 977 391 977 l 427 970 q 417 960 427 965 l 424 946 q 387 865 406 865 l 373 865 l 373 848 q 342 807 373 807 l 342 800 q 359 793 359 800 l 359 770 q 349 763 359 763 l 349 756 l 353 756 l 370 760 l 370 715 l 353 692 q 404 654 353 671 q 407 617 407 625 l 376 580 l 346 580 q 278 526 278 557 l 264 519 q 224 529 233 529 q 203 495 203 529 l 200 495 l 200 505 l 193 505 q 142 458 193 474 q 112 441 142 445 q 64 451 75 451 q 34 444 52 444 q 0 458 0 451 l 0 559 q 3 610 0 595 q 0 668 0 636 l 0 807 q 24 821 5 821 l 44 821 l 44 827 l 41 827 l 7 824 l 0 834 l 0 854 q 41 912 0 912 q 61 932 41 914 l 61 946 l 54 956 l 54 963 q 136 997 82 997 q 146 1000 136 1000 l 163 997 l 163 994 q 132 970 163 989 l 132 956 q 186 1000 140 958 l 220 1000 q 254 990 251 990 q 288 1004 267 990 q 322 997 295 1004 q 346 1014 322 1002 m 7 997 l 10 997 q 51 949 51 956 q 3 916 34 916 l 0 922 l 0 990 q 7 997 1 997 m 777 970 l 777 956 q 783 949 778 949 l 783 953 l 780 970 l 777 970 m 278 966 l 275 960 l 285 960 q 278 966 285 966 m 400 963 l 400 949 l 404 949 q 410 956 410 949 q 404 963 410 963 l 400 963 m 780 939 l 780 936 l 783 919 q 770 905 778 919 l 780 905 q 793 929 793 911 l 780 939 m 85 909 q 98 882 98 895 q 85 871 85 877 l 85 868 l 92 868 q 95 871 95 868 q 105 868 102 868 l 105 851 q 109 848 105 848 q 58 824 109 824 l 58 821 l 71 817 q 146 854 98 817 l 139 854 l 122 844 l 119 844 q 98 902 113 844 l 98 905 q 115 936 115 928 l 112 936 q 85 909 98 930 m 258 912 l 258 902 l 268 902 l 268 912 l 258 912 m 448 916 q 515 888 457 916 l 539 892 q 559 885 545 892 q 648 909 583 895 q 699 868 699 876 l 692 865 l 434 865 l 427 868 q 448 916 442 916 m 739 895 l 739 892 l 760 892 l 760 899 l 756 899 l 739 895 m 264 868 l 264 861 l 275 861 l 275 868 l 264 868 m 153 851 q 200 848 172 851 l 200 854 l 176 858 l 159 858 q 153 851 153 857 m 214 844 l 214 848 q 203 844 207 844 l 207 838 l 224 841 q 251 824 233 841 l 258 824 q 227 851 235 851 l 214 844 m 268 814 q 281 800 271 803 l 285 807 q 268 814 285 814 m 315 810 q 322 804 317 804 l 329 804 q 322 810 329 810 l 315 810 m 288 712 q 295 705 290 705 l 298 712 l 288 712 m 261 692 l 261 671 l 264 671 q 271 678 271 671 l 268 678 l 271 685 q 264 692 271 692 l 261 692 m 41 678 l 47 675 q 54 682 54 675 l 54 688 l 51 688 q 41 678 46 688 m 448 665 l 576 665 q 614 661 591 665 q 641 665 617 665 l 651 665 q 654 661 654 665 l 661 665 l 780 665 q 793 624 786 665 l 793 431 l 790 424 l 773 427 q 743 414 745 414 q 699 417 741 414 q 624 397 699 404 l 515 397 q 488 444 494 397 q 481 461 481 455 l 485 461 q 475 488 475 478 l 478 512 q 458 553 470 512 q 434 580 438 580 q 441 607 441 606 q 437 634 441 610 q 448 665 440 665 m 648 627 q 651 617 651 621 q 668 644 656 617 l 665 644 q 648 627 661 644 m 590 627 l 600 627 l 600 634 l 597 634 q 590 627 590 633 m 743 627 l 743 617 l 746 617 q 753 624 753 617 l 753 627 l 743 627 m 519 590 l 526 587 q 576 610 573 602 l 573 610 q 519 590 519 600 m 617 597 q 624 590 618 590 q 631 607 631 601 l 627 607 q 617 597 623 607 m 590 593 l 590 590 l 593 590 q 604 600 598 590 l 597 600 q 590 593 590 599 m 458 580 l 458 576 q 512 593 512 583 l 502 593 q 458 580 458 587 m 705 587 l 705 576 l 712 576 l 712 580 q 705 587 712 587 m 149 570 l 159 570 l 159 576 l 156 576 q 149 570 149 575 m 556 563 l 556 559 l 566 559 q 580 566 574 566 l 580 573 l 566 573 q 556 563 562 573 m 397 566 l 400 566 q 437 502 437 529 q 451 441 441 502 q 461 414 461 428 l 461 400 l 444 397 l 427 400 q 383 397 405 397 l 373 397 l 373 295 q 363 288 373 288 l 363 285 l 373 271 l 373 258 q 370 210 373 239 q 373 200 373 203 q 366 173 366 182 l 373 170 q 370 156 373 162 q 373 92 373 119 l 373 81 q 366 58 373 58 q 373 7 373 25 l 363 0 l 159 0 l 139 3 l 132 0 q 115 7 121 7 q 105 0 105 3 q 88 20 100 0 q 68 54 78 20 l 58 61 q 17 37 33 53 l 14 37 q 0 64 5 37 l 0 88 q 3 102 0 102 l 0 125 l 0 298 q 3 342 0 320 q 0 380 0 355 l 0 424 q 14 434 0 433 q 34 427 24 427 q 61 434 37 427 q 105 424 71 434 q 153 431 141 431 q 159 410 159 423 l 166 410 q 163 424 166 418 q 166 437 166 430 q 146 444 146 437 q 153 451 147 451 q 173 448 155 451 q 224 502 180 448 q 237 509 237 502 q 271 498 255 498 l 281 498 q 359 563 314 548 l 380 559 l 387 559 l 397 566 m 237 437 q 244 431 239 431 l 248 431 l 248 444 l 244 444 q 237 437 237 443 m 529 417 q 536 410 530 410 l 539 410 q 549 420 544 410 l 546 420 l 529 417 m 766 414 q 777 404 771 414 q 770 397 777 397 l 726 397 l 726 404 q 766 414 756 414 m 705 407 l 709 400 l 709 397 l 699 397 q 692 404 692 397 q 705 407 694 404 m 180 387 l 183 363 l 190 363 l 186 387 l 180 387 m 312 356 l 326 356 q 332 370 326 361 l 332 373 q 312 356 312 373 m 170 305 q 176 298 176 304 q 173 288 173 292 l 183 288 q 193 305 183 294 l 193 322 l 197 322 l 227 319 l 227 322 q 193 349 193 340 l 173 309 q 170 305 170 309 m 248 329 l 248 315 q 258 305 248 311 l 264 305 q 275 315 269 305 q 261 329 275 321 l 248 329 m 302 305 l 302 295 l 309 295 q 315 302 315 295 l 315 309 l 312 309 q 302 305 305 305 m 159 302 q 156 292 159 298 l 163 292 q 166 302 163 295 l 159 302 m 125 275 l 125 271 l 132 271 q 139 278 139 271 l 139 281 l 132 281 q 125 275 125 280 m 248 227 l 248 220 l 261 220 l 261 224 l 258 231 q 248 227 251 227 m 292 224 l 292 220 q 298 214 293 214 l 305 214 q 309 224 305 217 l 292 224 m 322 224 l 322 220 q 346 200 322 216 l 359 200 q 363 210 359 203 q 322 224 353 210 m 342 173 l 342 159 q 356 170 356 165 l 349 173 l 342 173 m 312 153 l 312 142 q 319 149 319 142 l 319 153 l 312 153 m 180 109 l 180 85 q 186 92 186 85 l 186 115 q 180 109 180 114 m 180 75 q 142 34 172 34 l 142 27 l 146 27 q 180 54 180 43 q 186 71 180 60 l 180 75 m 61 51 l 71 37 l 68 20 q 85 10 79 10 l 85 7 q 78 0 85 0 l 64 0 q 37 3 50 0 q 10 0 24 0 q 0 10 5 0 l 0 24 q 10 34 0 28 q 14 31 14 34 q 61 51 47 51 m 278 20 l 275 14 l 281 10 l 285 10 l 285 14 q 278 20 285 20 z "},"g":{"ha":1153,"x_min":0,"x_max":1149,"o":"m 532 1156 l 532 1153 l 539 1156 l 610 1156 q 648 1153 625 1156 q 651 1156 651 1153 q 787 1119 787 1137 q 800 1109 800 1114 l 800 1105 q 790 1102 790 1105 q 780 1105 783 1105 q 732 1034 739 1105 q 712 1000 730 1034 q 715 997 712 997 q 709 953 711 960 q 712 939 712 947 q 688 912 692 912 l 678 912 q 573 970 606 939 l 570 970 q 668 895 593 926 q 671 888 668 888 q 661 868 667 868 q 587 882 640 878 q 390 705 440 882 q 370 559 376 654 q 373 546 373 553 l 373 522 q 363 512 373 517 l 322 512 q 302 583 312 512 q 285 607 290 583 q 288 621 288 613 l 288 627 l 231 732 q 244 766 244 756 q 186 807 211 776 l 183 807 l 186 783 l 180 780 l 176 780 q 156 787 167 780 l 142 780 q 102 804 134 780 l 95 804 q 92 800 95 800 q 85 810 92 810 q 41 777 57 784 q 37 780 41 780 q 176 1004 54 868 q 461 1146 299 1117 l 465 1139 q 458 1133 458 1138 l 465 1129 l 468 1129 l 475 1133 q 481 1116 481 1124 l 488 1116 q 529 1143 529 1129 q 515 1149 515 1143 l 532 1156 m 848 1095 q 1105 865 1023 1030 q 1149 719 1147 768 l 1143 715 l 1058 715 l 1044 732 q 1031 719 1039 732 q 1021 722 1024 722 q 1000 715 1010 715 l 936 715 q 905 726 930 715 l 892 722 q 834 753 861 753 q 709 834 833 759 l 709 838 q 749 902 709 858 q 780 1021 749 962 q 787 1048 787 1042 q 783 1058 783 1055 q 848 1095 848 1058 m 309 966 l 292 966 q 275 980 275 978 l 268 977 l 244 977 q 231 973 237 977 l 224 977 l 207 973 q 186 980 196 980 l 186 973 q 207 956 207 973 q 193 943 203 943 q 197 922 193 940 q 170 885 183 885 l 170 875 q 190 858 190 875 l 190 854 q 159 793 159 835 l 159 790 q 237 848 189 828 q 309 885 274 878 q 363 963 309 963 q 454 1007 434 1007 q 481 997 471 997 q 522 1004 498 997 l 539 1000 l 546 1004 q 570 994 563 994 l 600 997 q 661 956 600 988 l 661 960 q 600 1010 610 1010 q 566 1024 575 1010 l 549 1021 l 532 1021 q 529 1024 529 1021 l 488 1010 l 475 1010 l 475 1017 q 492 1027 475 1023 l 488 1051 l 488 1058 q 498 1088 488 1064 q 495 1099 495 1095 q 458 1027 489 1098 q 356 980 429 1027 l 309 966 m 549 1065 l 549 1061 l 553 1061 q 563 1072 557 1061 l 563 1075 l 559 1075 q 549 1065 555 1075 m 404 1068 l 404 1065 l 410 1065 q 420 1082 418 1065 l 417 1082 q 404 1068 412 1082 m 448 1082 l 448 1078 l 461 1078 l 461 1082 l 448 1082 m 353 1068 l 353 1065 l 370 1065 l 370 1072 l 353 1068 m 607 1048 l 607 1044 l 624 1041 l 624 1051 l 607 1048 m 305 1048 l 305 1044 l 322 1044 l 322 1051 q 315 1058 322 1058 q 305 1048 311 1058 m 363 1044 q 366 1041 366 1044 q 380 1055 376 1044 l 373 1055 q 363 1044 368 1055 m 627 1024 l 627 1021 l 634 1021 q 641 1027 641 1021 l 641 1031 l 634 1031 q 627 1024 627 1029 m 241 1014 l 258 1010 l 261 1010 q 275 1024 267 1010 q 271 1027 271 1024 q 241 1014 241 1019 m 285 1014 l 285 1004 l 288 1004 q 295 1010 295 1004 l 288 1014 l 285 1014 m 207 997 q 210 987 210 990 l 214 987 l 214 997 l 207 997 m 214 966 q 234 963 231 963 q 254 966 252 966 l 275 963 l 275 966 q 309 946 309 951 l 309 936 q 231 868 309 888 q 200 851 231 859 q 193 888 197 856 q 214 943 202 900 q 220 949 220 943 l 214 960 l 214 966 m 539 943 l 539 936 l 549 936 l 549 943 l 539 943 m 115 838 l 136 838 q 142 844 142 838 l 136 848 q 115 838 115 844 m 1044 800 l 1051 797 l 1055 797 l 1055 807 l 1051 807 q 1044 800 1044 806 m 278 790 l 278 783 l 302 790 l 302 793 q 295 800 302 800 l 288 800 q 278 790 283 800 m 770 783 l 773 783 q 844 739 814 768 q 878 722 871 739 q 871 715 878 715 l 814 715 q 777 770 793 715 q 770 783 770 770 m 115 780 q 139 760 127 760 q 203 766 196 766 q 227 753 227 758 q 217 719 217 722 l 217 715 q 278 583 273 641 q 302 512 292 583 l 302 509 l 295 505 l 275 505 q 231 471 248 505 l 231 461 q 248 451 237 461 l 248 454 l 244 478 l 281 495 l 288 495 q 359 488 317 495 q 370 492 366 492 l 376 481 l 376 468 q 373 417 376 451 l 376 417 l 373 410 q 376 397 373 403 q 336 376 367 376 q 329 383 336 383 l 288 376 l 288 370 l 292 370 q 329 373 299 370 q 349 363 345 363 l 387 383 l 383 400 l 390 400 q 404 346 404 360 q 393 342 397 342 l 393 336 l 400 336 l 410 342 l 417 332 l 417 329 l 414 322 q 478 268 420 322 q 587 234 528 241 l 607 237 l 637 237 l 644 241 l 648 234 l 648 227 q 617 193 625 227 q 627 166 627 179 q 576 146 623 166 q 543 153 562 146 q 492 136 540 153 l 448 142 q 427 132 427 138 q 444 119 434 132 l 448 119 q 458 136 450 136 l 465 136 l 465 129 l 471 132 l 481 132 l 492 125 l 498 125 q 593 146 533 138 q 631 156 593 153 q 654 81 644 106 q 644 68 650 68 q 688 -3 644 63 l 692 -24 q 600 -37 631 -37 q 597 -27 597 -31 l 583 -27 q 576 -41 583 -41 l 553 -41 q 383 -14 391 -31 l 387 -7 l 383 -7 l 370 -14 q 180 102 208 43 q 176 98 176 102 q 27 346 64 191 q 14 400 22 346 q 31 404 19 404 l 10 417 l 10 434 q 34 448 28 434 q 27 454 34 454 l 24 454 l 7 451 q 3 454 7 454 q 0 536 3 457 q 41 749 9 749 q 109 780 69 780 l 115 780 m 668 614 l 983 614 q 1010 593 997 614 q 1021 614 1015 614 l 1102 614 q 1122 543 1109 614 l 1102 488 q 1146 407 1146 458 l 1146 373 q 1136 363 1146 368 q 1126 366 1129 366 l 1122 359 q 1129 353 1129 358 l 1129 342 q 1116 278 1122 336 q 1055 261 1093 264 q 1031 264 1041 264 q 1000 207 1016 229 q 990 186 1000 186 q 973 200 975 193 l 973 210 q 980 217 975 217 l 977 224 q 1014 258 1014 252 l 1007 261 q 997 254 997 258 q 987 258 990 258 q 960 244 960 252 l 960 241 l 973 227 q 916 217 973 217 q 895 271 916 229 l 895 275 q 939 261 936 261 l 943 261 q 905 295 943 268 q 827 332 905 332 q 807 326 817 326 l 804 326 q 793 346 793 329 q 797 366 793 349 q 777 383 777 366 q 753 424 777 395 q 810 451 759 437 q 926 488 846 469 q 946 485 943 485 l 949 492 l 949 495 l 946 495 q 746 431 849 487 q 651 522 699 498 q 648 529 651 529 q 668 614 648 582 m 1129 614 l 1136 614 q 1146 604 1141 614 q 1139 583 1146 597 q 1146 536 1146 557 l 1146 475 q 1139 468 1146 468 q 1122 502 1122 491 q 1136 556 1136 536 l 1119 607 l 1129 614 m 661 597 l 665 590 l 665 576 q 658 570 665 570 l 654 570 l 654 590 q 661 597 656 597 m 51 593 l 51 590 q 58 583 52 583 q 64 590 64 583 l 64 593 l 51 593 m 1058 559 q 1061 532 1061 541 q 1048 498 1048 509 l 1055 498 q 1078 536 1069 536 l 1078 543 q 1058 559 1073 543 m 1017 498 l 1034 492 l 1034 498 q 1031 509 1031 505 q 1017 498 1017 504 m 641 509 q 665 485 641 504 l 665 478 l 682 481 q 715 427 694 469 q 763 387 735 406 l 760 380 l 763 373 q 749 366 755 366 l 732 376 l 719 366 l 692 366 q 671 373 682 366 q 651 366 661 366 l 644 366 q 634 404 637 366 q 637 407 634 407 l 634 431 l 634 502 q 641 509 635 509 m 1038 485 l 1038 475 l 1044 475 l 1044 478 q 1038 485 1044 485 m 326 481 l 326 478 q 356 444 326 463 l 363 444 q 326 481 343 458 m 1082 465 l 1085 465 q 1095 475 1090 465 l 1095 478 q 1082 465 1090 478 m 51 417 l 51 410 l 64 410 l 64 417 l 51 417 m 159 393 l 159 387 q 170 380 170 387 l 170 373 q 159 366 159 373 q 180 353 170 366 l 180 356 l 176 373 l 183 376 l 190 376 l 203 366 l 210 366 l 210 370 q 159 393 186 393 m 122 366 l 125 366 l 146 370 l 146 376 l 142 376 q 122 366 122 373 m 1078 370 l 1078 363 l 1082 363 q 1095 366 1084 363 q 1109 363 1101 363 l 1109 370 l 1078 370 m 220 366 q 241 349 220 361 l 248 349 q 261 353 255 349 q 275 349 267 349 q 278 356 275 356 q 275 366 275 363 q 248 359 248 364 q 220 366 235 366 m 332 342 q 309 309 332 326 q 329 298 312 298 q 332 302 329 302 l 336 295 q 326 292 329 292 l 326 281 q 336 275 326 275 q 356 281 347 281 q 390 268 356 275 q 400 271 397 271 l 400 275 q 380 285 397 285 l 370 285 q 346 302 370 302 l 346 295 q 336 298 339 298 l 336 302 l 342 302 l 342 305 q 329 315 329 305 q 339 342 339 338 l 332 342 m 943 339 l 943 332 l 946 332 q 953 339 953 332 l 943 339 m 373 322 l 373 315 q 383 326 378 315 q 373 322 376 322 m 783 326 q 797 298 788 311 q 851 309 836 303 q 899 285 881 309 l 899 281 l 888 268 l 888 261 l 909 227 l 905 220 l 909 200 q 858 132 864 132 q 831 122 831 129 l 861 122 q 899 170 861 128 q 922 207 899 187 q 932 203 929 203 l 939 207 q 973 180 961 207 q 987 173 987 179 l 994 176 l 997 176 q 1010 159 1000 176 q 983 47 1007 117 q 929 24 964 35 l 929 20 q 983 37 968 20 l 997 37 q 1082 -10 1082 10 l 1075 -14 l 1014 -14 q 983 -10 1002 -14 q 963 -14 979 -14 l 963 -10 l 956 -14 l 912 -14 l 905 -10 q 916 14 909 3 l 916 17 l 912 17 q 902 14 905 14 q 892 88 899 18 l 885 88 q 763 3 806 16 q 705 -17 763 -5 q 671 41 694 25 q 661 64 668 54 l 661 68 q 682 102 670 102 q 749 115 711 115 q 739 125 749 120 l 671 112 l 668 112 q 637 207 637 163 q 675 248 654 208 q 783 326 720 256 m 390 312 q 387 302 390 309 l 393 298 q 400 305 400 298 l 400 312 l 390 312 m 254 258 l 254 254 l 261 254 q 285 285 285 271 l 278 285 q 254 258 274 285 m 1139 278 l 1143 278 l 1146 261 l 1146 20 q 1139 14 1146 14 q 1129 17 1133 17 q 1146 -7 1146 -3 l 1136 -14 l 1119 -14 q 1065 27 1108 -14 l 1004 51 l 1004 61 l 1031 153 q 1014 193 1014 185 l 1014 200 q 1058 248 1050 248 l 1099 248 l 1112 237 l 1112 241 q 1109 251 1109 248 q 1139 278 1139 266 m 465 203 l 465 200 l 471 200 q 478 207 478 200 l 471 210 q 465 203 465 209 m 180 207 l 176 190 l 176 170 q 186 207 184 170 l 180 207 m 393 203 l 393 193 l 397 193 q 400 203 397 197 l 393 203 m 434 183 l 434 180 l 444 180 q 451 186 451 180 l 451 190 l 441 190 q 434 183 434 189 m 543 173 l 543 170 q 566 180 554 170 l 570 180 q 593 170 581 180 l 604 170 q 566 186 604 177 q 543 173 543 182 m 390 173 l 390 166 l 397 166 l 397 180 q 390 173 390 178 m 170 159 l 166 142 l 166 125 q 173 132 173 125 l 173 159 l 170 159 m 932 156 q 939 149 934 149 l 943 149 l 943 156 l 932 156 m 373 139 l 373 136 q 387 146 387 141 l 380 146 q 373 139 373 144 m 760 115 l 760 109 l 766 109 q 787 125 787 121 l 780 125 q 760 115 764 115 m 695 85 l 695 78 q 705 88 700 78 l 705 92 l 702 92 q 695 85 695 90 m 902 75 l 909 71 l 912 78 l 912 81 l 909 81 q 902 75 902 80 m 465 78 q 471 71 466 71 q 478 78 478 71 l 465 78 m 627 78 q 597 47 602 47 q 546 64 561 54 l 546 61 l 539 64 l 532 64 q 505 54 524 59 q 492 58 499 58 l 485 58 q 492 51 486 51 l 509 51 q 543 58 515 51 q 553 47 543 53 l 559 51 q 610 41 595 41 q 637 68 620 68 l 637 75 q 627 78 634 75 m 451 75 q 424 54 451 62 q 410 34 424 47 l 410 31 l 417 31 q 431 51 431 36 l 448 51 q 458 71 458 54 l 451 75 m 1078 47 l 1078 41 l 1092 41 l 1092 44 l 1078 47 m 1105 31 l 1105 27 q 1116 20 1105 20 l 1119 20 l 1119 24 q 1105 31 1114 24 m 960 14 l 960 0 l 966 0 l 966 14 l 960 14 m 600 -3 l 600 -7 l 604 -7 q 614 -3 610 -3 l 614 3 l 607 3 q 600 -3 600 2 z "},"h":{"ha":1085,"x_min":0,"x_max":1109,"o":"m 10 1133 l 125 1133 q 146 1126 135 1133 q 166 1133 157 1133 l 166 1129 l 173 1133 l 244 1133 q 251 1126 251 1131 l 248 1095 q 264 1065 248 1076 l 264 1055 q 241 1041 246 1055 l 241 1038 q 261 1044 252 1044 q 295 966 295 1006 q 370 916 312 941 l 373 909 l 373 834 q 363 810 373 818 q 373 770 373 793 q 329 712 373 722 l 309 712 l 285 715 q 258 688 285 709 q 248 610 258 672 l 237 610 l 217 607 q 186 624 204 611 l 183 624 q 122 604 128 604 q 98 607 109 607 q 10 583 39 583 l 7 583 q 0 590 0 583 l 0 851 l 3 892 l 0 892 q 7 902 3 902 q 0 926 0 916 q 20 953 0 934 l 17 953 l 7 946 q 0 953 0 946 l 0 1004 q 27 1017 0 1014 l 68 1014 q 88 1024 71 1024 l 102 1024 l 102 1027 q 92 1038 102 1032 q 105 1055 96 1053 q 132 1038 114 1038 q 180 1055 180 1040 l 180 1061 q 125 1048 171 1055 l 98 1061 l 95 1061 q 54 1024 95 1039 q 24 1034 32 1034 q 3 1024 20 1024 l 0 1031 l 0 1044 q 3 1085 0 1067 q 0 1126 0 1103 l 10 1133 m 275 1133 l 339 1133 q 353 1129 347 1133 q 363 1133 359 1133 q 373 1109 373 1120 l 373 1044 q 370 1010 373 1028 q 373 980 373 998 l 373 943 q 363 936 373 936 q 305 977 328 946 q 268 1055 305 1019 l 271 1061 l 271 1085 l 268 1085 l 261 1082 q 254 1119 258 1086 q 275 1133 258 1133 m 729 1133 q 736 1129 736 1133 l 777 1133 l 804 1133 l 827 1126 q 858 1133 850 1133 l 871 1133 q 960 1092 943 1133 l 963 1072 l 966 1072 l 966 1078 q 943 1129 966 1089 l 943 1133 l 1085 1133 q 1095 1122 1090 1133 l 1095 1017 q 1082 1007 1095 1007 q 1072 1010 1075 1010 l 1072 1004 l 1095 990 l 1095 987 q 1088 980 1095 980 l 1078 987 q 1072 980 1078 980 l 1051 983 l 1038 977 q 1027 980 1031 980 l 1027 973 q 1044 970 1039 973 q 1058 973 1050 973 q 1078 966 1078 972 l 1085 970 l 1088 970 q 1095 963 1095 968 q 1088 929 1095 929 q 1095 892 1095 916 l 1095 685 q 1092 648 1095 671 q 1095 621 1095 644 l 1095 600 q 1068 587 1095 592 q 1055 604 1055 590 l 1051 604 q 1007 580 1026 580 l 1014 570 l 1014 559 l 1017 519 l 1027 519 q 1021 546 1021 531 l 1021 566 q 1058 587 1021 573 q 1068 576 1058 582 l 1092 580 l 1095 573 l 1095 475 q 1085 465 1095 470 l 1078 465 q 1072 471 1072 465 q 1075 481 1075 478 q 1041 515 1048 515 l 1031 515 l 1031 512 q 1068 471 1057 512 l 1061 468 l 1038 471 l 1024 468 l 1017 471 q 949 420 981 471 q 912 404 912 410 l 916 404 q 892 363 911 363 q 817 302 835 302 q 763 285 777 285 q 753 295 763 290 q 760 336 760 319 q 753 370 753 363 q 797 417 758 417 q 838 431 827 421 l 848 424 q 888 431 878 431 l 888 434 q 858 451 888 440 q 763 420 858 438 q 732 475 755 463 l 732 481 l 715 481 q 671 546 708 481 q 634 576 661 546 l 634 600 q 675 631 661 604 q 729 675 708 641 l 736 671 l 756 671 q 726 685 756 675 l 726 688 q 777 756 728 705 l 777 760 q 770 790 770 782 l 770 797 q 821 814 789 797 q 854 807 829 814 q 899 824 863 807 q 936 821 922 821 l 953 821 l 977 824 q 949 844 949 838 l 949 848 l 946 848 l 946 844 q 949 831 949 838 q 932 824 939 824 l 929 831 q 932 841 932 838 l 926 841 l 926 831 l 892 834 l 888 834 q 851 821 871 821 l 817 821 q 766 804 789 804 q 749 865 759 817 q 743 885 743 865 l 753 892 q 722 949 722 942 l 722 1007 q 739 1058 722 1019 l 739 1075 l 756 1072 l 760 1078 l 760 1082 l 743 1078 q 722 1105 722 1081 l 722 1122 l 729 1133 m 139 1116 q 142 1105 142 1109 l 149 1105 l 149 1116 l 139 1116 m 1027 1105 q 1034 1099 1029 1099 l 1038 1099 l 1038 1105 l 1027 1105 m 777 1092 l 770 1082 l 773 1082 q 787 1088 781 1088 l 787 1092 l 777 1092 m 966 1061 l 966 1051 q 980 1044 972 1051 l 980 1051 q 970 1061 980 1056 l 966 1061 m 770 1048 l 770 1041 l 780 1041 l 780 1048 l 770 1048 m 217 1041 l 217 1031 l 220 1031 q 231 1041 225 1031 l 217 1041 m 139 1027 l 136 1021 l 149 1010 l 156 1010 l 156 1014 q 139 1027 156 1019 m 210 1021 q 203 1014 210 1014 l 200 1014 l 183 1017 l 180 1010 q 254 949 201 1010 l 264 943 l 268 943 q 214 1021 214 998 l 210 1021 m 800 1000 q 797 990 800 997 l 804 987 l 807 987 q 814 994 814 987 q 807 1000 814 1000 l 800 1000 m 1000 960 l 1000 949 l 1004 949 q 1017 970 1004 954 l 1017 973 l 1014 973 q 1000 960 1005 960 m 780 963 q 787 956 781 956 l 790 956 q 797 963 797 956 l 797 966 l 780 963 m 932 949 l 932 946 l 943 946 l 943 956 l 939 956 q 932 949 932 955 m 278 939 l 278 936 q 292 929 283 936 l 292 932 q 281 939 292 939 l 278 939 m 783 919 q 756 892 783 892 l 756 885 q 763 882 763 885 l 797 912 l 800 912 l 865 895 q 905 905 865 905 l 905 909 q 899 912 899 909 l 851 902 q 783 919 851 915 m 963 909 l 960 909 q 956 912 956 909 q 936 882 945 912 l 939 882 q 973 902 939 902 l 973 919 l 970 919 q 963 909 963 919 m 722 905 l 726 905 q 732 899 732 904 l 729 882 q 722 888 722 882 l 722 905 m 916 888 q 922 882 917 882 l 932 882 l 932 888 l 916 888 m 729 851 q 760 763 753 798 q 732 732 760 757 q 715 702 732 724 q 661 637 715 661 q 631 617 650 617 q 600 658 620 617 l 583 658 q 546 651 559 658 q 498 675 498 660 l 498 678 l 509 692 q 488 729 509 696 q 498 753 492 753 l 502 753 q 529 749 526 753 q 566 753 552 753 l 624 753 q 651 749 638 753 q 678 753 664 753 l 722 753 l 722 800 q 726 838 722 814 q 722 848 722 844 l 729 851 m 227 827 l 227 810 l 234 810 l 234 827 l 227 827 m 1004 814 l 1004 810 l 1007 810 q 1021 821 1021 816 l 1010 821 q 1004 814 1004 819 m 821 780 q 804 787 810 787 q 827 773 804 781 q 865 793 865 783 l 858 797 l 854 797 q 821 780 833 780 m 1000 793 l 997 777 l 1004 777 q 1007 790 1004 784 l 1000 793 m 946 777 l 946 773 l 960 773 l 960 780 l 956 780 q 946 777 949 777 m 997 763 q 994 753 997 760 l 997 753 q 1004 760 1004 753 l 1004 763 l 997 763 m 919 753 l 919 749 l 929 749 l 929 760 l 926 760 q 919 753 919 758 m 410 753 l 414 753 q 420 746 420 751 l 417 739 q 420 736 420 739 l 468 749 q 481 746 474 746 l 478 722 q 505 695 486 722 q 502 685 502 688 q 458 699 461 699 l 454 699 q 492 665 454 691 q 529 631 502 631 l 549 631 q 553 634 553 631 l 559 631 l 597 631 q 621 590 605 609 l 617 566 q 644 536 624 565 l 644 532 q 475 475 568 493 q 461 471 475 471 q 451 475 454 475 l 448 468 l 448 465 q 614 509 495 465 q 654 526 640 526 q 746 437 691 465 l 746 410 q 736 359 746 392 q 743 312 743 323 l 732 275 q 766 217 748 237 l 766 210 q 732 159 752 199 l 722 159 l 722 437 l 478 437 q 465 441 471 437 q 451 437 458 437 l 373 437 l 373 383 q 366 376 373 376 l 363 376 q 353 404 363 386 q 366 441 353 410 l 366 444 l 363 444 q 339 407 363 439 q 373 349 373 366 l 373 339 q 346 315 373 321 l 339 319 l 332 319 q 302 312 324 319 q 281 346 290 312 l 285 353 l 285 356 q 275 424 275 409 q 295 475 295 469 q 251 522 281 475 q 241 529 251 529 l 244 536 q 234 587 237 547 q 268 597 250 597 l 268 607 q 312 695 273 695 l 336 699 l 359 695 q 390 746 366 695 q 410 753 401 753 m 105 722 l 105 719 l 109 719 q 122 729 122 724 l 115 732 q 105 722 111 732 m 387 705 l 387 699 l 390 699 q 397 709 397 699 l 404 709 l 404 702 l 410 702 q 441 715 441 708 q 420 732 441 721 q 387 705 397 723 m 970 719 l 977 715 l 977 726 q 970 719 970 724 m 865 705 l 865 699 l 875 699 l 875 705 l 865 705 m 922 705 q 932 692 928 692 l 939 692 q 946 699 946 692 q 929 705 929 699 l 922 705 m 92 685 l 92 682 l 102 682 l 102 692 l 98 692 q 92 685 92 690 m 997 685 q 1010 671 997 682 l 1017 675 l 1027 675 l 1027 665 l 1017 665 l 1017 658 l 1034 661 l 1051 658 l 1051 665 q 1061 661 1058 661 l 1061 658 l 1055 658 l 1055 654 q 1068 634 1068 654 q 1085 654 1074 634 q 1061 661 1085 661 l 1072 675 l 1072 678 q 1065 685 1072 685 l 1041 678 q 1007 692 1041 685 l 1004 692 q 997 685 997 690 m 899 685 q 909 675 899 680 l 912 675 q 919 682 919 675 l 912 685 l 899 685 m 994 644 l 997 644 q 1007 661 1004 644 l 1004 661 q 994 644 996 661 m 939 658 l 939 654 q 960 634 939 634 l 980 634 l 980 641 l 977 641 l 960 637 q 943 658 948 658 l 939 658 m 987 624 l 987 614 l 990 614 q 1024 637 998 614 l 1021 644 q 997 624 1008 644 l 987 624 m 1055 621 q 1061 614 1056 614 l 1065 621 l 1065 627 l 1061 627 q 1055 621 1055 626 m 905 624 l 899 614 l 902 614 l 909 624 l 905 624 m 699 604 l 699 600 l 715 597 l 715 607 l 699 604 m 190 587 q 231 570 231 577 l 227 549 q 244 495 232 549 q 275 465 245 486 l 288 444 l 271 390 l 292 336 q 275 292 292 292 q 220 254 254 292 q 227 234 227 241 l 234 234 q 288 278 254 278 q 322 275 318 275 q 383 288 339 280 l 387 281 l 387 224 q 376 207 387 207 l 376 197 q 387 180 387 197 l 387 136 l 376 122 q 387 92 387 109 l 387 7 q 383 3 387 3 l 387 -3 l 387 -10 q 380 -17 387 -17 q 373 -3 373 -17 q 349 -20 363 -20 l 346 -20 q 339 -14 339 -20 q 349 -7 339 -7 l 349 -3 l 339 -3 q 319 -17 330 -3 l 312 -17 q 295 -3 297 -3 l 295 -20 l 220 -20 q 180 -17 197 -20 q 139 -20 162 -20 l 109 -20 q 81 0 95 -20 q 71 -20 77 -20 l 24 -20 q 14 -10 19 -20 l 14 112 q 68 136 14 136 q 109 159 90 154 l 115 156 q 142 163 119 156 q 186 146 144 152 q 214 149 205 149 q 248 105 242 149 q 244 95 244 98 q 248 81 244 87 q 244 51 244 63 l 244 44 q 285 3 244 26 l 295 3 q 319 17 295 10 l 319 20 q 312 27 312 20 q 302 17 302 27 q 254 47 254 24 l 264 81 l 264 95 q 258 119 264 119 q 264 163 264 155 q 254 203 254 180 l 258 203 q 241 227 251 224 l 237 227 l 237 200 q 248 159 237 190 l 241 156 l 234 156 l 224 163 q 176 159 205 163 q 149 180 155 163 l 142 183 q 51 153 86 169 q 17 146 23 149 l 14 153 l 14 441 q 27 502 14 456 q 61 549 27 549 q 163 570 134 570 l 190 587 m 288 597 l 288 590 l 315 590 l 315 597 l 288 597 m 661 590 l 658 583 l 668 583 q 661 590 668 590 m 743 580 q 749 573 744 573 l 753 573 l 753 580 l 743 580 m 871 566 q 878 559 873 559 l 878 573 q 871 566 871 572 m 3 566 l 7 566 q 14 559 14 565 q 3 532 14 534 l 0 532 l 0 549 l 3 566 m 838 509 l 838 502 l 841 502 q 868 543 868 534 l 865 543 q 838 509 861 543 m 309 498 q 298 488 309 488 l 298 481 q 312 495 312 485 l 312 498 l 309 498 m 10 478 q 17 471 12 471 l 20 471 l 20 478 l 10 478 m 359 471 l 359 468 q 370 454 365 454 q 376 461 376 454 q 366 471 366 461 l 359 471 m 1058 434 l 1088 434 q 1099 424 1093 434 l 1099 397 q 1109 339 1109 353 l 1109 186 q 1105 139 1109 168 q 1109 119 1109 134 l 1099 85 l 1105 75 q 1095 37 1105 60 l 1099 31 l 1095 10 q 1109 3 1109 10 l 1109 -10 q 1099 -20 1109 -15 q 1092 -17 1092 -20 l 1051 -20 l 746 -20 q 736 -10 741 -20 l 736 20 q 746 27 736 27 l 810 3 l 810 14 q 739 58 739 52 q 787 153 739 100 q 810 180 787 170 l 810 186 q 780 237 780 214 l 865 271 q 953 370 936 338 q 1021 427 960 370 q 1058 434 1034 434 m 214 366 l 203 373 l 200 373 q 207 359 203 359 q 186 342 201 342 l 186 322 l 190 322 q 231 349 231 342 q 261 380 244 349 l 251 380 q 227 356 248 380 l 224 356 l 224 359 l 234 376 l 234 383 l 231 383 q 214 366 229 383 m 132 356 l 139 353 l 142 359 l 142 363 l 139 363 q 132 356 132 361 m 180 302 q 163 288 180 297 l 170 285 q 180 288 176 288 q 186 281 181 281 l 190 281 q 197 288 197 281 l 180 302 m 102 271 l 105 254 l 112 254 l 112 271 l 102 271 z "},"i":{"ha":407,"x_min":14,"x_max":393,"o":"m 24 1133 l 136 1133 q 139 1129 139 1133 l 146 1133 l 231 1133 q 264 1129 247 1133 q 295 1133 277 1133 l 315 1133 q 359 1075 344 1133 q 383 1038 369 1075 l 380 1024 q 383 1014 383 1017 q 380 1000 380 1008 q 387 994 387 999 l 387 983 q 373 960 377 960 q 359 963 367 963 l 356 956 q 387 946 387 952 l 387 892 q 380 878 380 884 q 387 858 387 867 l 387 746 q 380 722 387 722 l 383 709 q 380 658 380 666 q 383 637 380 655 q 380 624 380 631 q 387 617 387 623 l 387 526 q 373 481 387 494 l 373 478 q 376 475 373 475 q 373 465 373 468 q 346 471 370 465 l 342 471 l 342 468 q 383 437 383 444 l 376 437 q 387 373 387 385 l 387 356 q 363 302 387 335 l 332 281 l 326 281 l 305 292 q 264 258 278 292 q 200 227 222 227 l 186 231 q 170 224 176 224 q 119 349 141 224 q 105 380 114 351 l 109 387 q 85 414 109 414 q 51 441 79 414 l 47 441 q 17 434 39 441 l 14 441 q 17 448 14 448 l 14 471 l 14 495 q 17 509 14 509 l 14 532 l 14 627 q 47 665 14 646 q 20 675 45 665 l 24 682 q 14 705 14 694 q 37 726 14 715 l 37 736 q 14 749 22 736 l 14 800 q 17 804 14 804 l 14 810 l 14 854 q 20 875 14 864 q 14 895 14 886 q 17 916 14 911 q 14 953 14 939 l 14 980 q 20 1000 14 989 q 14 1021 14 1011 l 14 1027 q 17 1061 14 1044 q 14 1092 14 1074 q 17 1095 17 1092 q 78 1082 23 1095 l 78 1085 q 17 1109 78 1091 l 14 1126 l 24 1133 m 349 1133 l 376 1133 q 387 1122 381 1133 l 387 1075 q 380 1068 387 1068 q 353 1116 370 1068 q 342 1122 342 1116 l 342 1126 q 349 1133 344 1133 m 136 1085 l 132 1068 q 142 1072 136 1068 l 159 1068 l 159 1075 q 136 1085 146 1075 m 112 990 l 112 987 l 119 987 l 119 997 q 129 1021 119 1008 l 129 1027 q 112 990 121 1027 m 359 997 l 359 994 l 363 994 q 370 1000 370 994 l 370 1004 l 366 1004 q 359 997 359 1002 m 302 1000 l 302 990 l 312 990 l 312 994 q 305 1000 312 1000 l 302 1000 m 315 977 l 309 980 l 295 980 l 281 970 l 275 970 l 261 980 l 261 977 q 268 970 262 970 l 251 949 l 251 946 l 254 946 q 312 973 304 973 q 332 970 330 970 q 346 983 336 983 l 346 990 l 315 977 m 105 966 l 102 960 l 102 953 q 112 963 106 953 l 105 966 m 281 932 l 285 932 q 298 936 291 936 l 298 929 l 315 929 q 319 939 315 932 l 298 939 q 319 956 298 949 l 319 963 l 315 963 q 281 932 281 942 m 122 953 q 119 943 122 949 q 142 932 132 939 l 146 932 l 146 936 q 129 953 146 941 l 122 953 m 193 899 l 193 895 l 207 895 q 275 922 220 895 l 275 932 q 203 905 232 905 q 193 899 193 905 m 353 916 q 366 888 358 888 l 370 888 l 370 895 q 353 916 357 916 m 112 905 l 112 902 q 119 895 113 895 l 122 895 l 122 909 q 112 905 115 905 m 170 902 l 170 888 l 176 888 q 186 899 181 888 l 180 902 l 170 902 m 163 861 l 163 858 q 166 854 166 858 q 159 848 159 853 q 176 766 170 818 q 190 746 190 760 l 193 746 q 200 753 200 746 q 180 783 180 768 l 180 790 l 190 804 l 180 804 l 180 817 l 183 824 q 180 827 180 824 l 183 827 l 180 834 l 193 851 l 193 854 l 190 854 l 173 851 q 163 861 173 856 m 58 844 l 58 841 l 88 841 l 88 851 l 71 851 q 58 844 63 844 m 146 827 l 142 821 l 142 814 q 153 824 147 814 l 146 827 m 75 793 l 75 787 l 85 787 l 85 793 l 75 793 m 132 783 l 142 783 l 142 790 l 139 790 q 132 783 132 789 m 75 756 l 75 746 l 92 746 q 98 753 98 746 l 95 760 q 75 756 90 756 m 193 743 q 163 712 193 728 q 166 709 166 712 q 115 654 146 708 l 71 648 q 61 665 61 659 l 58 665 q 51 658 51 663 q 54 654 54 658 q 51 651 51 654 q 75 641 63 641 l 81 641 l 122 644 l 132 627 l 146 627 q 166 634 153 634 l 166 648 l 153 648 l 153 641 l 142 641 q 129 658 138 641 q 203 732 130 667 l 203 739 q 193 743 200 739 m 149 726 l 149 722 l 159 722 l 159 732 l 156 732 q 149 726 149 731 m 81 699 l 81 692 l 92 692 l 92 699 l 81 699 m 54 685 l 61 682 l 68 682 l 68 692 l 61 692 q 54 685 54 690 m 186 637 l 186 634 l 197 634 l 197 644 l 193 644 q 186 637 186 643 m 214 621 l 214 617 l 227 617 l 227 621 q 220 627 227 627 q 214 621 214 626 m 186 621 l 186 614 q 197 604 186 609 l 200 610 q 186 621 200 616 m 207 583 l 207 576 q 210 580 210 576 q 275 563 245 563 l 278 570 q 271 576 278 576 l 268 576 q 254 570 260 570 q 224 590 240 576 l 214 590 q 207 583 207 589 m 47 573 l 47 570 q 61 580 61 575 l 61 583 l 58 583 q 47 573 53 583 m 309 570 l 309 566 q 315 559 310 559 q 322 566 322 559 l 322 570 l 309 570 m 119 543 l 119 536 l 122 515 l 115 502 l 119 502 q 129 549 126 502 l 125 549 q 119 543 119 548 m 200 502 l 210 502 l 210 509 l 207 509 q 200 502 200 507 m 251 485 l 254 478 q 268 488 268 484 l 268 495 l 261 495 q 251 485 256 495 m 112 488 q 109 478 112 485 l 112 478 l 115 485 l 115 488 l 112 488 m 295 475 q 319 458 300 458 l 322 465 q 312 485 322 482 l 305 485 q 295 475 302 485 m 237 424 l 237 414 q 254 420 248 420 l 254 431 l 244 431 q 237 424 237 429 m 37 404 q 92 370 61 382 q 112 288 92 351 l 112 261 q 129 217 121 252 l 156 186 q 149 149 149 173 l 149 132 q 153 129 149 129 l 149 122 l 149 115 q 197 85 149 111 l 197 81 q 170 17 170 56 q 163 10 163 16 l 163 7 l 166 7 l 176 14 l 183 14 q 200 3 183 3 q 207 10 207 3 q 197 27 207 27 q 224 85 197 31 q 173 115 224 88 q 170 129 170 121 l 170 149 q 224 190 186 190 q 292 224 253 190 q 312 251 292 244 q 353 241 341 241 q 373 264 373 246 l 373 275 q 390 278 385 275 l 393 271 l 393 231 q 390 197 393 197 q 393 149 393 168 l 393 -10 q 387 -17 393 -17 l 353 -17 l 342 -10 q 332 -20 342 -15 q 264 0 315 0 l 264 -7 q 285 -14 271 -7 q 298 -10 291 -10 q 309 -14 305 -14 q 302 -20 309 -20 l 292 -20 q 288 -17 288 -20 l 281 -20 l 258 -20 q 251 -7 251 -20 l 244 -7 l 244 -17 l 237 -17 q 227 14 229 -17 l 220 14 q 210 3 216 14 q 217 -14 217 -7 q 190 -20 205 -20 l 31 -20 q 20 -10 26 -20 l 20 75 q 24 92 20 86 l 20 112 l 20 146 q 71 176 20 168 q 109 183 85 176 l 115 180 l 115 193 l 24 173 q 20 183 20 180 q 24 200 20 195 q 20 231 20 218 l 20 234 q 24 264 20 252 q 20 298 20 282 l 20 339 q 47 349 22 349 l 47 356 l 20 356 l 20 390 q 37 404 20 395 m 322 356 l 322 346 l 326 346 q 332 353 332 346 l 332 356 l 322 356 m 309 129 q 298 112 309 123 l 298 105 q 305 98 300 98 l 309 98 l 309 109 q 315 129 309 118 l 309 129 z "},"j":{"ha":949,"x_min":20,"x_max":916,"o":"m 553 1163 q 566 1160 566 1163 l 590 1163 l 688 1163 q 722 1160 705 1163 q 753 1163 735 1163 l 807 1163 q 810 1160 810 1163 l 817 1163 l 838 1163 l 844 1160 q 838 1126 841 1134 l 844 1126 q 868 1163 844 1163 l 878 1163 q 885 1149 885 1163 l 888 1149 q 895 1163 888 1163 l 905 1163 q 916 1153 910 1163 l 916 1122 l 912 1105 l 916 1105 l 912 1099 l 912 1088 q 916 1085 912 1085 q 875 1058 916 1080 l 871 1051 l 878 1048 q 912 1061 897 1061 l 916 1055 l 916 936 l 909 936 q 878 1027 878 985 q 871 1021 871 1026 l 871 1004 q 868 973 871 991 l 868 970 l 871 970 l 871 977 l 882 977 q 912 905 896 952 q 888 878 912 889 q 885 868 885 871 l 882 868 l 878 882 l 875 882 q 865 871 870 882 l 865 865 l 875 865 l 882 868 l 882 854 q 865 838 882 850 q 909 766 891 773 l 912 743 q 905 712 910 712 q 831 692 884 699 l 831 688 q 841 685 834 688 q 902 702 890 692 q 916 682 916 699 l 916 604 q 895 549 916 574 q 854 495 895 508 q 810 465 822 465 q 780 509 800 475 l 770 509 l 770 505 q 760 509 763 509 q 722 502 753 509 q 678 526 693 502 l 685 536 q 637 546 646 546 q 671 515 637 540 q 705 481 682 481 l 732 481 q 736 485 736 481 l 749 478 q 777 485 762 485 q 800 420 800 441 q 827 383 800 416 q 648 322 745 342 l 631 326 l 627 319 l 627 315 q 797 359 679 315 q 827 380 806 359 q 882 315 833 380 l 899 305 q 783 98 864 168 q 736 64 774 89 l 729 64 q 682 88 717 78 l 668 105 l 671 125 l 671 129 l 665 129 q 651 112 665 112 q 631 119 640 119 q 587 105 595 105 l 580 105 l 580 95 l 597 95 q 637 105 629 105 l 641 105 q 688 71 651 105 q 722 64 708 71 l 722 61 q 526 3 722 32 l 505 3 q 502 0 502 3 l 478 7 l 451 0 q 397 27 427 0 l 397 20 q 407 14 402 20 q 404 3 404 7 q 329 20 330 16 q 326 17 326 20 q 98 153 173 55 q 31 332 35 258 q 64 383 64 354 q 125 404 90 404 l 142 404 q 190 417 151 413 l 193 410 q 156 322 193 348 l 153 322 l 136 326 q 102 278 122 299 l 98 271 q 102 251 102 267 l 109 251 l 105 268 q 193 366 193 335 q 231 420 193 420 q 356 448 294 437 q 441 278 356 288 l 441 261 q 458 200 441 256 l 458 193 q 420 156 458 156 q 390 122 390 129 l 393 105 l 397 105 q 451 149 429 147 q 488 146 481 146 q 559 159 553 159 l 563 159 q 573 132 563 155 l 583 132 q 573 163 583 138 q 583 183 583 166 q 566 217 583 201 l 563 210 l 563 203 l 573 190 l 573 180 l 566 170 l 553 173 q 519 166 528 166 q 509 173 509 170 l 492 163 l 488 163 q 465 193 465 163 l 468 210 q 454 271 454 258 q 532 329 496 281 l 539 326 l 539 329 l 536 342 q 543 393 543 374 l 543 529 q 576 600 555 576 l 576 617 l 593 621 q 604 604 601 621 l 600 587 l 604 587 q 661 593 606 593 l 665 587 q 661 573 661 581 q 685 539 685 549 l 688 539 l 688 549 q 668 604 668 573 l 699 654 l 699 661 q 678 648 685 648 l 678 637 l 682 631 q 651 604 659 604 q 607 631 607 604 l 583 634 q 580 631 583 631 q 566 651 568 651 q 593 763 570 687 q 637 780 617 780 l 637 787 l 617 783 q 607 787 610 787 q 590 770 607 782 q 543 804 543 777 l 543 858 q 546 861 543 861 l 543 868 l 543 949 q 546 977 543 964 q 543 1004 543 989 l 543 1038 l 593 1027 l 593 1044 l 583 1044 q 580 1041 580 1044 q 543 1055 543 1050 l 543 1095 q 549 1126 543 1104 q 543 1133 543 1126 l 543 1153 q 553 1163 543 1158 m 607 1149 l 604 1133 l 604 1129 l 610 1133 q 614 1129 610 1129 l 610 1122 l 610 1119 l 624 1119 l 624 1143 q 617 1149 624 1149 l 607 1149 m 899 1116 l 899 1105 l 909 1105 l 909 1109 q 902 1116 909 1116 l 899 1116 m 810 1112 q 817 1095 811 1095 q 807 1082 812 1082 l 787 1085 q 760 1075 787 1077 l 766 1065 l 766 1061 l 763 1055 l 770 1055 q 814 1078 783 1055 q 861 1058 854 1063 l 865 1058 l 865 1068 q 827 1085 865 1076 l 827 1088 q 838 1112 827 1100 l 827 1112 l 827 1105 l 824 1105 l 814 1112 l 810 1112 m 702 1105 l 702 1102 q 709 1095 703 1095 l 712 1095 l 712 1099 q 705 1105 712 1105 l 702 1105 m 814 963 q 797 953 814 953 l 797 946 q 804 939 804 946 q 821 960 821 947 l 814 963 m 627 936 l 624 912 q 631 919 631 912 l 631 936 l 627 936 m 797 936 l 797 929 q 807 932 804 932 l 807 936 l 797 936 m 705 922 l 715 922 l 715 929 l 712 929 q 705 922 705 928 m 627 905 l 627 888 l 631 888 l 634 902 l 627 905 m 729 905 l 729 899 l 746 899 l 746 902 l 729 905 m 787 905 q 777 888 787 899 l 777 885 q 790 902 783 886 l 790 905 l 787 905 m 743 885 l 739 871 l 743 871 q 760 882 760 874 l 753 885 l 743 885 m 912 882 l 916 875 l 916 787 q 909 780 916 780 l 878 834 q 912 882 878 855 m 617 861 l 627 861 l 627 868 l 624 868 q 617 861 617 867 m 699 844 l 702 844 l 722 861 l 719 861 q 699 844 701 854 m 760 854 l 763 848 q 777 858 777 853 l 777 861 l 766 861 q 760 854 760 860 m 651 793 l 651 790 l 665 790 q 699 834 690 825 l 699 841 q 665 800 676 827 q 651 793 656 793 m 549 766 q 573 753 573 758 q 546 668 553 668 l 543 675 l 543 760 q 549 766 544 766 m 665 732 l 665 729 l 675 729 l 675 739 l 671 739 q 665 732 665 738 m 871 729 l 871 719 l 882 719 l 882 732 q 871 729 875 729 m 715 692 l 715 682 l 739 682 q 746 688 746 682 q 715 692 734 688 m 793 688 l 793 682 l 797 682 q 804 688 804 682 l 793 688 m 549 651 q 566 610 566 620 l 546 593 l 543 600 l 543 644 q 549 651 544 651 m 563 553 l 570 549 l 583 556 q 590 549 585 549 q 621 566 621 561 q 600 580 614 580 q 563 553 585 574 m 75 543 l 248 543 q 254 536 254 541 l 254 532 l 248 532 l 248 529 l 258 529 q 278 543 258 543 l 366 543 q 376 532 371 543 l 376 509 q 322 475 376 475 q 302 478 319 475 q 170 448 260 456 q 139 441 170 444 q 129 444 132 444 q 102 434 110 434 q 71 488 102 453 q 61 539 61 510 q 75 543 67 543 m 905 519 l 909 519 q 916 512 916 517 l 916 448 q 909 441 916 441 l 916 427 q 902 329 912 368 l 892 329 q 878 349 892 334 q 817 424 878 373 l 814 441 q 848 468 814 447 q 888 495 848 481 q 905 519 905 513 m 610 475 l 610 468 l 614 468 q 621 475 621 468 l 610 475 m 24 465 l 27 465 q 58 417 27 453 q 61 397 61 399 q 34 353 44 397 l 24 353 q 20 420 20 399 l 20 431 l 24 465 m 885 454 l 885 448 l 895 448 l 895 454 l 885 454 m 841 437 l 841 434 l 848 434 l 848 444 q 841 437 841 443 m 543 319 l 543 315 l 546 298 q 509 258 531 258 l 509 254 q 539 227 539 252 l 546 227 l 546 234 q 536 258 536 246 l 536 268 l 559 312 q 543 319 553 312 m 109 234 q 95 193 95 201 l 98 193 q 115 231 105 193 l 109 234 m 380 231 l 380 224 l 387 214 l 387 203 q 366 180 366 185 q 370 176 370 180 l 387 180 l 397 180 q 437 220 397 184 l 437 227 l 427 227 q 404 203 408 203 l 404 210 l 414 227 l 414 231 l 410 231 q 400 217 402 231 l 390 217 q 380 231 390 231 m 312 207 l 319 203 l 322 210 l 322 214 l 319 214 q 312 207 312 212 m 359 153 q 346 142 359 142 l 346 136 l 363 139 q 373 129 363 129 l 376 136 q 366 153 366 146 l 359 153 m 285 122 l 285 119 l 288 102 q 295 109 295 102 l 292 115 q 295 119 295 115 l 288 122 l 285 122 m 407 95 l 407 61 q 414 54 408 54 q 424 71 421 54 q 410 95 419 95 l 407 95 m 546 78 l 546 64 l 553 64 q 563 75 557 64 l 563 78 l 546 78 z "},"k":{"ha":1153,"x_min":-14,"x_max":1187,"o":"m 14 1133 q 41 1129 38 1129 q 51 1133 47 1133 q 64 1119 51 1127 l 71 1119 q 75 1129 71 1122 q 85 1126 81 1126 q 115 1133 107 1133 l 261 1133 l 281 1129 q 298 1133 287 1133 l 302 1133 q 339 1129 316 1133 l 346 1133 q 373 1122 373 1129 l 373 1034 q 370 1031 373 1031 l 373 1024 l 373 1014 q 329 983 373 991 l 329 977 l 332 977 l 349 987 l 366 987 q 373 980 373 985 l 373 773 l 376 773 l 481 885 q 546 960 481 892 q 553 953 553 958 l 536 929 l 536 912 l 553 888 l 553 875 q 526 838 526 854 q 536 756 536 779 q 492 729 522 754 q 431 709 441 721 l 424 712 l 410 712 q 359 702 378 702 q 295 743 325 726 l 292 743 q 278 739 284 743 q 264 743 272 743 l 258 743 q 254 739 254 743 q 214 746 248 742 l 197 743 q 176 753 176 748 q 183 783 176 768 q 176 804 176 794 q 186 854 186 834 l 186 871 q 203 905 203 895 l 197 905 q 176 871 197 885 l 180 848 l 170 814 l 173 790 q 105 736 173 736 q 51 712 70 712 q 14 739 33 712 q 0 760 0 743 l 0 804 q 3 834 0 821 q 0 868 0 852 l 0 946 q 58 980 0 980 q 75 987 58 986 l 92 983 q 75 997 92 987 l 44 983 q 34 987 37 987 l 17 977 l 7 977 q 0 983 0 977 l 0 1004 q 37 1065 0 1034 l 37 1068 q 20 1072 26 1068 q 3 1041 20 1055 l 0 1048 l 0 1122 q 14 1133 0 1131 m 702 1133 l 709 1129 l 719 1129 l 726 1133 q 736 1099 733 1124 l 739 1099 q 773 1133 739 1133 l 777 1133 q 780 1129 780 1133 l 787 1133 l 821 1133 q 831 1129 831 1133 l 848 1133 l 895 1133 q 929 1129 911 1133 q 960 1133 942 1133 l 980 1133 q 983 1129 983 1133 l 990 1133 l 1014 1133 l 1038 1126 q 1044 1133 1039 1133 l 1055 1133 q 1102 1129 1074 1133 q 1116 1133 1108 1133 l 1119 1126 l 1119 1119 q 1072 1068 1075 1068 l 1061 1075 l 1055 1075 l 1055 1072 q 1061 1055 1061 1061 q 831 821 1056 1053 q 810 797 810 821 q 722 699 722 718 q 804 576 726 698 l 804 573 q 760 553 790 553 l 746 556 q 726 549 735 549 q 685 627 704 573 l 688 644 q 665 736 668 685 q 614 766 640 736 l 610 766 q 570 756 600 766 q 546 838 555 756 q 573 871 546 843 l 573 888 q 553 922 557 905 q 597 983 569 970 q 607 990 607 983 q 587 997 593 997 l 587 1004 q 658 1075 642 1075 q 702 1133 658 1095 m 688 1112 l 688 1105 l 692 1105 q 705 1116 705 1111 l 702 1116 q 688 1112 696 1112 m 1038 1116 l 1034 1109 l 1034 1102 q 1058 1085 1034 1099 l 1061 1085 l 1061 1092 q 1038 1116 1061 1097 m 841 1102 l 841 1099 q 851 1095 844 1099 l 854 1102 l 841 1102 m 739 1095 l 739 1092 q 756 1072 751 1072 q 763 1078 763 1072 l 739 1095 m 37 1082 l 44 1082 q 51 1088 51 1082 l 44 1088 q 37 1082 37 1087 m 943 1044 l 949 1041 q 990 1085 949 1063 l 990 1088 l 987 1088 q 943 1044 943 1074 m 753 1065 q 695 1010 753 1058 q 637 973 695 979 q 617 987 634 973 q 604 970 614 970 l 604 963 l 614 963 l 614 973 q 641 966 626 966 l 654 966 q 682 973 658 966 q 695 953 682 968 l 702 953 q 709 960 709 953 q 692 977 700 977 q 760 1048 692 1007 l 760 1058 q 753 1065 760 1065 m 261 1031 l 261 1027 q 278 1010 261 1023 l 281 1010 l 281 1014 q 268 1038 268 1029 q 261 1031 261 1036 m 197 1024 q 203 1017 198 1017 l 210 1017 q 203 1024 210 1024 l 197 1024 m 641 1024 l 641 1017 l 658 1017 l 658 1024 l 641 1024 m 936 994 q 939 980 939 987 l 946 980 l 946 983 q 943 987 946 987 q 949 1014 949 999 l 949 1024 q 936 994 945 1024 m 621 1021 l 617 1014 l 617 1007 l 631 1007 l 631 1010 q 621 1021 631 1015 m 281 1007 q 285 990 285 1002 q 292 997 292 990 l 292 1007 l 281 1007 m 576 994 l 580 994 l 580 983 q 570 973 580 979 l 566 973 l 566 983 q 576 994 566 988 m 129 966 l 132 966 l 163 970 l 163 980 l 159 980 q 129 966 129 970 m 712 966 l 712 960 l 729 960 l 729 966 q 722 973 729 973 l 719 973 q 712 966 712 972 m 285 970 l 285 963 l 288 956 q 275 943 283 956 l 275 939 l 278 939 q 302 966 282 939 l 285 970 m 746 966 l 746 963 q 753 956 747 956 l 760 966 q 756 970 756 966 q 746 966 749 966 m 773 953 l 773 949 q 780 943 774 943 l 790 943 q 793 953 790 946 q 790 956 790 953 q 773 953 785 953 m 746 946 l 746 932 q 756 929 749 932 q 766 932 763 932 l 766 939 q 749 946 758 939 l 746 946 m 251 943 l 251 936 l 264 936 l 264 943 l 251 943 m 607 899 l 607 895 l 614 895 q 624 905 618 895 l 624 916 l 621 916 q 607 899 616 916 m 770 916 q 766 905 770 912 q 814 888 778 905 q 824 892 821 892 q 834 888 831 888 l 838 895 l 838 902 l 831 902 l 821 895 l 810 895 l 783 916 l 770 916 m 868 888 l 875 885 q 882 892 882 885 l 882 895 l 875 895 q 868 888 868 894 m 685 878 l 682 871 l 682 861 q 692 875 687 861 l 685 878 m 682 851 q 661 790 682 830 l 661 787 l 665 787 q 688 841 688 831 l 688 844 q 682 851 688 851 m 471 824 l 471 817 l 481 817 l 481 824 l 471 824 m 566 746 l 597 746 q 648 715 617 726 q 668 627 648 693 l 668 617 q 665 614 668 614 q 678 576 678 593 l 678 559 q 709 529 696 559 q 702 509 709 523 q 705 478 705 490 q 702 458 702 460 l 753 431 q 726 366 726 406 q 712 353 712 356 l 712 349 l 719 349 l 732 359 q 746 322 746 346 q 692 224 746 315 q 682 197 692 209 l 685 173 q 648 153 685 161 q 610 207 635 153 l 617 210 q 671 197 629 203 q 593 227 629 227 q 461 444 505 384 l 454 444 l 366 356 q 373 336 373 345 l 373 305 l 370 305 l 353 322 q 285 319 302 319 q 268 346 271 330 l 264 346 l 261 339 l 237 342 l 214 342 q 210 339 210 342 q 180 376 180 347 q 186 417 186 400 l 186 424 q 92 546 172 465 q 88 559 88 552 q 119 617 119 590 l 119 621 l 115 621 l 112 604 l 105 604 q 92 658 95 604 l 88 658 q 95 688 95 673 l 88 702 q 125 726 88 722 l 136 726 l 142 722 q 176 743 142 729 q 200 732 193 732 q 207 736 207 732 l 231 732 l 295 732 q 373 685 353 692 q 404 702 373 691 q 441 699 433 699 q 509 722 462 711 q 566 746 528 746 m -7 722 l 24 699 q 51 702 48 702 q 68 692 68 698 l 68 685 q 61 648 68 681 q 78 580 65 648 q 54 543 71 578 l 51 543 l 51 536 q 102 492 67 536 q 156 407 122 492 q 149 376 156 402 q 153 339 153 353 q 64 251 103 253 q 27 234 60 244 l 24 227 l 27 203 l 24 183 l 31 183 q 34 203 31 186 l 31 217 q 58 237 37 237 l 58 234 l 75 244 l 78 244 l 78 241 q 44 217 62 217 l 44 210 l 47 210 q 92 251 92 223 l 119 268 l 122 268 q 132 248 129 268 q 125 231 125 237 l 132 227 q 139 248 139 238 l 139 254 l 132 264 l 132 268 q 176 336 132 294 q 193 322 191 322 l 197 322 q 207 326 207 322 q 271 295 241 326 l 292 295 q 295 298 295 295 l 302 295 l 336 298 q 359 261 359 267 l 356 237 q 359 227 359 231 q 353 207 353 216 q 359 200 359 205 l 359 24 q 339 7 359 20 q 356 0 356 7 q 349 -7 356 -7 l 237 -7 q 217 3 220 -7 l 217 10 q 254 24 217 16 q 258 27 254 27 q 261 17 261 20 l 264 17 l 275 24 q 302 3 297 3 l 319 3 q 326 10 326 3 q 275 34 292 10 l 275 41 q 285 47 285 41 l 281 47 l 234 27 q 224 31 227 31 l 200 17 q 214 3 203 3 q 203 -7 214 -1 l 136 -7 l 119 -3 l 119 3 l 125 3 l 125 7 q 115 24 115 18 l 112 24 q 105 17 105 22 l 115 3 l 115 -3 l 98 -7 l 68 -7 q 61 0 61 -7 q 105 34 99 18 q 98 64 105 39 l 102 85 l 95 85 q 92 51 92 55 l 98 47 q 51 7 98 22 l 34 10 l 14 7 l -3 10 l 7 -3 l 0 -7 l -3 -7 l -14 0 q -10 10 -14 3 l -14 51 q -10 71 -14 66 q -14 109 -14 94 l -14 193 q 10 220 -14 210 q 14 234 14 227 l 7 234 l -7 220 l -10 220 l -10 227 q -7 231 -10 231 q -14 254 -14 244 l -10 254 l -14 261 l -14 448 q -10 495 -14 467 q -14 505 -14 502 q -10 509 -14 509 l -14 526 q -10 539 -14 539 l -14 563 l -14 715 q -7 722 -12 722 m 583 702 l 583 692 q 600 699 594 699 l 600 702 l 583 702 m 312 600 l 312 597 q 319 590 313 590 l 322 590 l 322 600 l 312 600 m 142 559 l 142 556 l 156 553 l 159 559 l 142 559 m 214 559 l 214 556 q 234 546 218 556 l 234 549 q 217 559 234 557 l 214 559 m 24 556 l 24 549 l 27 549 q 41 553 29 549 q 54 549 47 549 q 47 556 54 556 l 24 556 m 553 546 l 553 543 l 556 543 l 573 546 l 573 556 l 563 556 q 553 546 558 556 m 821 549 q 997 271 997 285 l 987 264 l 963 264 l 929 268 l 929 261 l 946 258 l 966 258 q 1007 264 983 258 q 1034 207 1031 222 q 1017 180 1017 198 l 1044 200 q 1075 149 1075 169 l 1075 146 q 997 119 1034 119 q 966 115 997 115 l 966 119 q 1000 149 966 123 q 1007 163 1000 155 l 1004 163 q 943 115 999 163 l 902 115 q 871 125 889 125 l 868 125 l 841 112 q 804 115 818 115 q 780 102 798 102 q 702 139 743 139 l 702 149 q 712 156 707 149 l 709 173 q 777 309 709 222 l 790 309 l 790 312 q 770 346 770 312 q 780 356 774 346 l 780 359 l 763 356 q 756 387 760 363 q 777 420 756 390 l 777 431 q 729 458 773 439 q 722 481 729 465 q 770 536 738 536 l 793 536 q 821 549 812 549 m 607 526 l 607 529 q 553 512 576 515 l 553 505 q 675 536 644 522 l 675 539 l 671 539 l 607 526 m 275 532 l 275 515 l 281 515 l 281 526 q 275 532 281 532 m 526 515 l 526 512 l 529 512 q 539 515 536 515 l 539 526 l 536 526 q 526 515 531 526 m 502 515 l 502 512 l 505 512 q 512 519 512 512 l 512 522 l 509 522 q 502 515 502 521 m 621 495 l 627 492 l 631 498 l 631 502 l 627 502 q 621 495 621 500 m 309 498 l 309 495 l 329 485 l 332 485 l 332 488 q 312 498 328 488 l 309 498 m 465 478 l 465 471 l 468 471 q 481 498 477 471 l 478 498 q 465 478 473 498 m 376 495 l 376 485 l 380 485 q 390 488 387 488 q 383 495 390 495 l 376 495 m 244 481 l 244 468 l 258 468 l 258 475 q 251 481 258 481 l 244 481 m 349 475 l 349 454 q 356 461 356 454 l 356 468 q 349 475 356 475 m 868 454 q 861 441 868 449 l 861 424 l 868 424 q 875 454 868 439 l 868 454 m 342 424 l 342 420 l 349 420 l 349 431 q 342 424 342 429 m 831 410 l 831 404 l 841 404 q 834 410 841 410 l 831 410 m 309 387 l 312 387 q 329 404 317 387 l 322 404 q 309 387 317 404 m 349 393 l 356 390 l 359 397 l 359 400 l 356 400 q 349 393 349 399 m 214 315 l 214 312 q 220 305 215 305 l 220 315 l 214 315 m 797 312 q 804 305 798 305 l 814 305 l 814 309 l 797 312 m 848 312 l 848 309 q 858 298 848 304 l 861 298 l 861 302 q 851 312 861 307 l 848 312 m 875 288 l 875 285 q 888 278 880 285 l 888 281 q 878 288 888 288 l 875 288 m 224 285 l 224 281 q 231 254 231 271 q 237 261 237 254 q 231 285 231 271 l 224 285 m 895 271 q 905 264 895 264 q 919 275 919 270 q 895 271 915 271 m 210 231 q 214 214 214 225 q 234 237 220 214 l 234 244 l 210 231 m 112 227 l 112 224 l 129 220 l 129 227 l 112 227 m 336 193 l 336 186 l 346 186 q 363 210 346 198 l 363 214 l 356 214 q 336 193 351 214 m 865 214 l 865 203 l 868 203 q 875 210 875 203 l 868 214 l 865 214 m 136 200 l 132 186 l 136 186 q 142 193 142 186 l 142 200 l 136 200 m 231 176 q 237 170 232 170 q 288 190 288 183 l 278 197 l 275 197 q 231 176 255 176 m 119 163 l 129 163 l 146 166 l 146 173 q 136 183 136 173 q 119 163 131 183 m 163 183 l 146 146 l 149 146 q 220 170 159 170 q 227 176 227 170 q 203 183 214 176 l 200 176 q 163 183 195 176 m 346 170 l 346 159 q 353 153 347 153 l 353 163 q 346 170 353 170 m 92 163 l 88 146 l 88 142 q 105 98 98 98 l 105 102 q 95 159 95 142 q 98 163 98 159 l 92 163 m 719 163 l 719 159 q 726 153 720 153 l 729 153 l 729 163 l 719 163 m 332 132 l 332 119 l 336 119 q 349 136 336 134 l 349 139 l 339 139 q 332 132 332 138 m 695 119 q 760 78 703 104 q 770 81 766 81 q 763 75 770 75 q 777 58 770 59 l 810 75 q 831 68 824 68 q 875 81 861 81 l 878 81 l 899 71 l 966 78 q 987 71 980 71 q 997 81 987 76 l 1000 75 q 983 64 1000 64 l 983 58 q 997 31 997 43 q 970 -20 985 -20 l 746 -20 q 688 58 724 -20 q 658 112 658 94 q 695 119 665 115 m 1095 119 l 1102 119 q 1133 88 1116 96 l 1187 -3 l 1180 -7 l 1072 -7 q 1034 -3 1057 -7 q 1014 -7 1029 -7 l 1007 3 q 1024 37 1007 16 l 1024 51 q 1010 61 1024 60 l 1010 68 q 1061 102 1025 102 q 1095 119 1069 119 m 336 109 l 322 61 q 342 98 330 61 q 339 109 339 105 l 336 109 m 719 54 l 719 41 l 729 41 l 729 47 q 722 54 729 54 l 719 54 m 186 37 l 183 31 l 210 31 l 210 34 l 186 37 m 149 27 l 149 20 q 159 24 156 24 l 159 27 l 149 27 m 54 10 q 61 3 61 9 l 61 0 l 47 0 l 47 3 q 54 10 49 10 z "},"l":{"ha":882,"x_min":0,"x_max":882,"o":"m 27 1133 l 119 1133 q 156 1129 133 1133 q 170 1133 162 1133 l 203 1109 l 203 1116 l 193 1129 l 193 1133 l 241 1133 q 353 1051 262 1084 q 322 953 332 971 q 342 905 342 919 q 295 858 305 858 l 244 858 q 217 831 244 854 q 200 753 210 753 l 183 753 q 142 770 163 753 q 85 749 89 749 l 61 753 q 3 736 23 736 l 0 743 l 0 787 q 7 804 1 804 q 0 824 0 814 l 0 1088 q 7 1119 0 1097 l 7 1129 l 27 1133 m 271 1133 q 278 1129 278 1133 l 302 1133 l 363 1133 q 373 1122 368 1133 q 370 1119 373 1119 l 373 1095 l 373 1082 q 366 1065 373 1065 q 268 1122 268 1095 q 264 1126 264 1122 q 271 1133 266 1133 m 227 1088 q 244 1078 227 1082 l 244 1085 l 227 1088 m 363 1034 l 366 1034 q 373 1027 373 1033 l 373 1004 q 370 956 373 985 q 373 943 373 950 q 353 929 370 929 q 346 943 353 935 l 346 963 l 363 1034 m 186 973 l 186 960 q 193 966 193 960 l 193 973 l 186 973 m 186 943 q 183 932 186 939 l 190 932 l 190 943 l 186 943 m 370 916 l 373 909 l 373 888 q 342 848 373 875 l 342 844 l 349 844 q 356 854 356 844 l 366 854 q 373 838 366 846 l 373 627 q 359 617 373 617 l 359 614 q 373 597 373 614 l 373 410 q 356 400 373 400 l 356 397 q 373 380 373 383 l 373 268 l 448 268 q 475 264 471 268 q 512 268 498 268 l 648 268 q 668 258 668 266 q 624 183 668 241 q 593 71 624 115 q 587 47 593 61 q 590 34 590 41 q 526 3 526 28 l 519 0 l 380 0 q 363 37 363 11 q 390 20 369 37 l 410 20 l 410 27 q 353 78 376 27 q 339 81 347 81 q 322 75 333 81 q 237 119 237 75 q 241 149 241 137 l 241 176 l 251 176 l 268 180 l 268 183 q 261 190 268 190 l 254 190 l 241 180 l 203 200 l 200 207 q 210 248 200 216 l 210 258 q 203 285 210 273 l 210 326 q 200 363 203 336 l 203 370 q 186 393 195 391 l 180 393 q 193 326 183 352 q 186 319 186 324 q 163 329 170 329 q 109 326 128 326 q 98 346 98 334 l 88 346 q 3 319 27 337 l 0 326 l 0 573 q 3 610 0 587 q 0 637 0 614 l 0 641 q 3 644 0 644 l 0 651 l 0 705 q 81 732 0 718 q 139 753 125 736 l 142 753 q 176 736 176 739 l 173 719 q 214 641 188 641 q 234 604 214 639 q 217 549 217 564 l 231 529 l 227 522 l 227 519 l 237 498 q 197 451 237 451 l 166 420 q 173 400 173 407 l 180 400 q 224 444 180 420 q 231 448 231 444 q 268 441 244 441 l 332 454 l 339 454 q 349 427 346 454 l 359 427 l 359 437 l 353 448 q 363 485 363 484 q 349 515 349 503 l 342 515 l 342 505 q 353 478 342 499 q 342 465 348 465 l 332 465 q 295 461 318 465 q 285 465 288 465 q 264 458 274 458 q 241 488 248 458 q 244 512 244 502 q 231 556 235 556 q 275 641 248 618 l 275 644 l 271 644 q 251 621 267 644 q 197 695 197 663 q 193 732 197 709 l 214 743 l 231 743 q 224 753 227 753 q 241 824 233 774 q 298 844 260 844 q 326 841 311 841 q 366 916 356 916 l 370 916 m 64 868 l 64 865 l 71 865 q 81 875 76 865 l 75 878 q 64 868 70 878 m 51 831 l 51 827 l 61 827 l 61 838 l 58 838 q 51 831 51 836 m 268 743 l 264 736 l 275 736 q 268 743 275 743 m 315 580 l 315 576 l 326 546 q 336 556 330 546 l 336 559 q 319 580 322 559 l 315 580 m 322 543 q 298 505 322 538 q 326 468 322 468 l 329 468 q 312 498 316 498 q 326 539 312 503 l 326 543 l 322 543 m 156 526 l 156 522 q 163 502 163 511 l 163 498 q 146 481 146 485 l 146 468 l 149 468 q 214 522 214 496 l 210 522 l 183 498 l 180 505 q 193 522 184 505 l 186 526 l 173 515 l 159 526 l 156 526 m 92 502 l 98 498 l 102 505 l 102 509 l 98 509 q 92 502 92 507 m 122 431 l 153 427 l 153 431 l 142 444 q 122 431 122 436 m 61 417 l 61 414 q 68 407 62 407 l 71 407 l 71 417 l 61 417 m 322 322 l 322 319 q 329 312 323 312 q 339 322 334 312 l 339 326 l 322 322 m 88 329 q 153 312 88 312 l 170 312 q 193 271 185 312 q 190 261 190 264 q 193 248 190 254 q 190 217 190 229 l 190 214 q 220 176 190 186 q 224 136 220 159 l 220 112 q 231 85 220 100 q 193 68 213 81 l 190 68 l 193 75 l 193 81 l 186 81 q 170 68 170 73 l 170 64 q 176 58 171 58 q 166 37 166 42 l 159 37 q 153 47 153 37 l 156 64 l 153 64 q 146 58 146 63 l 146 37 q 119 0 146 0 l 10 0 q 0 10 5 0 l 0 220 q 3 224 0 224 l 0 231 l 0 288 q 81 326 28 326 q 88 329 81 329 m 709 220 l 871 220 q 882 210 876 220 l 882 197 q 878 149 882 178 q 882 136 882 143 q 878 132 882 132 l 882 115 l 882 109 q 878 78 882 91 q 882 44 882 60 l 882 37 q 878 20 882 26 l 882 0 l 882 -37 q 871 -47 882 -42 l 865 -47 q 841 -44 845 -47 q 810 -47 823 -47 l 743 -47 q 739 -44 739 -47 l 732 -47 l 688 -47 q 671 -44 677 -47 l 651 -47 l 580 -47 l 580 -44 q 617 3 617 -28 q 641 68 617 18 q 644 115 641 94 l 641 122 q 668 153 641 130 l 675 153 q 746 125 694 139 q 770 105 754 111 l 770 112 q 685 170 766 134 l 685 173 q 709 220 685 220 m 688 115 l 688 109 q 743 51 688 102 l 743 44 l 773 44 q 793 34 786 34 q 814 37 811 37 l 831 34 q 848 41 842 41 l 848 37 q 861 58 861 41 q 810 54 827 54 q 780 64 786 64 q 763 58 763 64 l 695 102 q 688 115 695 115 m 736 17 l 736 14 l 743 14 q 749 20 749 14 l 749 24 l 743 24 q 736 17 736 22 m 332 20 l 336 20 q 359 3 353 20 l 359 0 l 346 0 q 326 10 333 10 l 326 14 q 332 20 327 20 m 234 64 q 285 58 266 58 l 292 58 l 315 61 q 356 3 356 17 l 349 0 l 275 0 q 248 3 260 0 q 220 0 235 0 l 217 0 q 173 3 195 0 q 149 0 159 0 l 142 10 q 156 24 146 24 q 166 20 163 20 q 227 64 174 64 l 234 64 m 814 -24 l 814 -31 l 817 -31 q 827 -27 824 -27 l 827 -17 l 821 -17 q 814 -24 814 -18 m 777 -20 l 777 -31 l 783 -31 l 783 -20 l 777 -20 z "},"m":{"ha":1289,"x_min":-14,"x_max":1295,"o":"m 10 1133 l 37 1133 q 58 1116 58 1133 l 68 1116 l 64 1122 l 64 1133 l 78 1133 q 81 1122 78 1129 q 71 1119 75 1119 l 71 1116 l 75 1109 q 27 1082 47 1087 q 0 1109 0 1090 l 0 1122 q 10 1133 0 1127 m 85 1133 q 98 1129 92 1133 q 142 1133 127 1133 q 170 1129 151 1133 l 190 1133 q 197 1129 197 1133 l 231 1133 l 309 1133 l 322 1122 q 342 1133 326 1133 l 427 1133 q 451 1068 437 1133 l 451 1065 q 431 1048 441 1048 l 431 1041 l 434 1041 l 451 1055 q 458 1048 458 1053 l 458 1038 q 424 1014 458 1035 l 393 1014 q 387 1007 387 1013 q 356 1017 362 1017 l 353 1017 l 353 1014 q 366 997 366 1014 l 373 997 q 437 1010 381 1004 q 458 1024 437 1013 l 461 1024 q 566 661 469 1024 q 580 604 580 632 l 570 590 l 570 587 q 573 583 570 583 q 570 573 570 576 q 543 580 567 573 l 539 580 l 539 576 q 573 559 539 570 l 570 543 l 570 539 l 576 539 l 576 549 q 590 580 576 575 q 621 468 610 519 l 610 468 q 600 485 608 485 q 597 461 600 475 q 621 458 607 461 l 621 448 l 614 448 l 593 451 q 553 407 584 451 l 529 390 l 522 390 l 502 400 q 461 366 473 400 l 417 339 l 414 339 q 322 644 400 362 q 326 658 326 650 l 326 661 q 302 695 319 661 l 302 692 q 309 597 309 608 q 295 573 309 593 l 302 573 l 302 580 l 305 580 q 315 526 315 580 l 315 509 q 312 495 315 501 q 319 468 319 483 l 319 454 l 315 454 q 302 488 309 454 l 305 495 q 281 522 305 522 q 248 549 275 522 l 244 549 q 207 539 233 549 q 180 621 193 539 q 210 668 210 656 q 186 702 210 671 q 224 760 205 754 q 241 766 224 766 l 241 777 q 220 793 220 777 l 220 797 l 203 797 l 186 800 l 186 814 l 193 824 q 183 841 186 824 l 186 858 q 173 868 173 863 l 173 878 q 197 885 181 878 l 197 888 l 183 888 l 159 885 l 163 892 l 163 895 q 129 943 129 936 q 153 977 129 947 l 146 977 q 125 970 136 977 q 102 1010 109 970 l 95 1010 l 95 1007 q 119 929 95 996 l 119 919 q 115 916 115 919 q 166 851 144 916 q 173 844 173 850 l 173 807 l 149 800 l 142 800 q 129 875 129 872 q 132 885 132 882 l 125 885 q 112 871 125 871 q 132 834 112 857 l 132 817 q 109 790 132 800 l 109 787 l 159 793 q 186 736 186 793 q 170 702 170 713 l 170 695 l 190 671 q 163 637 190 650 l 159 617 q 170 539 170 581 q 125 512 161 539 q 68 492 68 500 l 51 495 q 7 485 41 495 l -3 485 q -14 505 -14 488 l -14 760 q 7 773 -7 773 l 20 770 q 31 773 27 773 l 31 777 l -7 777 q -14 783 -14 777 l -14 787 q -7 810 -12 810 q -14 831 -14 821 l -14 875 q -10 888 -14 882 q -14 902 -14 895 q -10 905 -14 905 l -14 922 l -14 1075 q -7 1082 -12 1082 q 20 1072 10 1072 q 75 1092 68 1092 l 81 1092 l 78 1068 q 98 1027 93 1027 l 102 1034 q 85 1088 102 1038 q 95 1092 92 1092 l 95 1095 q 75 1119 83 1095 l 75 1129 q 85 1133 78 1129 m 854 1133 l 980 1133 q 987 1122 980 1122 l 990 1122 q 1007 1133 990 1133 l 1031 1133 q 1034 1129 1034 1133 l 1041 1133 l 1085 1133 q 1109 1129 1105 1133 q 1139 1133 1127 1133 l 1200 1133 q 1207 1126 1207 1131 l 1207 1122 q 1183 1095 1199 1122 q 1136 1082 1166 1095 l 1116 1085 q 1085 1068 1103 1081 l 1068 1068 q 1041 1041 1061 1041 l 1014 1041 l 1017 1024 q 1010 1004 1010 1013 q 1017 997 1012 997 q 1078 1051 1017 1028 q 1163 1075 1110 1075 q 1170 1085 1163 1085 l 1183 1082 q 1258 1112 1202 1099 q 1255 1122 1255 1119 l 1251 1122 q 1204 1105 1251 1105 l 1204 1112 q 1231 1133 1208 1123 q 1255 1126 1244 1126 l 1258 1133 l 1265 1129 l 1289 1133 q 1295 1126 1290 1126 q 1292 1119 1295 1119 l 1295 1078 l 1295 1068 q 1292 1034 1295 1052 q 1295 1004 1295 1021 l 1295 997 q 1289 973 1295 973 q 1295 953 1295 962 l 1295 899 l 1292 875 l 1289 875 q 1282 885 1289 885 q 1272 858 1275 885 l 1251 858 q 1292 804 1251 817 q 1295 790 1295 798 l 1295 783 l 1292 766 l 1295 766 l 1292 760 q 1295 729 1295 741 q 1292 726 1295 726 l 1295 719 l 1295 712 q 1289 688 1295 688 q 1295 668 1295 677 l 1295 444 q 1258 427 1295 437 q 1207 397 1244 397 q 1177 353 1207 382 l 1177 342 l 1183 339 q 1292 420 1251 420 q 1295 407 1295 414 l 1295 173 q 1258 146 1292 146 l 1258 132 l 1292 142 l 1295 136 l 1295 10 q 1285 0 1295 5 l 1068 0 q 1061 7 1061 0 q 1099 47 1061 47 q 1109 44 1105 44 q 1146 54 1132 44 q 1173 51 1171 51 q 1234 75 1213 58 q 1258 81 1258 75 l 1258 92 l 1227 95 q 1194 75 1227 83 q 1183 78 1187 78 q 1163 71 1173 71 q 1153 75 1160 71 q 1136 58 1136 71 l 1133 58 q 1099 71 1099 67 q 1092 102 1092 94 l 1092 149 l 1082 166 q 1095 197 1095 191 l 1092 197 l 1068 170 q 1024 200 1039 180 l 1024 203 q 1072 298 1024 224 l 1085 298 q 1075 339 1078 313 q 1112 414 1087 393 q 1143 465 1143 431 q 1204 481 1174 481 l 1217 481 q 1255 495 1240 495 l 1255 509 l 1241 509 l 1194 498 l 1187 502 q 1160 492 1164 492 q 1126 549 1160 511 q 1088 641 1109 641 q 1085 651 1088 644 q 1126 760 1126 701 q 1129 787 1126 768 q 1116 797 1116 793 q 1105 790 1105 793 l 1099 793 l 1092 793 q 1044 777 1071 777 q 1010 780 1027 780 l 1010 787 l 1034 817 l 1031 817 q 960 763 994 775 q 946 753 960 753 l 946 746 q 980 712 966 746 q 916 665 980 676 q 905 644 911 665 l 899 644 l 899 637 q 936 665 917 637 l 943 661 l 953 661 l 960 665 q 963 661 960 661 q 919 543 936 543 l 895 543 l 895 536 l 916 536 l 922 539 l 926 532 q 858 302 865 302 q 814 359 814 348 q 804 417 806 359 q 834 519 804 475 l 827 519 q 804 468 804 492 l 787 465 l 770 465 q 743 471 746 471 l 719 465 l 712 465 q 661 478 700 465 q 770 854 763 839 l 773 854 q 821 834 773 846 q 858 851 836 844 l 875 848 l 888 848 q 949 858 912 854 q 977 851 962 851 q 990 882 989 867 l 1007 882 q 1031 851 1031 882 l 1038 848 l 1038 851 l 1031 875 q 1034 885 1034 882 q 1004 909 1004 885 q 990 922 996 909 q 1010 953 994 939 l 1010 960 q 990 953 1000 953 l 973 956 q 970 949 973 949 q 983 899 977 939 l 966 865 l 943 868 q 888 858 920 868 l 888 861 l 882 858 q 854 861 857 861 q 807 841 850 861 q 773 865 807 846 l 773 868 q 821 1027 810 1010 l 827 1027 q 858 983 846 988 l 861 983 l 861 990 l 868 990 q 953 956 935 972 l 960 956 q 966 963 966 956 q 946 987 946 981 q 953 1010 946 994 l 946 1014 q 939 1000 946 1000 l 936 1000 l 926 1007 l 926 1004 l 932 994 l 932 983 l 916 983 q 844 1007 890 999 l 844 1010 q 848 1021 848 1017 q 824 1048 848 1026 q 854 1133 842 1133 m 142 1112 l 142 1105 l 153 1105 l 153 1116 q 142 1112 146 1112 m 322 1105 l 322 1099 q 329 1105 329 1099 l 329 1112 q 322 1105 322 1111 m 1126 1105 q 1133 1099 1127 1099 l 1136 1099 l 1136 1105 l 1126 1105 m 115 1095 l 115 1092 q 136 1075 123 1075 l 136 1082 q 122 1095 136 1087 l 115 1095 m 315 1075 l 298 1051 l 302 1051 q 322 1072 312 1051 l 315 1075 m 1004 1058 l 1004 1055 l 1007 1055 q 1027 1061 1015 1061 l 1027 1068 q 1004 1058 1004 1065 m 336 1065 l 329 1051 l 336 1048 l 342 1051 q 353 1041 342 1046 l 353 1044 q 336 1065 340 1065 m 983 1055 l 983 1048 l 997 1048 l 997 1055 l 983 1055 m 919 1044 l 912 1024 l 919 1021 l 922 1041 l 922 1044 l 919 1044 m 407 1027 l 410 1027 q 424 1034 418 1034 l 424 1041 l 420 1041 q 407 1027 415 1041 m 1092 1024 l 1092 1021 q 1112 990 1092 999 l 1112 994 l 1092 1024 m 322 1007 l 322 1004 l 332 1004 q 336 1014 332 1007 l 329 1014 q 322 1007 322 1013 m 166 983 l 166 980 l 180 980 q 186 987 180 987 l 186 994 q 166 983 166 991 m 214 983 q 217 970 217 977 q 227 980 222 970 l 227 987 l 220 987 l 214 983 m 254 983 l 254 980 l 268 980 l 268 983 l 254 983 m 1126 983 l 1126 977 q 1139 963 1126 971 l 1143 963 l 1143 966 q 1129 983 1134 983 l 1126 983 m 366 973 q 373 966 368 966 l 376 966 l 376 973 l 366 973 m 1072 960 l 1082 953 l 1085 953 q 1092 960 1092 953 l 1092 963 q 1085 970 1092 970 l 1082 970 q 1072 960 1077 970 m 190 966 l 190 960 l 197 960 q 203 966 203 960 l 190 966 m 275 960 l 275 949 l 298 949 l 298 963 q 275 960 285 960 m 370 960 l 370 953 q 383 878 383 916 l 390 878 l 387 885 q 400 909 387 909 l 400 912 q 390 916 390 912 q 393 936 390 918 q 390 946 390 943 q 404 960 395 946 l 404 963 l 400 963 q 387 960 393 963 l 380 963 q 370 960 373 960 m 1143 960 l 1143 953 l 1149 943 q 1146 929 1146 937 l 1204 895 q 1255 943 1204 905 l 1255 946 l 1251 946 q 1200 919 1206 919 q 1149 956 1149 930 l 1143 960 m 349 929 l 349 926 l 356 926 q 363 932 363 926 l 363 936 l 356 936 q 349 929 349 935 m 1095 922 l 1105 922 q 1119 929 1114 929 l 1119 936 q 1095 922 1101 936 m 1078 929 q 1061 905 1078 916 l 1044 905 l 1044 895 q 1092 926 1063 895 l 1085 929 l 1078 929 m 895 909 l 902 905 l 905 912 l 905 916 l 902 916 q 895 909 895 914 m 281 902 l 281 895 l 292 895 l 292 902 l 281 902 m 339 895 l 339 892 l 349 892 l 349 899 q 339 895 342 895 m 34 895 l 31 871 l 34 871 q 41 878 41 871 l 41 895 l 34 895 m 865 892 l 865 885 l 868 885 q 875 892 875 885 l 865 892 m 492 888 l 492 878 l 495 878 q 502 885 502 878 l 495 888 l 492 888 m 1204 888 q 1160 838 1204 879 q 1146 841 1152 838 q 1116 824 1116 830 l 1116 817 q 1122 810 1117 810 q 1153 831 1122 823 q 1163 827 1160 827 l 1180 838 l 1207 838 q 1241 851 1241 842 l 1238 851 q 1194 844 1207 844 q 1187 851 1187 844 q 1211 878 1187 858 l 1211 888 l 1204 888 m 1048 882 l 1048 875 q 1058 858 1058 864 q 1048 834 1058 849 l 1055 834 l 1068 841 q 1051 882 1064 882 l 1048 882 m 471 875 l 471 865 q 478 871 478 865 l 478 875 l 471 875 m 397 871 l 397 861 l 400 854 q 410 858 407 858 l 410 861 q 397 871 410 867 m 275 861 l 275 851 q 309 858 300 854 q 305 868 305 865 q 275 861 299 865 m 214 841 l 214 824 l 227 824 q 248 841 248 836 q 234 851 234 843 l 231 851 q 214 841 220 841 m 373 824 l 376 817 l 376 814 l 370 817 l 342 793 q 346 783 346 787 q 414 844 413 835 l 414 848 l 404 848 q 373 824 387 828 m 61 800 l 61 797 l 71 797 q 125 831 103 808 l 129 831 l 129 838 l 88 810 q 61 800 63 810 m 1068 821 l 1068 817 q 1082 797 1076 797 l 1088 797 q 1068 821 1072 821 m 1282 821 l 1292 821 l 1292 817 q 1285 810 1292 810 l 1282 817 l 1282 821 m 288 807 l 288 800 l 302 800 l 302 807 l 288 807 m 268 800 l 268 790 l 278 790 l 278 800 l 268 800 m 905 793 l 905 790 q 912 783 907 783 l 916 783 l 916 793 l 905 793 m 214 787 l 224 787 l 227 770 l 227 766 q 217 756 227 762 q 207 783 207 758 l 214 787 m 1095 787 l 1105 787 q 1116 777 1110 787 q 1078 668 1116 692 q 1068 654 1074 654 q 1044 675 1047 674 l 1027 675 q 1007 654 1027 667 q 994 658 1001 658 l 994 651 q 1004 641 994 646 l 1007 641 q 1038 661 1030 661 q 1095 590 1095 613 q 1136 495 1095 536 l 1136 478 q 1109 427 1118 465 q 1068 383 1083 414 l 1072 366 q 1055 332 1068 366 l 1048 332 l 1048 329 q 1065 319 1065 328 l 1065 312 q 1014 227 1050 297 l 1014 200 q 1007 197 1007 200 l 1000 200 l 997 200 l 990 197 q 1027 176 990 185 q 1072 146 1072 155 q 1082 122 1072 127 q 1078 112 1082 119 q 1085 64 1078 104 q 1065 51 1082 51 q 1055 54 1058 54 q 1041 3 1055 31 q 1027 7 1029 7 q 1007 0 1017 0 l 970 0 q 960 10 965 0 l 963 31 q 960 44 960 37 q 966 51 966 44 l 973 47 l 983 47 q 987 58 983 51 l 983 58 l 966 54 q 960 75 960 65 l 960 200 q 966 207 961 207 l 970 207 q 990 200 979 207 l 990 207 l 960 231 l 960 295 q 966 509 960 414 l 963 515 q 983 675 977 667 l 987 675 l 997 668 l 1000 668 l 1000 688 l 1017 685 q 983 736 1002 698 q 977 743 977 736 l 977 746 q 1078 777 996 766 q 1095 787 1078 779 m 285 756 q 271 773 271 760 l 268 773 q 261 766 261 772 l 261 763 q 278 749 261 758 l 295 749 l 329 753 q 342 736 342 741 l 356 736 q 376 743 363 743 l 376 756 l 366 756 l 356 749 l 353 749 q 336 770 348 749 l 342 770 l 342 780 q 285 756 324 756 m 397 746 l 397 743 l 407 743 l 410 756 l 407 756 q 397 746 402 756 m 153 749 q 159 743 154 743 l 166 743 q 173 749 173 743 l 166 753 q 153 749 160 749 m 1153 743 l 1153 739 q 1160 732 1154 732 q 1166 739 1166 732 l 1166 749 l 1160 749 q 1153 743 1153 748 m 420 736 l 420 732 q 427 726 422 726 l 434 726 q 444 736 439 726 q 437 739 437 736 q 420 736 432 736 m 848 729 l 848 726 l 871 719 l 875 719 q 858 736 875 724 l 854 736 q 848 729 848 734 m 397 722 q 407 712 397 718 l 414 712 l 414 715 q 407 722 414 722 l 397 722 m 882 712 q 905 692 882 706 l 916 692 q 888 712 916 697 l 882 712 m 258 685 l 258 678 l 261 678 q 271 688 266 678 l 271 699 q 258 685 266 699 m 417 699 l 414 685 l 417 685 q 420 688 420 685 q 465 671 456 671 q 468 675 468 671 l 475 671 l 481 671 q 488 678 488 671 q 481 685 488 685 l 478 685 q 465 678 470 678 q 434 699 450 684 l 417 699 m 1265 682 l 1272 682 q 1278 688 1278 682 l 1272 688 q 1265 682 1265 687 m 922 685 q 929 678 924 678 l 936 678 q 929 685 936 685 l 922 685 m 519 678 l 519 675 q 526 668 520 668 q 532 675 532 668 l 529 682 q 519 678 522 678 m 410 610 l 417 607 l 420 614 l 420 617 l 417 617 q 410 610 410 616 m 465 604 l 461 590 l 475 590 q 478 600 475 593 l 471 604 l 465 604 m 505 583 l 505 580 q 522 566 507 573 q 532 573 532 570 q 522 593 529 593 l 515 593 q 505 583 511 593 m 451 543 q 444 526 451 536 l 451 522 l 465 536 q 458 543 465 543 l 451 543 m 241 532 q 295 498 264 509 q 315 424 295 467 l 315 390 q 336 336 324 375 l 336 332 q 332 329 336 329 l 336 322 l 336 264 q 332 217 336 246 q 336 200 336 212 q 332 197 336 197 l 336 173 l 336 10 q 326 0 336 5 l 292 0 q 214 10 270 7 q 180 0 196 0 l 132 0 q 34 78 92 0 q 0 119 12 78 l 0 156 q 10 180 0 168 l 10 183 q 0 190 0 183 l 0 220 q 7 254 0 227 q 0 275 0 265 l 0 471 l 3 471 q 17 468 11 471 q 58 485 47 485 q 81 478 68 485 q 112 495 94 482 l 119 495 q 122 492 122 495 q 210 529 197 529 l 237 529 q 241 532 241 529 m 590 529 l 590 522 q 593 512 593 515 l 597 512 l 597 522 q 590 529 597 529 m 977 515 l 977 512 l 980 512 q 987 519 987 512 l 987 526 q 977 515 982 526 m 231 485 l 231 475 q 251 485 251 478 q 241 488 244 488 q 231 485 234 485 m 532 465 l 532 451 l 539 451 l 539 465 l 532 465 m 661 431 l 665 431 q 709 420 703 420 q 746 427 738 427 q 793 410 793 418 l 793 356 q 797 353 793 353 l 793 346 l 793 342 q 844 268 793 312 q 851 234 851 247 l 841 217 l 841 200 q 831 193 836 200 l 834 186 q 814 153 834 173 l 814 125 q 817 122 814 122 q 780 51 806 51 l 770 51 l 770 47 q 793 41 793 47 q 770 -27 793 12 l 763 -24 l 753 -24 l 746 -27 q 739 -20 746 -20 q 719 -27 728 -27 l 702 -27 q 682 -17 684 -27 l 682 -14 l 692 0 l 688 0 l 682 -3 q 671 34 674 4 q 719 47 684 47 l 719 51 l 702 54 l 631 20 l 617 20 q 570 31 570 20 q 543 27 557 27 q 553 20 543 20 q 563 27 563 24 q 597 14 587 14 l 621 14 q 661 24 629 14 l 665 24 l 675 -24 l 668 -27 l 532 -27 q 512 -7 528 -27 l 512 3 l 515 10 q 495 54 507 10 l 505 54 q 536 34 521 41 l 536 37 q 481 109 481 73 q 431 288 465 156 q 505 349 491 309 l 512 353 q 556 342 548 342 q 576 366 576 348 l 573 366 q 597 387 573 370 q 641 417 597 400 l 651 417 q 661 431 656 431 m 203 383 l 203 376 l 214 376 l 214 383 l 203 383 m 71 342 l 68 336 l 68 332 l 71 332 q 78 339 78 332 l 71 342 m 200 332 l 200 326 l 210 326 q 220 336 215 326 q 217 339 217 336 q 200 332 206 332 m 617 322 l 624 319 l 634 332 l 627 332 q 617 322 623 332 m 64 315 l 71 312 l 75 312 l 75 322 l 71 322 q 64 315 64 321 m 254 309 l 254 312 q 203 292 203 296 l 203 288 q 322 319 308 308 l 322 322 l 254 309 m 1183 312 q 1170 275 1183 295 l 1177 271 q 1194 309 1194 298 l 1194 312 l 1183 312 m 146 292 l 149 292 l 163 298 q 159 309 159 305 q 146 292 153 307 m 173 298 l 173 292 l 180 292 q 190 302 184 292 l 190 309 l 183 309 q 173 298 178 309 m 1102 281 l 1102 278 q 1112 258 1112 265 l 1116 258 q 1143 275 1127 275 l 1146 281 l 1102 281 m 24 271 l 31 268 l 34 275 l 34 278 l 31 278 q 24 271 24 277 m 122 275 q 109 254 122 268 l 115 254 q 125 264 120 254 l 125 275 l 122 275 m 180 271 l 180 264 l 183 264 q 190 271 190 264 l 180 271 m 566 241 l 566 237 l 573 237 l 573 248 q 566 241 566 246 m 519 241 q 509 214 509 224 l 509 207 l 515 207 q 526 237 515 213 l 519 241 m 1112 234 q 1102 210 1102 214 q 1116 231 1107 210 l 1116 234 l 1112 234 m 478 193 l 475 186 l 488 186 l 488 190 q 478 193 485 190 m 1014 132 l 1014 129 q 1021 122 1015 122 l 1021 132 l 1014 132 m 1014 109 l 1014 105 l 1021 105 l 1021 115 q 1014 109 1014 114 m 732 112 l 732 102 l 736 102 q 743 109 743 102 l 743 112 l 732 112 m 736 78 l 736 71 l 756 71 q 763 78 763 71 l 736 78 m 994 78 l 994 71 l 1017 71 q 1010 78 1017 78 l 994 78 m -7 64 q 24 41 20 50 l 24 34 q 7 27 7 34 l 7 24 l 14 24 l 27 34 q 61 0 44 0 l 61 -3 l 54 -7 q 24 0 33 0 l 14 0 l -10 -3 l -14 3 l -14 58 q -7 64 -12 64 m 1034 64 l 1034 61 q 1048 58 1042 61 l 1048 61 l 1041 64 l 1034 64 z "},"n":{"ha":1085,"x_min":0,"x_max":1099,"o":"m 10 1133 l 14 1126 l 14 1122 l 10 1116 l 17 1112 q 44 1133 38 1133 l 54 1133 q 92 1129 68 1133 q 125 1133 109 1133 l 142 1122 q 159 1133 142 1133 l 217 1133 q 224 1126 224 1131 q 197 1078 224 1124 l 203 1078 q 234 1126 224 1089 l 258 1133 l 332 1133 q 407 1038 356 1133 q 444 977 444 990 q 376 932 412 932 q 366 963 370 940 q 376 987 376 980 l 363 1024 l 356 1024 l 356 1021 l 359 1004 q 353 997 353 1002 q 366 987 359 997 q 359 960 359 975 l 359 956 l 366 946 l 366 936 l 363 912 q 420 939 385 931 q 448 966 448 954 l 458 966 q 587 766 484 920 q 553 719 553 745 l 522 712 q 495 780 504 725 q 441 844 450 806 q 356 909 368 844 l 342 899 l 339 899 l 339 919 q 332 926 339 926 l 329 926 l 329 909 q 241 868 326 901 q 207 844 231 856 q 197 848 200 848 l 197 868 q 200 899 197 880 q 197 909 197 905 l 190 909 l 190 902 q 193 885 190 890 q 186 858 193 879 q 197 804 186 846 q 183 793 197 793 l 197 780 l 197 749 q 156 729 172 729 q 163 722 157 722 q 193 732 185 732 q 200 726 200 731 l 197 726 l 200 719 l 200 702 q 220 685 210 702 l 264 709 l 264 715 l 261 715 l 254 712 l 244 729 q 220 715 220 727 l 217 715 q 210 722 210 715 q 214 726 210 726 l 210 749 l 210 770 q 207 773 210 773 q 214 787 210 787 l 200 827 q 254 858 200 838 q 332 888 262 869 q 359 854 338 888 l 407 821 l 417 821 l 417 831 l 427 831 q 437 821 432 831 l 437 817 q 434 814 437 814 q 478 766 436 799 q 519 692 478 715 l 532 678 l 532 675 l 522 675 q 475 641 475 675 q 448 566 475 629 q 427 488 448 488 q 346 604 349 604 l 342 604 q 336 590 342 590 l 315 590 q 295 604 302 604 q 278 597 284 597 l 261 600 q 217 587 243 600 q 207 590 210 590 l 207 593 q 224 604 207 601 l 224 631 q 220 634 224 634 q 231 665 231 656 l 231 675 l 220 675 q 207 644 220 665 l 210 637 q 146 593 190 593 q 41 543 92 557 q 14 559 20 543 l 0 559 l 0 570 q 7 607 0 574 q 0 614 0 607 l 0 641 q 3 668 0 665 q 0 705 0 691 l 0 800 l 3 807 l 10 804 l 14 804 q 20 810 20 804 l 20 814 l 10 814 l 3 810 q 0 814 3 814 l 3 821 q 0 848 3 823 q 3 851 0 851 l 0 875 l 0 946 q 3 983 0 960 q 0 997 0 989 q 47 1014 39 1014 q 51 1004 51 1007 l 61 1004 q 64 1010 61 1010 q 58 1027 58 1021 q 105 1058 76 1049 q 173 1038 115 1058 l 190 1041 q 234 1031 209 1031 l 234 1034 q 258 1027 251 1027 l 258 1031 q 210 1048 258 1046 q 200 1068 200 1053 l 193 1068 q 183 1055 193 1055 l 166 1055 l 149 1085 l 149 1078 q 153 1068 153 1072 l 98 1068 q 64 1055 92 1068 q 58 1061 64 1061 l 54 1061 q 10 1021 46 1043 q 0 1085 0 1031 l 3 1105 q 0 1122 0 1111 q 10 1133 0 1127 m 790 1146 l 834 1146 q 844 1143 844 1146 l 861 1146 l 990 1146 q 1000 1122 1000 1146 l 1007 1122 l 1007 1143 q 1021 1146 1013 1146 l 1088 1146 q 1099 1136 1093 1146 l 1099 1119 q 1095 1092 1099 1095 q 1099 1055 1099 1069 l 1099 987 q 1088 977 1099 982 q 997 994 1020 994 l 990 990 q 926 1041 974 991 q 902 1048 902 1043 q 834 1021 842 1021 l 824 1021 q 793 1068 802 1021 q 770 1116 770 1099 q 790 1146 785 1146 m 739 1092 l 743 1092 q 777 1004 777 1022 q 760 994 766 994 l 760 987 l 770 987 l 770 983 q 743 932 749 932 q 736 939 736 932 l 736 1075 l 739 1092 m 899 1055 l 899 1051 q 919 1068 919 1064 l 919 1072 q 899 1055 899 1060 m 254 1051 l 254 1048 q 349 997 275 1029 l 349 1000 q 268 1048 303 1038 q 264 1051 268 1051 l 254 1051 m 68 1021 l 68 1010 q 75 1017 75 1010 l 75 1021 l 68 1021 m 88 1007 l 88 1000 l 95 1000 q 102 1007 102 1000 l 102 1014 l 95 1014 q 88 1007 88 1013 m 166 1014 l 166 983 q 173 990 173 983 l 173 1014 l 166 1014 m 895 1014 q 956 970 905 1014 q 990 956 981 963 l 1021 956 q 1061 936 1061 943 q 1044 878 1051 926 l 1044 865 q 1068 939 1055 876 l 1085 943 q 1092 936 1092 941 l 1092 905 q 1088 902 1092 902 l 1092 895 l 1092 790 l 1085 780 q 1031 844 1043 809 q 1034 854 1031 848 q 1031 878 1031 868 q 997 777 1012 848 q 919 729 969 729 l 919 719 l 929 719 q 953 729 941 729 l 956 722 l 953 702 q 1024 824 1024 771 q 1021 827 1021 824 l 1027 827 q 1055 790 1033 827 q 1092 726 1088 790 l 1092 393 q 997 356 1059 356 q 912 373 997 369 q 895 414 899 385 l 899 420 q 895 431 899 424 q 899 468 899 454 l 899 475 q 868 509 899 493 q 865 546 868 523 q 868 576 868 564 q 865 600 865 578 q 892 614 877 600 l 899 614 l 895 607 l 895 604 l 899 604 q 919 614 916 604 l 916 631 q 932 648 919 648 l 936 641 l 932 617 l 936 617 q 946 634 943 617 l 943 658 q 946 661 946 658 l 943 661 l 936 658 q 922 661 930 661 q 851 617 922 617 q 800 627 829 624 q 770 624 787 624 l 739 665 q 736 814 736 754 l 736 871 q 773 936 736 889 q 793 990 781 990 q 827 987 823 987 q 895 1014 892 1014 m 14 983 l 14 980 l 20 980 q 27 987 27 980 l 27 990 l 20 990 q 14 983 14 989 m 170 980 l 170 966 l 176 966 l 176 970 q 173 980 173 977 l 170 980 m 132 973 l 132 963 q 146 956 138 963 l 149 956 l 146 973 l 132 973 m 312 929 l 312 926 l 315 926 q 326 936 320 926 l 326 953 q 312 929 321 953 m 170 939 l 170 936 q 180 916 180 920 l 190 916 l 190 919 q 180 939 180 932 l 170 939 m 936 807 l 936 800 l 946 800 q 939 807 946 807 l 936 807 m 122 804 q 88 763 122 797 l 81 763 q 75 773 75 763 l 64 773 l 64 770 l 68 756 q 64 746 64 749 l 81 746 l 119 766 q 115 780 115 772 l 122 783 q 129 770 125 770 q 153 783 153 778 l 153 787 l 136 783 q 129 804 129 791 l 122 804 m 953 804 l 953 800 q 960 793 954 793 l 966 793 l 966 797 q 960 804 966 804 l 953 804 m 44 783 l 44 777 l 54 777 q 47 783 54 783 l 44 783 m 817 770 l 817 756 l 824 756 q 831 763 831 756 l 831 770 l 817 770 m 342 763 l 342 756 l 353 756 l 353 763 l 342 763 m 119 736 l 119 732 l 136 729 l 136 736 l 119 736 m 604 739 q 743 532 736 534 l 746 532 l 746 593 q 770 610 746 598 q 848 573 848 602 q 851 566 848 566 l 848 543 l 848 505 l 838 505 l 821 502 l 821 495 l 838 492 q 848 502 838 496 l 885 481 l 888 475 q 878 434 888 467 l 878 424 q 885 397 878 409 l 878 356 q 888 319 885 346 l 885 312 q 899 292 893 292 l 905 292 l 905 322 q 895 356 905 330 q 902 363 902 356 l 990 349 q 997 336 990 336 l 1000 336 q 1082 363 1067 346 l 1085 363 q 1092 356 1092 361 l 1092 119 q 1088 75 1092 97 q 1092 37 1092 62 l 1092 10 q 1082 0 1092 5 l 912 0 l 885 37 q 854 78 873 37 q 871 132 871 117 l 851 180 q 892 234 851 228 q 919 258 919 255 l 919 264 l 916 281 l 909 281 q 858 237 909 258 l 817 241 l 753 227 q 739 254 742 227 l 729 254 l 729 244 l 736 234 l 726 193 q 739 166 739 189 l 743 166 q 749 173 749 166 l 736 203 q 793 220 736 220 q 804 217 800 217 q 824 224 814 224 l 834 224 q 848 193 840 224 l 844 176 q 858 125 853 125 q 838 61 838 76 q 875 24 844 61 q 888 7 882 24 l 878 0 l 810 0 q 797 3 803 0 q 783 0 791 0 l 760 0 q 688 88 739 0 q 526 336 526 332 q 515 359 515 340 l 539 346 l 543 346 l 543 349 l 492 383 q 441 468 441 463 q 471 570 463 468 q 502 634 490 591 l 498 641 l 498 648 q 559 678 559 652 q 604 739 566 739 m 88 715 l 88 709 q 95 702 90 702 l 102 702 l 98 719 q 102 722 102 719 l 95 722 q 88 715 88 721 m 68 715 l 64 709 q 78 712 71 712 l 78 715 l 68 715 m 526 709 q 546 699 546 705 l 546 692 l 536 692 q 526 702 531 692 l 526 709 m 909 678 l 919 678 q 926 692 919 684 l 926 705 q 909 678 909 699 m 953 695 l 949 678 q 956 688 956 678 l 956 695 l 953 695 m 261 654 l 268 654 q 275 661 275 654 l 275 665 l 271 665 q 261 654 267 665 m 176 661 q 183 654 178 654 l 190 654 q 183 661 190 661 l 176 661 m 146 658 q 136 644 146 653 l 136 637 l 139 637 q 153 651 144 637 l 153 658 l 146 658 m 315 641 q 322 634 317 634 l 329 634 q 336 641 336 634 l 315 641 m 41 627 l 41 624 l 58 624 l 58 627 q 51 634 58 634 l 47 634 q 41 627 41 633 m 98 624 l 98 621 l 105 621 q 112 627 112 621 l 112 634 l 109 634 q 98 624 104 634 m 743 627 l 756 627 q 763 621 763 626 q 756 614 763 614 l 746 614 l 743 627 m 336 617 q 342 610 337 610 q 353 614 349 614 l 353 621 l 336 617 m 92 587 l 98 583 l 102 590 l 102 593 l 98 593 q 92 587 92 592 m 47 583 l 47 576 l 61 576 l 61 583 l 47 583 m 186 587 l 214 573 q 281 580 248 580 q 305 570 298 570 q 326 576 326 572 q 349 512 349 576 l 342 512 q 319 529 322 529 l 319 522 q 353 458 353 486 q 356 366 353 429 q 336 332 356 354 l 336 329 q 356 292 356 307 l 356 288 q 305 258 356 266 q 248 217 291 258 q 193 153 227 204 q 122 88 190 153 q 58 81 90 81 q 41 142 43 81 q 20 173 20 167 q 24 193 20 176 q 0 261 0 227 l 0 431 q 41 465 0 456 l 47 478 q 44 481 47 481 q 71 529 44 529 q 115 549 71 533 q 186 587 115 560 m 14 546 q 44 526 18 536 l 41 492 l 41 485 q 3 465 17 465 l 0 471 l 0 526 q 14 546 0 543 m 668 451 l 665 444 l 665 441 l 668 441 q 675 448 675 441 l 668 451 m 10 363 q 14 359 14 363 q 34 373 34 366 q 24 376 27 376 q 10 363 13 373 m 546 342 l 546 339 q 580 329 546 332 q 631 298 586 311 q 644 278 644 288 q 637 258 637 267 l 637 254 l 641 254 q 648 261 648 254 l 648 264 l 644 271 l 651 275 q 682 268 660 275 q 732 285 700 278 l 732 288 l 726 292 l 705 292 q 682 281 693 281 q 631 312 652 281 q 559 342 609 312 l 546 342 m 749 315 l 749 309 l 766 312 l 766 315 q 760 322 766 322 l 756 322 q 749 315 749 321 m 939 258 l 936 251 l 936 248 q 946 241 946 248 q 966 251 966 245 q 939 258 949 251 m 349 231 l 356 220 l 356 112 q 295 92 356 105 q 288 88 295 88 q 278 95 288 95 q 241 85 267 89 q 271 64 241 80 l 275 64 q 353 88 279 88 q 356 75 356 82 l 356 -10 q 346 -20 356 -15 l 278 -20 l 278 -10 q 292 7 278 -8 l 292 14 l 288 14 q 248 -20 267 -20 l 122 -20 q 112 -7 114 -20 l 105 -7 q 98 -20 105 -20 l 10 -20 q 0 -10 5 -20 l 0 37 q 20 54 6 50 q 64 27 54 54 q 92 3 74 3 l 95 3 l 95 7 q 64 41 64 18 l 64 47 q 71 51 71 47 l 78 47 l 125 47 q 183 98 142 47 q 217 105 204 105 l 217 112 q 241 159 217 149 q 319 217 293 217 l 349 231 m 929 207 l 912 207 l 875 166 l 871 159 l 878 159 q 902 183 886 159 l 905 183 l 905 173 l 895 159 q 899 156 899 159 l 916 170 q 932 156 930 156 l 932 159 q 926 186 926 172 q 943 200 943 195 l 943 214 l 939 214 l 929 207 m 7 193 q 24 156 7 156 l 24 139 q 34 85 32 131 q 31 81 31 85 l 24 85 l 20 85 l 3 81 l 0 98 l 0 186 q 7 193 1 193 m 990 183 l 987 176 l 987 173 l 990 173 q 997 180 997 173 l 990 183 m 760 166 q 777 139 771 139 q 763 95 773 117 l 763 92 l 766 92 l 790 132 l 763 166 l 760 166 m 760 88 q 753 81 760 81 q 763 68 763 73 l 770 68 l 770 71 q 763 88 763 80 l 760 88 m 814 41 l 821 37 q 834 51 824 51 l 834 58 q 814 41 820 53 z "},"o":{"ha":1221,"x_min":0,"x_max":1207,"o":"m 580 1153 q 821 1112 718 1153 l 821 1102 l 827 1102 l 827 1109 q 885 1068 875 1109 q 882 1055 882 1062 q 905 1075 894 1055 l 909 1075 q 939 1058 933 1058 l 939 1048 q 892 1024 939 1039 q 899 1017 893 1017 q 943 1048 943 1029 q 987 1021 958 1048 l 983 997 l 983 994 q 1007 943 1000 968 q 953 858 977 881 q 916 848 926 848 l 909 848 q 888 854 899 848 q 865 851 878 854 q 804 854 833 854 l 797 854 q 790 868 790 854 l 787 868 l 773 854 q 715 848 715 853 l 675 875 q 631 878 633 878 q 580 875 597 875 q 543 916 574 875 q 526 936 533 916 q 498 926 498 928 q 475 943 477 932 l 475 949 q 556 1010 517 991 q 576 1038 566 1033 l 580 1038 q 621 1017 612 1027 q 668 997 648 997 l 702 1010 q 804 990 718 1004 l 810 966 l 810 929 l 807 909 q 810 895 810 903 l 817 895 q 814 916 817 898 l 817 922 l 814 929 q 817 966 817 952 l 817 980 l 814 987 q 885 1024 881 1014 l 878 1027 q 810 994 857 1010 q 807 997 810 997 q 804 994 807 994 q 800 1007 800 1000 l 780 1007 q 705 1021 753 1007 q 661 1007 667 1007 q 624 1031 637 1007 q 576 1048 576 1043 l 576 1051 q 580 1088 576 1065 l 580 1092 l 576 1092 q 539 1010 568 1039 q 492 980 523 998 l 485 980 q 451 1065 478 980 l 454 1082 l 454 1116 q 509 1146 454 1146 l 566 1146 q 570 1116 570 1128 l 570 1112 l 576 1112 l 576 1116 q 573 1149 576 1120 l 580 1153 m 448 1136 l 451 1129 q 441 1105 448 1105 l 431 1122 l 431 1133 l 448 1136 m 414 1126 q 441 1048 441 1095 q 448 1007 448 1013 q 444 1004 444 1007 q 461 970 458 1004 q 393 922 461 947 q 322 966 322 932 l 322 987 q 329 1010 323 1010 l 326 1027 l 326 1031 q 356 1078 326 1042 q 376 1119 376 1104 q 414 1126 400 1126 m 770 1116 l 770 1109 l 780 1109 l 780 1116 l 770 1116 m 356 1109 l 356 1105 q 315 1041 346 1081 q 312 1017 312 1027 l 315 1004 l 309 987 l 319 980 q 312 963 312 969 q 339 926 317 947 q 319 902 334 910 l 315 902 l 315 912 l 305 912 q 264 865 305 884 q 251 851 264 851 l 234 854 q 193 824 214 854 q 170 875 189 829 q 153 888 154 882 q 183 905 176 888 l 190 902 q 203 905 192 902 q 217 902 210 902 l 220 909 l 214 912 l 203 912 l 203 916 q 183 909 197 916 q 163 919 180 919 q 129 882 151 882 q 109 861 129 861 l 98 861 l 81 865 q 166 987 81 911 q 173 1000 166 992 q 200 990 184 1000 l 210 990 l 210 994 l 203 1004 l 203 1010 q 248 1021 203 1021 l 248 1027 q 227 1038 244 1038 l 227 1041 q 356 1109 292 1093 m 275 1044 l 275 1034 l 281 1034 l 281 1044 l 275 1044 m 268 1021 l 268 1010 q 275 1017 275 1010 l 275 1021 l 268 1021 m 244 1007 l 244 1000 l 248 1000 q 254 1007 254 1000 l 254 1014 l 251 1014 q 244 1007 244 1013 m 1021 977 l 1024 977 q 1170 760 1129 877 l 1187 688 l 1187 685 l 1177 671 l 1183 668 l 1190 671 l 1194 665 l 1194 654 l 1190 648 q 1204 604 1200 648 l 1200 583 q 1207 563 1207 572 q 1194 397 1207 465 l 1173 397 q 1156 376 1156 389 l 1160 376 l 1183 383 l 1190 383 q 1085 142 1178 283 q 1055 122 1071 129 q 1058 112 1058 115 l 1055 112 q 963 125 1040 112 q 1010 109 963 120 l 1010 71 q 956 41 989 41 l 960 34 q 763 -47 887 -26 l 763 -44 q 770 -17 763 -29 q 749 54 760 33 q 777 95 761 64 l 783 95 l 783 102 q 729 146 763 102 q 678 214 705 165 q 800 332 768 256 q 838 417 825 415 l 844 417 l 844 407 l 854 414 q 882 383 854 405 l 882 376 q 878 366 878 370 l 875 366 l 851 370 q 892 356 851 361 q 916 376 892 363 l 909 376 l 892 373 q 868 414 892 389 q 882 424 868 422 l 882 444 l 878 451 q 932 495 886 472 l 932 498 l 922 498 q 882 478 906 483 q 851 417 882 448 q 827 431 851 429 q 834 532 834 471 l 834 559 q 838 563 834 563 q 827 621 834 571 q 834 627 834 621 l 834 631 q 824 648 824 642 q 838 668 824 651 l 834 668 q 827 661 827 667 q 797 729 819 661 q 743 804 783 758 l 743 807 q 817 814 815 812 q 831 810 823 810 q 844 814 838 810 q 878 804 864 804 q 909 810 901 810 q 926 746 926 776 l 926 739 l 922 719 q 963 624 963 651 q 943 604 958 624 q 953 590 948 604 q 939 563 948 575 q 943 549 939 555 q 939 536 939 543 l 939 532 q 943 529 939 529 l 939 522 l 939 515 q 949 505 939 511 l 943 492 l 949 495 q 963 488 963 492 q 990 495 984 495 q 1000 488 1000 492 l 1007 492 l 1017 492 l 1061 461 l 1065 468 l 1055 475 q 1061 492 1061 486 l 1058 492 l 1041 488 q 966 529 987 505 l 960 526 q 949 536 960 530 q 983 621 963 621 l 983 627 q 966 665 966 627 q 936 715 962 665 l 939 729 l 936 746 l 939 770 l 936 787 q 1010 827 936 806 l 1010 831 l 997 834 l 997 841 q 1017 851 1000 851 l 1034 841 l 1038 841 q 1044 848 1044 841 l 1044 854 q 1017 861 1034 854 l 1007 861 q 1021 885 1012 885 l 1024 885 l 1024 875 l 1021 868 l 1027 868 l 1034 871 l 1041 868 l 1058 871 l 1055 895 q 1065 905 1059 895 l 1058 909 q 1048 905 1051 905 l 1038 922 l 1038 929 l 1048 929 l 1061 919 l 1065 919 l 1065 922 q 1031 949 1031 945 q 1021 977 1021 970 m 556 994 l 556 980 l 563 980 l 563 987 q 556 994 563 994 m 217 977 l 217 973 l 227 973 l 231 980 l 227 980 q 217 977 220 977 m 539 949 q 549 966 547 949 q 539 949 542 966 m 214 956 l 214 953 l 224 953 l 224 963 l 220 963 q 214 956 214 962 m 119 929 l 115 912 l 115 909 q 125 929 125 912 l 119 929 m 458 932 l 485 909 q 505 916 496 916 q 553 878 536 905 l 553 875 q 431 797 471 852 q 400 743 404 743 l 397 743 l 397 746 q 434 848 416 806 q 407 885 434 852 l 410 892 q 404 899 410 899 q 393 885 404 894 q 420 854 393 879 l 420 848 l 397 821 l 397 797 q 329 732 397 755 q 302 719 317 732 l 298 719 q 251 763 269 734 q 210 810 241 763 l 210 821 q 275 848 235 848 q 322 875 275 865 q 359 919 348 911 q 407 902 389 916 q 451 932 451 925 l 458 932 m 1024 929 l 1031 929 l 1031 919 q 1017 912 1025 919 l 1014 919 q 1024 929 1014 924 m 132 899 l 132 895 l 136 895 q 142 902 142 895 l 142 905 l 139 905 q 132 899 132 904 m 281 895 q 288 888 283 888 l 295 899 l 288 902 q 281 895 281 901 m 98 882 l 112 882 q 119 888 119 882 l 112 892 l 109 892 q 98 882 104 892 m 237 885 l 237 882 l 241 882 q 251 892 245 882 l 244 892 q 237 885 237 890 m 146 882 l 149 882 q 166 865 149 875 q 159 858 166 858 l 136 858 q 129 865 129 858 l 146 882 m 224 861 l 234 861 l 234 868 l 231 868 q 224 861 224 867 m 61 848 q 125 838 123 842 q 156 844 132 841 q 186 804 160 844 q 285 709 207 770 q 227 665 267 682 q 186 614 213 614 q 149 536 177 536 q 136 532 136 536 q 68 573 119 546 q 54 570 62 570 l 58 587 l 47 593 q 14 580 21 580 l 3 580 q 0 590 3 583 q 61 848 0 700 m 387 743 q 397 732 391 743 l 397 729 q 376 634 382 705 q 366 621 373 634 q 373 614 373 619 q 370 597 373 602 q 376 468 373 567 l 373 468 l 339 485 l 258 461 l 237 465 l 231 465 l 210 461 q 153 475 179 475 q 210 448 159 464 l 224 448 q 227 451 227 448 l 258 441 q 315 458 258 453 q 339 468 315 463 q 387 427 387 437 q 461 278 397 360 q 529 248 461 271 q 593 237 542 237 l 641 241 q 719 146 657 197 q 736 122 719 140 l 736 109 q 702 51 722 109 l 709 47 l 712 68 l 719 68 q 732 14 729 68 l 736 14 q 729 -24 729 0 l 729 -27 q 593 -41 622 -41 q 451 -14 494 -41 q 434 -24 451 -18 q 190 95 287 11 l 156 129 q 268 159 156 134 l 268 166 q 156 136 156 146 l 149 136 q 119 186 119 160 l 119 190 l 122 214 q 75 241 75 237 l 75 248 q 98 309 98 262 l 115 315 q 109 322 115 322 l 105 322 l 92 312 q 78 349 78 326 q 129 441 78 358 q 142 475 129 456 l 139 498 q 200 526 139 512 l 231 498 l 231 502 q 200 539 219 526 q 237 610 200 602 l 258 651 l 322 702 q 366 726 322 717 q 387 743 366 743 m 1010 637 l 1014 637 q 1031 651 1029 644 l 1031 654 l 1027 654 q 1010 637 1023 654 m 821 651 l 821 644 q 841 641 823 644 l 844 641 l 844 644 q 831 651 839 644 l 821 651 m 970 651 l 970 648 q 977 641 971 641 l 983 641 q 990 648 990 641 l 990 651 l 970 651 m 861 644 l 861 641 q 868 634 863 634 l 882 634 l 882 637 q 868 644 876 637 l 861 644 m 98 634 l 95 627 l 95 621 l 105 621 l 105 627 q 98 634 105 634 m 44 570 l 54 570 l 51 563 q 98 536 84 536 q 102 539 102 536 q 122 532 115 532 l 122 522 q 112 512 112 522 q 119 502 115 502 q 47 363 102 428 q 54 336 54 342 q 51 319 51 330 q 68 285 66 319 l 61 281 l 54 281 q 34 359 34 326 l 44 359 l 44 363 q 17 414 17 363 q 24 420 24 414 q 7 451 10 420 q 14 461 10 461 q 0 546 0 479 q 44 570 0 555 m 95 519 l 95 509 l 102 509 l 102 519 l 95 519 m 926 509 q 905 458 926 473 l 909 458 q 926 465 920 465 l 926 478 q 932 505 926 481 l 932 509 l 926 509 m 34 478 l 31 471 l 31 468 l 41 468 l 41 471 q 34 478 41 478 m 844 373 q 838 339 840 368 l 861 326 l 861 329 l 844 346 l 844 356 l 851 366 q 844 373 851 373 m 888 363 l 888 356 q 919 326 888 352 l 919 332 q 892 363 899 361 l 888 363 m 919 322 l 919 319 q 936 295 919 302 l 939 295 q 943 305 939 298 l 922 322 l 919 322 m 349 309 l 346 302 l 346 295 q 356 305 351 295 l 349 309 m 922 278 l 922 275 l 932 275 l 932 285 l 929 285 q 922 278 922 283 m 475 251 l 475 241 q 481 248 481 241 l 481 251 l 475 251 m 997 237 l 997 227 l 1004 227 l 1004 237 l 997 237 m 468 210 l 468 203 q 475 197 469 197 l 475 217 q 468 210 468 216 m 1004 207 l 1000 200 l 1007 197 l 1010 203 l 1004 207 m 566 203 l 566 197 q 573 190 568 190 q 580 197 580 190 l 580 203 l 566 203 m 346 190 l 346 176 l 349 176 q 359 197 349 184 l 359 200 l 356 200 q 346 190 351 200 m 939 193 l 939 186 q 953 193 947 193 l 953 197 l 949 197 q 939 193 943 193 m 488 193 l 488 183 l 522 170 q 492 193 522 174 l 488 193 m 899 190 l 895 183 q 905 173 895 178 l 905 183 q 899 190 905 190 m 434 183 q 441 176 435 176 l 448 176 l 448 186 l 444 186 q 434 183 437 183 m 312 156 l 312 149 l 315 149 q 326 163 321 149 l 319 163 q 312 156 312 161 m 902 163 q 929 139 902 139 l 932 146 q 905 163 920 146 l 902 163 m 285 153 l 285 146 l 292 146 q 298 159 292 151 l 292 159 q 285 153 285 158 m 153 149 l 153 146 q 163 156 157 146 l 159 156 q 153 149 153 155 m 543 153 l 543 146 q 549 139 544 139 l 549 153 l 543 153 m 397 139 q 400 129 400 132 l 404 129 l 404 142 l 397 139 m 251 119 q 254 115 254 119 q 271 129 270 122 l 261 129 q 251 119 256 129 m 1017 132 l 1024 132 l 1024 129 q 1004 109 1024 124 l 1000 109 l 1000 129 l 1017 132 m 590 122 l 590 119 l 604 115 q 593 122 604 122 l 590 122 m 661 119 l 661 112 l 682 112 l 682 115 l 665 119 l 661 119 m 899 115 l 895 102 q 905 115 901 102 l 899 115 m 851 112 l 851 105 l 865 105 l 865 109 q 851 112 853 112 m 502 81 l 502 71 l 515 71 q 512 81 512 78 l 502 81 z "},"p":{"ha":1017,"x_min":0,"x_max":1027,"o":"m 14 1133 l 217 1133 q 234 1088 222 1133 l 237 1088 q 214 1041 214 1053 l 207 1044 l 197 1044 l 197 1041 q 203 1034 198 1034 l 207 1034 q 210 1038 210 1034 q 251 997 222 1038 q 312 905 275 997 q 305 878 312 895 q 309 841 309 855 l 309 834 q 210 746 250 746 q 180 729 180 733 l 180 719 l 190 719 q 207 736 192 736 q 217 732 214 732 q 227 743 217 737 l 234 743 l 234 739 l 203 712 l 207 712 q 254 756 235 712 q 278 766 267 766 q 288 756 283 766 l 288 753 l 281 729 l 288 726 q 295 746 295 736 q 288 777 295 751 q 332 834 300 805 q 349 821 348 827 l 366 824 l 370 824 l 373 807 q 366 773 373 798 q 373 743 373 761 q 356 726 368 726 l 356 705 l 366 712 q 373 705 373 711 l 373 682 q 363 671 373 677 l 349 675 q 339 668 339 671 q 302 682 313 671 q 295 661 302 669 l 298 654 q 366 665 323 661 l 373 654 l 373 651 q 366 624 366 627 l 373 621 l 420 621 l 461 617 l 461 621 q 478 597 478 616 q 465 553 465 565 q 485 590 473 553 q 481 617 481 609 l 488 621 l 522 621 q 668 692 631 621 l 705 702 l 739 699 q 756 705 750 705 q 824 685 785 692 q 827 671 827 679 q 780 644 825 644 q 770 637 780 637 q 739 661 765 637 l 739 658 q 770 627 745 644 q 732 556 759 556 q 715 519 725 556 q 668 485 705 505 q 624 444 633 444 q 593 424 602 444 l 580 420 q 573 427 580 427 l 570 427 q 539 353 553 353 q 526 356 526 353 l 492 353 l 424 353 q 417 359 417 353 q 427 387 427 376 l 427 390 q 420 397 427 397 q 383 353 420 361 l 373 353 l 373 329 q 329 305 373 320 q 298 319 311 305 l 285 319 q 278 302 285 311 q 329 285 278 292 q 370 298 348 285 l 373 292 l 373 142 q 366 136 373 136 l 363 136 q 298 166 326 166 q 264 156 296 166 q 156 183 172 168 l 156 220 q 159 234 156 228 l 156 241 l 159 261 q 156 271 156 268 l 149 268 l 153 254 q 149 193 149 199 l 153 180 l 153 166 q 166 153 166 166 q 200 159 200 156 q 254 146 246 151 l 261 146 q 305 159 293 153 q 356 129 316 159 q 373 109 373 129 l 373 98 q 370 75 373 79 q 373 44 373 56 l 373 10 q 363 0 373 5 l 309 3 q 288 0 306 3 q 285 3 285 0 l 244 0 l 170 0 l 149 3 q 132 0 144 0 l 95 0 l 71 7 q 7 0 61 7 l 0 10 l 0 24 q 3 41 0 35 l 0 61 l 0 92 q 20 115 0 106 q 0 122 0 115 l 0 153 q 3 180 0 176 q 0 217 0 203 l 0 281 q 58 319 7 319 q 88 309 76 309 q 102 315 102 311 l 136 312 l 170 312 q 180 302 174 312 l 173 292 l 176 292 l 197 312 l 200 312 q 258 315 218 312 q 268 305 258 311 l 271 305 l 271 322 q 268 326 271 326 q 271 329 268 329 q 258 366 265 366 l 254 366 l 254 363 l 261 353 l 261 339 q 210 326 261 334 q 197 329 203 326 q 159 326 174 326 l 146 326 q 109 332 142 326 l 98 332 l 88 326 l 85 326 q 61 397 61 350 q 64 424 64 421 q 24 509 24 488 q 47 529 33 529 q 34 546 36 546 q 47 573 39 561 l 47 576 q 44 590 47 584 q 47 604 47 596 q 37 614 37 604 q 47 621 47 614 l 47 627 l 41 627 l 41 641 l 51 641 q 44 648 51 648 l 37 644 l 20 648 l 3 644 l 0 651 l 0 888 q 3 926 0 903 l 0 932 l 3 946 q 0 1007 0 978 q 17 1014 0 1014 q 0 1038 0 1024 l 0 1092 q 7 1099 1 1099 q 34 1095 26 1095 l 34 1102 l 27 1102 q 0 1109 12 1102 q 14 1133 6 1133 m 248 1133 l 495 1133 l 515 1129 q 532 1133 521 1133 l 556 1133 q 559 1129 559 1133 l 566 1133 q 570 1129 570 1133 q 580 1133 576 1133 q 682 1116 672 1133 q 695 1119 684 1116 q 824 1065 824 1099 q 851 1027 842 1031 l 848 994 l 848 970 q 844 956 848 962 q 895 922 844 949 q 868 858 868 897 q 854 844 863 858 l 865 844 l 875 851 q 888 814 888 848 q 834 715 888 807 q 821 692 834 692 l 756 719 l 732 715 q 712 722 719 722 q 685 712 695 712 l 678 712 q 671 719 671 712 l 671 773 q 509 865 646 865 l 461 865 q 444 871 444 865 q 417 865 432 865 l 373 865 l 373 844 q 363 834 373 840 l 349 834 q 322 868 322 845 q 329 912 329 884 q 258 1010 322 952 q 231 1051 231 1036 q 264 1116 264 1090 l 258 1116 q 248 1095 258 1095 q 237 1126 237 1108 l 248 1133 m 454 1075 l 454 1068 q 461 1061 456 1061 l 465 1061 l 465 1068 q 458 1075 465 1075 l 454 1075 m 88 1061 l 88 1055 l 112 1055 l 119 1051 l 119 1058 l 102 1061 l 88 1061 m 854 1041 l 861 1041 q 882 1031 877 1031 l 882 1027 q 875 1021 882 1021 q 854 1041 865 1021 m 349 1034 l 349 1031 q 373 1021 358 1031 l 376 1021 q 353 1034 371 1034 l 349 1034 m 180 1048 l 180 1044 l 193 1044 l 193 1048 l 180 1048 m 407 1027 l 407 1021 l 417 1021 l 417 1027 l 407 1027 m 695 1017 l 709 1017 q 715 1024 715 1017 l 715 1027 l 705 1027 q 695 1017 701 1027 m 756 997 l 749 1000 q 699 980 699 985 l 699 977 l 810 1004 l 817 1014 l 814 1014 l 756 997 m 559 1010 l 559 1004 l 570 1004 l 570 1010 l 559 1010 m 417 1007 l 417 990 l 424 990 l 424 1007 l 417 1007 m 31 1024 l 27 1017 l 27 1014 l 34 1017 l 44 1017 q 61 1004 59 1004 l 64 1004 l 64 1010 q 31 1024 64 1021 m 895 1007 l 909 1007 q 1021 821 980 960 l 1021 814 l 1017 807 q 1027 766 1024 797 l 1021 763 l 1017 763 l 994 783 l 987 783 l 987 777 q 1027 736 1027 762 l 1027 712 q 1014 702 1027 702 l 1014 695 q 1027 688 1027 695 q 994 590 1017 590 l 980 583 q 949 590 964 590 q 926 576 944 576 l 919 576 l 875 610 l 868 607 l 865 607 q 844 617 847 607 q 858 627 844 626 l 858 631 l 851 641 l 851 644 q 909 770 856 695 q 912 780 912 777 l 936 780 l 960 777 l 960 783 l 956 783 q 916 793 916 783 l 912 810 l 922 831 l 916 831 q 905 827 909 827 q 899 861 902 833 l 919 892 l 919 905 q 868 943 868 929 q 865 953 868 953 q 895 1007 865 975 m 671 990 l 671 983 l 675 983 l 685 990 q 682 1000 682 997 q 671 990 677 1000 m 648 997 l 644 983 l 648 983 q 654 990 654 983 l 654 997 l 648 997 m 437 980 l 437 973 q 471 956 445 973 l 475 956 l 475 960 l 437 980 m 61 994 l 61 987 q 68 980 62 980 l 68 987 q 61 994 68 994 m 515 960 l 529 960 l 529 970 l 526 970 q 515 960 521 970 m 614 963 q 607 949 614 958 l 607 943 q 621 953 621 948 l 621 963 l 614 963 m 383 946 q 390 939 385 939 l 400 939 l 400 949 q 393 956 400 956 q 383 946 389 956 m 492 946 l 492 943 q 495 932 495 936 q 492 929 492 932 l 495 929 l 498 936 l 498 946 l 492 946 m 485 895 l 485 892 l 492 892 l 492 902 q 485 895 485 901 m 973 882 l 973 875 l 987 875 q 980 882 987 882 l 973 882 m 454 861 l 458 861 q 468 871 463 861 l 468 878 q 454 861 461 877 m 492 871 l 492 865 l 498 865 q 509 875 503 865 l 502 875 q 492 871 495 871 m 34 888 l 34 882 l 37 882 q 44 888 44 882 l 34 888 m 31 871 l 24 861 l 24 858 q 44 844 31 858 l 47 844 l 47 854 q 31 871 47 859 m 614 844 l 614 838 l 621 838 l 621 851 q 614 844 614 850 m 102 848 l 102 844 q 122 810 122 820 l 122 804 l 115 804 l 115 797 q 122 790 117 790 l 125 790 l 125 800 l 129 824 q 105 848 105 835 l 102 848 m 47 838 l 47 834 q 85 790 81 790 l 88 790 q 51 838 81 807 l 47 838 m 92 780 q 85 766 92 774 q 109 736 100 766 q 119 726 113 736 l 105 709 l 109 685 q 61 648 96 662 l 58 641 l 58 637 l 64 637 l 109 668 q 136 719 120 719 q 139 715 136 715 q 142 732 142 720 q 132 729 136 729 l 105 756 l 109 773 q 139 766 114 773 l 139 773 q 122 780 122 773 q 109 777 111 777 l 92 780 m 997 722 l 997 719 l 1007 719 l 1007 729 l 1004 729 q 997 722 997 728 m 156 732 q 149 715 156 726 l 156 712 l 166 712 l 170 729 l 170 732 l 156 732 m 271 715 q 278 682 278 694 l 285 682 l 285 685 q 278 715 285 690 l 271 715 m 41 695 l 41 682 l 47 682 q 61 705 47 694 l 61 709 l 54 709 q 41 695 49 709 m 1004 685 l 1004 682 q 1010 675 1005 675 l 1017 675 l 1017 682 l 1014 688 q 1004 685 1007 685 m 186 705 q 180 685 180 694 l 180 682 l 186 682 q 193 702 186 691 l 186 705 m 271 671 l 264 658 l 271 654 l 278 654 q 288 665 283 654 q 271 671 277 671 m 34 661 l 34 658 l 41 658 l 41 668 q 34 661 34 667 m 231 637 q 251 573 237 606 l 248 559 l 254 546 q 217 509 254 526 l 214 509 q 163 505 197 509 q 156 512 163 512 l 149 512 q 170 495 149 507 l 197 502 l 217 498 q 261 532 257 518 l 261 536 l 254 559 q 258 587 258 578 q 237 648 244 587 l 251 665 l 251 668 l 248 668 q 231 637 237 668 m 861 631 l 861 627 q 871 624 865 627 l 875 631 l 875 637 l 868 637 q 861 631 861 636 m 281 641 l 281 634 l 288 634 q 298 644 293 634 l 298 648 q 281 641 288 641 m 838 610 q 899 573 845 597 l 899 570 l 905 573 l 912 573 l 912 570 l 909 563 q 912 553 912 556 q 949 566 936 553 l 973 563 l 997 566 q 888 420 977 489 q 766 363 813 372 q 726 397 766 368 q 682 431 721 412 l 682 437 q 743 485 694 452 q 780 532 753 532 q 817 610 791 610 l 838 610 m 7 624 l 10 624 l 14 610 l 31 610 q 37 607 31 607 q 7 519 26 519 l 3 519 l 0 526 q 3 553 0 549 q 0 590 0 576 l 0 617 q 7 624 1 624 m 383 492 l 383 495 q 359 481 359 489 l 359 475 q 370 458 370 464 l 376 458 l 373 475 q 414 492 373 481 q 417 481 417 485 l 420 481 l 431 488 q 471 468 454 468 l 475 475 q 434 498 448 475 l 441 512 l 434 512 q 383 492 385 492 m 861 526 l 861 512 l 865 512 q 871 519 871 512 q 865 526 871 526 l 861 526 m 51 519 l 64 519 q 58 526 64 526 q 51 519 51 524 m 81 519 l 81 515 q 95 509 87 515 l 109 509 l 109 512 q 95 519 103 512 l 81 519 m 322 509 l 349 509 q 342 515 349 515 l 329 515 q 322 509 322 514 m 122 512 l 122 509 q 129 502 123 502 l 139 502 q 129 512 139 507 l 122 512 m 261 502 l 261 498 q 271 485 271 498 l 275 485 q 288 492 283 492 l 288 498 q 268 509 277 498 q 261 502 261 507 m 481 471 l 492 471 q 498 478 498 471 l 488 478 q 481 471 481 477 m 505 478 l 505 475 q 583 427 530 475 l 583 444 q 532 478 569 444 l 505 478 m 7 495 l 10 495 q 20 461 17 495 q 51 404 31 452 q 47 393 51 400 l 51 376 l 47 353 q 54 336 54 342 q 3 309 30 309 l 0 315 l 0 488 q 7 495 1 495 m 271 475 l 271 454 l 278 454 l 278 468 q 271 475 278 475 m 275 448 l 271 441 l 278 437 l 281 444 l 275 448 m 197 437 l 197 431 l 210 431 l 210 441 l 207 441 q 197 437 200 437 m 665 427 l 668 427 q 739 363 674 427 q 593 336 739 342 l 583 336 l 576 332 l 570 342 l 570 346 q 631 414 570 382 q 644 410 637 410 l 665 427 m 281 417 l 281 404 q 288 410 288 404 l 288 417 l 281 417 m 407 387 q 410 373 410 380 l 414 373 l 414 387 l 407 387 m 261 390 q 264 366 264 376 q 271 373 271 366 q 268 376 271 376 q 275 400 275 390 l 261 390 m 88 132 l 68 136 q 27 109 35 125 l 27 105 q 78 129 58 124 q 85 122 79 122 q 146 153 96 136 l 146 156 l 136 156 q 88 132 113 151 m 61 75 l 61 54 q 71 44 61 50 q 85 71 85 58 l 81 85 q 88 92 88 85 l 88 95 l 85 95 q 64 75 66 95 l 61 75 m 186 37 l 186 34 l 197 34 l 197 44 l 193 44 q 186 37 186 43 m 105 17 l 105 14 l 112 14 q 119 20 119 14 l 119 24 l 112 24 q 105 17 105 22 z "},"q":{"ha":1221,"x_min":-7,"x_max":1207,"o":"m 580 1153 q 634 1092 587 1153 q 678 1061 675 1072 l 678 1038 q 668 987 678 1019 q 675 939 675 951 l 665 902 q 678 871 678 878 l 671 868 q 624 875 646 875 l 600 875 q 492 838 544 875 l 485 838 q 431 868 467 857 q 420 878 431 871 q 424 912 420 882 l 420 912 q 414 905 414 911 q 417 892 417 899 q 373 895 415 892 q 332 882 354 882 l 332 871 l 356 871 q 387 882 369 882 l 404 882 q 441 848 433 848 l 454 851 q 478 824 478 844 q 393 549 393 741 l 397 509 l 390 505 q 332 556 332 522 l 319 566 q 295 556 307 566 q 214 587 214 562 q 210 600 214 600 l 214 624 l 214 658 q 237 668 237 658 q 231 675 231 668 q 220 665 220 675 q 173 695 184 665 l 183 729 l 183 743 q 176 766 183 766 q 183 810 183 802 q 173 851 173 828 l 176 851 q 159 875 170 872 l 156 875 l 156 848 q 166 807 156 838 l 159 804 l 153 804 q 139 810 144 810 q 92 807 134 810 q 75 817 75 811 l 75 824 q 129 919 83 863 q 197 1000 129 937 q 210 983 203 999 q 193 939 210 939 q 139 902 173 939 q 146 882 146 888 l 153 882 q 207 926 172 926 q 241 922 237 922 q 305 939 277 930 q 326 912 313 939 l 332 912 q 326 939 332 916 q 336 973 336 957 q 322 1000 322 978 l 315 1000 q 312 994 315 994 q 326 966 316 977 l 322 949 l 312 949 q 275 943 288 949 q 261 946 269 946 q 234 939 256 946 q 214 973 222 939 l 217 980 l 217 983 q 210 1007 217 1007 q 285 1068 216 1025 l 292 1068 l 292 1065 l 271 1034 q 295 997 295 1008 l 302 997 l 285 1031 q 359 1099 298 1099 q 383 1112 361 1112 l 397 1112 q 529 1146 397 1130 q 397 1099 529 1128 q 383 1102 391 1102 l 380 1095 l 380 1092 l 383 1092 q 566 1146 439 1092 q 580 1153 566 1149 m 624 1153 l 627 1153 q 777 1129 718 1153 l 783 1133 q 909 1082 885 1105 q 848 1034 891 1050 q 824 990 848 995 q 749 929 767 929 q 695 912 709 912 q 685 922 695 917 q 692 963 692 946 q 685 990 692 966 q 746 1048 685 1048 q 770 1058 758 1048 l 780 1051 q 821 1058 810 1058 l 821 1061 q 790 1078 821 1067 q 695 1048 790 1065 q 665 1102 687 1090 l 665 1109 l 654 1109 l 648 1105 q 624 1153 624 1128 m 932 1072 q 1041 983 976 1057 l 1038 966 q 1088 875 1043 966 q 1099 865 1093 875 q 1085 827 1085 844 q 1143 787 1118 818 l 1146 787 l 1146 790 q 1139 814 1139 812 l 1146 817 l 1153 817 q 1163 807 1158 817 l 1163 800 q 1149 777 1163 791 q 1031 705 1135 758 q 1014 685 1019 699 q 1017 682 1014 682 l 1014 658 l 1014 644 q 949 621 981 627 q 868 580 949 601 q 834 600 834 595 q 705 858 834 769 q 699 885 699 870 q 790 926 785 918 q 875 1021 850 980 q 932 1072 886 1021 m 1058 970 q 1149 824 1147 868 l 1149 821 l 1126 821 l 1099 834 q 1112 868 1112 861 l 1112 875 q 1058 970 1097 875 m 295 848 l 302 844 l 305 844 q 315 854 310 844 l 309 858 q 295 848 295 853 m 1027 793 q 1034 787 1029 787 l 1038 787 q 1051 800 1043 787 l 1051 804 l 1048 804 q 1027 793 1027 800 m 41 804 q 78 793 52 797 q 105 797 97 797 q 139 749 135 797 q 136 739 136 743 q 139 729 136 736 q 136 699 136 711 l 136 692 q 166 654 136 676 q 170 617 166 647 q 166 590 166 599 q 170 566 170 588 q 139 549 157 562 l 136 549 q 132 563 136 563 q 115 549 117 556 q 122 539 119 539 q 112 519 112 524 l 105 519 q 98 526 98 519 l 102 549 l 98 549 q 88 526 92 549 l 92 519 l 88 502 l 88 498 l 92 498 l 92 505 l 115 505 q 180 549 115 543 q 244 539 210 539 q 258 543 246 539 q 309 471 309 498 q 302 465 302 470 q 339 414 302 443 q 346 380 346 398 l 342 366 l 349 366 q 363 397 355 397 l 376 397 l 376 390 q 305 285 343 306 q 258 214 261 234 q 241 173 254 173 l 237 173 q 217 180 228 173 q 142 149 167 165 q 27 342 89 170 l 27 346 q 81 427 37 415 q 115 441 115 435 l 115 444 l 105 444 q 88 434 88 437 q 78 437 81 437 l 81 461 q 17 380 32 412 q -3 536 -3 465 l -3 549 q -7 566 -3 561 q 37 804 -7 677 l 41 804 m 1166 749 l 1170 749 q 1204 614 1180 749 l 1204 610 q 1190 607 1198 607 l 1190 600 q 1207 593 1207 600 q 1204 549 1207 572 l 1207 532 l 1204 526 l 1207 505 q 1204 502 1207 502 l 1207 495 q 1177 373 1197 373 l 1170 370 l 1156 370 l 1156 387 l 1133 383 q 1126 404 1126 394 q 1133 410 1133 404 l 1133 417 l 1122 417 q 1116 400 1122 400 l 1119 359 l 1122 359 q 1129 373 1129 359 l 1136 373 l 1136 366 l 1133 359 q 1149 356 1138 356 q 1116 312 1149 338 q 1126 302 1120 312 q 1170 336 1145 302 q 1177 329 1177 334 q 1139 248 1154 248 l 1139 237 l 1136 220 l 1126 220 q 1122 227 1126 227 q 1129 251 1129 241 l 1122 254 q 1129 275 1129 265 l 1129 281 l 1122 281 q 1112 271 1118 281 l 1119 261 l 1119 254 l 1109 254 l 1109 248 l 1116 237 q 1109 207 1109 216 q 1119 197 1114 207 l 1119 193 l 1112 193 l 1105 197 q 1088 183 1099 183 l 1088 176 l 1102 176 q 1078 136 1102 161 q 1116 95 1079 123 q 1146 58 1116 90 l 1143 51 q 1200 3 1162 51 l 1200 0 q 1048 -156 1057 -156 q 970 -81 1039 -156 l 970 -78 q 977 -71 971 -71 q 936 -7 947 -37 q 922 17 926 -7 l 919 17 l 919 7 q 953 -64 953 -56 q 888 -10 906 -10 q 821 -31 848 -31 q 865 61 821 -16 l 861 61 q 800 -37 828 36 q 709 -58 750 -58 q 688 -51 699 -58 q 668 -64 685 -64 l 566 -64 l 549 -61 l 549 -58 l 553 -51 l 536 -47 l 532 -47 l 532 -51 l 536 -58 q 526 -61 529 -61 q 505 -54 519 -61 q 502 -58 502 -54 q 468 -41 468 -52 l 444 -44 l 434 -44 l 434 -37 q 444 -31 444 -37 l 444 -27 l 441 -27 q 417 -37 429 -37 l 410 -37 l 380 -17 l 373 -14 l 363 -20 q 356 -10 356 -20 l 339 -10 q 315 64 322 -5 q 285 132 285 104 q 302 149 290 132 q 295 156 295 149 q 349 244 314 214 l 383 278 q 414 359 397 298 l 420 363 q 617 210 471 210 q 665 224 665 214 l 665 227 l 546 349 q 559 363 546 355 q 621 295 621 323 q 631 288 631 292 l 648 292 l 654 292 q 702 234 702 268 l 702 227 l 705 227 l 719 237 l 722 237 l 722 217 q 729 210 724 210 l 732 210 l 732 227 q 824 271 745 242 q 851 292 824 275 l 865 292 l 865 271 q 861 241 865 259 q 888 200 873 207 l 888 207 q 871 248 871 231 l 871 251 q 875 285 871 267 q 865 332 871 323 q 885 349 865 338 q 865 359 865 349 l 865 380 q 895 410 865 394 l 902 407 l 905 407 q 899 414 905 414 q 871 400 886 414 q 861 427 861 402 q 868 434 868 427 l 868 437 l 861 437 l 854 434 q 834 451 849 451 l 834 458 l 865 526 l 943 559 q 1021 593 961 580 l 1038 593 q 1051 580 1043 593 q 1122 587 1093 587 q 1143 580 1133 580 l 1143 587 q 1122 607 1122 587 q 1136 621 1122 612 l 1133 627 l 1133 634 q 1160 685 1133 654 l 1156 685 q 1146 682 1149 682 q 1136 709 1136 701 q 1166 749 1166 720 m 1017 739 l 1017 729 l 1024 729 l 1024 746 q 1017 739 1017 745 m 1133 736 l 1129 722 l 1136 709 q 1109 637 1122 659 l 1112 621 q 1092 624 1109 621 l 1075 621 l 1055 624 l 1055 621 q 1017 641 1017 638 q 1055 699 1017 699 q 1133 736 1114 736 m 1055 570 l 1055 559 l 1061 559 l 1072 566 l 1088 566 l 1088 570 q 1075 580 1088 575 q 1055 570 1055 576 m 838 576 l 851 576 l 851 563 l 838 563 l 838 576 m 980 566 l 980 563 q 987 570 987 563 l 987 573 q 980 566 980 572 m 298 549 l 319 549 q 332 536 324 549 q 326 529 332 529 l 319 529 q 298 546 298 542 l 298 549 m 949 536 l 949 532 l 956 532 q 963 539 963 532 l 963 546 l 960 546 q 949 536 955 546 m 1007 543 l 1007 529 l 1010 529 q 1021 539 1015 529 l 1021 546 l 1017 546 q 1007 543 1010 543 m 702 539 q 804 434 756 490 l 814 427 l 824 427 q 841 444 824 439 l 841 448 l 844 448 q 851 441 851 446 l 851 404 q 854 390 851 396 q 851 376 851 384 l 851 370 l 861 332 q 804 298 811 313 q 726 278 739 278 q 705 309 720 278 q 648 346 656 346 q 637 332 643 332 q 624 342 624 338 q 631 349 631 342 q 580 407 620 367 l 580 414 q 702 539 682 523 m 909 512 l 909 509 l 912 509 q 926 519 926 514 l 926 526 l 922 526 q 909 512 917 526 m 336 519 l 342 519 q 393 498 353 507 q 407 427 400 486 q 387 420 396 420 l 346 465 q 336 519 346 479 m 112 495 q 105 475 105 477 l 105 471 l 109 471 q 115 492 109 477 l 115 495 l 112 495 m 142 485 q 136 471 142 479 l 136 461 l 139 461 q 153 478 144 461 l 153 485 l 142 485 m 963 444 q 953 417 958 425 l 960 417 l 977 427 q 963 444 972 443 m 1177 437 l 1187 437 l 1187 444 l 1183 444 q 1177 437 1177 443 m 922 414 l 922 407 l 926 407 q 932 414 932 407 l 922 414 m 943 380 l 946 373 l 946 363 l 936 363 q 932 373 936 373 q 912 366 922 366 l 912 356 l 919 356 q 922 363 919 363 l 939 353 l 946 353 l 977 383 l 987 383 l 987 373 l 997 373 l 997 376 l 990 387 q 997 393 997 387 q 990 400 997 400 q 943 380 945 380 m 709 390 l 709 380 l 719 380 l 719 390 l 709 390 m 231 400 l 231 397 q 241 393 234 397 l 244 400 l 244 407 l 237 407 q 231 400 231 406 m 1082 366 q 1088 359 1083 359 q 1095 366 1095 359 l 1095 373 l 1088 373 q 1082 366 1082 372 m 1004 366 l 1004 363 q 1014 359 1007 363 l 1017 366 l 1017 370 l 1014 370 q 1004 366 1007 366 m 1153 366 l 1166 366 l 1166 356 l 1160 356 q 1153 363 1153 356 l 1153 366 m 95 370 q 105 359 95 365 l 109 359 q 115 366 115 359 l 98 370 l 95 370 m 1088 336 l 1095 332 l 1099 339 l 1099 342 l 1095 342 q 1088 336 1088 341 m 1041 332 l 1055 332 l 1055 339 l 1048 339 q 1041 332 1041 338 m 678 214 l 685 210 l 688 210 q 702 231 693 210 l 695 231 q 678 214 690 231 m 512 17 l 512 10 l 515 10 q 573 54 530 33 q 604 102 573 80 q 651 197 617 197 q 668 207 651 204 l 668 210 l 651 210 q 597 112 597 186 q 553 51 578 97 q 512 17 528 51 m 732 193 l 739 190 l 743 197 l 743 207 q 732 193 738 207 m 692 200 l 692 193 l 695 176 q 685 153 687 176 q 705 119 702 119 l 705 146 l 699 156 l 699 159 l 702 193 l 692 200 m 912 190 l 912 186 l 916 166 q 929 173 924 173 l 929 183 q 912 190 923 183 m 1065 183 l 1061 176 q 1078 163 1065 163 l 1082 170 l 1082 180 l 1065 183 m 885 180 l 885 173 q 888 163 888 166 l 892 163 l 892 173 q 885 180 892 180 m 892 159 l 888 142 l 888 132 l 895 132 l 895 159 l 892 159 m 712 146 l 712 139 q 800 95 764 106 l 804 95 l 804 98 q 770 122 776 122 q 712 146 720 146 m 1048 146 q 1034 132 1048 140 l 1014 132 l 1004 139 l 1000 132 l 1000 112 q 953 88 973 88 q 804 115 905 105 l 804 112 q 814 98 809 98 l 848 98 q 861 92 856 92 l 858 75 l 865 71 q 888 92 873 92 l 909 88 l 905 64 l 912 61 l 912 68 q 909 78 909 75 l 916 75 l 960 75 q 994 88 970 75 l 1010 88 q 1044 119 1010 100 l 1058 119 q 1068 109 1063 119 q 1082 119 1082 114 l 1082 122 l 1072 122 q 1068 119 1068 122 q 1058 122 1061 122 l 1058 142 q 1048 146 1055 142 m 960 136 l 960 129 l 977 132 l 977 142 l 966 142 q 960 136 960 141 m 241 159 q 275 109 269 159 q 298 64 298 81 l 298 61 q 285 44 290 44 q 176 132 241 64 l 176 136 q 241 159 198 147 m 346 146 l 353 142 q 363 153 357 142 q 359 156 359 153 q 346 146 346 151 m 912 44 l 912 37 q 916 27 916 31 l 919 27 l 919 37 q 912 44 919 44 m 1075 37 l 1075 27 l 1082 27 q 1078 37 1078 34 l 1075 37 m 1031 27 l 1034 20 l 1034 0 q 1004 -24 1014 -24 l 1004 -31 q 1007 -34 1004 -34 q 987 -61 1007 -38 l 994 -61 q 1051 34 1051 -7 l 1048 34 l 1031 27 m 465 34 l 414 41 q 393 27 393 33 l 393 24 q 420 34 408 24 q 441 27 431 27 q 444 31 444 27 l 451 27 l 461 27 q 485 37 473 27 l 505 37 l 505 44 q 465 34 465 43 m 1149 24 q 1156 17 1151 17 l 1163 17 l 1163 24 l 1149 24 m 305 37 l 315 37 l 315 31 l 312 31 q 305 37 305 31 m 1102 10 l 1102 3 q 1112 0 1105 3 l 1116 7 l 1116 10 l 1102 10 m 943 0 l 953 0 l 953 7 l 949 7 q 943 0 943 5 m 1092 -10 l 1092 -14 q 1105 -34 1101 -34 l 1112 -34 l 1109 -10 l 1109 -3 l 1099 -3 q 1092 -10 1092 -5 m 475 -17 q 478 -27 478 -24 q 522 -17 488 -21 l 522 -10 l 515 -10 l 495 -7 l 475 -17 m 665 -37 l 678 -37 l 678 -31 l 671 -31 q 665 -37 665 -32 m 1021 -102 l 1017 -109 l 1024 -112 l 1027 -105 l 1021 -102 z "},"r":{"ha":1153,"x_min":27,"x_max":1146,"o":"m 536 1153 l 543 1153 q 570 1146 557 1153 q 590 1153 581 1153 l 705 1153 q 732 1143 730 1153 l 722 1129 l 726 1129 q 760 1149 752 1149 l 763 1143 l 763 1139 l 756 1139 l 756 1129 q 777 1122 769 1129 l 777 1126 l 766 1139 l 766 1146 l 770 1146 q 871 1129 818 1146 q 868 1119 868 1122 l 875 1119 l 885 1126 l 895 1126 q 902 1119 902 1124 q 854 1092 888 1107 l 848 1095 q 827 1092 843 1092 l 827 1082 q 926 1116 853 1082 q 1017 1068 952 1116 q 1014 1065 1014 1068 q 1058 1038 1042 1065 l 1058 1031 q 1048 1024 1058 1024 l 1051 1007 l 1058 1007 q 1055 1010 1058 1010 q 1065 1027 1059 1027 q 1099 973 1099 994 q 1095 963 1095 966 q 1119 902 1119 953 l 1119 899 q 1099 895 1116 899 l 1099 885 l 1119 885 q 1126 878 1126 884 l 1126 824 q 1116 800 1126 812 q 1126 793 1126 800 q 1034 604 1126 694 l 1027 600 q 1021 614 1021 600 l 1014 614 l 1014 610 l 1017 597 q 949 553 1010 583 q 956 536 956 545 l 980 539 q 1014 519 1014 524 l 1014 515 q 966 468 992 481 q 932 478 949 478 l 922 478 q 858 417 901 444 l 817 417 l 807 410 q 753 529 778 410 q 739 597 743 555 q 685 627 718 597 l 678 627 q 648 617 648 623 q 627 658 627 617 q 661 668 642 668 l 661 665 q 749 692 699 671 l 749 688 q 743 665 749 678 l 749 665 l 783 756 l 780 756 l 783 763 l 783 770 q 777 810 783 787 q 800 824 800 820 l 800 834 l 790 834 q 783 824 783 834 l 763 841 q 800 888 773 867 l 800 892 q 763 854 772 892 q 753 851 756 851 q 719 875 719 871 l 719 878 l 729 878 l 729 882 q 722 888 729 888 q 712 875 712 888 l 692 885 l 688 885 q 685 882 685 885 l 678 885 l 631 885 q 624 892 624 885 q 634 905 629 892 q 624 916 629 905 l 624 922 l 627 939 q 610 949 610 942 l 610 956 q 634 963 618 956 l 634 966 l 617 966 l 600 963 l 600 966 q 604 970 600 970 q 566 1017 593 989 l 566 1021 q 590 1055 566 1024 l 583 1055 q 556 1051 559 1051 q 532 1143 543 1061 q 529 1146 529 1143 q 536 1153 530 1153 m 834 1109 l 834 1105 q 848 1119 840 1105 l 844 1119 q 834 1109 840 1119 m 790 1099 q 807 1075 807 1081 l 810 1075 q 817 1082 817 1075 l 817 1085 q 790 1099 817 1094 m 397 1075 l 400 1075 q 417 1088 417 1084 q 410 1095 417 1095 q 397 1075 397 1088 m 749 1088 l 749 1085 l 753 1085 q 760 1092 760 1085 l 760 1095 l 756 1095 q 749 1088 749 1094 m 590 1061 l 590 1058 l 597 1058 q 607 1068 602 1058 l 607 1072 l 600 1072 q 590 1061 595 1072 m 641 1061 l 641 1058 q 648 1051 642 1051 l 654 1061 q 648 1068 654 1068 q 641 1061 641 1067 m 675 1065 l 675 1058 l 688 1058 q 682 1065 688 1065 l 675 1065 m 790 1051 q 810 953 804 1008 l 817 953 l 814 960 l 814 966 q 824 990 814 978 q 814 994 817 994 q 817 1014 814 996 q 814 1024 814 1021 q 827 1038 819 1024 l 827 1044 l 804 1041 q 797 1051 804 1051 l 790 1051 m 617 1041 l 617 1038 l 621 1038 q 634 1048 634 1043 l 624 1048 q 617 1041 617 1046 m 702 1038 l 699 1031 l 705 1027 l 722 1027 l 722 1038 l 702 1038 m 170 1000 l 170 994 q 203 1010 190 1007 l 203 1007 q 231 1024 231 1021 l 220 1024 q 170 1000 170 1004 m 780 1017 q 777 1007 780 1014 l 783 1004 l 790 1014 l 783 1017 l 780 1017 m 417 1010 l 410 1000 l 410 994 l 414 994 q 424 1004 418 994 q 417 1010 424 1010 m 109 966 l 109 960 l 129 960 q 136 966 136 960 l 136 970 q 122 977 122 970 q 109 966 109 972 m 709 980 l 709 973 l 719 973 l 719 980 l 709 980 m 461 977 l 458 970 l 458 966 q 465 960 459 960 l 468 966 l 468 970 q 461 977 468 977 m 563 966 q 553 953 563 953 q 570 912 553 943 l 573 912 l 573 922 l 570 953 q 573 963 573 960 l 566 966 l 563 966 m 919 966 l 919 960 l 929 960 q 922 966 929 966 l 919 966 m 349 960 l 349 956 q 356 949 351 949 l 359 956 l 353 960 l 349 960 m 1024 929 l 1024 919 l 1027 919 q 1061 943 1027 933 l 1061 949 l 1058 949 q 1024 929 1024 932 m 702 936 l 726 932 l 732 932 l 732 946 l 722 946 q 702 936 702 944 m 821 946 l 821 943 q 827 936 822 936 l 834 936 l 834 939 q 827 946 834 946 l 821 946 m 651 929 q 637 912 637 914 l 637 902 l 651 902 q 671 919 671 914 q 651 929 668 929 m 800 905 l 800 895 l 804 895 q 844 922 816 895 l 844 929 q 800 905 836 929 m 543 912 l 543 909 l 549 909 l 553 916 q 543 912 546 912 m 1021 916 q 1017 905 1021 912 l 1024 902 l 1024 916 l 1021 916 m 336 902 l 336 888 q 353 871 336 884 l 353 878 q 342 909 342 891 q 336 902 336 907 m 1014 865 l 1021 861 l 1024 868 l 1024 892 q 1014 865 1017 892 m 264 885 l 264 882 l 288 878 l 288 885 l 264 885 m 109 827 l 109 824 q 136 827 127 827 q 146 824 142 824 l 146 831 l 122 834 l 115 834 q 109 827 109 833 m 404 841 l 407 841 q 414 848 414 841 l 410 848 q 404 841 404 846 m 176 841 l 176 838 l 207 827 l 237 834 l 237 838 l 234 838 q 207 834 231 838 q 180 841 197 834 l 176 841 m 359 841 q 353 810 359 817 l 353 807 l 356 807 q 370 831 370 812 q 363 841 363 831 l 359 841 m 885 827 l 885 824 l 892 824 l 892 834 q 885 827 885 833 m 821 821 l 824 821 q 831 827 831 821 l 827 827 q 821 821 821 826 m 848 807 l 854 804 l 861 804 q 875 810 861 810 l 875 817 l 868 817 q 848 807 848 815 m 821 807 l 821 800 q 831 790 821 795 l 834 790 l 834 797 q 824 807 834 802 l 821 807 m 305 804 l 305 800 q 309 790 309 793 l 312 790 q 332 800 323 800 l 332 804 l 305 804 m 838 766 l 838 763 l 851 766 q 882 753 876 753 l 882 756 q 858 777 882 760 l 848 777 q 838 766 843 777 m 892 753 l 912 753 l 912 756 q 905 763 912 763 l 902 763 q 892 753 897 763 m 943 756 l 943 753 l 946 746 q 956 749 953 749 l 956 756 l 943 756 m 1065 699 l 1065 695 l 1072 695 q 1078 702 1078 695 l 1078 705 l 1072 705 q 1065 699 1065 704 m 834 692 l 834 688 l 844 688 l 844 699 l 841 699 q 834 692 834 697 m 1021 688 q 1010 671 1021 682 l 1010 654 l 1007 654 l 977 658 l 977 651 q 1010 627 1010 642 l 1031 668 q 1034 671 1034 668 q 1031 688 1031 677 l 1021 688 m 1041 682 l 1041 678 q 1051 688 1046 678 l 1048 688 q 1041 682 1041 687 m 888 675 l 888 668 l 895 668 q 902 675 902 668 l 902 682 l 895 682 q 888 675 888 680 m 929 661 q 943 648 929 656 l 956 648 l 956 661 q 946 671 956 666 l 939 671 q 929 661 935 671 m 878 621 q 871 607 878 615 l 871 604 l 888 607 l 888 621 l 878 621 m 654 556 l 658 556 l 675 559 q 668 566 675 566 l 665 566 q 654 556 660 566 m 383 465 l 383 461 q 393 451 383 456 l 397 451 l 397 465 l 383 465 m 217 424 l 217 417 l 227 417 q 220 424 227 424 l 217 424 m 281 424 l 281 420 q 309 407 290 420 l 326 407 q 285 424 326 411 l 281 424 m 92 400 l 88 393 q 105 390 100 393 l 105 397 l 92 400 m 339 417 l 339 410 l 349 410 l 349 417 l 339 417 m 1044 407 l 1044 400 l 1048 400 q 1055 407 1055 400 l 1044 407 m 349 390 l 349 376 l 356 376 l 356 383 q 349 390 356 390 m 366 370 q 393 353 366 364 l 393 359 l 366 370 m 315 336 q 322 329 317 329 l 326 329 q 332 336 332 329 q 326 342 332 342 l 322 342 q 315 336 315 341 m 420 339 l 420 319 l 431 319 l 431 332 q 424 339 431 339 l 420 339 m 943 319 l 943 309 l 946 309 q 949 319 946 312 l 943 319 m 932 298 l 932 285 l 943 285 l 943 305 l 939 305 q 932 298 932 304 m 417 288 l 417 281 q 424 288 424 281 l 424 295 q 417 288 417 294 m 902 271 l 902 264 l 916 264 q 909 271 916 271 l 902 271 m 373 244 l 373 234 l 376 234 q 380 244 376 237 l 373 244 m 404 241 l 404 234 l 410 234 q 417 241 417 234 l 417 244 l 414 244 q 404 241 407 241 m 373 224 q 370 217 373 217 l 373 200 l 373 190 l 366 190 l 366 180 q 383 190 375 190 l 383 207 l 380 224 l 373 224 m 248 214 l 248 200 l 254 200 q 261 207 261 200 q 254 214 261 214 l 248 214 m 865 207 l 871 203 l 875 210 l 875 214 l 871 214 q 865 207 865 212 m 838 210 l 841 203 l 841 200 l 838 200 l 827 207 l 821 207 l 821 200 l 834 200 q 831 197 834 197 q 834 180 834 191 l 841 180 q 854 200 841 200 l 854 210 l 838 210 m 848 173 l 848 163 q 888 115 869 121 l 888 119 q 851 173 858 173 l 848 173 m 207 166 q 159 109 207 161 l 159 105 l 163 105 q 190 115 180 115 q 200 98 196 115 l 197 81 l 197 78 l 200 78 q 207 105 207 100 q 200 112 200 105 l 200 119 q 214 163 200 127 l 207 166 m 298 156 l 309 156 l 309 163 l 305 163 q 298 156 298 161 m 329 146 l 329 142 q 359 156 355 156 l 359 159 q 329 146 329 155 m 292 132 l 292 125 l 295 125 q 309 136 309 131 l 309 139 l 298 139 q 292 132 292 138 m 793 139 l 793 132 l 804 132 l 804 139 l 793 139 m 258 129 l 258 119 q 271 129 271 124 q 268 132 268 129 q 258 129 261 129 m 275 125 q 281 119 276 119 l 285 119 l 285 125 l 275 125 m 787 102 l 787 98 q 821 71 808 98 l 824 71 l 821 47 l 827 47 q 838 64 827 54 q 821 85 827 64 l 817 85 l 817 92 q 831 98 817 98 l 831 102 q 824 109 831 109 l 817 109 l 787 102 m 868 98 l 875 98 q 882 105 882 98 l 875 105 q 868 98 868 104 m 92 78 l 92 75 q 95 58 92 63 l 92 37 l 92 34 q 102 51 99 34 l 98 64 q 115 85 103 79 l 119 85 q 122 81 122 85 l 139 92 l 146 92 l 146 88 q 112 64 125 64 l 112 58 q 159 102 159 70 l 146 102 q 92 78 92 85 m 841 102 l 841 95 l 854 95 q 861 102 861 95 l 841 102 m 956 95 l 953 88 q 1085 54 1062 54 q 1007 81 1085 62 q 956 95 1007 90 m 380 75 q 387 68 387 73 q 410 78 401 78 l 410 81 l 387 81 q 380 75 380 80 m 336 68 l 336 64 q 356 54 339 54 l 356 61 q 336 68 347 61 m 153 64 l 153 51 l 159 51 q 156 64 156 57 l 153 64 m 363 41 l 366 41 l 363 34 l 363 20 l 366 20 q 373 47 373 46 l 370 47 q 363 41 363 46 m 814 37 q 827 24 814 32 l 831 24 l 831 34 q 821 44 831 39 q 814 37 814 43 m 888 24 l 902 24 l 902 31 l 895 31 q 888 24 888 29 m 69 556 q 58 553 62 553 q 27 593 27 570 l 27 804 q 51 821 27 812 l 51 827 l 27 824 l 27 868 q 64 929 27 882 l 64 932 l 58 932 q 41 909 45 909 l 37 909 q 27 926 37 915 l 27 987 q 37 997 27 991 q 27 1024 27 1014 l 27 1122 q 37 1133 27 1127 l 102 1133 q 142 1129 125 1133 q 183 1133 160 1133 l 186 1133 q 237 1129 222 1133 q 295 1133 263 1133 l 363 1133 q 400 1129 377 1133 q 427 1133 404 1133 q 431 1129 431 1133 l 437 1133 q 475 1082 462 1133 l 471 1075 l 471 1068 q 495 997 471 1055 l 495 973 q 539 916 526 973 q 553 878 548 916 q 532 865 549 865 l 526 865 q 515 882 516 865 l 512 882 q 475 865 512 865 q 471 878 471 871 q 400 865 460 869 l 400 844 q 363 831 400 838 l 363 827 l 366 827 q 393 831 385 831 l 400 821 l 400 644 l 539 644 q 553 600 546 644 q 502 570 539 600 q 441 549 458 563 l 434 553 l 424 553 q 392 545 417 553 l 417 529 l 420 529 q 468 546 423 529 q 488 539 479 539 l 495 539 q 563 563 507 550 q 651 590 563 583 q 699 559 673 559 q 715 495 701 527 l 712 495 q 722 468 722 478 l 719 444 q 736 404 730 444 q 763 376 741 404 l 756 349 q 760 322 760 325 l 756 298 q 804 271 800 279 l 804 268 q 783 237 783 251 l 783 234 q 797 224 783 229 q 810 227 803 227 l 814 227 l 814 220 l 824 220 l 824 234 l 814 234 l 814 241 l 831 264 q 783 298 831 284 q 777 336 777 317 q 807 376 803 376 l 831 376 q 916 437 875 376 l 960 427 q 980 444 980 434 l 977 461 l 983 461 l 983 451 l 990 451 q 1014 488 1002 488 q 1102 326 1102 427 q 1078 295 1102 321 q 1109 261 1109 278 l 1109 115 q 1122 37 1109 77 l 1143 37 q 1146 27 1143 34 q 1143 17 1143 20 q 1146 7 1146 10 l 1136 0 q 1126 7 1126 3 q 1099 0 1114 0 l 1055 0 q 1048 10 1048 0 l 1041 10 q 1024 0 1041 0 q 977 3 1006 0 q 926 0 956 0 q 919 7 926 7 l 916 7 l 905 0 l 902 0 q 865 3 888 0 q 854 0 858 0 l 851 7 q 912 85 875 7 q 916 88 916 85 l 922 85 l 939 85 q 946 92 946 85 q 932 98 932 92 q 916 92 922 92 l 912 98 l 912 115 l 905 115 q 892 102 900 115 l 902 88 l 902 81 q 871 34 886 67 q 854 27 854 34 q 865 24 861 24 l 865 20 q 851 17 857 20 q 838 20 845 20 q 824 0 838 7 l 787 0 q 760 61 760 0 q 756 88 756 61 q 773 92 762 92 l 773 102 q 753 112 753 102 q 749 193 753 118 q 753 207 753 205 q 749 224 749 212 q 753 227 749 227 q 749 237 749 234 q 705 366 749 327 l 705 370 q 726 376 726 370 l 726 383 l 722 383 l 712 376 l 695 376 q 627 397 636 388 l 587 393 l 532 393 q 529 397 529 393 l 522 393 l 492 393 q 485 400 485 393 l 441 393 l 441 376 q 431 329 441 355 q 441 319 435 329 l 441 258 q 437 254 441 254 l 441 248 l 441 92 q 427 81 441 81 l 427 75 q 441 68 433 75 q 437 58 441 64 q 441 20 441 35 l 441 10 q 431 0 441 5 l 390 0 q 366 3 370 0 q 336 0 348 0 l 285 0 q 281 3 281 0 l 275 0 l 227 0 l 220 3 l 271 68 q 281 85 274 85 l 285 85 q 329 71 294 76 q 356 75 348 75 q 346 81 356 81 l 339 78 q 281 102 281 92 l 285 109 l 278 109 q 207 14 257 62 l 190 17 l 190 27 l 197 37 q 190 44 197 44 q 159 0 178 0 q 156 14 156 6 l 142 3 l 125 7 q 119 0 125 0 l 112 0 q 68 10 68 0 l 68 44 q 81 78 68 50 q 68 102 68 83 l 68 322 q 71 359 68 336 q 68 383 68 363 q 71 390 68 390 l 68 414 l 68 553 q 69 556 68 555 m 325 573 q 309 583 317 578 q 292 580 297 583 l 271 583 q 268 580 268 583 q 220 587 264 584 q 210 583 214 583 q 190 597 190 591 l 190 617 l 197 627 l 190 637 l 190 648 q 200 699 200 680 l 200 702 q 197 705 200 705 l 214 732 l 214 746 l 210 746 q 190 715 203 715 l 193 692 q 180 651 193 686 q 186 631 186 640 q 105 573 177 573 q 85 556 99 561 q 75 559 78 559 l 88 546 q 125 549 111 549 l 136 532 q 129 495 129 509 q 146 431 133 490 q 125 390 130 414 l 119 393 l 109 393 l 109 383 l 119 383 q 122 387 122 383 q 224 251 224 296 q 220 237 220 245 l 220 227 l 234 227 q 241 258 241 250 l 241 264 q 142 390 228 304 l 142 400 q 170 451 170 434 l 170 454 l 166 454 q 159 444 166 444 q 149 465 149 448 l 149 488 l 142 498 q 149 529 146 523 l 142 543 q 180 566 146 566 l 190 566 l 197 563 q 231 583 213 583 l 251 573 q 258 576 258 573 q 309 573 292 573 l 325 573 z "},"s":{"ha":1017,"x_min":-27,"x_max":1031,"o":"m 637 1139 l 651 1139 q 780 1099 700 1139 l 780 1095 l 773 1095 l 773 1088 l 804 1092 q 882 1031 854 1059 l 882 1027 q 814 956 840 997 q 797 949 803 949 l 790 953 q 777 949 784 949 q 756 963 773 949 l 753 963 l 753 949 l 777 943 l 787 943 q 810 949 810 943 l 838 929 l 841 929 q 848 936 848 929 l 848 939 q 827 960 839 939 q 899 1017 859 1008 q 977 878 977 917 l 953 871 q 922 892 939 878 l 909 892 q 905 882 909 888 q 966 865 950 865 l 980 868 q 997 797 997 832 l 990 793 q 966 797 980 793 q 922 793 944 793 l 919 793 q 916 797 916 793 l 909 793 q 905 797 905 793 l 899 793 l 831 793 l 821 800 q 827 824 827 817 l 821 827 q 804 793 821 802 l 793 793 q 780 797 780 793 l 756 793 l 699 793 q 685 814 685 800 q 712 858 712 847 l 712 865 q 692 899 692 887 q 746 960 712 960 l 746 963 q 722 983 722 975 l 722 990 l 709 990 q 688 1004 688 990 q 695 1021 695 1015 q 688 1027 688 1021 l 688 1044 l 692 1051 q 675 1068 683 1051 q 699 1082 699 1074 l 675 1082 l 668 1078 q 631 1133 668 1090 q 637 1139 632 1139 m 475 1112 l 475 1109 l 481 1109 q 488 1116 488 1109 l 488 1122 l 485 1122 q 475 1112 480 1122 m 522 1082 l 522 1068 l 529 1068 l 532 1085 l 532 1088 l 529 1088 q 522 1082 522 1087 m 176 1058 l 183 1058 q 190 1065 190 1058 l 190 1068 q 176 1058 176 1063 m 763 1048 q 766 1044 766 1048 l 773 1048 l 797 1048 l 797 1061 q 763 1048 763 1055 m 159 1048 q 139 1007 159 1039 l 142 1007 q 173 1041 148 1007 l 173 1044 q 159 1048 165 1044 m 702 1021 l 709 1017 l 719 1017 q 732 1031 724 1017 l 732 1034 q 726 1044 726 1034 l 719 1044 q 702 1021 702 1034 m 600 1017 l 600 1014 q 621 1031 614 1019 l 617 1031 q 600 1017 602 1024 m 400 1014 l 400 1004 q 427 973 425 973 l 427 980 q 407 1021 407 1004 q 400 1014 400 1019 m 553 1000 l 553 990 q 593 1007 593 998 l 590 1007 q 553 1000 588 1007 m 125 994 l 125 990 l 139 990 l 139 1004 l 136 1004 q 125 994 131 1004 m 780 1000 l 780 994 l 790 994 l 790 1000 l 780 1000 m 760 997 l 756 990 l 756 987 q 763 980 758 980 l 766 980 l 766 990 q 760 997 766 997 m 712 980 l 719 966 q 709 949 715 949 q 695 970 704 949 l 695 977 l 712 980 m 183 960 q 173 963 176 963 q 136 949 159 954 q 119 912 136 946 l 115 912 l 115 905 l 125 905 q 176 953 141 953 q 214 963 186 953 l 231 960 q 214 973 231 963 l 183 960 m 465 953 l 471 953 q 512 966 488 963 q 526 963 518 963 q 536 966 532 966 l 536 970 l 519 970 q 465 953 465 968 m 241 956 l 241 953 q 251 949 244 953 l 254 949 l 254 953 q 244 956 251 953 l 241 956 m 268 943 l 271 943 l 302 946 l 302 956 l 298 956 q 268 943 268 947 m 641 943 l 641 936 l 658 936 q 665 943 665 936 l 661 949 q 641 943 648 943 m 851 943 l 851 936 l 861 936 q 868 943 868 936 q 861 949 868 949 l 858 949 q 851 943 851 948 m 424 946 q 414 919 424 931 l 414 916 l 417 916 q 441 943 421 916 l 424 946 m 885 943 l 885 939 q 892 932 886 932 l 899 943 l 885 943 m 68 939 l 64 932 l 64 929 l 78 929 q 68 939 78 934 m 912 929 l 912 926 q 919 919 913 919 l 929 919 l 929 929 l 912 929 m 885 922 l 885 909 l 899 905 l 899 912 q 888 922 899 917 l 885 922 m 373 916 l 373 905 l 376 905 l 387 912 l 404 912 l 404 919 l 400 919 q 373 916 397 919 m 75 899 l 71 892 q 78 885 78 890 l 78 882 q 71 854 71 858 l 71 851 l 75 851 q 112 892 75 864 l 98 895 q 88 885 98 890 l 81 885 q 75 899 81 899 m 746 875 l 746 871 l 749 871 q 763 885 755 871 l 763 892 l 760 892 q 746 875 755 892 m 821 848 l 821 841 q 827 848 827 841 l 827 854 q 821 848 821 853 m 824 637 l 827 637 q 953 553 900 607 q 865 526 923 526 q 824 607 840 553 l 824 637 m 451 576 l 451 566 l 461 566 l 461 576 l 451 576 m 329 543 l 329 536 l 339 536 q 332 543 339 543 l 329 543 m 346 539 q 370 526 346 534 l 373 526 l 373 529 q 346 539 352 539 m 281 536 l 281 532 l 295 529 l 298 536 l 281 536 m 688 519 l 695 519 l 712 522 l 712 532 l 702 532 q 688 519 696 532 m 966 532 q 1024 417 990 532 l 1031 373 q 1027 363 1031 370 q 1031 339 1031 349 q 1010 268 1031 268 l 1010 261 l 1017 261 l 1017 254 q 916 85 1017 186 l 912 85 q 841 115 878 115 l 841 125 q 851 132 846 125 l 844 146 q 919 285 868 239 l 929 285 l 929 288 q 909 298 909 288 l 909 312 q 919 329 909 329 l 919 332 q 899 349 899 332 l 895 363 q 916 397 899 376 l 916 407 q 868 434 916 412 q 861 458 868 441 q 892 509 869 488 q 895 512 895 509 l 912 509 q 966 532 935 509 m 383 526 q 390 519 385 519 l 393 519 l 393 526 l 383 526 m 559 515 l 556 509 l 563 505 l 566 512 l 559 515 m 688 481 l 688 478 l 692 478 q 814 512 777 500 l 814 515 l 810 515 q 688 481 709 497 m 414 509 l 414 492 l 420 492 l 420 502 q 414 509 420 509 m 644 502 l 634 485 l 641 485 q 651 495 646 485 q 644 502 651 502 m 665 492 l 665 488 l 671 488 q 678 495 678 488 l 678 502 l 675 502 q 665 492 670 502 m 441 478 l 441 475 q 458 465 447 475 l 461 465 l 461 468 q 444 478 461 474 l 441 478 m 763 478 l 760 471 l 766 468 l 770 475 l 763 478 m 519 475 l 512 465 l 512 461 l 529 465 q 519 475 529 469 m 604 451 l 610 451 q 621 475 617 451 l 617 475 q 604 451 610 475 m 485 451 l 488 444 l 488 441 l 485 434 l 492 431 l 495 437 l 495 451 l 485 451 m 1007 431 l 997 410 q 1000 400 1000 404 l 1007 400 q 1014 431 1010 425 l 1007 431 m 332 342 l 349 342 q 359 332 354 342 l 359 319 q 349 315 349 319 q 322 336 322 326 l 332 342 m 44 322 l 44 315 q 81 275 56 296 l 81 278 q 44 322 71 302 m 102 322 l 102 319 q 119 302 119 304 l 119 292 l 112 281 l 112 278 l 122 278 l 122 309 q 102 322 122 314 m 936 288 q 943 281 937 281 l 949 281 q 943 288 949 288 l 936 288 m 983 288 l 983 285 q 1000 271 983 280 l 1004 271 l 1004 275 q 994 288 994 283 l 983 288 m 109 261 q 132 251 109 253 q 109 261 132 259 m 366 258 l 366 254 l 370 234 l 373 234 l 373 244 q 370 258 370 250 l 366 258 m 346 203 q 353 197 353 202 l 349 190 l 353 190 q 373 214 359 190 l 373 220 q 346 203 346 208 m 505 200 l 505 193 l 522 193 l 539 197 l 539 200 l 505 200 m 475 170 l 475 163 q 485 159 478 163 q 502 186 485 175 l 502 190 l 495 190 q 475 170 490 190 m 180 186 l 176 170 l 176 166 l 183 166 l 186 186 l 180 186 m 258 139 l 268 139 l 285 142 l 285 149 q 275 156 275 149 l 275 159 l 281 170 l 281 176 l 278 176 q 258 139 273 176 m 373 146 l 376 146 q 424 166 424 158 q 417 173 424 173 l 414 173 l 373 146 m 342 159 q 336 153 342 153 q 298 156 313 156 q 285 122 298 151 l 288 122 q 349 146 298 146 q 366 153 366 146 q 342 159 353 153 m 227 122 l 227 119 q 248 64 240 64 l 244 47 l 248 31 l 251 31 q 254 68 251 38 q 234 132 241 68 q 241 149 241 143 q 227 122 232 149 m 485 146 l 485 136 q 492 129 486 129 l 492 139 q 485 146 492 146 m 858 139 l 858 136 q 865 129 859 129 l 868 129 l 868 139 l 858 139 m 468 102 q 471 92 471 95 l 475 92 l 481 115 l 478 115 q 468 102 470 115 m 827 115 q 899 75 848 98 q 746 -7 847 24 l 743 0 q 766 31 747 31 q 780 41 780 36 l 780 47 q 777 61 780 55 q 807 112 796 112 q 827 115 827 112 m 461 41 l 461 37 l 465 37 q 478 71 478 65 l 478 78 q 461 41 469 78 m 298 14 l 295 7 q 298 14 329 7 m 520 678 l 522 678 l 546 671 q 621 695 570 689 q 695 668 695 680 l 702 671 q 773 631 773 661 q 780 604 780 606 l 780 593 q 777 590 780 590 q 790 553 790 570 l 790 539 q 821 509 801 539 q 814 488 821 503 q 817 451 817 465 l 814 434 l 865 407 q 838 342 838 382 q 821 332 830 332 q 827 326 822 326 l 831 326 l 844 336 q 858 302 858 320 q 804 200 858 291 q 793 173 804 185 l 797 149 q 736 122 797 136 l 705 149 l 705 146 q 736 112 715 124 q 705 41 736 50 q 678 -7 694 41 q 549 -37 625 -37 q 495 -3 541 -37 l 471 -3 q 465 -10 465 -5 l 498 -10 q 519 -37 519 -27 l 512 -41 l 502 -41 q 342 -17 342 -41 l 342 -7 q 387 7 342 0 l 387 0 l 390 0 q 397 10 397 0 q 427 -14 413 -7 l 444 -14 q 451 -7 451 -14 q 397 14 428 -7 l 410 31 l 404 31 l 359 10 q 349 14 353 14 q 332 7 338 7 q 329 -10 329 7 q 339 -14 336 -14 l 339 -17 q 332 -24 339 -24 q 268 -3 268 -12 l 271 3 l 268 3 l 248 0 q 227 14 227 9 q 231 17 227 17 q 227 27 227 24 l 224 27 q 214 14 224 14 q 58 132 142 40 q 85 180 82 149 q 105 203 100 203 l 105 197 l 129 197 q 139 217 139 200 l 132 217 l 115 200 q 112 217 112 205 l 105 214 l 98 214 l 75 241 l 75 248 q 78 258 78 254 q 61 261 73 261 q 47 251 61 251 l 47 248 q 75 224 70 248 l 85 210 l 85 207 l 75 193 l 78 193 l 75 186 l 78 170 q 47 142 64 142 q 24 176 24 174 l 24 186 l 31 186 l 31 193 l 24 190 l 20 190 q -24 319 0 190 q -27 336 -27 324 l -20 339 l 3 339 q 10 329 3 329 l 17 329 q 27 342 19 342 l 61 342 q 64 339 64 342 l 71 342 l 268 342 q 278 332 273 342 l 278 326 q 186 231 243 250 q 149 210 149 219 l 149 207 l 153 190 l 159 190 q 156 200 156 197 q 193 220 156 216 q 200 227 195 227 l 203 227 l 203 224 q 170 200 189 200 l 170 193 l 173 193 q 217 234 217 207 q 251 251 239 251 l 258 241 l 258 227 l 251 217 l 251 214 l 261 214 l 264 234 q 258 254 258 245 q 302 319 258 277 l 319 305 l 329 305 q 332 309 332 305 q 370 264 339 309 q 509 220 432 220 q 593 163 521 205 l 678 186 q 702 183 692 183 l 726 186 q 783 173 743 180 q 685 203 746 203 q 682 207 685 207 q 617 190 659 190 q 597 180 616 183 q 543 224 545 215 l 543 227 q 644 298 644 243 l 644 312 q 370 437 644 387 q 366 441 370 441 l 370 448 l 370 451 q 363 458 370 458 l 349 444 q 218 499 237 469 q 176 519 204 505 l 176 529 l 193 526 q 153 536 193 532 q 34 722 34 637 q 27 746 31 722 q 47 773 27 750 q 24 797 24 776 q 27 807 27 804 l 34 807 q 58 783 56 783 l 54 777 l 54 773 q 105 729 81 773 l 119 719 l 122 719 l 122 726 l 78 780 q 81 790 81 787 l 64 790 q 27 831 27 815 l 41 899 l 47 899 l 58 892 l 61 892 q 47 912 47 905 q 176 1068 80 1007 q 465 1153 319 1153 q 478 1149 472 1153 q 526 1153 507 1153 l 566 1153 q 593 1146 581 1153 q 607 1149 600 1149 q 624 1105 619 1149 q 665 1051 651 1105 q 678 1004 675 1051 l 665 994 l 648 994 q 641 1000 641 994 q 644 1010 641 1004 q 634 1078 634 1050 l 627 1078 q 617 1068 627 1068 q 621 1055 617 1061 l 621 1044 q 637 1024 625 1044 l 637 1000 l 610 980 q 665 990 647 983 q 688 960 688 974 l 688 932 l 692 926 q 675 905 688 926 l 675 885 l 692 865 l 692 861 q 668 831 692 844 q 658 793 665 793 l 654 793 q 621 854 648 795 q 526 888 566 888 l 468 888 q 383 827 383 888 q 610 705 383 751 q 573 688 610 702 l 573 685 l 549 688 l 543 688 q 520 678 534 683 m 205 519 q 200 526 203 522 l 200 519 l 205 519 m 227 581 l 227 583 l 227 583 q 227 581 227 582 m 203 684 q 208 691 205 688 q 186 688 200 689 q 139 722 180 688 q 129 719 132 719 l 129 715 l 176 682 q 203 684 180 682 m 225 701 q 234 702 229 702 l 248 702 l 254 699 q 285 719 254 703 q 312 709 302 709 q 319 712 319 709 l 400 705 q 410 709 407 709 q 481 665 466 665 q 507 675 498 672 q 448 709 500 678 q 424 719 435 719 l 417 715 q 404 719 411 719 q 390 715 396 719 q 353 722 383 719 l 332 719 q 315 726 321 726 l 315 746 q 319 763 315 758 l 315 783 q 326 824 326 816 l 326 848 q 339 875 339 862 l 339 878 l 336 878 q 315 848 336 864 l 319 824 q 309 793 319 820 l 312 753 q 298 726 308 753 q 225 701 250 713 z "},"t":{"ha":1017,"x_min":0,"x_max":1041,"o":"m 14 1133 q 27 1129 21 1133 q 58 1133 45 1133 l 64 1133 q 88 1129 84 1133 q 119 1133 106 1133 l 170 1133 q 220 1095 180 1133 l 220 1102 q 200 1129 200 1120 l 207 1133 l 258 1133 l 281 1082 q 366 1041 351 1041 l 366 1034 q 339 939 349 956 l 339 936 q 359 892 359 907 q 322 848 355 892 q 275 841 313 845 q 264 844 268 844 q 237 834 262 834 l 231 834 q 203 838 207 834 q 166 834 180 834 l 10 834 q 0 844 5 834 l 0 1078 l 17 1099 l 14 1099 q 10 1095 10 1099 q 0 1099 3 1099 l 0 1122 q 14 1133 0 1131 m 288 1133 l 481 1133 q 492 1122 486 1133 q 454 1075 484 1122 l 414 1065 q 404 1068 407 1068 q 383 1051 404 1063 q 285 1109 285 1081 q 278 1116 278 1109 l 278 1122 q 288 1133 278 1127 m 515 1133 q 566 1129 532 1133 l 566 1133 q 570 1129 570 1133 l 593 1133 l 661 1133 q 668 1126 668 1131 l 661 1116 q 705 1041 677 1072 q 712 1027 705 1036 q 702 1004 702 1010 l 705 1004 q 671 977 705 998 l 671 973 l 675 973 q 705 983 686 981 q 736 895 712 972 q 709 865 736 887 q 688 831 709 857 q 651 780 685 780 q 604 746 620 746 l 573 790 l 570 790 q 566 787 566 790 l 549 790 q 515 783 546 790 q 475 804 487 783 l 475 814 q 485 824 485 814 q 465 865 474 840 q 468 868 465 868 q 465 899 465 881 q 441 885 450 885 q 404 912 404 885 q 380 919 390 912 q 373 912 380 912 q 363 936 363 924 l 363 943 q 420 1061 379 1061 q 471 1092 471 1071 q 515 1133 502 1133 m 699 1133 l 766 1133 q 773 1116 773 1133 l 780 1116 q 797 1133 782 1116 l 909 1133 l 919 1126 q 939 1133 930 1133 l 953 1133 q 983 1129 970 1133 q 1017 1133 1001 1133 l 1031 1133 q 1041 1122 1036 1133 q 1010 1109 1041 1113 l 1004 1112 q 970 1082 996 1112 l 970 1075 q 994 1102 977 1075 l 1000 1105 q 1031 1102 1019 1102 q 1034 1105 1031 1105 l 1041 1095 l 1041 861 q 1031 834 1041 836 l 983 834 q 970 838 976 834 q 956 834 964 834 q 899 838 924 834 q 861 834 880 834 q 851 841 851 838 q 824 834 833 834 q 810 838 817 834 q 773 834 787 834 l 719 834 l 712 838 q 753 885 720 860 l 753 895 q 743 922 743 912 q 780 936 768 936 l 780 939 l 766 939 q 749 932 749 939 q 729 966 736 932 q 732 980 732 972 q 719 1017 719 998 q 726 1024 726 1017 l 726 1027 q 692 1078 722 1038 q 671 1122 671 1118 q 699 1133 688 1133 m 756 1095 l 756 1088 l 766 1088 q 773 1095 773 1088 l 766 1099 q 756 1095 760 1095 m 909 1085 l 909 1078 l 912 1078 q 919 1085 919 1078 l 909 1085 m 244 1075 l 244 1068 q 261 1065 256 1068 l 261 1072 l 244 1075 m 919 1031 l 919 1027 l 936 1031 l 949 1031 q 956 1055 949 1046 l 956 1058 l 919 1031 m 763 1051 q 736 1024 752 1024 l 732 1024 l 732 1021 q 739 1014 734 1014 l 749 1014 q 787 1041 756 1041 q 763 1051 787 1049 m 800 1041 q 838 1027 800 1030 q 858 1034 848 1034 l 885 1034 q 878 1041 885 1041 l 861 1041 q 834 1034 858 1041 l 831 1034 l 817 1044 l 800 1041 m 458 1014 l 458 1010 l 468 1010 l 468 1021 l 465 1021 q 458 1014 458 1019 m 899 1017 q 905 1010 900 1010 l 919 1010 l 919 1017 l 899 1017 m 665 1004 l 665 997 l 668 997 q 678 1014 675 997 l 675 1014 q 665 1004 670 1014 m 865 1004 l 865 994 q 871 1000 871 994 l 865 1004 m 634 977 l 621 977 l 621 970 l 634 966 l 668 973 l 668 977 q 654 980 661 977 l 634 977 m 512 977 l 512 963 l 539 963 l 539 970 l 522 966 q 512 977 522 971 m 587 966 l 587 963 l 590 963 q 604 977 595 963 l 600 977 q 587 966 587 972 m 824 953 l 817 956 q 800 946 800 952 q 827 939 806 946 q 882 956 837 939 q 932 949 911 949 l 946 953 l 946 956 q 939 963 946 963 l 932 960 q 926 966 932 966 q 916 956 926 962 l 912 956 q 905 963 905 956 l 888 960 q 868 966 878 966 q 824 953 849 953 m 203 960 l 203 946 q 210 953 210 946 l 210 960 l 203 960 m 471 905 l 505 953 l 505 956 q 471 905 471 928 m 977 943 l 977 939 l 980 939 q 1007 953 1001 953 l 1007 956 l 997 956 q 977 943 977 948 m 200 922 l 200 919 l 207 919 l 207 929 q 200 922 200 928 m 821 926 q 790 912 821 912 q 797 905 791 905 l 807 905 q 841 926 827 905 q 838 929 838 926 l 831 926 l 821 926 m 766 922 q 773 916 768 916 l 780 916 l 780 922 l 766 922 m 922 905 l 922 902 l 936 902 l 936 912 l 929 912 q 922 905 922 911 m 383 902 q 400 885 400 897 q 397 868 397 880 q 448 878 404 874 q 458 871 458 875 l 454 854 q 478 827 465 852 q 471 817 475 817 l 431 831 l 431 827 q 485 766 460 803 l 505 763 l 539 763 q 543 760 543 763 q 570 766 560 766 q 597 722 582 737 q 593 695 593 704 q 617 671 602 695 l 621 671 l 621 661 q 502 614 612 661 l 495 617 l 492 617 q 437 604 454 604 q 427 607 431 607 l 424 600 l 424 597 l 451 597 q 621 658 556 621 l 627 658 q 705 573 669 602 l 705 302 q 685 258 692 258 q 566 322 675 258 l 563 322 l 563 319 q 641 271 563 315 l 685 244 q 641 170 685 227 q 610 58 641 104 q 604 34 610 47 q 607 20 607 28 q 532 0 563 14 l 451 0 q 420 14 435 0 q 370 64 395 14 q 359 68 363 68 l 336 64 l 336 231 q 339 275 336 252 q 336 312 336 287 l 336 339 q 356 356 356 352 l 356 359 q 336 366 336 359 l 336 431 q 346 441 336 435 q 370 414 362 441 l 376 410 l 376 424 l 370 434 l 370 437 l 380 471 q 366 502 366 486 l 363 502 q 356 495 356 500 q 370 468 356 483 q 359 451 366 451 l 346 451 q 336 461 341 451 l 336 492 q 346 502 336 496 q 336 546 336 518 q 353 590 344 581 l 353 593 q 336 621 336 596 l 336 810 q 383 902 371 902 m 895 885 l 895 882 l 905 882 l 905 892 l 902 892 q 895 885 895 890 m 81 854 l 81 851 l 88 851 q 98 861 93 851 l 92 865 q 81 854 87 865 m 359 841 l 359 831 l 366 831 l 380 841 l 383 841 l 383 834 q 414 841 392 834 l 414 848 q 393 861 407 861 l 359 841 m 702 797 l 705 790 l 705 739 q 699 722 705 722 q 705 695 705 710 l 705 631 q 695 610 705 613 l 685 610 q 610 699 642 699 l 610 719 q 607 722 610 722 q 644 753 607 727 q 695 787 644 758 q 702 797 695 797 m 685 739 l 682 732 l 682 729 l 685 729 q 692 736 692 729 l 685 739 m 444 393 q 424 400 433 400 q 373 387 397 387 l 373 383 q 380 376 374 376 l 400 376 q 424 387 412 387 l 434 387 q 481 353 447 387 q 529 329 515 353 l 559 329 q 522 342 559 334 q 478 366 509 366 l 461 387 q 468 407 468 397 l 468 417 l 465 417 q 454 397 460 417 q 444 393 448 393 m 699 173 l 705 173 q 719 156 712 172 q 715 146 719 146 q 719 95 719 112 l 719 -3 q 709 -14 719 -8 l 644 -14 q 637 -7 637 -14 q 668 78 650 47 q 671 81 671 78 l 671 98 q 675 136 671 113 l 671 142 q 699 173 671 151 m 349 54 l 359 54 q 373 41 365 54 l 373 31 l 370 31 q 342 44 349 44 l 342 47 q 349 54 344 54 m 336 31 l 342 31 q 366 3 348 31 l 359 0 l 346 0 q 336 10 341 0 l 336 31 m 380 24 q 407 3 402 14 l 407 0 l 400 0 q 380 24 380 0 z "},"u":{"ha":1153,"x_min":7,"x_max":1143,"o":"m 17 1133 q 47 1129 35 1133 q 75 1133 66 1133 l 95 1129 q 129 1133 113 1133 l 132 1133 q 136 1129 136 1133 l 142 1133 l 149 1133 q 183 1126 183 1132 q 203 1133 194 1133 l 207 1133 q 220 1129 214 1133 q 234 1133 227 1133 l 244 1133 l 254 1126 q 285 1133 277 1133 l 288 1133 q 326 1126 312 1133 q 346 1133 336 1133 l 370 1133 q 380 1122 374 1133 l 380 1014 q 376 977 380 1000 q 380 960 380 971 l 373 956 q 380 936 380 945 q 376 912 380 926 q 380 878 380 895 l 380 861 q 376 858 380 858 l 380 851 l 380 804 q 359 766 380 794 q 288 665 359 686 l 281 668 l 278 668 q 248 631 251 631 l 244 631 l 244 654 q 237 661 244 661 l 234 661 l 234 651 q 159 610 234 625 q 102 580 128 580 l 102 587 q 105 637 102 604 l 95 644 l 95 621 q 92 587 95 604 q 102 536 92 580 q 85 526 102 526 l 85 522 q 102 512 102 522 l 102 485 q 61 465 102 473 l 61 458 l 71 458 q 102 468 77 458 l 105 461 l 105 448 l 98 437 l 98 434 q 122 417 122 434 q 170 444 168 434 l 170 448 q 153 461 153 448 q 125 448 125 461 q 115 458 121 448 q 119 461 115 461 l 115 478 l 115 502 q 112 505 115 505 l 115 512 l 115 529 q 105 559 115 535 q 149 583 105 573 q 241 621 149 601 q 258 593 248 621 q 319 553 309 553 q 329 566 324 566 q 353 522 336 566 q 380 492 380 511 l 376 492 l 380 485 l 380 475 l 376 454 q 380 444 380 448 q 373 427 373 433 q 383 387 380 427 q 353 302 376 349 q 326 217 353 217 q 322 214 326 214 q 251 241 293 231 q 224 264 226 264 q 220 261 224 261 q 309 200 231 230 q 312 193 309 193 q 268 112 302 138 q 241 71 256 71 l 241 61 q 268 20 267 35 q 264 17 264 20 q 61 200 136 66 l 31 285 q 92 319 31 298 q 125 309 109 309 l 139 309 q 156 315 156 309 l 214 305 l 237 309 q 298 268 240 296 l 298 261 l 302 261 l 302 264 l 251 319 l 251 322 l 231 322 q 207 336 212 322 q 132 329 145 329 q 122 319 132 323 q 112 322 115 322 l 112 326 q 129 342 112 328 l 129 356 q 125 370 129 363 l 136 390 l 136 407 l 125 407 q 109 383 125 383 l 115 370 q 61 329 96 329 l 51 329 q 24 315 51 315 q 17 353 24 320 l 20 359 q 10 410 10 387 l 10 448 l 14 465 q 7 475 7 465 q 24 498 16 498 l 20 505 l 20 515 l 31 515 l 31 502 q 58 512 45 512 l 58 515 q 51 522 58 522 l 47 522 q 44 515 47 515 l 31 526 l 34 532 l 34 539 q 14 519 18 519 l 7 519 l 7 627 q 10 665 7 642 q 7 692 7 668 l 7 695 q 10 699 7 699 l 7 705 l 10 726 q 7 729 10 729 l 10 736 q 7 783 7 765 q 14 790 8 790 q 163 763 55 773 l 163 766 q 153 780 158 780 l 142 780 q 129 777 135 780 q 105 800 105 777 l 98 800 q 78 787 98 787 q 58 817 63 787 l 54 817 q 51 800 54 800 q 7 814 7 802 l 7 861 q 41 875 7 872 q 7 953 7 945 l 7 973 q 58 1004 7 1000 q 71 1007 71 1004 q 92 997 92 1000 q 156 1017 121 1000 q 214 970 156 1010 q 136 865 138 903 q 102 814 130 865 l 112 814 q 166 905 125 819 q 234 977 222 954 l 241 980 q 288 966 281 974 l 292 966 q 326 973 298 966 l 326 983 q 309 977 309 983 q 288 987 288 981 q 278 983 285 987 q 237 994 237 986 q 241 1007 241 1000 l 234 1007 q 224 983 234 983 l 214 983 q 163 1021 163 1017 l 163 1031 l 166 1055 l 156 1055 l 156 1034 q 92 1007 156 1018 q 81 1014 81 1010 q 27 1007 39 1007 l 24 1014 l 27 1031 q 7 1048 7 1031 l 7 1072 q 10 1109 7 1086 q 7 1126 7 1114 l 17 1133 m 753 1160 l 783 1160 l 800 1156 l 800 1149 l 783 1122 l 783 1099 l 770 1099 q 756 1122 770 1117 l 753 1122 q 780 1051 762 1115 q 756 963 780 997 l 756 953 q 760 949 756 949 q 749 936 755 936 l 743 936 l 743 1061 q 746 1065 743 1065 l 743 1072 l 743 1082 l 746 1102 l 743 1109 q 753 1160 745 1160 m 970 1160 q 977 1146 977 1160 l 983 1146 q 1007 1160 996 1160 q 1065 1122 1020 1160 l 1068 1122 l 1072 1129 q 1041 1160 1041 1142 l 1133 1160 l 1143 1153 q 1139 1139 1143 1145 q 1143 1051 1143 1082 l 1143 1014 q 1136 1007 1143 1007 l 1112 1007 l 1112 1000 l 1122 1000 q 1143 980 1143 1000 l 1143 882 q 1139 878 1143 878 l 1143 871 q 1139 844 1139 847 q 1143 834 1143 838 l 1136 831 q 1126 858 1126 848 l 1126 865 l 1133 875 l 1133 878 q 1119 912 1121 878 l 1112 916 l 1112 912 q 1122 865 1112 903 l 1119 844 q 1129 834 1124 844 l 1129 817 q 1143 797 1143 817 l 1143 732 l 1139 715 q 1122 729 1122 727 l 1116 726 l 1112 726 q 1078 729 1096 726 q 1027 722 1049 722 l 973 739 q 970 736 970 739 l 963 739 l 949 739 q 888 773 908 739 l 848 797 q 773 766 793 766 l 770 773 l 770 905 q 797 932 770 920 q 804 953 797 942 l 797 956 q 824 1041 813 987 q 831 1051 827 1041 q 810 1082 814 1051 q 851 1160 835 1160 l 970 1160 m 261 1149 l 258 1133 l 261 1119 l 264 1119 q 271 1149 264 1143 l 261 1149 m 112 1136 l 132 1136 l 132 1143 l 119 1143 q 112 1136 112 1141 m 58 1136 l 58 1133 l 81 1133 l 78 1139 q 58 1136 73 1136 m 200 1139 l 193 1116 q 207 1139 197 1116 l 200 1139 m 92 1129 l 92 1126 q 105 1119 97 1126 q 109 1129 105 1122 l 92 1129 m 1014 1112 l 1017 1112 q 1027 1116 1024 1116 l 1027 1122 l 1024 1122 q 1014 1112 1019 1122 m 926 1112 q 919 1092 926 1106 l 919 1088 l 922 1088 l 929 1109 l 929 1112 l 926 1112 m 990 1068 l 987 1061 l 1004 1061 l 1004 1065 l 990 1068 m 827 1055 l 827 1048 l 844 1044 l 848 1044 q 838 1055 848 1049 l 827 1055 m 865 1051 l 861 1044 q 919 1038 917 1041 q 922 1041 919 1041 q 929 1034 924 1034 l 932 1034 q 943 1044 937 1034 q 919 1051 919 1044 l 895 1048 l 865 1051 m 1041 1044 q 1048 1038 1042 1038 l 1051 1038 l 1051 1051 l 1048 1051 q 1041 1044 1041 1050 m 1048 1010 q 1051 1007 1051 1010 q 1065 1017 1065 1013 l 1065 1024 l 1058 1024 q 1048 1010 1053 1024 m 373 1010 l 373 1007 l 390 1004 l 390 1010 l 373 1010 m 1024 983 l 1024 980 q 1031 960 1031 972 l 1041 960 q 1034 980 1034 970 q 1041 997 1041 991 l 1038 997 q 1024 983 1032 997 m 902 983 l 902 980 q 909 987 909 980 l 909 990 q 902 983 902 989 m 363 987 l 363 980 l 387 977 l 390 977 l 390 983 q 363 987 382 983 m 946 980 l 946 977 l 963 977 l 963 983 l 946 980 m 281 963 q 298 949 281 958 l 298 953 q 281 963 298 960 m 994 953 l 994 949 l 997 949 q 1007 953 1004 953 l 1007 963 l 1004 963 q 994 953 999 963 m 953 939 l 953 936 l 956 936 q 990 946 968 946 l 987 953 q 953 939 953 948 m 787 949 q 793 943 788 943 l 800 943 l 800 949 l 787 949 m 1014 949 q 1021 943 1015 943 l 1027 943 q 1021 949 1027 949 l 1014 949 m 305 943 l 305 939 q 312 932 307 932 l 315 932 q 322 939 322 932 l 322 943 l 305 943 m 807 939 q 814 932 808 932 l 827 932 l 827 936 q 807 939 810 939 m 1055 939 l 1055 929 q 1075 922 1067 929 l 1078 922 l 1078 926 q 1058 939 1078 930 l 1055 939 m 34 939 q 44 909 44 926 q 31 905 38 905 l 27 912 l 27 932 q 34 939 28 939 m 868 912 l 868 916 q 858 912 861 912 q 865 905 859 905 q 916 919 875 912 q 922 899 922 905 l 929 899 l 929 922 l 936 932 l 932 932 q 868 912 917 926 m 61 895 l 61 892 q 64 882 64 885 l 68 882 l 68 895 l 61 895 m 919 888 l 919 871 l 926 871 l 922 888 l 919 888 m 68 878 l 68 868 q 75 861 69 861 l 75 868 q 71 878 71 875 l 68 878 m 960 865 q 966 858 961 858 l 970 858 q 963 865 970 865 l 960 865 m 854 861 q 824 817 849 836 l 821 817 l 821 814 l 827 814 q 861 861 840 816 l 854 861 m 1068 861 l 1068 854 l 1082 854 l 1082 861 l 1068 861 m 770 841 l 770 838 q 777 844 777 838 l 777 848 q 770 841 770 846 m 183 814 l 183 810 q 278 760 183 790 q 183 814 234 795 m 393 797 q 400 790 400 795 l 400 559 l 393 559 q 356 607 362 607 q 281 668 296 607 q 363 709 311 688 q 393 793 383 728 l 393 797 m 281 783 q 285 773 281 780 l 281 756 q 292 746 284 756 q 285 712 288 740 l 295 705 l 295 712 l 292 729 q 302 749 302 732 q 288 783 288 775 l 281 783 m 92 773 l 92 746 l 95 746 l 98 763 l 98 773 l 92 773 m 817 777 q 882 729 829 777 q 922 715 899 729 l 943 719 q 983 702 948 713 q 987 692 987 695 q 970 631 975 692 l 970 624 q 990 695 978 624 q 1058 709 1002 709 q 1116 668 1116 709 q 1099 627 1109 641 l 1099 624 l 1109 631 l 1116 631 l 1116 498 l 1112 475 l 1105 475 q 1068 495 1080 495 l 1065 495 q 1109 465 1097 465 l 1109 454 q 1112 437 1109 443 q 1075 275 1099 323 q 990 136 1043 174 q 953 119 973 119 l 946 122 q 926 115 935 115 l 922 115 q 882 132 922 128 q 854 129 869 129 q 821 173 826 129 q 824 186 824 179 q 821 200 824 194 l 824 220 l 824 244 q 790 295 790 267 l 790 305 q 793 336 793 323 q 790 359 790 338 q 817 373 798 359 l 824 373 l 821 366 l 821 363 q 844 376 839 363 q 834 390 840 390 q 780 376 817 383 q 732 390 742 384 q 743 424 743 422 q 739 431 743 431 l 743 454 l 743 509 q 756 519 743 517 l 756 529 q 743 539 743 529 l 743 729 q 783 760 743 751 q 817 777 799 760 m 1092 770 l 1088 746 l 1088 743 q 1095 736 1090 736 q 1099 770 1095 769 l 1092 770 m 95 743 l 95 732 q 102 726 96 726 l 102 732 q 98 743 98 739 l 95 743 m 58 732 l 58 722 q 75 712 64 722 l 75 722 q 64 732 75 727 l 58 732 m 244 702 l 244 699 q 251 705 251 699 l 251 709 q 244 702 244 707 m 95 702 l 95 699 q 105 675 105 684 l 115 675 l 115 678 q 98 702 102 702 l 95 702 m 892 498 l 875 498 q 844 485 844 489 q 851 478 846 478 q 861 488 861 478 l 882 488 l 878 465 l 878 461 q 949 583 949 532 q 946 587 946 583 l 953 590 q 1000 543 979 543 q 1055 498 1023 498 l 1058 498 l 1058 505 q 1014 543 1014 517 q 956 604 978 553 q 960 614 956 607 q 956 637 956 627 q 926 546 938 610 q 892 498 913 523 m 1088 604 l 1088 600 l 1092 600 l 1095 614 q 1088 604 1088 614 m 1078 563 l 1078 559 l 1082 559 q 1092 570 1086 559 l 1085 570 q 1078 563 1078 568 m 861 566 l 861 559 q 885 553 877 559 q 892 559 892 553 q 861 566 886 563 m 1058 543 l 1058 539 q 1075 553 1075 548 l 1075 556 l 1072 556 q 1058 543 1066 556 m 268 526 l 268 515 l 278 515 l 278 526 l 268 526 m 41 498 l 37 492 q 41 488 41 492 q 61 492 46 492 l 61 495 l 41 498 m 149 475 l 153 475 q 159 468 159 473 l 149 468 l 149 475 m 834 448 l 834 437 l 844 437 q 851 451 844 443 l 851 465 l 848 465 q 834 448 843 465 m 878 454 l 875 437 q 882 448 882 437 l 882 454 l 878 454 m 186 417 l 186 414 l 193 414 q 200 420 200 414 l 200 427 l 197 427 q 186 417 192 427 m 61 407 l 61 400 l 68 400 q 78 410 73 400 l 78 420 q 61 407 61 412 m 105 420 q 112 414 106 414 l 115 414 l 115 420 l 105 420 m 844 420 q 841 400 841 403 l 841 397 l 844 397 q 858 407 844 407 l 861 400 l 858 376 l 861 376 q 871 390 867 376 q 868 420 868 408 l 844 420 m 258 373 q 268 370 264 370 q 278 373 275 373 l 278 383 q 258 373 258 380 m 732 363 q 777 326 777 359 l 773 302 l 773 264 q 814 231 814 243 l 804 197 l 804 183 q 810 159 805 159 q 804 115 804 124 q 814 81 814 96 q 810 71 810 75 q 821 51 821 56 l 831 51 l 831 85 q 821 112 831 99 q 824 122 824 119 l 834 122 l 844 115 l 861 115 q 892 119 873 115 q 922 95 909 115 q 953 105 928 95 l 953 102 q 831 37 915 63 q 678 3 727 3 l 661 14 l 654 14 q 648 0 654 0 l 600 0 q 553 3 574 0 q 519 0 535 0 q 309 51 309 14 q 288 78 309 58 l 288 92 q 346 170 296 92 q 444 119 357 170 q 454 115 451 115 l 454 122 q 356 176 441 127 q 342 183 351 176 q 390 258 351 210 l 390 268 q 417 356 390 336 q 573 275 454 275 q 726 363 684 275 l 732 363 m 939 285 l 946 281 l 946 292 q 939 285 939 290 m 746 261 q 756 251 746 256 l 760 251 q 766 258 766 251 l 766 264 l 763 264 l 746 261 m 461 112 q 512 88 461 90 q 471 105 512 96 q 465 112 471 112 l 461 112 m 515 81 l 515 78 q 556 58 515 68 l 566 44 l 563 14 l 566 14 q 573 34 573 14 l 614 31 q 658 44 627 41 l 658 47 q 651 54 658 54 l 644 54 q 607 41 636 54 q 549 75 585 41 q 515 81 533 75 m 671 71 l 671 68 l 675 68 l 692 71 l 692 75 q 685 81 692 81 l 682 81 q 671 71 677 81 z "},"v":{"ha":1153,"x_min":-20,"x_max":1153,"o":"m -14 1133 l -10 1133 q -7 1129 -7 1133 l 0 1133 l 92 1133 q 122 1105 109 1133 l 129 1105 l 122 1129 l 129 1133 l 193 1133 q 200 1126 200 1131 q 180 1078 200 1103 q 142 1095 142 1087 l 139 1095 l 125 1085 l 122 1085 q 75 1099 113 1092 l 71 1099 l 71 1095 q 190 1058 176 1065 q 207 1041 192 1041 q 217 1044 214 1044 l 217 1048 q 197 1082 217 1061 l 197 1092 q 214 1129 208 1092 l 231 1133 l 254 1133 q 285 1129 272 1133 q 319 1133 302 1133 l 346 1133 q 390 983 359 1133 l 387 983 l 370 994 l 370 990 q 383 970 370 985 l 383 953 q 342 919 383 922 q 278 946 315 919 q 251 970 251 946 l 264 960 l 268 960 l 268 966 l 214 1004 q 231 1014 231 1008 l 231 1017 q 217 1034 222 1034 l 200 1031 q 220 973 200 1001 l 220 970 q 197 953 210 953 l 166 990 q 183 1017 169 1017 l 183 1021 l 173 1021 q 119 977 159 977 q 115 980 119 980 l 119 987 q 112 994 119 994 l 105 994 l 105 977 q 88 943 105 962 q 98 919 88 931 q 64 882 98 900 q -7 1092 -7 1085 l -7 1102 l -3 1119 l -17 1119 q -20 1129 -20 1126 l -14 1133 m 783 1146 l 814 1146 q 838 1122 833 1146 l 841 1122 l 841 1143 q 854 1146 847 1146 l 902 1146 q 909 1139 909 1145 l 905 1133 l 916 1133 q 922 1146 916 1138 q 963 1105 963 1120 q 943 1068 956 1105 q 963 973 956 1046 q 949 936 949 949 l 946 936 l 929 946 l 922 943 q 909 946 916 946 q 899 939 899 943 q 865 973 890 939 q 824 983 838 983 l 817 973 l 817 970 q 838 973 820 970 q 888 929 866 973 q 919 936 911 936 q 953 871 939 936 q 960 865 960 870 q 922 814 960 838 q 912 817 916 817 q 902 814 905 814 l 902 810 l 922 810 l 926 793 l 926 790 q 922 753 926 776 q 946 695 939 728 q 871 607 898 607 q 844 604 859 604 q 817 614 830 614 q 804 607 804 611 l 770 610 l 736 610 q 726 621 731 610 l 732 631 l 729 631 q 658 607 720 607 q 644 610 644 607 l 634 624 l 634 631 l 671 760 l 675 760 q 739 746 739 749 l 753 729 l 746 688 l 749 682 l 746 661 q 749 651 749 654 l 756 651 q 753 665 756 659 q 756 719 756 699 l 756 722 l 753 746 q 817 777 799 760 l 821 777 q 834 773 828 777 q 892 807 849 773 l 899 807 l 899 810 l 882 814 q 838 780 878 796 l 814 783 q 746 753 814 771 q 739 770 739 762 q 705 763 705 766 q 675 773 675 769 q 736 973 715 943 l 763 990 q 790 956 783 956 l 797 960 q 810 956 803 956 l 814 956 l 814 960 q 780 973 814 964 q 753 1014 770 1014 q 760 1048 760 1031 l 749 1048 q 783 1146 772 1146 m 956 1146 l 970 1146 l 970 1139 q 960 1129 970 1135 l 949 1143 l 956 1146 m 1007 1146 l 1105 1146 q 1112 1139 1112 1145 l 1109 1122 q 1129 1146 1126 1146 l 1143 1146 q 1153 1136 1147 1146 l 1149 1136 l 1153 1129 l 1146 1116 l 1149 1102 l 997 661 l 990 661 l 990 665 q 994 692 990 667 l 987 692 l 980 688 q 966 709 980 692 l 977 715 l 994 702 l 997 702 l 997 712 q 953 763 965 712 q 997 780 955 774 l 997 787 l 956 787 q 953 814 956 789 q 977 827 970 827 q 987 824 983 824 q 980 831 987 831 l 990 868 l 973 905 q 994 970 975 939 q 973 1068 983 1036 q 997 1092 973 1092 l 997 1109 q 994 1122 997 1116 q 1007 1146 1000 1146 m 24 1105 q 44 1082 29 1090 l 44 1088 q 31 1099 44 1094 l 34 1105 l 34 1112 l 31 1112 q 24 1105 24 1111 m 47 1105 l 54 1105 q 61 1112 61 1105 l 54 1112 q 47 1105 47 1111 m 804 1061 l 804 1058 q 821 1075 808 1058 l 817 1075 q 804 1061 812 1075 m 64 1055 l 64 1041 q 75 1031 64 1036 l 85 1031 q 92 1038 92 1031 l 92 1041 q 68 1055 77 1041 l 64 1055 m 376 1048 l 376 1044 l 380 1027 l 383 1027 l 383 1041 q 376 1048 383 1048 m 797 1048 l 797 1024 q 804 1017 798 1017 l 807 1017 l 807 1041 q 800 1048 807 1048 l 797 1048 m 841 1041 l 841 1031 q 848 1024 842 1024 l 851 1031 l 848 1031 l 851 1038 l 851 1048 l 848 1048 q 841 1041 841 1046 m 166 1041 l 166 1031 l 173 1031 l 173 1041 l 166 1041 m 102 1027 l 102 1021 q 119 1010 102 1015 l 119 1014 q 105 1027 119 1019 l 102 1027 m 743 1027 l 749 1027 l 749 990 q 739 980 749 985 l 732 980 l 732 983 q 743 1027 732 987 m 146 1010 l 146 1004 l 153 1004 q 166 1010 161 1010 l 166 1017 l 163 1017 q 146 1010 152 1010 m 797 1007 q 800 997 800 1000 l 804 997 q 810 1004 810 997 l 804 1007 l 797 1007 m 85 990 l 85 987 q 92 994 92 987 l 92 997 q 85 990 85 996 m 420 963 l 424 946 q 417 939 424 939 l 414 939 l 414 949 l 417 956 q 414 960 414 956 l 420 963 m 81 939 l 95 919 l 98 926 l 98 943 q 92 949 98 949 q 81 939 87 949 m 424 936 q 471 763 434 936 q 420 736 439 736 q 390 824 400 787 l 393 831 l 393 858 q 400 909 393 877 q 387 865 391 909 l 376 865 q 353 912 353 905 q 397 919 360 915 l 397 916 q 424 936 401 916 m 787 888 l 787 885 l 804 888 l 804 895 l 793 895 q 787 888 787 894 m 709 868 l 709 865 l 715 865 q 722 871 722 865 l 715 875 q 709 868 709 873 m 760 868 l 760 858 l 766 858 l 766 861 q 760 868 766 868 m 821 838 l 824 821 q 821 817 821 821 l 838 817 q 844 834 838 826 l 844 854 q 838 861 844 861 l 834 861 q 821 838 821 856 m 214 800 l 214 797 q 220 790 215 790 l 220 800 l 214 800 m 183 763 l 183 756 q 190 763 190 756 l 190 770 q 183 763 183 768 m 471 753 l 478 753 l 481 729 l 481 722 q 444 685 481 696 l 437 685 q 410 702 421 685 q 437 726 410 709 q 471 753 437 737 m 153 712 l 159 709 l 163 715 l 163 719 l 159 719 q 153 712 153 718 m 481 709 l 488 709 l 502 654 q 468 685 468 682 l 468 688 q 481 709 481 702 m 966 685 l 966 678 q 956 668 966 673 l 953 675 l 953 682 l 966 685 m 943 665 q 926 648 943 648 q 943 665 926 665 m 220 651 l 220 644 l 224 644 q 234 654 229 644 l 227 658 q 220 651 220 656 m 949 654 q 963 644 963 650 l 953 637 l 949 637 q 943 644 943 637 l 943 651 q 949 654 949 651 m 973 654 q 977 644 977 648 q 892 414 902 424 q 854 502 892 437 l 858 515 l 854 529 l 858 553 q 854 573 858 555 q 939 614 854 590 l 939 617 l 929 617 q 926 614 926 617 q 916 617 919 617 l 916 624 q 936 634 919 634 q 956 627 947 627 q 970 654 964 627 l 973 654 m 634 539 l 634 532 l 641 532 l 641 546 q 634 539 634 545 m 634 519 l 634 515 l 641 515 l 641 526 q 634 519 634 524 m 492 512 l 492 498 l 498 498 l 498 502 q 495 512 495 509 l 492 512 m 617 495 l 617 488 l 624 488 l 624 502 q 617 495 617 500 m 695 471 l 702 468 q 712 478 707 468 q 709 481 709 478 q 695 471 695 477 m 322 458 l 322 451 q 383 410 370 410 q 400 407 395 410 q 427 417 427 410 l 424 417 q 387 414 394 414 q 339 448 376 414 l 326 458 l 322 458 m 627 454 l 627 451 q 634 444 629 444 l 634 454 l 627 454 m 719 420 q 688 424 707 420 q 644 393 663 410 l 644 387 q 651 366 644 377 q 648 336 648 348 l 654 332 l 658 363 l 651 376 q 736 417 651 413 l 753 410 l 753 417 q 739 434 739 417 q 719 420 736 434 m 529 431 l 529 427 l 536 417 q 492 397 536 406 q 488 407 488 404 l 485 407 l 475 400 q 441 417 455 417 l 471 390 l 465 376 q 468 373 468 376 q 522 397 515 397 l 522 393 l 529 397 q 532 393 532 397 q 546 404 546 399 l 546 417 q 536 431 536 417 l 529 431 m 624 417 l 624 414 q 637 400 629 414 q 644 407 644 400 l 644 410 q 634 420 634 410 q 624 417 627 417 m 770 407 l 770 404 q 777 397 771 397 l 783 397 l 783 404 l 770 407 m 597 404 l 597 397 l 600 397 q 607 404 607 397 l 597 404 m 553 400 q 559 393 554 393 l 573 393 l 573 397 l 556 400 l 553 400 m 434 363 q 420 329 420 335 q 424 319 424 322 l 427 319 q 437 359 437 351 l 437 363 l 434 363 m 658 329 q 668 271 668 283 q 658 258 663 271 l 661 258 q 675 292 675 261 q 665 329 668 302 l 658 329 m 427 312 q 410 288 427 300 l 410 285 l 417 285 q 434 302 422 285 q 431 312 431 309 l 427 312 m 614 281 l 624 281 l 624 288 l 621 288 q 614 281 614 287 m 410 275 l 410 264 q 417 258 412 258 l 417 268 q 410 275 417 275 m 604 271 q 532 258 604 260 l 526 261 q 478 244 503 251 l 478 241 q 485 234 479 234 l 488 234 q 522 254 501 245 q 559 244 549 251 q 566 254 559 250 q 604 241 593 251 l 607 241 l 604 248 l 604 251 l 610 261 l 610 264 q 604 271 610 271 m 621 258 l 631 251 q 641 264 636 251 l 634 268 l 631 268 q 621 258 626 268 m 844 271 l 844 268 l 810 170 l 807 170 q 787 197 807 176 q 800 207 787 205 l 800 214 l 797 237 q 844 271 814 266 m 417 241 q 400 224 417 227 l 400 217 q 424 231 418 217 l 424 241 l 417 241 m 715 220 l 715 217 l 719 217 q 726 224 726 217 l 726 241 q 715 220 715 237 m 621 237 l 624 220 l 627 220 l 627 237 l 621 237 m 529 186 l 529 183 q 549 200 543 188 l 549 217 q 529 186 529 205 m 658 214 l 658 203 q 668 214 663 203 l 658 214 m 366 210 l 366 203 l 380 203 q 387 210 387 203 l 366 210 m 661 190 l 661 170 l 671 170 q 726 193 726 184 l 726 200 q 719 207 726 207 l 715 207 l 712 186 l 688 186 l 678 180 l 671 180 l 671 183 l 702 210 l 692 210 l 661 190 m 526 170 l 526 166 q 532 159 527 159 l 532 176 q 526 170 526 175 m 780 119 l 790 119 l 790 125 l 787 125 q 780 119 780 124 m 434 27 l 434 24 l 437 24 q 451 41 444 25 l 448 41 q 434 27 442 41 m 400 34 l 400 27 q 414 31 406 31 l 414 37 l 410 37 q 400 34 404 34 m 519 31 l 526 27 l 529 34 l 529 37 l 526 37 q 519 31 519 36 m 261 742 q 251 709 251 726 l 254 695 l 248 675 q 254 668 254 673 l 251 654 q 278 617 261 635 l 278 614 q 261 593 267 593 l 254 593 q 248 607 254 607 l 241 590 q 244 580 244 583 q 197 536 197 554 l 200 536 q 264 566 238 559 q 298 607 275 589 q 342 593 314 607 q 400 624 349 593 q 420 600 406 608 q 448 604 445 604 q 502 549 471 604 q 512 536 507 536 q 478 475 511 521 l 478 465 q 485 458 479 458 q 515 515 485 469 l 522 515 q 573 342 562 349 q 634 539 621 520 q 637 529 634 529 q 634 526 637 526 q 648 485 640 485 l 651 485 l 651 492 l 644 502 l 644 515 q 695 529 644 520 l 712 526 q 756 529 741 529 q 800 519 760 529 q 824 529 817 529 q 844 458 844 498 q 841 431 844 455 q 882 339 882 371 q 848 322 860 322 q 807 332 819 322 l 797 332 q 848 315 797 321 l 865 319 q 871 309 868 309 q 858 278 867 290 q 861 268 858 268 q 834 214 861 214 q 797 186 834 208 q 773 136 797 160 l 763 142 l 746 142 q 736 125 739 142 l 746 119 q 756 132 751 132 l 763 132 l 760 125 l 760 122 l 777 125 q 797 102 777 119 q 800 88 800 96 q 793 81 793 87 l 777 85 l 770 85 l 770 81 q 783 75 775 81 l 800 75 q 777 34 794 34 l 780 17 q 743 -54 766 -54 l 600 -54 l 593 -51 q 600 -17 600 -26 q 597 17 600 -13 q 658 98 634 73 l 654 98 q 624 85 630 85 l 617 95 l 617 102 l 621 122 l 621 125 l 617 125 l 610 102 q 617 85 617 91 q 573 20 617 57 l 570 20 q 556 34 564 20 l 539 31 l 515 34 l 509 24 l 522 17 q 549 20 541 20 q 583 -14 583 14 q 566 -54 576 -54 l 522 -54 q 492 -51 510 -54 l 485 -54 q 475 -47 475 -51 q 451 -54 461 -54 q 424 -51 448 -54 l 400 -54 q 349 58 376 -54 q 329 115 339 71 l 332 115 l 400 51 q 407 41 400 41 l 417 41 q 451 44 433 41 q 492 17 492 44 l 498 17 q 505 24 505 17 q 481 58 505 43 l 448 58 l 414 54 q 376 95 414 66 l 376 102 l 390 105 l 390 115 l 387 115 l 373 105 q 353 125 359 125 l 356 132 l 356 136 q 281 254 307 136 q 241 376 241 365 q 305 420 269 404 q 326 434 312 434 q 332 427 327 427 l 336 427 q 373 543 353 492 q 346 573 368 543 l 349 580 q 342 587 349 587 q 332 576 342 576 q 359 543 334 568 l 359 539 q 336 509 350 525 l 336 485 q 288 431 336 449 q 275 420 288 420 l 258 424 q 241 407 258 419 l 237 407 q 186 529 224 407 q 190 539 190 536 q 180 559 180 543 q 190 576 180 576 l 190 580 l 170 580 q 139 675 139 663 q 153 685 153 680 q 142 695 148 685 l 142 705 q 186 715 186 705 l 186 722 l 170 726 q 136 712 136 726 l 136 709 l 129 709 q 119 736 119 711 l 119 739 q 132 746 132 739 l 105 763 q 92 804 99 794 l 92 814 q 125 831 101 814 q 119 838 125 838 q 186 922 119 922 q 214 888 208 888 l 224 888 q 248 899 236 899 q 275 868 258 899 q 307 854 282 868 q 332 912 319 878 l 336 912 q 380 838 336 903 q 387 763 380 798 q 383 760 383 763 q 400 726 397 760 q 326 682 400 699 q 261 726 261 688 l 261 742 z "},"w":{"ha":1289,"x_min":-136,"x_max":1431,"o":"m -129 1133 l -54 1133 q -47 1126 -47 1131 l -47 1116 q -75 1078 -75 1095 q -64 997 -64 1020 q -95 980 -81 994 q -119 1051 -100 980 l -115 1058 q -129 1112 -129 1083 q -122 1119 -122 1112 q -136 1122 -128 1122 l -136 1126 q -129 1133 -134 1133 m 92 1133 l 95 1119 l 98 1119 q 176 1133 98 1133 l 180 1133 q 227 1109 227 1133 q 268 892 248 980 l 264 885 l 264 878 l 271 868 l 271 858 q 227 827 239 858 q 125 790 190 790 q 85 865 104 818 l 88 882 q 61 977 70 933 q 10 1007 42 977 l 3 1007 q -31 997 -28 997 q -54 1078 -45 997 q -20 1133 -29 1108 l 92 1133 m 597 1119 q 624 1116 611 1119 q 651 1119 637 1119 l 678 1119 q 685 1112 685 1118 l 685 1109 q 661 1099 661 1105 l 661 1092 q 668 1085 663 1085 l 685 1109 l 702 1105 q 736 1119 713 1105 l 743 1116 l 773 1119 l 777 1112 q 760 1095 772 1112 l 753 1099 l 746 1099 l 746 1095 q 756 1085 746 1090 l 760 1085 q 793 1105 779 1105 q 841 861 800 1105 l 817 824 l 821 810 q 800 777 811 777 l 800 773 q 817 763 817 770 l 817 756 q 766 665 791 728 l 766 644 q 760 641 760 644 l 753 644 l 749 644 q 743 637 743 643 q 800 610 747 629 q 824 590 824 599 q 831 566 824 574 l 831 532 q 838 509 832 509 l 824 492 q 790 509 804 505 l 787 509 l 787 505 q 807 488 799 505 q 766 400 807 463 q 736 319 766 366 l 739 319 q 777 400 777 345 q 804 420 793 420 l 804 431 q 831 488 823 488 l 854 488 q 895 498 884 488 l 912 498 q 922 437 922 465 q 909 431 914 431 l 909 424 q 936 448 936 424 l 946 502 l 963 502 q 1068 529 963 519 q 1139 556 1075 546 q 1204 539 1139 539 l 1221 539 q 1244 495 1244 529 l 1241 488 q 1244 478 1241 485 q 1241 441 1241 455 l 1241 437 l 1244 417 q 1207 292 1215 296 q 1197 285 1197 292 l 1197 271 q 1183 227 1197 240 l 1183 217 l 1194 224 l 1194 220 q 1146 166 1173 181 q 1116 85 1128 144 q 1119 81 1119 85 l 1112 81 q 1085 119 1107 81 q 1044 159 1057 131 l 1014 170 l 1007 170 l 1007 166 q 1051 129 1051 151 q 1109 68 1082 119 l 1109 64 l 1105 47 l 1116 41 q 1139 122 1129 71 q 1180 170 1155 160 l 1180 166 q 1129 -14 1140 -14 l 1095 -14 q 1088 -7 1088 -14 q 1095 31 1088 -3 l 1095 44 q 1078 -10 1085 44 l 1061 -14 l 970 -14 q 949 -3 952 -14 l 949 3 q 973 58 949 9 l 973 61 l 970 61 q 932 3 940 3 q 902 14 914 14 q 878 0 878 3 q 817 24 827 24 q 797 17 806 17 l 790 17 q 756 75 760 17 l 756 85 q 760 115 756 97 q 753 136 753 129 l 749 136 l 749 129 q 743 136 743 129 l 743 139 l 753 139 l 753 153 q 699 359 731 153 q 675 495 675 448 l 692 492 q 719 495 705 495 l 719 502 l 715 502 q 699 495 699 501 q 658 546 663 495 q 641 631 658 566 q 597 556 597 583 l 563 529 l 563 532 l 583 600 l 580 621 q 604 654 599 637 l 610 654 l 610 658 q 593 668 602 658 l 590 668 q 583 661 583 667 l 583 658 q 587 654 583 654 q 566 624 587 650 q 536 519 566 530 q 563 512 563 519 q 492 431 528 431 q 468 400 468 415 l 468 397 l 475 387 l 475 373 q 451 353 451 368 l 434 353 q 376 342 401 342 l 366 342 l 366 346 q 404 390 404 376 q 339 342 353 351 q 312 339 325 342 q 271 353 286 353 l 268 353 l 241 339 q 203 342 218 342 q 180 329 198 329 l 170 329 l 173 336 q 125 363 140 363 q 122 359 122 363 q 102 366 109 366 l 102 376 q 112 383 107 376 l 109 400 q 176 536 109 449 l 190 536 l 190 539 q 170 559 170 539 q 180 580 170 580 l 180 583 l 176 583 q 166 580 170 580 q 156 614 159 588 q 176 648 156 617 l 176 658 q 122 709 122 684 q 149 760 125 728 q 156 763 156 760 l 173 760 q 251 817 251 779 l 264 824 q 295 715 281 824 l 336 502 q 329 495 329 500 l 329 492 q 349 431 339 484 l 353 431 q 383 485 359 485 q 407 495 397 488 l 410 495 q 420 475 420 492 l 420 458 q 431 454 424 458 l 444 471 q 420 495 420 471 q 465 519 420 515 q 471 512 466 512 l 475 512 l 475 515 q 454 526 471 526 q 387 492 429 522 l 376 492 l 366 498 l 444 892 q 498 899 460 892 q 549 875 549 890 q 543 838 546 868 l 546 817 q 543 807 543 810 q 597 739 545 784 q 607 709 597 728 l 590 682 l 590 678 l 600 678 q 614 699 600 692 q 627 671 619 671 l 634 671 l 634 675 l 604 753 q 556 817 559 798 l 559 834 q 553 861 553 846 l 553 865 q 587 963 563 942 l 583 963 q 559 936 581 963 l 559 916 l 536 909 l 522 909 q 495 916 519 909 l 471 909 l 454 909 q 448 916 448 909 q 492 1119 482 1101 l 597 1119 m 1373 1133 l 1373 1122 q 1309 1095 1373 1099 q 1299 1099 1302 1099 q 1261 1014 1261 1084 q 1251 994 1257 994 l 1234 994 q 1187 1010 1222 994 q 1136 990 1170 999 l 1126 990 q 1112 994 1118 990 q 1034 970 1094 983 l 1031 977 q 1065 1133 1055 1133 l 1373 1133 m 1424 1119 q 1431 1112 1426 1112 q 1407 1075 1428 1097 l 1407 1072 q 1417 1068 1417 1072 q 1343 770 1346 770 q 1319 688 1329 688 l 1312 688 q 1305 715 1312 699 q 1309 739 1309 729 q 1295 783 1299 783 q 1316 848 1316 835 q 1265 916 1265 888 q 1258 960 1261 921 l 1278 970 l 1295 970 q 1289 980 1292 980 q 1305 1051 1297 1001 q 1363 1072 1328 1072 q 1390 1068 1376 1068 q 1424 1119 1390 1095 m 1116 1109 l 1116 1105 l 1122 1105 q 1133 1116 1127 1105 l 1126 1119 q 1116 1109 1121 1119 m 81 1109 l 81 1102 q 88 1109 88 1102 l 88 1116 q 81 1109 81 1114 m 81 1092 q 61 1034 77 1053 l 61 1031 q 88 1088 75 1031 l 81 1092 m 1102 1072 l 1102 1068 l 1112 1068 l 1112 1078 l 1109 1078 q 1102 1072 1102 1077 m 214 1055 l 214 1051 l 217 1044 q 231 1058 227 1047 l 224 1061 l 220 1061 q 214 1055 214 1060 m 41 1007 l 41 1004 l 51 1004 l 54 1010 l 51 1010 q 41 1007 44 1007 m 203 1000 l 197 980 l 200 980 q 217 1000 217 988 l 203 1000 m 644 1000 l 644 994 l 661 994 l 678 997 l 678 1000 l 644 1000 m 1190 994 q 1227 980 1203 986 q 1224 960 1224 962 q 1265 882 1239 882 q 1285 844 1265 880 q 1268 790 1268 805 l 1282 770 l 1278 763 l 1278 760 l 1289 739 q 1248 692 1289 692 q 1217 661 1248 686 q 1224 641 1224 648 l 1231 641 q 1285 685 1251 685 l 1295 685 l 1305 678 q 1265 515 1302 672 l 1258 515 q 1255 526 1258 519 l 1261 566 q 1251 604 1255 576 l 1255 610 q 1234 634 1247 631 l 1234 600 q 1244 566 1234 593 q 1238 559 1238 565 q 1221 570 1221 566 l 1214 566 l 1170 566 q 1143 587 1154 566 l 1139 587 q 1044 556 1088 580 q 1000 549 1034 556 l 980 553 q 953 536 971 536 q 949 539 953 539 q 1027 929 1004 836 q 1099 963 1027 956 q 1180 983 1103 970 q 1190 994 1180 988 m -61 966 l -31 966 q 17 939 -5 939 q 41 848 17 932 l 41 838 q 37 834 41 834 q 51 797 51 814 l 51 780 q 78 760 63 780 l 81 760 l 81 756 q 75 729 81 741 q 78 699 78 711 q 75 678 75 681 l 125 651 q 98 587 98 626 q 81 576 91 576 q 88 570 83 570 l 92 570 l 105 580 q 119 543 119 566 q 64 444 119 534 q 54 417 64 429 l 58 393 q 24 373 58 383 q 10 420 10 398 l 17 424 q 37 417 28 417 l 44 417 q -7 481 -7 440 q -68 719 -64 717 q -64 729 -64 726 l -58 729 q 47 756 34 746 l 47 760 l 44 760 l -61 736 l -71 736 l -75 760 q -54 773 -54 766 l -54 777 l -64 777 l -75 770 q -119 932 -81 770 l -119 939 q -61 966 -119 959 m 729 973 l 729 970 l 736 970 q 739 980 736 973 l 736 980 q 729 973 729 979 m -17 943 l -17 932 q 0 939 -8 939 l 0 943 l -17 943 m 1319 885 q 1305 871 1316 871 l 1305 865 q 1326 882 1320 869 l 1319 885 m 1024 865 l 1024 858 l 1034 858 l 1034 865 l 1024 865 m 844 848 q 865 743 857 843 q 851 736 851 743 q 899 593 873 736 q 905 532 905 559 q 892 512 892 532 l 885 512 q 848 529 880 517 l 844 563 l 844 607 l 834 621 q 844 644 834 632 l 844 654 q 817 627 820 627 q 777 658 795 633 l 777 668 q 834 760 814 760 q 827 804 827 795 q 844 848 837 848 m 1207 766 q 1214 739 1214 742 q 1197 726 1207 726 l 1197 709 l 1200 709 l 1211 715 l 1227 715 q 1261 746 1227 724 q 1268 763 1261 752 l 1261 763 q 1244 743 1247 763 l 1234 743 l 1234 749 l 1241 760 l 1241 763 l 1231 763 q 1224 753 1231 753 l 1221 753 q 1211 766 1221 766 l 1207 766 m 1143 743 l 1149 739 l 1153 746 l 1153 749 l 1149 749 q 1143 743 1143 748 m 20 736 l 27 732 l 31 739 l 31 743 l 27 743 q 20 736 20 741 m 268 695 q 258 675 258 677 q 261 665 261 668 l 268 665 q 275 695 271 689 l 268 695 m 865 695 q 861 685 865 692 l 861 682 l 865 682 q 868 692 865 685 l 868 695 l 865 695 m 627 671 l 627 665 l 634 665 q 658 675 646 675 l 678 675 q 743 661 686 665 q 719 678 738 678 l 695 678 q 668 692 681 692 l 658 692 q 634 678 648 692 q 627 671 627 677 m 1173 671 q 1200 665 1190 671 l 1204 671 l 1197 682 q 1173 671 1173 678 m 1112 658 l 1112 654 q 1119 648 1114 648 l 1122 648 l 1122 658 l 1112 658 m 624 610 l 631 610 q 604 522 616 522 l 600 522 q 593 529 600 529 l 590 529 l 590 522 q 610 509 604 522 l 583 387 l 580 387 q 583 376 583 380 q 576 339 583 368 l 570 339 q 495 383 539 339 q 478 410 486 383 q 529 444 499 436 q 590 553 572 494 q 617 607 603 560 l 624 610 m 481 563 l 481 559 l 488 559 q 495 566 495 559 l 495 570 l 488 570 q 481 563 481 568 m 197 553 q 203 546 198 546 l 214 546 l 214 549 l 197 553 m 244 553 l 244 549 q 261 539 244 543 l 261 546 q 254 553 254 546 l 244 553 m 739 536 l 739 529 l 749 529 l 773 526 l 763 539 q 739 536 749 536 m 492 536 l 492 529 l 509 529 q 515 536 515 529 l 492 536 m 271 532 l 271 526 q 288 519 280 526 l 288 522 q 271 532 288 530 m 732 522 q 726 509 732 517 l 726 505 l 736 505 l 739 522 l 732 522 m 298 512 l 298 505 q 319 515 316 505 q 298 512 314 512 m 431 461 q 417 420 431 452 q 444 444 437 431 l 444 448 q 437 461 437 456 l 431 461 m 261 451 q 264 441 264 444 l 271 441 q 275 451 271 444 l 268 454 l 261 451 m 183 437 l 193 437 l 193 444 l 190 444 q 183 437 183 443 m 960 444 l 960 434 l 966 434 l 966 444 l 960 444 m 807 431 l 807 427 l 838 387 l 838 390 q 807 431 823 420 m 119 404 l 119 400 q 125 393 120 393 l 129 393 l 129 404 l 119 404 m 88 380 q 159 339 109 363 q 170 342 166 342 q 163 336 170 336 q 176 319 170 320 l 210 336 q 231 329 221 329 q 275 342 262 342 l 278 342 l 298 332 l 366 339 q 387 332 380 332 q 397 342 387 337 l 400 342 l 400 336 q 383 326 400 326 q 397 298 383 313 l 397 295 q 353 197 382 232 q 346 180 347 197 l 346 176 q 353 139 353 144 l 342 139 l 342 129 l 359 132 q 363 119 359 125 q 353 92 353 102 l 353 68 q 309 37 345 54 q 305 0 309 0 q 237 31 254 10 q 193 61 233 31 q 129 68 136 68 l 54 363 q 88 380 54 375 m 492 366 q 526 339 492 346 l 573 315 q 532 132 543 161 q 475 81 512 132 l 461 81 q 471 61 471 68 q 427 0 443 0 l 339 0 q 315 10 328 0 q 349 47 320 47 q 376 115 368 107 l 376 125 q 353 173 368 131 q 397 261 397 245 q 410 285 397 270 l 410 298 q 397 309 410 307 l 397 315 q 448 349 410 349 q 492 366 453 366 m 770 326 q 780 285 773 299 q 777 271 777 279 l 777 268 l 783 268 q 790 275 790 268 q 783 295 783 286 l 787 302 q 773 326 779 326 l 770 326 m 865 326 l 865 322 l 868 302 q 861 295 861 300 q 899 237 888 295 q 966 207 907 228 q 994 186 966 202 l 1000 186 l 1000 190 q 919 231 949 231 q 892 295 899 248 q 868 326 874 295 l 865 326 m 821 295 l 817 295 l 793 302 l 793 295 l 817 288 q 848 302 838 302 q 851 298 848 298 l 854 305 q 844 309 848 309 l 821 295 m 119 292 l 119 285 q 125 278 120 278 l 129 285 l 129 292 l 119 292 m 770 214 l 773 214 q 790 251 780 214 l 787 251 q 770 214 775 251 m 773 197 q 766 159 766 164 l 773 159 q 780 193 780 189 l 773 197 m 329 170 l 329 159 l 332 159 q 339 166 339 159 l 339 170 l 329 170 m 977 115 l 977 112 q 1007 142 981 112 l 1007 146 q 977 115 1003 146 m 254 132 l 254 125 l 264 125 q 271 132 271 125 l 271 142 l 268 142 q 254 132 260 132 m 312 102 l 312 98 l 319 98 l 336 102 l 336 112 l 332 112 q 312 102 312 109 m 522 109 l 529 109 l 529 105 q 502 0 515 0 l 468 0 q 461 7 461 0 q 468 14 463 14 l 465 20 l 465 24 q 488 75 481 39 q 522 109 490 75 m 193 92 l 190 78 l 207 78 l 207 92 l 193 92 m 414 88 q 444 71 414 81 l 448 78 q 417 88 428 78 l 414 88 m 322 71 l 319 64 l 326 61 l 329 68 l 322 71 m 136 47 q 142 41 142 46 l 142 37 l 136 37 l 136 47 m 159 47 q 210 17 194 47 q 237 3 237 12 l 231 0 l 227 0 l 217 7 q 197 0 206 0 l 186 0 q 142 10 142 0 l 142 17 q 156 47 151 17 l 159 47 m 824 20 q 851 3 843 15 l 851 0 l 780 0 q 773 7 773 0 q 824 20 773 12 m 895 7 l 916 7 q 905 0 916 0 q 895 3 899 3 l 895 7 z "},"x":{"ha":1153,"x_min":0,"x_max":1190,"o":"m 41 1153 l 88 1153 q 95 1146 95 1152 q 92 1133 95 1139 q 112 1061 99 1099 l 102 1055 l 98 1055 q 41 1153 41 1143 m 119 1153 l 356 1153 q 393 1149 370 1153 q 420 1153 397 1153 l 437 1153 q 505 1055 462 1153 q 556 960 543 999 q 549 953 549 958 l 553 953 q 563 956 559 956 q 614 875 585 909 l 705 1027 q 726 1007 722 1007 l 722 973 l 722 946 l 719 929 q 770 899 770 905 q 746 865 746 879 l 746 841 q 726 827 746 834 q 732 821 727 821 l 736 821 l 746 827 l 749 827 q 763 793 763 824 q 712 699 763 787 q 699 665 712 684 l 702 644 q 641 617 702 631 l 610 644 l 610 641 q 634 614 625 614 q 644 604 637 614 q 600 532 633 532 q 549 468 600 490 q 495 424 511 424 q 461 400 487 424 l 451 400 l 451 407 l 444 407 q 407 292 427 332 q 434 258 412 292 l 431 251 q 437 244 432 244 q 448 258 437 250 q 420 288 448 262 l 420 295 l 444 322 l 444 346 q 509 410 444 385 q 539 424 525 410 l 543 424 q 631 336 570 411 l 631 322 q 614 309 629 315 q 597 332 601 332 l 593 332 q 529 271 559 271 q 481 224 522 271 q 434 241 452 227 q 390 210 390 218 l 383 210 l 356 234 q 336 227 345 227 q 271 295 302 235 l 271 312 q 302 363 302 347 l 302 373 l 295 373 q 261 309 295 363 q 220 292 261 299 q 210 281 220 289 q 180 292 180 285 l 180 295 l 302 471 l 309 488 l 315 488 q 336 481 325 488 q 390 485 370 485 l 404 485 q 451 444 418 468 l 451 434 l 458 434 l 458 451 q 393 492 406 492 q 342 485 380 492 q 322 502 322 490 q 393 617 393 606 l 366 658 l 366 671 q 380 675 368 671 l 380 678 l 376 685 l 359 675 l 353 675 q 288 780 288 776 q 309 773 299 773 l 322 773 q 326 777 326 773 l 332 773 l 366 777 q 404 736 366 768 l 404 729 l 390 726 l 390 719 l 397 719 l 407 726 l 414 726 q 498 658 414 705 l 583 682 l 600 678 l 604 678 q 634 682 616 678 q 688 668 659 668 q 631 695 686 678 l 617 695 q 614 692 614 695 l 583 702 q 526 685 583 690 q 502 675 526 680 q 366 793 463 701 q 326 787 347 793 q 288 814 288 787 l 281 814 l 271 807 q 115 1034 258 817 q 139 1092 139 1086 l 132 1092 l 129 1075 l 122 1075 q 112 1099 114 1075 l 115 1112 q 105 1129 109 1129 q 119 1153 111 1153 m 787 1153 q 790 1149 790 1153 l 814 1153 l 868 1153 q 871 1149 871 1153 l 878 1153 l 885 1153 q 902 1139 902 1153 l 909 1139 q 919 1153 911 1153 l 963 1153 q 990 1146 987 1146 l 1004 1146 l 1004 1136 l 970 1136 q 912 1078 920 1078 l 905 1078 l 895 1085 l 865 1085 q 770 1024 826 1024 q 743 1021 762 1024 l 719 1055 q 787 1153 766 1153 m 1177 1149 l 1187 1149 q 1177 1136 1182 1136 q 1173 1139 1177 1139 q 1177 1149 1177 1146 m 1058 1146 q 1099 1136 1092 1136 q 1143 1143 1139 1143 q 1190 1126 1190 1134 l 1190 1122 q 983 821 1190 1110 q 939 756 939 762 l 916 763 l 916 756 q 929 746 929 756 q 902 719 923 728 q 838 614 895 692 l 851 590 q 824 573 842 573 q 770 607 786 607 q 766 604 766 607 q 746 610 753 610 l 746 621 q 756 624 749 621 q 753 651 753 643 q 810 770 763 701 q 817 790 817 781 l 814 807 q 817 824 817 812 q 800 858 802 824 l 824 895 q 770 932 823 907 q 766 949 770 949 l 770 956 l 770 973 q 793 1004 781 973 q 804 1007 804 1004 l 810 1004 l 817 1004 q 895 1061 895 1022 l 902 1065 l 912 1065 l 953 1058 q 973 1078 962 1058 l 970 1085 l 970 1092 q 997 1112 988 1092 q 1041 1139 1022 1122 q 1058 1146 1058 1139 m 329 1072 l 329 1068 q 336 1061 330 1061 q 342 1068 342 1061 l 342 1072 l 329 1072 m 159 1031 l 159 1027 l 176 1024 l 180 1024 l 180 1031 l 159 1031 m 237 1027 q 248 1021 237 1021 l 251 1021 l 251 1024 l 237 1027 m 261 1021 q 268 1014 262 1014 l 271 1014 l 271 1021 l 261 1021 m 987 1010 l 994 1007 l 1004 1021 l 997 1021 q 987 1010 992 1021 m 437 1014 l 437 1000 l 444 1004 q 441 1014 441 1010 l 437 1014 m 292 1007 l 292 990 l 298 990 l 298 1007 l 292 1007 m 515 980 l 522 980 q 529 987 529 980 l 529 994 l 526 994 q 515 980 521 994 m 319 973 l 349 949 l 353 949 l 353 960 q 319 973 350 960 m 393 960 l 400 956 l 404 963 l 404 966 l 400 966 q 393 960 393 965 m 481 946 l 488 946 q 495 953 495 946 l 495 966 q 481 946 490 966 m 261 946 l 261 939 l 275 939 l 275 946 q 268 953 275 953 q 261 946 261 951 m 936 929 l 936 926 l 943 926 l 943 936 q 936 929 936 935 m 885 926 q 878 909 885 918 l 878 895 l 885 895 q 892 926 888 920 l 885 926 m 1004 919 l 1004 916 l 1007 916 q 1014 922 1014 916 l 1014 926 l 1010 926 q 1004 919 1004 924 m 359 895 l 359 888 q 366 895 366 888 l 366 902 q 359 895 359 901 m 437 882 l 444 878 l 448 885 l 448 888 l 444 888 q 437 882 437 887 m 848 878 q 854 871 849 871 l 858 871 l 858 878 l 848 878 m 326 858 l 332 858 q 342 868 337 858 l 342 875 q 326 858 334 873 m 366 868 l 370 861 q 380 865 376 865 l 380 871 q 366 868 374 868 m 865 777 l 865 773 q 878 770 872 773 l 878 777 q 871 783 871 777 q 865 777 865 782 m 387 688 l 407 688 q 414 695 414 688 l 393 695 q 387 688 387 694 m 800 675 l 800 668 l 810 668 l 810 675 l 800 675 m 739 634 l 739 624 l 746 624 q 749 634 746 627 l 739 634 m 712 610 q 773 570 717 598 l 777 570 l 783 573 q 793 549 783 549 q 827 563 820 563 q 899 475 850 563 q 949 390 946 408 q 966 373 958 390 l 960 363 l 960 359 l 963 359 q 973 363 970 363 q 980 346 980 352 q 953 281 965 281 q 922 231 924 281 q 848 264 878 237 q 787 295 814 295 q 715 305 715 300 q 685 298 709 302 q 658 336 679 298 q 604 390 628 381 q 556 434 604 399 q 614 478 578 462 q 654 529 628 529 q 678 607 659 566 q 712 610 701 607 m 736 519 l 736 515 q 743 509 737 509 l 746 515 l 746 526 l 743 526 q 736 519 736 524 m 871 363 l 871 356 l 882 356 q 888 363 888 356 l 888 370 l 885 370 q 871 363 877 363 m 929 332 l 929 329 l 936 329 l 953 332 l 953 342 l 949 342 q 929 332 929 339 m 990 336 l 1058 231 l 1017 210 q 966 176 1008 210 l 963 176 q 932 241 936 241 q 973 285 932 267 q 990 336 978 336 m 770 329 l 766 322 l 773 319 l 777 326 l 770 329 m 810 315 l 810 309 l 824 309 l 824 315 q 817 322 824 322 q 810 315 810 321 m 651 319 q 688 254 656 286 q 658 237 669 254 q 624 295 650 237 l 651 319 m 939 302 l 936 295 q 943 288 937 288 q 946 298 943 292 l 939 302 m 685 285 l 709 285 q 695 261 709 267 q 678 271 684 271 l 678 278 q 685 285 680 285 m 254 281 q 295 227 262 281 q 315 207 310 227 q 342 217 342 215 q 370 197 355 217 q 285 132 333 157 q 264 105 275 110 l 261 105 q 220 125 229 116 q 173 146 193 146 l 139 132 q 81 149 81 144 q 159 268 155 257 q 224 264 213 264 q 254 281 250 281 m 726 281 l 743 281 l 760 278 l 756 254 l 766 248 q 777 278 770 278 q 831 244 810 278 l 834 244 l 831 237 l 831 234 l 838 234 l 838 241 l 848 241 q 885 217 885 223 l 902 220 l 922 220 q 926 210 922 217 l 916 193 l 919 186 l 926 190 l 929 190 q 943 173 934 190 l 943 156 q 902 125 943 137 l 858 102 l 851 105 l 838 105 l 838 102 q 844 95 839 95 q 929 132 873 95 q 943 139 943 132 q 956 136 949 136 l 956 129 q 926 109 926 114 l 929 109 q 960 122 951 122 q 983 78 983 84 l 980 54 q 983 51 983 54 q 1004 54 989 54 q 983 119 1004 77 q 970 159 979 149 q 1007 190 970 161 l 1010 190 q 1014 186 1014 190 q 1061 217 1050 198 q 1082 190 1075 217 q 1065 186 1076 186 l 1065 176 q 1082 163 1082 176 l 1095 173 l 1099 173 q 1166 58 1166 66 q 1163 54 1163 58 q 1190 27 1180 54 l 1183 24 l 1095 24 q 1058 27 1081 24 q 1048 24 1051 24 q 1044 37 1044 30 l 1027 37 l 1034 27 q 1024 24 1031 27 l 1024 27 l 1017 24 l 1004 24 l 980 27 l 980 24 q 970 27 973 27 q 977 51 977 49 l 970 54 l 963 54 q 939 24 963 24 l 895 24 q 861 31 888 24 q 854 24 861 24 l 787 24 q 780 31 780 24 l 780 41 q 807 75 806 65 l 800 75 q 770 54 800 64 q 705 156 750 54 l 705 159 l 709 166 q 668 217 688 166 q 661 224 661 217 l 661 227 l 678 224 q 712 261 688 261 q 726 281 720 281 m 722 258 q 729 251 724 251 l 732 251 q 739 258 739 251 l 739 261 l 722 258 m 699 241 l 699 237 l 702 237 q 709 244 709 237 l 709 248 l 705 248 q 699 241 699 246 m 515 241 l 526 241 l 526 231 l 519 207 l 512 207 q 502 217 507 207 q 515 241 515 237 m 715 214 l 722 214 l 726 231 l 726 234 q 715 214 715 231 m 448 220 q 509 197 509 213 l 509 190 q 424 41 427 51 l 417 41 q 400 58 414 41 l 404 71 q 393 136 404 94 q 397 139 397 136 q 380 173 384 139 q 448 220 380 195 m 719 207 l 719 193 l 732 193 q 722 207 728 207 l 719 207 m 790 200 q 777 159 785 193 l 783 156 q 797 197 794 156 l 790 200 m 298 197 q 292 176 298 187 l 295 176 l 305 197 l 298 197 m 278 156 l 285 153 l 285 163 q 278 156 278 161 m 349 129 l 356 129 q 390 44 364 129 l 387 27 l 387 -3 q 380 -10 387 -10 l 281 -10 l 268 0 l 254 -10 l 81 -10 q 71 3 77 -10 q 17 -10 53 -10 l 17 -7 l 10 -10 l 7 -10 q 0 -3 0 -10 q 78 102 71 102 q 139 88 80 102 q 180 102 152 96 q 217 78 204 102 q 268 58 261 68 q 261 17 264 54 l 268 17 q 349 129 268 90 m 1061 142 q 1068 112 1065 118 q 1092 122 1085 122 l 1092 132 q 1075 139 1092 139 l 1078 146 l 1078 153 l 1072 153 q 1061 142 1067 153 m 793 142 l 793 139 l 804 139 l 804 146 q 793 142 797 142 m 831 142 l 827 136 l 838 136 q 831 142 838 142 m 1021 139 l 1021 132 q 1027 125 1022 125 l 1038 125 l 1038 136 l 1021 139 m 787 92 l 793 88 q 800 95 800 88 l 800 98 l 793 98 q 787 92 787 97 m 1058 47 l 1058 44 q 1109 68 1067 44 l 1149 64 l 1149 71 q 1116 75 1145 71 q 1058 47 1068 61 m 851 61 l 844 41 l 848 41 q 865 51 865 45 l 865 61 l 851 61 m 400 37 l 404 31 l 404 27 l 393 27 l 393 31 q 400 37 395 37 z "},"y":{"ha":1085,"x_min":-68,"x_max":1136,"o":"m -61 1129 l -34 1129 q -31 1126 -31 1129 l -24 1129 q -14 1126 -14 1129 l 20 1129 l 85 1129 q 119 1126 101 1129 q 149 1129 132 1129 l 183 1129 q 203 1102 203 1129 q 197 1075 203 1092 q 200 1044 200 1057 l 200 1041 q 132 953 195 1013 q 71 926 71 938 l 75 892 l 71 892 q 58 922 58 897 q 64 929 64 922 l 54 936 q 44 932 47 932 l 27 960 q 31 973 31 966 q 14 987 14 973 l 17 1004 l 10 1000 l 7 1000 q -68 1126 -31 1055 l -61 1129 m 207 1129 l 315 1129 q 342 1099 342 1129 l 329 1078 l 332 1078 l 346 1088 l 353 1088 l 400 990 l 397 990 q 359 1017 378 1017 q 322 1010 346 1010 l 319 1010 q 292 1038 292 1010 l 281 1038 l 278 1021 q 305 994 278 1017 l 370 1000 q 410 956 370 989 q 451 895 410 949 q 519 756 451 891 q 515 753 515 756 l 522 753 q 604 899 527 753 q 634 905 622 899 q 695 888 652 895 q 631 919 695 898 l 614 916 l 614 919 q 726 1129 711 1129 l 756 1129 q 773 1122 773 1128 q 749 1065 749 1101 q 732 1044 749 1059 l 743 1044 l 753 1051 q 766 1014 766 1048 q 722 932 766 1005 q 702 892 711 892 l 705 868 l 705 861 q 648 838 705 854 l 617 865 l 614 865 q 648 827 625 840 q 614 756 638 756 q 593 715 600 756 q 509 644 547 689 q 471 624 479 644 q 458 621 460 621 q 454 631 454 627 l 448 631 l 448 624 q 414 512 448 615 q 437 481 428 496 l 437 461 q 390 431 401 441 l 363 454 q 336 451 345 451 q 275 526 306 451 q 305 576 275 534 l 305 590 q 298 597 305 597 q 268 536 298 581 l 264 536 q 163 712 173 682 q 132 763 142 732 q 139 783 139 774 q 115 821 133 783 l 115 814 q 129 777 121 789 l 125 777 q 64 882 64 863 q 71 899 65 899 l 68 905 l 68 922 q 81 936 68 926 l 88 932 l 95 932 l 109 943 l 112 943 l 112 936 q 78 916 89 916 l 78 909 l 81 909 q 129 953 129 922 q 159 966 147 966 l 163 966 l 163 960 l 170 960 l 170 963 q 166 977 170 970 q 210 1034 166 987 q 231 1021 214 1034 q 241 1024 234 1021 q 271 1021 259 1021 l 275 1027 q 268 1034 275 1034 l 227 1034 q 203 1068 203 1042 q 210 1112 203 1082 l 207 1129 m 821 1129 l 888 1129 l 902 1116 q 912 1129 907 1129 l 1021 1129 q 1051 1126 1033 1129 q 1075 1129 1055 1129 l 1102 1129 l 1119 1119 q 1126 1126 1120 1126 l 1136 1126 l 1136 1122 q 1085 1041 1100 1058 q 1017 953 1059 974 l 1024 953 q 1034 956 1031 956 l 1034 953 q 946 807 954 807 l 936 807 q 902 817 924 817 q 871 804 878 804 q 841 810 850 810 q 817 797 836 797 l 814 797 l 766 831 l 760 827 l 756 827 l 739 831 l 739 841 q 746 848 741 848 l 743 861 q 804 997 745 907 l 804 1000 l 827 1000 l 851 997 l 851 1004 l 848 1004 l 807 1007 l 807 1044 q 790 1078 790 1044 l 821 1129 m 865 1102 l 865 1095 l 878 1095 l 878 1102 l 865 1102 m -7 1044 q 17 1024 1 1024 l -7 1044 m 882 1004 l 882 997 q 939 956 887 997 q 956 963 950 963 l 956 966 l 946 966 l 946 963 q 885 1004 928 968 l 882 1004 m 258 980 l 258 977 q 264 943 264 968 q 271 949 271 943 l 271 953 q 264 980 271 956 l 258 980 m 966 960 l 966 953 l 983 949 l 1004 949 q 1010 956 1010 949 q 966 960 989 956 m 176 929 l 183 929 l 186 946 l 186 949 q 176 929 176 946 m 407 943 l 407 939 l 414 939 q 420 946 420 939 l 420 949 l 414 949 q 407 943 407 948 m 892 949 l 892 939 l 899 939 l 899 949 l 892 949 m 248 905 q 268 936 268 918 q 248 905 253 936 m 400 909 l 404 909 l 434 912 l 434 919 q 400 909 400 916 m 129 909 l 136 905 l 139 912 l 139 916 l 136 916 q 129 909 129 914 m 902 909 l 895 899 l 902 895 l 909 895 l 909 902 q 902 909 909 909 m 373 878 l 380 878 q 393 899 380 897 l 393 902 l 390 902 q 373 878 373 897 m 170 892 l 170 882 l 176 882 l 176 892 l 170 892 m 275 868 q 241 878 250 871 l 237 878 q 231 868 237 873 q 200 882 200 871 l 193 882 l 193 878 q 197 868 197 871 q 190 861 190 867 l 190 854 q 264 865 228 861 q 275 861 271 861 q 322 878 317 878 q 319 888 319 885 l 312 888 q 275 868 292 870 m 163 871 l 163 854 l 166 854 l 183 858 l 183 865 q 170 871 178 865 l 163 871 m 380 871 l 380 861 q 387 854 381 854 l 387 865 q 380 871 387 871 m 756 858 l 756 851 q 763 844 758 844 l 766 844 l 766 858 l 756 858 m 383 848 q 366 821 383 840 l 370 797 l 356 753 l 363 753 l 376 790 l 373 821 q 390 844 390 827 l 383 848 m 749 831 q 810 793 758 819 l 810 790 l 817 793 l 824 793 l 824 790 l 821 783 q 824 773 824 777 l 831 773 q 861 787 846 773 l 885 783 l 888 783 q 932 793 920 793 q 953 787 943 787 l 953 777 q 810 546 830 566 l 807 546 l 810 539 l 810 536 q 797 519 802 519 q 753 529 778 519 l 756 536 l 756 539 l 749 539 q 719 519 749 519 q 682 573 705 548 q 637 617 682 587 q 593 654 637 627 q 654 705 607 674 q 695 753 667 753 q 719 827 695 795 q 749 831 737 831 m 275 726 l 271 726 q 268 729 268 726 q 251 715 252 722 l 251 705 q 261 702 254 705 q 312 726 261 718 l 309 719 l 315 719 q 319 726 315 726 q 353 702 350 702 q 390 709 390 705 q 448 678 433 709 q 471 658 471 673 l 475 658 l 475 678 q 420 712 467 678 l 407 712 q 359 709 389 712 q 322 729 353 709 q 332 739 322 739 l 332 749 q 275 726 281 726 m 753 743 l 753 732 l 763 732 l 763 743 l 753 743 m 214 722 q 217 719 217 722 q 241 722 221 722 q 234 729 241 729 l 220 729 q 214 722 214 728 m 183 715 l 190 715 q 200 719 197 719 l 200 722 l 190 722 q 183 715 183 721 m 563 648 q 651 543 648 573 q 583 512 627 524 q 532 485 575 498 q 502 448 508 448 l 492 448 q 454 475 454 450 l 458 475 l 471 471 q 437 512 452 498 l 437 515 l 461 543 l 461 566 q 509 621 475 621 q 522 634 509 634 q 536 631 528 631 q 563 648 554 648 m 302 621 l 302 607 q 309 600 303 600 l 309 621 l 302 621 m 665 539 q 688 488 668 539 q 709 478 697 488 l 719 478 q 736 502 736 487 l 766 502 l 766 495 q 746 481 760 481 l 749 465 q 719 387 719 439 l 702 383 q 699 387 702 387 l 699 380 q 722 366 717 380 l 722 356 q 719 346 722 346 l 722 329 l 722 275 q 719 271 722 271 l 722 264 l 722 261 q 665 224 722 239 l 678 210 l 675 193 l 678 180 q 610 132 656 132 q 583 166 590 165 q 549 153 574 166 q 526 186 541 153 q 478 207 512 186 l 522 295 q 546 332 546 318 l 546 370 l 543 390 l 546 397 q 519 437 534 429 q 539 461 524 453 l 543 461 q 549 448 543 448 q 556 468 556 458 l 556 478 q 607 512 571 478 q 665 539 653 512 m 695 505 l 729 505 l 729 502 q 715 485 720 485 l 712 485 q 695 498 695 494 l 695 505 m 607 475 l 607 471 l 610 471 q 621 481 615 471 l 614 481 q 607 475 607 480 m 570 478 l 566 465 l 573 465 q 580 471 580 465 l 580 478 l 570 478 m 675 461 l 668 465 q 654 461 662 461 l 654 451 l 675 454 l 692 444 q 705 468 705 450 l 705 475 l 702 475 q 675 461 690 475 m 719 468 l 719 461 l 729 461 l 729 468 l 719 468 m 637 458 l 637 454 l 651 454 l 651 465 l 644 465 q 637 458 637 463 m 468 441 q 539 407 515 441 q 505 292 539 314 q 478 234 487 277 q 471 214 471 234 l 461 214 q 417 281 461 224 l 420 288 q 400 380 420 334 l 400 404 q 468 441 420 429 m 346 437 l 359 437 q 387 420 378 437 l 387 417 q 359 390 359 397 l 349 390 l 349 404 q 339 427 349 415 l 339 431 q 346 437 340 437 m 692 410 l 692 407 l 699 407 l 699 417 q 692 410 692 416 m 634 404 l 641 400 l 644 407 l 644 410 l 641 410 q 634 404 634 409 m 376 387 q 407 298 400 332 q 404 271 404 280 l 407 248 q 400 227 400 237 l 400 217 l 404 217 q 410 261 410 248 l 414 261 q 444 210 444 223 l 444 207 l 427 207 l 407 203 q 397 207 400 207 l 370 180 l 373 180 q 387 183 379 183 q 356 125 387 140 q 349 153 349 138 l 349 156 q 356 173 350 173 q 349 193 349 184 q 353 200 349 200 l 349 217 l 349 359 q 376 387 351 387 m 654 373 l 651 366 q 658 359 658 365 q 654 349 654 353 l 644 349 q 610 342 621 342 l 610 339 q 621 329 610 334 q 671 349 665 329 q 682 359 676 349 l 682 363 q 654 373 682 370 m 607 356 l 607 353 l 614 353 l 614 363 q 607 356 607 361 m 668 309 q 675 302 669 302 l 688 302 l 688 309 q 682 315 688 315 l 675 315 q 668 309 668 314 m 719 214 l 722 207 l 722 176 l 719 159 q 709 180 709 159 l 702 180 l 702 173 l 699 149 l 702 149 l 712 156 l 719 156 l 722 142 q 719 115 722 134 q 722 81 722 98 q 705 68 719 68 l 705 61 q 722 51 722 60 l 722 10 l 715 -20 l 709 -20 q 705 -17 705 -20 q 695 -20 699 -20 q 654 -17 678 -20 q 593 -20 630 -20 l 590 -20 q 583 -14 583 -20 q 597 7 591 7 q 637 -7 629 0 l 644 -7 q 658 3 644 3 q 705 -10 658 -6 l 709 -10 l 709 -7 q 576 44 576 24 l 559 44 q 580 7 559 29 l 580 0 q 563 -20 568 -20 l 498 -20 q 458 -17 475 -20 q 417 -20 440 -20 l 359 -20 q 349 -10 355 -20 l 349 68 q 387 105 349 83 l 407 95 l 407 98 q 404 109 404 105 q 424 115 414 115 l 424 119 l 414 119 l 393 115 l 393 119 q 437 170 393 170 l 451 170 q 454 166 454 170 l 461 170 l 471 170 q 515 139 471 149 q 529 119 519 139 l 526 119 l 512 129 q 509 125 512 125 q 543 102 509 113 q 563 85 543 98 l 563 81 l 559 81 q 549 85 553 85 l 549 75 q 559 54 551 54 l 573 54 q 580 61 580 54 q 556 115 570 96 l 556 122 q 573 132 562 122 l 580 132 q 610 88 610 108 q 597 68 610 85 l 604 68 q 658 112 623 112 q 661 109 658 109 q 658 98 658 102 l 654 98 q 651 102 651 98 q 631 85 637 97 l 637 81 q 675 95 637 94 l 671 102 l 671 109 q 688 153 688 150 l 688 159 l 682 159 l 682 180 q 719 214 682 182 m 709 139 l 702 129 q 709 122 703 122 l 715 136 l 709 139 m 678 112 l 678 109 q 692 95 678 103 l 695 95 l 695 102 q 678 112 695 108 m 410 109 l 410 105 q 414 95 414 98 l 417 95 l 417 109 l 410 109 m 624 85 l 624 78 l 627 78 q 634 85 634 78 l 634 92 l 631 92 q 624 85 624 90 z "},"z":{"ha":1017,"x_min":0,"x_max":1034,"o":"m 10 1133 l 105 1133 q 136 1119 115 1133 q 146 1133 138 1133 l 197 1133 q 224 1129 220 1133 q 261 1133 247 1133 l 465 1133 q 471 1126 471 1131 l 468 1109 q 505 1051 492 1067 q 451 963 451 982 q 322 1031 418 972 l 322 1027 q 448 953 324 1019 l 448 949 q 407 888 439 918 q 393 865 399 865 l 37 865 l 37 875 l 44 875 q 34 885 44 878 q 14 878 23 878 q 10 882 14 882 q 7 878 10 878 l 0 888 l 0 1058 l 3 1078 q 0 1095 0 1084 l 0 1122 q 10 1133 0 1127 m 522 1133 l 543 1133 l 543 1126 l 526 1122 l 522 1122 q 515 1129 515 1122 l 522 1133 m 627 1133 l 780 1133 q 824 1129 802 1133 q 861 1133 836 1133 l 882 1133 q 922 1072 891 1128 q 909 1038 909 1050 q 966 997 942 1028 l 970 997 l 970 1027 q 990 1017 990 1024 l 990 1007 q 888 932 985 983 q 848 912 885 925 q 827 851 836 851 q 773 831 813 838 q 699 790 773 812 q 665 800 681 800 q 631 793 656 800 q 607 797 617 797 l 607 793 q 583 804 590 804 l 553 800 q 515 831 553 805 l 515 834 q 532 868 532 854 l 536 868 q 580 834 567 844 l 583 834 q 512 895 555 880 q 481 916 502 895 q 529 1010 481 956 q 553 1038 529 1028 l 553 1044 q 522 1095 522 1074 q 627 1133 574 1119 m 912 1133 l 977 1133 q 997 1122 989 1133 q 994 1119 997 1119 l 997 1078 l 997 1051 q 960 1031 997 1031 l 953 1031 q 926 1041 934 1041 l 926 1044 l 936 1078 l 936 1082 q 905 1126 926 1090 q 912 1133 907 1133 m 241 1119 l 241 1102 q 200 1105 235 1102 q 156 1092 178 1092 l 156 1082 l 180 1082 q 210 1092 193 1092 l 227 1092 q 271 1058 258 1058 q 281 1061 275 1058 q 322 1034 311 1034 l 322 1038 l 329 1034 l 339 1034 l 339 1038 q 332 1044 339 1044 l 329 1044 q 326 1041 326 1044 q 281 1068 319 1041 q 244 1092 253 1068 q 248 1119 244 1095 l 241 1119 m 119 1065 l 119 1055 l 136 1055 l 136 1065 l 119 1065 m 854 1004 q 861 997 856 997 q 875 1007 875 1002 l 875 1014 q 854 1004 854 1012 m 119 987 l 119 977 l 122 977 q 129 983 129 977 l 122 987 l 119 987 m 990 977 q 997 970 997 975 l 997 878 q 953 824 997 858 l 946 848 l 963 858 l 956 871 q 983 912 968 912 l 983 922 q 963 939 963 922 l 963 949 q 990 977 981 949 m 956 946 l 956 943 q 960 912 956 930 l 936 851 q 932 848 932 851 q 939 841 934 841 q 936 831 936 834 l 919 834 l 895 831 q 878 834 890 834 l 878 831 q 841 851 876 831 q 912 926 841 907 q 956 946 938 946 m 465 892 l 475 892 q 526 871 503 875 l 526 865 l 444 865 l 444 871 q 465 892 444 875 m 844 831 l 861 831 q 878 817 878 819 q 922 824 886 820 q 932 821 929 821 q 946 824 939 824 l 949 817 q 848 705 949 814 q 807 661 827 676 l 800 661 q 793 675 800 675 l 790 675 q 783 668 783 673 q 797 651 787 651 l 797 648 q 736 593 752 598 q 699 543 736 570 q 692 576 692 558 q 709 580 697 580 l 709 587 q 688 597 688 587 l 688 614 q 715 644 688 633 l 732 644 l 732 651 l 726 651 q 699 637 701 647 q 685 658 685 641 q 688 675 688 663 q 678 671 682 671 l 668 688 q 624 661 624 677 q 641 648 636 661 q 665 661 665 648 q 675 658 671 658 l 675 641 q 678 593 675 623 q 675 583 675 587 q 685 543 685 555 q 553 488 589 488 l 549 488 q 481 553 529 524 l 475 553 l 461 543 l 448 553 q 451 563 451 559 q 404 614 449 577 l 404 617 q 407 621 404 621 q 373 678 407 661 l 373 682 q 502 824 398 703 l 549 787 q 587 773 578 787 l 604 777 l 610 777 q 624 773 618 777 l 665 787 l 671 787 l 678 783 q 661 770 677 774 l 665 746 l 665 743 l 654 709 q 661 702 656 702 q 682 749 677 722 q 739 780 699 780 q 773 800 739 787 q 844 831 781 817 m 878 773 q 882 770 882 773 q 909 783 909 779 q 895 790 901 790 q 878 773 886 790 m 532 756 l 532 753 l 539 753 q 549 763 544 753 l 539 763 q 532 756 532 762 m 773 743 l 780 743 q 790 753 785 743 q 787 756 787 753 q 773 743 776 753 m 831 753 l 831 746 q 838 739 832 739 q 848 749 842 739 q 841 756 848 756 q 831 753 834 753 m 549 743 l 549 732 l 566 736 l 566 739 l 549 743 m 746 715 l 746 709 l 749 709 q 763 722 755 709 l 763 729 l 760 729 q 746 715 754 729 m 800 726 l 800 719 q 814 722 806 722 l 814 726 l 800 726 m 621 705 l 627 702 q 637 712 632 702 l 637 715 l 631 715 q 621 705 626 715 m 705 712 l 705 709 l 719 709 l 719 712 l 705 712 m 543 702 l 543 695 l 553 695 l 553 702 l 543 702 m 373 627 l 376 627 q 404 563 394 627 q 465 495 442 538 l 471 492 l 492 495 q 543 434 543 468 l 546 434 l 556 441 l 559 441 l 559 424 q 566 417 561 417 l 570 417 q 627 458 570 448 l 692 495 l 699 495 l 699 492 q 559 339 566 342 q 546 342 553 342 l 553 332 q 546 326 553 326 l 543 326 l 543 342 l 536 353 l 536 373 q 543 380 537 380 q 529 397 536 395 l 529 370 l 526 370 l 526 342 q 539 312 539 324 q 471 231 471 249 l 543 231 q 559 227 554 231 l 580 231 l 661 231 q 668 224 668 229 q 637 166 656 211 q 587 115 598 137 q 573 112 581 112 l 573 109 l 576 102 q 563 95 563 99 q 502 109 547 95 q 485 98 491 98 l 485 95 q 519 88 513 95 l 556 88 q 566 78 561 88 l 563 71 l 570 68 l 576 92 l 583 92 q 641 58 592 92 l 644 58 l 641 24 l 641 20 l 648 20 l 648 37 q 709 68 648 54 l 722 61 q 760 64 745 64 l 763 64 l 763 71 l 760 71 q 692 75 742 71 q 648 58 659 58 q 593 102 648 64 l 593 105 q 661 186 661 173 q 688 231 661 200 l 736 231 q 760 220 747 231 q 777 231 760 231 l 831 231 q 844 227 838 231 q 858 231 850 231 q 875 210 871 231 q 841 173 865 173 q 844 163 844 166 q 831 142 844 159 l 831 139 l 834 139 q 892 227 881 181 l 899 231 q 916 224 909 224 q 936 231 926 231 l 970 231 q 983 227 977 231 q 997 231 989 231 l 1024 231 q 1034 186 1034 231 l 1034 149 q 1031 119 1034 137 q 1034 102 1034 113 l 1031 102 l 1034 95 l 1034 64 q 1031 61 1034 61 l 1034 54 l 1034 47 q 1031 44 1034 44 l 1034 37 l 1034 27 q 980 10 1025 10 l 966 10 q 963 7 963 10 l 949 14 q 895 -34 949 -8 q 892 -31 892 -34 l 868 -34 l 841 -34 q 834 -27 834 -34 l 841 -14 q 831 -10 834 -10 l 831 14 l 827 20 l 831 20 q 807 44 830 31 l 797 44 l 797 34 q 827 -24 827 34 l 827 -27 q 824 -31 824 -27 l 817 -27 l 783 -31 l 783 -27 l 777 -31 l 743 -31 q 719 -20 730 -20 q 699 -34 715 -34 l 637 -34 l 627 -27 q 607 -34 616 -34 l 583 -34 q 566 -27 566 -34 q 546 -34 555 -34 l 431 -34 q 400 -27 422 -34 q 373 -34 388 -34 l 319 -34 q 285 -31 302 -34 q 254 -34 272 -34 q 248 -31 248 -34 l 224 -34 l 78 -34 q 75 -31 75 -34 l 68 -34 l 44 -34 l 37 -31 l 44 3 l 54 3 q 68 -20 61 -20 l 71 -20 q 44 54 61 -10 q 75 166 44 87 q 125 197 98 174 q 176 170 132 197 q 254 153 183 170 q 281 170 263 170 l 281 173 l 275 173 q 248 163 258 163 l 244 163 q 241 166 241 163 l 234 163 l 231 163 q 241 170 231 170 l 241 176 l 227 176 l 214 166 l 207 170 q 220 180 207 180 q 210 190 220 184 l 197 180 q 190 186 190 180 l 193 193 l 183 193 q 180 190 180 193 q 149 275 165 190 q 125 322 140 275 l 125 336 l 139 353 q 132 359 132 353 q 373 627 133 371 m 760 637 l 760 631 l 763 631 q 770 637 770 631 l 760 637 m 546 614 l 546 604 l 556 604 l 556 614 l 546 614 m 617 570 l 617 559 l 621 559 q 627 566 627 559 l 627 570 l 617 570 m 593 536 l 600 532 l 600 543 q 593 536 593 541 m 495 444 l 495 441 l 519 441 l 519 458 q 495 444 499 444 m 332 248 q 326 254 332 254 l 315 254 l 339 237 q 383 275 351 265 q 410 319 390 275 q 441 393 433 319 q 492 441 446 415 l 492 444 q 427 380 427 427 q 387 302 427 344 q 356 275 387 281 q 332 248 336 248 m 576 434 l 576 417 l 580 417 l 580 434 l 576 434 m 173 363 l 173 353 l 176 353 q 186 363 181 353 l 186 366 l 183 366 q 173 363 176 363 m 85 359 l 92 359 l 92 349 q 122 281 92 330 l 122 271 q 85 231 111 231 l 44 203 l 37 183 q 41 173 41 176 q 14 88 31 170 l 3 88 l 0 105 l 0 183 l 7 193 q 0 220 0 205 l 0 254 q 85 359 0 275 m 990 248 l 990 241 l 1004 241 l 1004 248 l 990 248 m 217 234 l 220 234 q 241 241 230 234 l 264 237 l 271 241 l 285 234 q 312 248 305 248 l 312 251 l 281 244 l 241 251 q 217 234 219 242 m 136 251 l 139 244 l 139 237 l 129 237 l 129 244 q 136 251 130 251 m 939 234 l 939 227 l 953 227 l 953 234 l 939 234 m 763 231 l 763 224 q 804 125 804 156 q 770 102 804 111 l 770 95 q 783 75 780 95 q 787 71 787 75 q 797 75 793 75 q 790 92 797 92 q 814 136 814 117 q 807 142 807 136 q 814 159 808 159 l 766 231 l 763 231 m 780 224 l 793 224 l 793 231 l 787 231 q 780 224 780 229 m 932 214 q 943 190 936 190 l 946 190 l 953 193 q 943 220 949 220 l 939 220 q 932 214 932 219 m 298 214 q 302 203 302 207 l 309 203 q 342 217 342 213 q 326 224 326 217 q 298 214 311 224 m 281 217 l 281 210 l 292 210 q 285 217 292 217 l 281 217 m 492 200 l 492 193 l 502 193 l 502 200 l 492 200 m 271 183 q 292 176 282 176 l 302 176 l 302 180 q 285 197 296 197 q 271 183 274 193 m 356 190 l 356 183 l 380 183 l 380 190 l 373 186 l 356 190 m 529 176 l 529 170 l 543 166 q 529 176 543 172 m 427 159 l 424 153 l 448 149 q 427 159 448 156 m 963 153 q 953 136 963 144 l 960 132 l 977 132 q 983 139 983 132 q 966 146 966 139 l 970 153 l 963 153 m 227 142 l 224 125 q 231 132 231 125 l 231 142 l 227 142 m 417 129 l 417 125 l 441 122 l 441 129 l 417 129 m 800 85 l 807 81 l 814 81 l 817 95 l 810 95 q 800 85 806 95 m 380 98 l 380 95 q 387 78 380 78 q 383 75 387 75 q 390 27 387 33 q 387 14 387 21 l 387 10 l 397 10 l 400 24 q 393 88 393 64 l 393 92 q 387 98 393 98 l 380 98 m 580 92 q 587 85 581 85 l 590 85 l 590 92 l 580 92 m 14 85 q 27 58 22 85 q 7 3 14 5 q 0 10 0 3 l 0 71 q 14 85 0 77 m 949 68 l 949 54 l 966 54 l 966 61 q 953 68 961 61 l 949 68 m 895 31 l 902 27 q 939 41 913 37 l 939 44 q 929 61 929 55 l 926 61 q 905 44 915 44 l 895 31 m 841 51 q 848 44 842 44 l 858 44 l 858 54 l 841 51 m 254 58 q 244 34 254 34 l 244 27 q 261 54 261 33 l 261 58 l 254 58 m 1031 34 l 1034 17 l 1034 3 q 1024 -7 1034 -1 l 997 -7 q 963 0 990 -7 q 932 -7 941 -7 l 929 0 q 997 31 960 31 l 1031 34 m 556 20 l 556 17 q 559 7 559 10 l 563 7 l 563 20 l 556 20 z "}},"familyName":"Crackvetica","ascender":1164,"descender":-283,"underlinePosition":-147,"underlineThickness":102,"boundingBox":{"yMin":-156,"xMin":-136,"yMax":1163,"xMax":1431},"resolution":1000,"original_font_information":{"format":0,"copyright":"Typeface © Xerographer Foundry. 2012. All Rights Reserved","fontFamily":"Crackvetica","fontSubfamily":"Regular","uniqueID":"Crackvetica:Version 1.00","fullName":"Crackvetica","version":"Version 1.00 April 2, 2012, initial release","postScriptName":"Crackvetica","manufacturer":"xerographer.com","designer":"max infeld","description":"made in ojai","manufacturerURL":"xerographer.com","designerURL":"facebook.com/infeld","licence":"mailto:maxinfeld@hotmail.com","licenceURL":"mailto:maxinfeld@hotmail.com","sampleText":"yum applepie so good 123"},"cssFontWeight":"normal","cssFontStyle":"normal"}'),Cs=(new class extends Oq{constructor(l){super(l)}load(l,t,e,n){const i=this,r=new Bq(this.manager);r.setPath(this.path),r.setRequestHeader(this.requestHeader),r.setWithCredentials(this.withCredentials),r.load(l,(function(l){const e=i.parse(JSON.parse(l));t&&t(e)}),e,n)}parse(l){return new ys(l)}}).parse(Rs),Ps=new class extends Oq{constructor(l){super(l)}load(l,t,e,n){const i=new ot,r=new Vq(this.manager);return r.setCrossOrigin(this.crossOrigin),r.setPath(this.path),r.load(l,(function(l){i.image=l,i.needsUpdate=!0,void 0!==t&&t(i)}),e,n),i}},Ls=Ps.load(Ss),Us=Ps.load(Es),Ns=Ps.load(Ts),Is=Ps.load(bs),Ds=Ps.load(ws),Os=Ps.load(As);class Fs extends vq{constructor(l,t={}){const e=t.font;if(void 0===e)super();else{const n=e.generateShapes(l,t.size);void 0===t.depth&&void 0!==t.height&&console.warn("THREE.TextGeometry: .height is now depreciated. Please use .depth instead"),t.depth=void 0!==t.depth?t.depth:void 0!==t.height?t.height:50,void 0===t.bevelThickness&&(t.bevelThickness=10),void 0===t.bevelSize&&(t.bevelSize=8),void 0===t.bevelEnabled&&(t.bevelEnabled=!1),super(n,t)}this.type="TextGeometry"}}const zs=e.p+"97e3cb752264069ab7e1.wav",Bs=new class{constructor(l=!0){this.autoStart=l,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=Kq(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let l=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const t=Kq();l=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=l}return l}};(()=>{if(xs.test(navigator.userAgent))throw document.getElementById("mobile-message").style.display="block",document.querySelector("#bg").style.display="none",new Error("Mobile viewing error")})();const Vs=()=>window.innerWidth/window.innerHeight,Hs=new wa,ks=Vs(),Gs=new Cn(75,ks,.1,1e3),Ws=new class{constructor(t={}){const{canvas:e=Yl(),context:n=null,depth:i=!0,stencil:r=!1,alpha:a=!1,antialias:q=!1,premultipliedAlpha:s=!0,preserveDrawingBuffer:o=!1,powerPreference:c="default",failIfMajorPerformanceCaveat:m=!1}=t;let h;if(this.isWebGLRenderer=!0,null!==n){if("undefined"!=typeof WebGLRenderingContext&&n instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");h=n.getContextAttributes().alpha}else h=a;const u=new Uint32Array(4),d=new Int32Array(4);let p=null,f=null;const g=[],_=[];this.domElement=e,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=hl,this._useLegacyLights=!1,this.toneMapping=R,this.toneMappingExposure=1;const v=this;let x=!1,y=0,M=0,S=null,E=-1,T=null;const b=new ct,w=new ct;let A=null;const C=new Ie(0);let P=0,L=e.width,U=e.height,N=1,I=null,D=null;const O=new ct(0,0,L,U),F=new ct(0,0,L,U);let z=!1;const B=new Vn;let V=!1,H=!1;const k=new Xt,G=new ft,W={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function X(){return null===S?N:1}let j,K,ll,tl,el,nl,il,rl,al,ql,sl,ol,cl,ml,dl,pl,fl,gl,_l,vl,xl,yl,Ml,Sl,El=n;function Tl(l,t){return e.getContext(l,t)}try{const t={alpha:!0,depth:i,stencil:r,antialias:q,premultipliedAlpha:s,preserveDrawingBuffer:o,powerPreference:c,failIfMajorPerformanceCaveat:m};if("setAttribute"in e&&e.setAttribute("data-engine",`three.js r${l}`),e.addEventListener("webglcontextlost",Al,!1),e.addEventListener("webglcontextrestored",Rl,!1),e.addEventListener("webglcontextcreationerror",Cl,!1),null===El){const l="webgl2";if(El=Tl(l,t),null===El)throw Tl(l)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(l){throw console.error("THREE.WebGLRenderer: "+l.message),l}function bl(){j=new xi(El),j.init(),yl=new fa(El,j),K=new li(El,j,t,yl),ll=new da(El),tl=new Si(El),el=new la,nl=new pa(El,j,ll,el,K,yl,tl),il=new ei(v),rl=new vi(v),al=new kn(El),Ml=new $n(El,al),ql=new yi(El,al,tl,Ml),sl=new Ti(El,ql,al,tl),_l=new Ei(El,K,nl),pl=new ti(el),ol=new Qr(v,il,rl,j,K,Ml,pl),cl=new Ta(v,el),ml=new ia,dl=new ca(j),gl=new Kn(v,il,rl,ll,sl,h,s),fl=new ua(v,sl,K),Sl=new ba(El,tl,K,ll),vl=new Qn(El,j,tl),xl=new Mi(El,j,tl),tl.programs=ol.programs,v.capabilities=K,v.extensions=j,v.properties=el,v.renderLists=ml,v.shadowMap=fl,v.state=ll,v.info=tl}bl();const wl=new Ma(v,El);function Al(l){l.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),x=!0}function Rl(){console.log("THREE.WebGLRenderer: Context Restored."),x=!1;const l=tl.autoReset,t=fl.enabled,e=fl.autoUpdate,n=fl.needsUpdate,i=fl.type;bl(),tl.autoReset=l,fl.enabled=t,fl.autoUpdate=e,fl.needsUpdate=n,fl.type=i}function Cl(l){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",l.statusMessage)}function Pl(l){const t=l.target;t.removeEventListener("dispose",Pl),function(l){(function(l){const t=el.get(l).programs;void 0!==t&&(t.forEach((function(l){ol.releaseProgram(l)})),l.isShaderMaterial&&ol.releaseShaderCache(l))})(l),el.remove(l)}(t)}function Ll(l,t,e){!0===l.transparent&&2===l.side&&!1===l.forceSinglePass?(l.side=1,l.needsUpdate=!0,Hl(l,t,e),l.side=0,l.needsUpdate=!0,Hl(l,t,e),l.side=2):Hl(l,t,e)}this.xr=wl,this.getContext=function(){return El},this.getContextAttributes=function(){return El.getContextAttributes()},this.forceContextLoss=function(){const l=j.get("WEBGL_lose_context");l&&l.loseContext()},this.forceContextRestore=function(){const l=j.get("WEBGL_lose_context");l&&l.restoreContext()},this.getPixelRatio=function(){return N},this.setPixelRatio=function(l){void 0!==l&&(N=l,this.setSize(L,U,!1))},this.getSize=function(l){return l.set(L,U)},this.setSize=function(l,t,n=!0){wl.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(L=l,U=t,e.width=Math.floor(l*N),e.height=Math.floor(t*N),!0===n&&(e.style.width=l+"px",e.style.height=t+"px"),this.setViewport(0,0,l,t))},this.getDrawingBufferSize=function(l){return l.set(L*N,U*N).floor()},this.setDrawingBufferSize=function(l,t,n){L=l,U=t,N=n,e.width=Math.floor(l*n),e.height=Math.floor(t*n),this.setViewport(0,0,l,t)},this.getCurrentViewport=function(l){return l.copy(b)},this.getViewport=function(l){return l.copy(O)},this.setViewport=function(l,t,e,n){l.isVector4?O.set(l.x,l.y,l.z,l.w):O.set(l,t,e,n),ll.viewport(b.copy(O).multiplyScalar(N).round())},this.getScissor=function(l){return l.copy(F)},this.setScissor=function(l,t,e,n){l.isVector4?F.set(l.x,l.y,l.z,l.w):F.set(l,t,e,n),ll.scissor(w.copy(F).multiplyScalar(N).round())},this.getScissorTest=function(){return z},this.setScissorTest=function(l){ll.setScissorTest(z=l)},this.setOpaqueSort=function(l){I=l},this.setTransparentSort=function(l){D=l},this.getClearColor=function(l){return l.copy(gl.getClearColor())},this.setClearColor=function(){gl.setClearColor.apply(gl,arguments)},this.getClearAlpha=function(){return gl.getClearAlpha()},this.setClearAlpha=function(){gl.setClearAlpha.apply(gl,arguments)},this.clear=function(l=!0,t=!0,e=!0){let n=0;if(l){let l=!1;if(null!==S){const t=S.texture.format;l=1033===t||1031===t||1029===t}if(l){const l=S.texture.type,t=l===J||l===Z||1012===l||l===Q||1017===l||1018===l,e=gl.getClearColor(),n=gl.getClearAlpha(),i=e.r,r=e.g,a=e.b;t?(u[0]=i,u[1]=r,u[2]=a,u[3]=n,El.clearBufferuiv(El.COLOR,0,u)):(d[0]=i,d[1]=r,d[2]=a,d[3]=n,El.clearBufferiv(El.COLOR,0,d))}else n|=El.COLOR_BUFFER_BIT}t&&(n|=El.DEPTH_BUFFER_BIT),e&&(n|=El.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),El.clear(n)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",Al,!1),e.removeEventListener("webglcontextrestored",Rl,!1),e.removeEventListener("webglcontextcreationerror",Cl,!1),ml.dispose(),dl.dispose(),el.dispose(),il.dispose(),rl.dispose(),sl.dispose(),Ml.dispose(),Sl.dispose(),ol.dispose(),wl.dispose(),wl.removeEventListener("sessionstart",Nl),wl.removeEventListener("sessionend",Il),Dl.stop()},this.renderBufferDirect=function(l,t,e,n,i,r){null===t&&(t=W);const a=i.isMesh&&i.matrixWorld.determinant()<0,q=function(l,t,e,n,i){!0!==t.isScene&&(t=W),nl.resetTextureUnits();const r=t.fog,a=n.isMeshStandardMaterial?t.environment:null,q=null===S?v.outputColorSpace:!0===S.isXRRenderTarget?S.texture.colorSpace:ul,s=(n.isMeshStandardMaterial?rl:il).get(n.envMap||a),o=!0===n.vertexColors&&!!e.attributes.color&&4===e.attributes.color.itemSize,c=!!e.attributes.tangent&&(!!n.normalMap||n.anisotropy>0),m=!!e.morphAttributes.position,h=!!e.morphAttributes.normal,u=!!e.morphAttributes.color;let d=R;n.toneMapped&&(null!==S&&!0!==S.isXRRenderTarget||(d=v.toneMapping));const p=e.morphAttributes.position||e.morphAttributes.normal||e.morphAttributes.color,g=void 0!==p?p.length:0,_=el.get(n),x=f.state.lights;if(!0===V&&(!0===H||l!==T)){const t=l===T&&n.id===E;pl.setState(n,l,t)}let y=!1;n.version===_.__version?_.needsLights&&_.lightsStateVersion!==x.state.version||_.outputColorSpace!==q||i.isBatchedMesh&&!1===_.batching?y=!0:i.isBatchedMesh||!0!==_.batching?i.isInstancedMesh&&!1===_.instancing?y=!0:i.isInstancedMesh||!0!==_.instancing?i.isSkinnedMesh&&!1===_.skinning?y=!0:i.isSkinnedMesh||!0!==_.skinning?i.isInstancedMesh&&!0===_.instancingColor&&null===i.instanceColor||i.isInstancedMesh&&!1===_.instancingColor&&null!==i.instanceColor||i.isInstancedMesh&&!0===_.instancingMorph&&null===i.morphTexture||i.isInstancedMesh&&!1===_.instancingMorph&&null!==i.morphTexture||_.envMap!==s||!0===n.fog&&_.fog!==r?y=!0:void 0===_.numClippingPlanes||_.numClippingPlanes===pl.numPlanes&&_.numIntersection===pl.numIntersection?(_.vertexAlphas!==o||_.vertexTangents!==c||_.morphTargets!==m||_.morphNormals!==h||_.morphColors!==u||_.toneMapping!==d||_.morphTargetsCount!==g)&&(y=!0):y=!0:y=!0:y=!0:y=!0:(y=!0,_.__version=n.version);let M=_.currentProgram;!0===y&&(M=Hl(n,t,i));let b=!1,w=!1,A=!1;const C=M.getUniforms(),P=_.uniforms;if(ll.useProgram(M.program)&&(b=!0,w=!0,A=!0),n.id!==E&&(E=n.id,w=!0),b||T!==l){C.setValue(El,"projectionMatrix",l.projectionMatrix),C.setValue(El,"viewMatrix",l.matrixWorldInverse);const t=C.map.cameraPosition;void 0!==t&&t.setValue(El,G.setFromMatrixPosition(l.matrixWorld)),K.logarithmicDepthBuffer&&C.setValue(El,"logDepthBufFC",2/(Math.log(l.far+1)/Math.LN2)),(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial)&&C.setValue(El,"isOrthographic",!0===l.isOrthographicCamera),T!==l&&(T=l,w=!0,A=!0)}if(i.isSkinnedMesh){C.setOptional(El,i,"bindMatrix"),C.setOptional(El,i,"bindMatrixInverse");const l=i.skeleton;l&&(null===l.boneTexture&&l.computeBoneTexture(),C.setValue(El,"boneTexture",l.boneTexture,nl))}i.isBatchedMesh&&(C.setOptional(El,i,"batchingTexture"),C.setValue(El,"batchingTexture",i._matricesTexture,nl));const L=e.morphAttributes;if(void 0===L.position&&void 0===L.normal&&void 0===L.color||_l.update(i,e,M),(w||_.receiveShadow!==i.receiveShadow)&&(_.receiveShadow=i.receiveShadow,C.setValue(El,"receiveShadow",i.receiveShadow)),n.isMeshGouraudMaterial&&null!==n.envMap&&(P.envMap.value=s,P.flipEnvMap.value=s.isCubeTexture&&!1===s.isRenderTargetTexture?-1:1),n.isMeshStandardMaterial&&null===n.envMap&&null!==t.environment&&(P.envMapIntensity.value=t.environmentIntensity),w&&(C.setValue(El,"toneMappingExposure",v.toneMappingExposure),_.needsLights&&function(l,t){l.ambientLightColor.needsUpdate=t,l.lightProbe.needsUpdate=t,l.directionalLights.needsUpdate=t,l.directionalLightShadows.needsUpdate=t,l.pointLights.needsUpdate=t,l.pointLightShadows.needsUpdate=t,l.spotLights.needsUpdate=t,l.spotLightShadows.needsUpdate=t,l.rectAreaLights.needsUpdate=t,l.hemisphereLights.needsUpdate=t}(P,A),r&&!0===n.fog&&cl.refreshFogUniforms(P,r),cl.refreshMaterialUniforms(P,n,N,U,f.state.transmissionRenderTarget[l.id]),Pr.upload(El,kl(_),P,nl)),n.isShaderMaterial&&!0===n.uniformsNeedUpdate&&(Pr.upload(El,kl(_),P,nl),n.uniformsNeedUpdate=!1),n.isSpriteMaterial&&C.setValue(El,"center",i.center),C.setValue(El,"modelViewMatrix",i.modelViewMatrix),C.setValue(El,"normalMatrix",i.normalMatrix),C.setValue(El,"modelMatrix",i.matrixWorld),n.isShaderMaterial||n.isRawShaderMaterial){const l=n.uniformsGroups;for(let t=0,e=l.length;t<e;t++){const e=l[t];Sl.update(e,M),Sl.bind(e,M)}}return M}(l,t,e,n,i);ll.setMaterial(n,a);let s=e.index,o=1;if(!0===n.wireframe){if(s=ql.getWireframeAttribute(e),void 0===s)return;o=2}const c=e.drawRange,m=e.attributes.position;let h=c.start*o,u=(c.start+c.count)*o;null!==r&&(h=Math.max(h,r.start*o),u=Math.min(u,(r.start+r.count)*o)),null!==s?(h=Math.max(h,0),u=Math.min(u,s.count)):null!=m&&(h=Math.max(h,0),u=Math.min(u,m.count));const d=u-h;if(d<0||d===1/0)return;let p;Ml.setup(i,n,q,e,s);let g=vl;if(null!==s&&(p=al.get(s),g=xl,g.setIndex(p)),i.isMesh)!0===n.wireframe?(ll.setLineWidth(n.wireframeLinewidth*X()),g.setMode(El.LINES)):g.setMode(El.TRIANGLES);else if(i.isLine){let l=n.linewidth;void 0===l&&(l=1),ll.setLineWidth(l*X()),i.isLineSegments?g.setMode(El.LINES):i.isLineLoop?g.setMode(El.LINE_LOOP):g.setMode(El.LINE_STRIP)}else i.isPoints?g.setMode(El.POINTS):i.isSprite&&g.setMode(El.TRIANGLES);if(i.isBatchedMesh)null!==i._multiDrawInstances?g.renderMultiDrawInstances(i._multiDrawStarts,i._multiDrawCounts,i._multiDrawCount,i._multiDrawInstances):g.renderMultiDraw(i._multiDrawStarts,i._multiDrawCounts,i._multiDrawCount);else if(i.isInstancedMesh)g.renderInstances(h,d,i.count);else if(e.isInstancedBufferGeometry){const l=void 0!==e._maxInstanceCount?e._maxInstanceCount:1/0,t=Math.min(e.instanceCount,l);g.renderInstances(h,d,t)}else g.render(h,d)},this.compile=function(l,t,e=null){null===e&&(e=l),f=dl.get(e),f.init(t),_.push(f),e.traverseVisible((function(l){l.isLight&&l.layers.test(t.layers)&&(f.pushLight(l),l.castShadow&&f.pushShadow(l))})),l!==e&&l.traverseVisible((function(l){l.isLight&&l.layers.test(t.layers)&&(f.pushLight(l),l.castShadow&&f.pushShadow(l))})),f.setupLights(v._useLegacyLights);const n=new Set;return l.traverse((function(l){const t=l.material;if(t)if(Array.isArray(t))for(let i=0;i<t.length;i++){const r=t[i];Ll(r,e,l),n.add(r)}else Ll(t,e,l),n.add(t)})),_.pop(),f=null,n},this.compileAsync=function(l,t,e=null){const n=this.compile(l,t,e);return new Promise((t=>{function e(){n.forEach((function(l){el.get(l).currentProgram.isReady()&&n.delete(l)})),0!==n.size?setTimeout(e,10):t(l)}null!==j.get("KHR_parallel_shader_compile")?e():setTimeout(e,10)}))};let Ul=null;function Nl(){Dl.stop()}function Il(){Dl.start()}const Dl=new Hn;function Ol(l,t,e,n){if(!1===l.visible)return;if(l.layers.test(t.layers))if(l.isGroup)e=l.renderOrder;else if(l.isLOD)!0===l.autoUpdate&&l.update(t);else if(l.isLight)f.pushLight(l),l.castShadow&&f.pushShadow(l);else if(l.isSprite){if(!l.frustumCulled||B.intersectsSprite(l)){n&&G.setFromMatrixPosition(l.matrixWorld).applyMatrix4(k);const t=sl.update(l),i=l.material;i.visible&&p.push(l,t,i,e,G.z,null)}}else if((l.isMesh||l.isLine||l.isPoints)&&(!l.frustumCulled||B.intersectsObject(l))){const t=sl.update(l),i=l.material;if(n&&(void 0!==l.boundingSphere?(null===l.boundingSphere&&l.computeBoundingSphere(),G.copy(l.boundingSphere.center)):(null===t.boundingSphere&&t.computeBoundingSphere(),G.copy(t.boundingSphere.center)),G.applyMatrix4(l.matrixWorld).applyMatrix4(k)),Array.isArray(i)){const n=t.groups;for(let r=0,a=n.length;r<a;r++){const a=n[r],q=i[a.materialIndex];q&&q.visible&&p.push(l,t,q,e,G.z,a)}}else i.visible&&p.push(l,t,i,e,G.z,null)}const i=l.children;for(let l=0,r=i.length;l<r;l++)Ol(i[l],t,e,n)}function Fl(l,t,e,n){const i=l.opaque,r=l.transmissive,a=l.transparent;f.setupLightsView(e),!0===V&&pl.setGlobalState(v.clippingPlanes,e),n&&ll.viewport(b.copy(n)),i.length>0&&Bl(i,t,e),r.length>0&&Bl(r,t,e),a.length>0&&Bl(a,t,e),ll.buffers.depth.setTest(!0),ll.buffers.depth.setMask(!0),ll.buffers.color.setMask(!0),ll.setPolygonOffset(!1)}function zl(l,t,e,n){if(null!==(!0===e.isScene?e.overrideMaterial:null))return;void 0===f.state.transmissionRenderTarget[n.id]&&(f.state.transmissionRenderTarget[n.id]=new ht(1,1,{generateMipmaps:!0,type:j.has("EXT_color_buffer_half_float")||j.has("EXT_color_buffer_float")?$:J,minFilter:Y,samples:4,stencilBuffer:r,resolveDepthBuffer:!1,resolveStencilBuffer:!1}));const i=f.state.transmissionRenderTarget[n.id],a=n.viewport||b;i.setSize(a.z,a.w);const q=v.getRenderTarget();v.setRenderTarget(i),v.getClearColor(C),P=v.getClearAlpha(),P<1&&v.setClearColor(16777215,.5),v.clear();const s=v.toneMapping;v.toneMapping=R;const o=n.viewport;if(void 0!==n.viewport&&(n.viewport=void 0),f.setupLightsView(n),!0===V&&pl.setGlobalState(v.clippingPlanes,n),Bl(l,e,n),nl.updateMultisampleRenderTarget(i),nl.updateRenderTargetMipmap(i),!1===j.has("WEBGL_multisampled_render_to_texture")){let l=!1;for(let i=0,r=t.length;i<r;i++){const r=t[i],a=r.object,q=r.geometry,s=r.material,o=r.group;if(2===s.side&&a.layers.test(n.layers)){const t=s.side;s.side=1,s.needsUpdate=!0,Vl(a,e,n,q,s,o),s.side=t,s.needsUpdate=!0,l=!0}}!0===l&&(nl.updateMultisampleRenderTarget(i),nl.updateRenderTargetMipmap(i))}v.setRenderTarget(q),v.setClearColor(C,P),void 0!==o&&(n.viewport=o),v.toneMapping=s}function Bl(l,t,e){const n=!0===t.isScene?t.overrideMaterial:null;for(let i=0,r=l.length;i<r;i++){const r=l[i],a=r.object,q=r.geometry,s=null===n?r.material:n,o=r.group;a.layers.test(e.layers)&&Vl(a,t,e,q,s,o)}}function Vl(l,t,e,n,i,r){l.onBeforeRender(v,t,e,n,i,r),l.modelViewMatrix.multiplyMatrices(e.matrixWorldInverse,l.matrixWorld),l.normalMatrix.getNormalMatrix(l.modelViewMatrix),i.onBeforeRender(v,t,e,n,l,r),!0===i.transparent&&2===i.side&&!1===i.forceSinglePass?(i.side=1,i.needsUpdate=!0,v.renderBufferDirect(e,t,n,i,l,r),i.side=0,i.needsUpdate=!0,v.renderBufferDirect(e,t,n,i,l,r),i.side=2):v.renderBufferDirect(e,t,n,i,l,r),l.onAfterRender(v,t,e,n,i,r)}function Hl(l,t,e){!0!==t.isScene&&(t=W);const n=el.get(l),i=f.state.lights,r=f.state.shadowsArray,a=i.state.version,q=ol.getParameters(l,i.state,r,t,e),s=ol.getProgramCacheKey(q);let o=n.programs;n.environment=l.isMeshStandardMaterial?t.environment:null,n.fog=t.fog,n.envMap=(l.isMeshStandardMaterial?rl:il).get(l.envMap||n.environment),n.envMapRotation=null!==n.environment&&null===l.envMap?t.environmentRotation:l.envMapRotation,void 0===o&&(l.addEventListener("dispose",Pl),o=new Map,n.programs=o);let c=o.get(s);if(void 0!==c){if(n.currentProgram===c&&n.lightsStateVersion===a)return Gl(l,q),c}else q.uniforms=ol.getUniforms(l),l.onBuild(e,q,v),l.onBeforeCompile(q,v),c=ol.acquireProgram(q,s),o.set(s,c),n.uniforms=q.uniforms;const m=n.uniforms;return(l.isShaderMaterial||l.isRawShaderMaterial)&&!0!==l.clipping||(m.clippingPlanes=pl.uniform),Gl(l,q),n.needsLights=function(l){return l.isMeshLambertMaterial||l.isMeshToonMaterial||l.isMeshPhongMaterial||l.isMeshStandardMaterial||l.isShadowMaterial||l.isShaderMaterial&&!0===l.lights}(l),n.lightsStateVersion=a,n.needsLights&&(m.ambientLightColor.value=i.state.ambient,m.lightProbe.value=i.state.probe,m.directionalLights.value=i.state.directional,m.directionalLightShadows.value=i.state.directionalShadow,m.spotLights.value=i.state.spot,m.spotLightShadows.value=i.state.spotShadow,m.rectAreaLights.value=i.state.rectArea,m.ltc_1.value=i.state.rectAreaLTC1,m.ltc_2.value=i.state.rectAreaLTC2,m.pointLights.value=i.state.point,m.pointLightShadows.value=i.state.pointShadow,m.hemisphereLights.value=i.state.hemi,m.directionalShadowMap.value=i.state.directionalShadowMap,m.directionalShadowMatrix.value=i.state.directionalShadowMatrix,m.spotShadowMap.value=i.state.spotShadowMap,m.spotLightMatrix.value=i.state.spotLightMatrix,m.spotLightMap.value=i.state.spotLightMap,m.pointShadowMap.value=i.state.pointShadowMap,m.pointShadowMatrix.value=i.state.pointShadowMatrix),n.currentProgram=c,n.uniformsList=null,c}function kl(l){if(null===l.uniformsList){const t=l.currentProgram.getUniforms();l.uniformsList=Pr.seqWithValue(t.seq,l.uniforms)}return l.uniformsList}function Gl(l,t){const e=el.get(l);e.outputColorSpace=t.outputColorSpace,e.batching=t.batching,e.instancing=t.instancing,e.instancingColor=t.instancingColor,e.instancingMorph=t.instancingMorph,e.skinning=t.skinning,e.morphTargets=t.morphTargets,e.morphNormals=t.morphNormals,e.morphColors=t.morphColors,e.morphTargetsCount=t.morphTargetsCount,e.numClippingPlanes=t.numClippingPlanes,e.numIntersection=t.numClipIntersection,e.vertexAlphas=t.vertexAlphas,e.vertexTangents=t.vertexTangents,e.toneMapping=t.toneMapping}Dl.setAnimationLoop((function(l){Ul&&Ul(l)})),"undefined"!=typeof self&&Dl.setContext(self),this.setAnimationLoop=function(l){Ul=l,wl.setAnimationLoop(l),null===l?Dl.stop():Dl.start()},wl.addEventListener("sessionstart",Nl),wl.addEventListener("sessionend",Il),this.render=function(l,t){if(void 0!==t&&!0!==t.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===x)return;!0===l.matrixWorldAutoUpdate&&l.updateMatrixWorld(),null===t.parent&&!0===t.matrixWorldAutoUpdate&&t.updateMatrixWorld(),!0===wl.enabled&&!0===wl.isPresenting&&(!0===wl.cameraAutoUpdate&&wl.updateCamera(t),t=wl.getCamera()),!0===l.isScene&&l.onBeforeRender(v,l,t,S),f=dl.get(l,_.length),f.init(t),_.push(f),k.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),B.setFromProjectionMatrix(k),H=this.localClippingEnabled,V=pl.init(this.clippingPlanes,H),p=ml.get(l,g.length),p.init(),g.push(p),Ol(l,t,0,v.sortObjects),p.finish(),!0===v.sortObjects&&p.sort(I,D);const e=!1===wl.enabled||!1===wl.isPresenting||!1===wl.hasDepthSensing();e&&gl.addToRenderList(p,l),this.info.render.frame++,!0===V&&pl.beginShadows();const n=f.state.shadowsArray;fl.render(n,l,t),!0===V&&pl.endShadows(),!0===this.info.autoReset&&this.info.reset();const i=p.opaque,r=p.transmissive;if(f.setupLights(v._useLegacyLights),t.isArrayCamera){const n=t.cameras;if(r.length>0)for(let t=0,e=n.length;t<e;t++)zl(i,r,l,n[t]);e&&gl.render(l);for(let t=0,e=n.length;t<e;t++){const e=n[t];Fl(p,l,e,e.viewport)}}else r.length>0&&zl(i,r,l,t),e&&gl.render(l),Fl(p,l,t);null!==S&&(nl.updateMultisampleRenderTarget(S),nl.updateRenderTargetMipmap(S)),!0===l.isScene&&l.onAfterRender(v,l,t),Ml.resetDefaultState(),E=-1,T=null,_.pop(),_.length>0?(f=_[_.length-1],!0===V&&pl.setGlobalState(v.clippingPlanes,f.state.camera)):f=null,g.pop(),p=g.length>0?g[g.length-1]:null},this.getActiveCubeFace=function(){return y},this.getActiveMipmapLevel=function(){return M},this.getRenderTarget=function(){return S},this.setRenderTargetTextures=function(l,t,e){el.get(l.texture).__webglTexture=t,el.get(l.depthTexture).__webglTexture=e;const n=el.get(l);n.__hasExternalTextures=!0,n.__autoAllocateDepthBuffer=void 0===e,n.__autoAllocateDepthBuffer||!0===j.has("WEBGL_multisampled_render_to_texture")&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),n.__useRenderToTexture=!1)},this.setRenderTargetFramebuffer=function(l,t){const e=el.get(l);e.__webglFramebuffer=t,e.__useDefaultFramebuffer=void 0===t},this.setRenderTarget=function(l,t=0,e=0){S=l,y=t,M=e;let n=!0,i=null,r=!1,a=!1;if(l){const q=el.get(l);void 0!==q.__useDefaultFramebuffer?(ll.bindFramebuffer(El.FRAMEBUFFER,null),n=!1):void 0===q.__webglFramebuffer?nl.setupRenderTarget(l):q.__hasExternalTextures&&nl.rebindTextures(l,el.get(l.texture).__webglTexture,el.get(l.depthTexture).__webglTexture);const s=l.texture;(s.isData3DTexture||s.isDataArrayTexture||s.isCompressedArrayTexture)&&(a=!0);const o=el.get(l).__webglFramebuffer;l.isWebGLCubeRenderTarget?(i=Array.isArray(o[t])?o[t][e]:o[t],r=!0):i=l.samples>0&&!1===nl.useMultisampledRTT(l)?el.get(l).__webglMultisampledFramebuffer:Array.isArray(o)?o[e]:o,b.copy(l.viewport),w.copy(l.scissor),A=l.scissorTest}else b.copy(O).multiplyScalar(N).floor(),w.copy(F).multiplyScalar(N).floor(),A=z;if(ll.bindFramebuffer(El.FRAMEBUFFER,i)&&n&&ll.drawBuffers(l,i),ll.viewport(b),ll.scissor(w),ll.setScissorTest(A),r){const n=el.get(l.texture);El.framebufferTexture2D(El.FRAMEBUFFER,El.COLOR_ATTACHMENT0,El.TEXTURE_CUBE_MAP_POSITIVE_X+t,n.__webglTexture,e)}else if(a){const n=el.get(l.texture),i=t||0;El.framebufferTextureLayer(El.FRAMEBUFFER,El.COLOR_ATTACHMENT0,n.__webglTexture,e||0,i)}E=-1},this.readRenderTargetPixels=function(l,t,e,n,i,r,a){if(!l||!l.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let q=el.get(l).__webglFramebuffer;if(l.isWebGLCubeRenderTarget&&void 0!==a&&(q=q[a]),q){ll.bindFramebuffer(El.FRAMEBUFFER,q);try{const a=l.texture,q=a.format,s=a.type;if(!K.textureFormatReadable(q))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!K.textureTypeReadable(s))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");t>=0&&t<=l.width-n&&e>=0&&e<=l.height-i&&El.readPixels(t,e,n,i,yl.convert(q),yl.convert(s),r)}finally{const l=null!==S?el.get(S).__webglFramebuffer:null;ll.bindFramebuffer(El.FRAMEBUFFER,l)}}},this.copyFramebufferToTexture=function(l,t,e=0){const n=Math.pow(2,-e),i=Math.floor(t.image.width*n),r=Math.floor(t.image.height*n);nl.setTexture2D(t,0),El.copyTexSubImage2D(El.TEXTURE_2D,e,0,0,l.x,l.y,i,r),ll.unbindTexture()},this.copyTextureToTexture=function(l,t,e,n=0){const i=t.image.width,r=t.image.height,a=yl.convert(e.format),q=yl.convert(e.type);nl.setTexture2D(e,0),El.pixelStorei(El.UNPACK_FLIP_Y_WEBGL,e.flipY),El.pixelStorei(El.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha),El.pixelStorei(El.UNPACK_ALIGNMENT,e.unpackAlignment),t.isDataTexture?El.texSubImage2D(El.TEXTURE_2D,n,l.x,l.y,i,r,a,q,t.image.data):t.isCompressedTexture?El.compressedTexSubImage2D(El.TEXTURE_2D,n,l.x,l.y,t.mipmaps[0].width,t.mipmaps[0].height,a,t.mipmaps[0].data):El.texSubImage2D(El.TEXTURE_2D,n,l.x,l.y,a,q,t.image),0===n&&e.generateMipmaps&&El.generateMipmap(El.TEXTURE_2D),ll.unbindTexture()},this.copyTextureToTexture3D=function(l,t,e,n,i=0){const r=l.max.x-l.min.x,a=l.max.y-l.min.y,q=l.max.z-l.min.z,s=yl.convert(n.format),o=yl.convert(n.type);let c;if(n.isData3DTexture)nl.setTexture3D(n,0),c=El.TEXTURE_3D;else{if(!n.isDataArrayTexture&&!n.isCompressedArrayTexture)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");nl.setTexture2DArray(n,0),c=El.TEXTURE_2D_ARRAY}El.pixelStorei(El.UNPACK_FLIP_Y_WEBGL,n.flipY),El.pixelStorei(El.UNPACK_PREMULTIPLY_ALPHA_WEBGL,n.premultiplyAlpha),El.pixelStorei(El.UNPACK_ALIGNMENT,n.unpackAlignment);const m=El.getParameter(El.UNPACK_ROW_LENGTH),h=El.getParameter(El.UNPACK_IMAGE_HEIGHT),u=El.getParameter(El.UNPACK_SKIP_PIXELS),d=El.getParameter(El.UNPACK_SKIP_ROWS),p=El.getParameter(El.UNPACK_SKIP_IMAGES),f=e.isCompressedTexture?e.mipmaps[i]:e.image;El.pixelStorei(El.UNPACK_ROW_LENGTH,f.width),El.pixelStorei(El.UNPACK_IMAGE_HEIGHT,f.height),El.pixelStorei(El.UNPACK_SKIP_PIXELS,l.min.x),El.pixelStorei(El.UNPACK_SKIP_ROWS,l.min.y),El.pixelStorei(El.UNPACK_SKIP_IMAGES,l.min.z),e.isDataTexture||e.isData3DTexture?El.texSubImage3D(c,i,t.x,t.y,t.z,r,a,q,s,o,f.data):n.isCompressedArrayTexture?El.compressedTexSubImage3D(c,i,t.x,t.y,t.z,r,a,q,s,f.data):El.texSubImage3D(c,i,t.x,t.y,t.z,r,a,q,s,o,f),El.pixelStorei(El.UNPACK_ROW_LENGTH,m),El.pixelStorei(El.UNPACK_IMAGE_HEIGHT,h),El.pixelStorei(El.UNPACK_SKIP_PIXELS,u),El.pixelStorei(El.UNPACK_SKIP_ROWS,d),El.pixelStorei(El.UNPACK_SKIP_IMAGES,p),0===i&&n.generateMipmaps&&El.generateMipmap(c),ll.unbindTexture()},this.initTexture=function(l){l.isCubeTexture?nl.setTextureCube(l,0):l.isData3DTexture?nl.setTexture3D(l,0):l.isDataArrayTexture||l.isCompressedArrayTexture?nl.setTexture2DArray(l,0):nl.setTexture2D(l,0),ll.unbindTexture()},this.resetState=function(){y=0,M=0,S=null,ll.reset(),Ml.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return Cl}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(l){this._outputColorSpace=l;const t=this.getContext();t.drawingBufferColorSpace=l===dl?"display-p3":"srgb",t.unpackColorSpace=lt.workingColorSpace===pl?"display-p3":"srgb"}get useLegacyLights(){return console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."),this._useLegacyLights}set useLegacyLights(l){console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."),this._useLegacyLights=l}}({canvas:document.querySelector("#bg")});Ws.setPixelRatio(window.devicePixelRatio),Ws.setSize(window.innerWidth,window.innerHeight),Gs.position.setX(-3),Gs.position.setZ(30),Ds.colorSpace=hl,Is.wrapS=Is.wrapT=B,Ds.wrapS=Ds.wrapT=B;const Xs={fogDensity:{value:.55},fogColor:{value:new ft(0,0,0)},time:{value:1},uvScale:{value:new kl(3,1)},texture1:{value:Is},texture2:{value:Ds}},js=new Tn({uniforms:Xs,vertexShader:"\nuniform vec2 uvScale;\nvarying vec2 vUv;\n\nvoid main()\n{\n  vUv = uvScale * uv;\n  vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n  gl_Position = projectionMatrix * mvPosition;\n}\n",fragmentShader:"\nuniform float time;\nuniform float fogDensity;\nuniform vec3 fogColor;\nuniform sampler2D texture1;\nuniform sampler2D texture2;\n\nvarying vec2 vUv;\n\nvoid main( void ) {\n\n  vec2 position = - 1.0 + 2.0 * vUv;\n  vec4 noise = texture2D( texture1, vUv );\n  vec2 T1 = vUv + vec2( 1.5, - 1.5 ) * time * 0.02;\n  vec2 T2 = vUv + vec2( - 0.5, 2.0 ) * time * 0.01;\n\n  T1.x += noise.x * 2.0;\n  T1.y += noise.y * 2.0;\n  T2.x -= noise.y * 0.2;\n  T2.y += noise.z * 0.2;\n\n  float p = texture2D( texture1, T1 * 2.0 ).a;\n\n  vec4 color = texture2D( texture2, T2 * 2.0 );\n  vec4 temp = color * ( vec4( p, p, p, p ) * 2.0 ) + ( color * color - 0.1 );\n\n  if( temp.r > 1.0 ) { temp.bg += clamp( temp.r - 2.0, 0.0, 100.0 ); }\n  if( temp.g > 1.0 ) { temp.rb += temp.g - 1.0; }\n  if( temp.b > 1.0 ) { temp.rg += temp.b - 1.0; }\n\n  gl_FragColor = temp;\n\n  float depth = gl_FragCoord.z / gl_FragCoord.w;\n  const float LOG2 = 1.442695;\n  float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\n  fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n\n  gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor * 0.5 ); // Reduce the fog effect\n\n  gl_FragColor.rgb += 0.2 * temp.rgb; // Add glow effect\n}\n"}),Ys=new Mq(10,3,16,100),Js=new _n(Ys,js);Hs.add(Js),[{slabSize:[6,3,1],slabPosition:[-3,0,-3],text:"Brandon Hardatt \nFull Stack Developer \nAI \nData Science \nGame Developer",textPosition:[-5.3,.9,-2]},{slabSize:[6,1,1],slabPosition:[-3,0,2],text:"Solving tough problems \nwith innovative tech",textPosition:[-5.3,.1,3]},{slabSize:[12,5,1],slabPosition:[-3,0,14],text:"Hi Im Brandon Hardatt \nA recent graduate from MUN with a BSc in Computer \nScience my academic and professional journey has been \ndeeply intertwined with developing innovative solutions \nthrough technology I have gained proficiency in various \nAI fields \n\nMy academic pursuits also led me to gain a good \nfoundation in game programming and full stack \ndevelopment",textPosition:[-8,1.7,15]}].forEach((({slabSize:l,slabPosition:t,text:e,textPosition:n})=>{const[i,r,a]=l,[q,s,o]=t,[c,m,h]=n,u=((l,t,e,n)=>{const i=new xn(l,t,e),r=new Sq({map:n});return new _n(i,r)})(i,r,a,Os);u.position.set(q,s,o),Hs.add(u);const d=((l,t,e,n)=>{const i=new Fs(l,{font:Cs,size:.2,depth:.01}),r=new Sq({color:13224393});return new _n(i,r)})(e);d.position.set(c,m,h),Hs.add(d)}));const Zs=document.getElementById("background-audio");Zs.src=zs,Zs.loop=!0,window.addEventListener("load",(()=>{Zs.play().catch((l=>{console.log("Autoplay was prevented:",l)}))}));const Ks=new class extends Hq{constructor(l,t,e=0,n=2){super(l,t),this.isPointLight=!0,this.type="PointLight",this.distance=e,this.decay=n,this.shadow=new Zq}get power(){return 4*this.intensity*Math.PI}set power(l){this.intensity=l/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(l,t){return super.copy(l,t),this.distance=l.distance,this.decay=l.decay,this.shadow=l.shadow.clone(),this}}(16777215);Ks.position.set(5,5,5);const $s=new class extends Hq{constructor(l,t){super(l,t),this.isAmbientLight=!0,this.type="AmbientLight"}}(16777215);Hs.add(Ks,$s),Array(300).fill().forEach((()=>{Math.floor(16777215*Math.random()).toString(16).padStart(6,"0");const l=new yq(.25,24,24),t=new _n(l,js);Hs.add(t);const[e,n,i]=Array(3).fill().map((()=>Hl(100)));t.position.set(e,n,i)}));const Qs=new _n(new Gn(2,2),new ze({map:Ls}));Qs.material.depthTest=!1,Qs.material.depthWrite=!1;const lo=new wa,to=new bn;lo.add(Qs);const eo=((l,t)=>{const e=new Sq(t),n=new _n(l,e);return Hs.add(n),n})(new yq(3,32,32),{map:Us,normalMap:Ns});eo.position.z=30,eo.position.setX(-10);const no=()=>{const l=document.body.getBoundingClientRect().top;eo.rotation.x+=.05,eo.rotation.y+=.075,eo.rotation.z+=.05,Gs.position.z=-.01*l};document.body.onscroll=no,no();const io=()=>{requestAnimationFrame(io),Js.rotation.x+=.01,Js.rotation.y+=.005,Js.rotation.z+=.01;const l=Bs.getDelta();Xs.time.value+=l,Ws.autoClear=!1,Ws.clear(),Ws.render(lo,to),Ws.render(Hs,Gs,lo)};window.addEventListener("resize",(()=>{Gs.aspect=Vs(),Gs.updateProjectionMatrix(),Ws.setSize(window.innerWidth,window.innerHeight),Qs.scale.set(Vs(),1,1)})),io()})()})();